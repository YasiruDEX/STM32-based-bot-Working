
IR_array.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006350  08006350  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08006350  08006350  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006350  08006350  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006354  08006354  00016354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000040  08006398  00020040  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08006398  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c961  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d91  00000000  00000000  0002ca0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  0002e7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a78  00000000  00000000  0002f520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c021  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eacf  00000000  00000000  0004bfb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb873  00000000  00000000  0005aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003274  00000000  00000000  001162fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00119570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000040 	.word	0x20000040
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080062a4 	.word	0x080062a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000044 	.word	0x20000044
 8000100:	080062a4 	.word	0x080062a4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_fadd>:
 800021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021e:	4647      	mov	r7, r8
 8000220:	46ce      	mov	lr, r9
 8000222:	024a      	lsls	r2, r1, #9
 8000224:	0243      	lsls	r3, r0, #9
 8000226:	0045      	lsls	r5, r0, #1
 8000228:	0fc4      	lsrs	r4, r0, #31
 800022a:	0a50      	lsrs	r0, r2, #9
 800022c:	4680      	mov	r8, r0
 800022e:	0048      	lsls	r0, r1, #1
 8000230:	0a5b      	lsrs	r3, r3, #9
 8000232:	0e00      	lsrs	r0, r0, #24
 8000234:	0992      	lsrs	r2, r2, #6
 8000236:	4694      	mov	ip, r2
 8000238:	b580      	push	{r7, lr}
 800023a:	001e      	movs	r6, r3
 800023c:	4681      	mov	r9, r0
 800023e:	0002      	movs	r2, r0
 8000240:	0e2d      	lsrs	r5, r5, #24
 8000242:	00df      	lsls	r7, r3, #3
 8000244:	0fc9      	lsrs	r1, r1, #31
 8000246:	428c      	cmp	r4, r1
 8000248:	d024      	beq.n	8000294 <__aeabi_fadd+0x78>
 800024a:	1a28      	subs	r0, r5, r0
 800024c:	2800      	cmp	r0, #0
 800024e:	dd0e      	ble.n	800026e <__aeabi_fadd+0x52>
 8000250:	2a00      	cmp	r2, #0
 8000252:	d13e      	bne.n	80002d2 <__aeabi_fadd+0xb6>
 8000254:	4662      	mov	r2, ip
 8000256:	2a00      	cmp	r2, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fadd+0x40>
 800025a:	e0fd      	b.n	8000458 <__aeabi_fadd+0x23c>
 800025c:	1e42      	subs	r2, r0, #1
 800025e:	2801      	cmp	r0, #1
 8000260:	d100      	bne.n	8000264 <__aeabi_fadd+0x48>
 8000262:	e137      	b.n	80004d4 <__aeabi_fadd+0x2b8>
 8000264:	28ff      	cmp	r0, #255	; 0xff
 8000266:	d100      	bne.n	800026a <__aeabi_fadd+0x4e>
 8000268:	e0a9      	b.n	80003be <__aeabi_fadd+0x1a2>
 800026a:	0010      	movs	r0, r2
 800026c:	e039      	b.n	80002e2 <__aeabi_fadd+0xc6>
 800026e:	2800      	cmp	r0, #0
 8000270:	d063      	beq.n	800033a <__aeabi_fadd+0x11e>
 8000272:	464b      	mov	r3, r9
 8000274:	1b52      	subs	r2, r2, r5
 8000276:	2d00      	cmp	r5, #0
 8000278:	d000      	beq.n	800027c <__aeabi_fadd+0x60>
 800027a:	e0e0      	b.n	800043e <__aeabi_fadd+0x222>
 800027c:	2f00      	cmp	r7, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_fadd+0x66>
 8000280:	e0ce      	b.n	8000420 <__aeabi_fadd+0x204>
 8000282:	1e53      	subs	r3, r2, #1
 8000284:	2a01      	cmp	r2, #1
 8000286:	d100      	bne.n	800028a <__aeabi_fadd+0x6e>
 8000288:	e155      	b.n	8000536 <__aeabi_fadd+0x31a>
 800028a:	2aff      	cmp	r2, #255	; 0xff
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x74>
 800028e:	e094      	b.n	80003ba <__aeabi_fadd+0x19e>
 8000290:	001a      	movs	r2, r3
 8000292:	e0d9      	b.n	8000448 <__aeabi_fadd+0x22c>
 8000294:	1a2a      	subs	r2, r5, r0
 8000296:	2a00      	cmp	r2, #0
 8000298:	dc00      	bgt.n	800029c <__aeabi_fadd+0x80>
 800029a:	e099      	b.n	80003d0 <__aeabi_fadd+0x1b4>
 800029c:	2800      	cmp	r0, #0
 800029e:	d062      	beq.n	8000366 <__aeabi_fadd+0x14a>
 80002a0:	2dff      	cmp	r5, #255	; 0xff
 80002a2:	d100      	bne.n	80002a6 <__aeabi_fadd+0x8a>
 80002a4:	e08b      	b.n	80003be <__aeabi_fadd+0x1a2>
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	4661      	mov	r1, ip
 80002aa:	04db      	lsls	r3, r3, #19
 80002ac:	4319      	orrs	r1, r3
 80002ae:	468c      	mov	ip, r1
 80002b0:	2a1b      	cmp	r2, #27
 80002b2:	dc00      	bgt.n	80002b6 <__aeabi_fadd+0x9a>
 80002b4:	e0d2      	b.n	800045c <__aeabi_fadd+0x240>
 80002b6:	2301      	movs	r3, #1
 80002b8:	19db      	adds	r3, r3, r7
 80002ba:	015a      	lsls	r2, r3, #5
 80002bc:	d56a      	bpl.n	8000394 <__aeabi_fadd+0x178>
 80002be:	3501      	adds	r5, #1
 80002c0:	2dff      	cmp	r5, #255	; 0xff
 80002c2:	d05b      	beq.n	800037c <__aeabi_fadd+0x160>
 80002c4:	2201      	movs	r2, #1
 80002c6:	49a3      	ldr	r1, [pc, #652]	; (8000554 <__aeabi_fadd+0x338>)
 80002c8:	401a      	ands	r2, r3
 80002ca:	085b      	lsrs	r3, r3, #1
 80002cc:	400b      	ands	r3, r1
 80002ce:	4313      	orrs	r3, r2
 80002d0:	e01c      	b.n	800030c <__aeabi_fadd+0xf0>
 80002d2:	2dff      	cmp	r5, #255	; 0xff
 80002d4:	d100      	bne.n	80002d8 <__aeabi_fadd+0xbc>
 80002d6:	e072      	b.n	80003be <__aeabi_fadd+0x1a2>
 80002d8:	2380      	movs	r3, #128	; 0x80
 80002da:	4662      	mov	r2, ip
 80002dc:	04db      	lsls	r3, r3, #19
 80002de:	431a      	orrs	r2, r3
 80002e0:	4694      	mov	ip, r2
 80002e2:	281b      	cmp	r0, #27
 80002e4:	dc00      	bgt.n	80002e8 <__aeabi_fadd+0xcc>
 80002e6:	e090      	b.n	800040a <__aeabi_fadd+0x1ee>
 80002e8:	2301      	movs	r3, #1
 80002ea:	1afb      	subs	r3, r7, r3
 80002ec:	015a      	lsls	r2, r3, #5
 80002ee:	d551      	bpl.n	8000394 <__aeabi_fadd+0x178>
 80002f0:	019b      	lsls	r3, r3, #6
 80002f2:	099e      	lsrs	r6, r3, #6
 80002f4:	0030      	movs	r0, r6
 80002f6:	f001 fbad 	bl	8001a54 <__clzsi2>
 80002fa:	0033      	movs	r3, r6
 80002fc:	3805      	subs	r0, #5
 80002fe:	4083      	lsls	r3, r0
 8000300:	4285      	cmp	r5, r0
 8000302:	dc00      	bgt.n	8000306 <__aeabi_fadd+0xea>
 8000304:	e075      	b.n	80003f2 <__aeabi_fadd+0x1d6>
 8000306:	4a94      	ldr	r2, [pc, #592]	; (8000558 <__aeabi_fadd+0x33c>)
 8000308:	1a2d      	subs	r5, r5, r0
 800030a:	4013      	ands	r3, r2
 800030c:	075a      	lsls	r2, r3, #29
 800030e:	d004      	beq.n	800031a <__aeabi_fadd+0xfe>
 8000310:	220f      	movs	r2, #15
 8000312:	401a      	ands	r2, r3
 8000314:	2a04      	cmp	r2, #4
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0xfe>
 8000318:	3304      	adds	r3, #4
 800031a:	015a      	lsls	r2, r3, #5
 800031c:	d53c      	bpl.n	8000398 <__aeabi_fadd+0x17c>
 800031e:	1c68      	adds	r0, r5, #1
 8000320:	2dfe      	cmp	r5, #254	; 0xfe
 8000322:	d02b      	beq.n	800037c <__aeabi_fadd+0x160>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	0a5e      	lsrs	r6, r3, #9
 8000328:	b2c0      	uxtb	r0, r0
 800032a:	05c0      	lsls	r0, r0, #23
 800032c:	4330      	orrs	r0, r6
 800032e:	07e4      	lsls	r4, r4, #31
 8000330:	4320      	orrs	r0, r4
 8000332:	bcc0      	pop	{r6, r7}
 8000334:	46b9      	mov	r9, r7
 8000336:	46b0      	mov	r8, r6
 8000338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800033a:	20fe      	movs	r0, #254	; 0xfe
 800033c:	1c6a      	adds	r2, r5, #1
 800033e:	4210      	tst	r0, r2
 8000340:	d172      	bne.n	8000428 <__aeabi_fadd+0x20c>
 8000342:	2d00      	cmp	r5, #0
 8000344:	d000      	beq.n	8000348 <__aeabi_fadd+0x12c>
 8000346:	e0ae      	b.n	80004a6 <__aeabi_fadd+0x28a>
 8000348:	2f00      	cmp	r7, #0
 800034a:	d100      	bne.n	800034e <__aeabi_fadd+0x132>
 800034c:	e0ec      	b.n	8000528 <__aeabi_fadd+0x30c>
 800034e:	4663      	mov	r3, ip
 8000350:	2000      	movs	r0, #0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0e9      	beq.n	800032a <__aeabi_fadd+0x10e>
 8000356:	1afb      	subs	r3, r7, r3
 8000358:	015a      	lsls	r2, r3, #5
 800035a:	d400      	bmi.n	800035e <__aeabi_fadd+0x142>
 800035c:	e0f3      	b.n	8000546 <__aeabi_fadd+0x32a>
 800035e:	4663      	mov	r3, ip
 8000360:	000c      	movs	r4, r1
 8000362:	1bdb      	subs	r3, r3, r7
 8000364:	e7d2      	b.n	800030c <__aeabi_fadd+0xf0>
 8000366:	4661      	mov	r1, ip
 8000368:	2900      	cmp	r1, #0
 800036a:	d05b      	beq.n	8000424 <__aeabi_fadd+0x208>
 800036c:	1e51      	subs	r1, r2, #1
 800036e:	2a01      	cmp	r2, #1
 8000370:	d100      	bne.n	8000374 <__aeabi_fadd+0x158>
 8000372:	e0a7      	b.n	80004c4 <__aeabi_fadd+0x2a8>
 8000374:	2aff      	cmp	r2, #255	; 0xff
 8000376:	d022      	beq.n	80003be <__aeabi_fadd+0x1a2>
 8000378:	000a      	movs	r2, r1
 800037a:	e799      	b.n	80002b0 <__aeabi_fadd+0x94>
 800037c:	20ff      	movs	r0, #255	; 0xff
 800037e:	2600      	movs	r6, #0
 8000380:	e7d3      	b.n	800032a <__aeabi_fadd+0x10e>
 8000382:	21fe      	movs	r1, #254	; 0xfe
 8000384:	1c6a      	adds	r2, r5, #1
 8000386:	4211      	tst	r1, r2
 8000388:	d073      	beq.n	8000472 <__aeabi_fadd+0x256>
 800038a:	2aff      	cmp	r2, #255	; 0xff
 800038c:	d0f6      	beq.n	800037c <__aeabi_fadd+0x160>
 800038e:	0015      	movs	r5, r2
 8000390:	4467      	add	r7, ip
 8000392:	087b      	lsrs	r3, r7, #1
 8000394:	075a      	lsls	r2, r3, #29
 8000396:	d1bb      	bne.n	8000310 <__aeabi_fadd+0xf4>
 8000398:	08db      	lsrs	r3, r3, #3
 800039a:	2dff      	cmp	r5, #255	; 0xff
 800039c:	d00f      	beq.n	80003be <__aeabi_fadd+0x1a2>
 800039e:	025b      	lsls	r3, r3, #9
 80003a0:	0a5e      	lsrs	r6, r3, #9
 80003a2:	b2e8      	uxtb	r0, r5
 80003a4:	e7c1      	b.n	800032a <__aeabi_fadd+0x10e>
 80003a6:	4662      	mov	r2, ip
 80003a8:	2a00      	cmp	r2, #0
 80003aa:	d008      	beq.n	80003be <__aeabi_fadd+0x1a2>
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	03d2      	lsls	r2, r2, #15
 80003b0:	4213      	tst	r3, r2
 80003b2:	d004      	beq.n	80003be <__aeabi_fadd+0x1a2>
 80003b4:	4640      	mov	r0, r8
 80003b6:	4210      	tst	r0, r2
 80003b8:	d101      	bne.n	80003be <__aeabi_fadd+0x1a2>
 80003ba:	000c      	movs	r4, r1
 80003bc:	4643      	mov	r3, r8
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0dc      	beq.n	800037c <__aeabi_fadd+0x160>
 80003c2:	2680      	movs	r6, #128	; 0x80
 80003c4:	03f6      	lsls	r6, r6, #15
 80003c6:	431e      	orrs	r6, r3
 80003c8:	0276      	lsls	r6, r6, #9
 80003ca:	20ff      	movs	r0, #255	; 0xff
 80003cc:	0a76      	lsrs	r6, r6, #9
 80003ce:	e7ac      	b.n	800032a <__aeabi_fadd+0x10e>
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	d0d6      	beq.n	8000382 <__aeabi_fadd+0x166>
 80003d4:	1b42      	subs	r2, r0, r5
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d05c      	beq.n	8000494 <__aeabi_fadd+0x278>
 80003da:	28ff      	cmp	r0, #255	; 0xff
 80003dc:	d0ee      	beq.n	80003bc <__aeabi_fadd+0x1a0>
 80003de:	2380      	movs	r3, #128	; 0x80
 80003e0:	04db      	lsls	r3, r3, #19
 80003e2:	431f      	orrs	r7, r3
 80003e4:	2a1b      	cmp	r2, #27
 80003e6:	dc00      	bgt.n	80003ea <__aeabi_fadd+0x1ce>
 80003e8:	e082      	b.n	80004f0 <__aeabi_fadd+0x2d4>
 80003ea:	2301      	movs	r3, #1
 80003ec:	464d      	mov	r5, r9
 80003ee:	4463      	add	r3, ip
 80003f0:	e763      	b.n	80002ba <__aeabi_fadd+0x9e>
 80003f2:	2220      	movs	r2, #32
 80003f4:	1b40      	subs	r0, r0, r5
 80003f6:	3001      	adds	r0, #1
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	0019      	movs	r1, r3
 80003fc:	4093      	lsls	r3, r2
 80003fe:	40c1      	lsrs	r1, r0
 8000400:	1e5a      	subs	r2, r3, #1
 8000402:	4193      	sbcs	r3, r2
 8000404:	2500      	movs	r5, #0
 8000406:	430b      	orrs	r3, r1
 8000408:	e780      	b.n	800030c <__aeabi_fadd+0xf0>
 800040a:	2320      	movs	r3, #32
 800040c:	4661      	mov	r1, ip
 800040e:	1a1b      	subs	r3, r3, r0
 8000410:	4099      	lsls	r1, r3
 8000412:	4662      	mov	r2, ip
 8000414:	000b      	movs	r3, r1
 8000416:	40c2      	lsrs	r2, r0
 8000418:	1e59      	subs	r1, r3, #1
 800041a:	418b      	sbcs	r3, r1
 800041c:	4313      	orrs	r3, r2
 800041e:	e764      	b.n	80002ea <__aeabi_fadd+0xce>
 8000420:	000c      	movs	r4, r1
 8000422:	4643      	mov	r3, r8
 8000424:	0015      	movs	r5, r2
 8000426:	e7b8      	b.n	800039a <__aeabi_fadd+0x17e>
 8000428:	4663      	mov	r3, ip
 800042a:	1afe      	subs	r6, r7, r3
 800042c:	0173      	lsls	r3, r6, #5
 800042e:	d445      	bmi.n	80004bc <__aeabi_fadd+0x2a0>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d000      	beq.n	8000436 <__aeabi_fadd+0x21a>
 8000434:	e75e      	b.n	80002f4 <__aeabi_fadd+0xd8>
 8000436:	2400      	movs	r4, #0
 8000438:	2000      	movs	r0, #0
 800043a:	2600      	movs	r6, #0
 800043c:	e775      	b.n	800032a <__aeabi_fadd+0x10e>
 800043e:	2bff      	cmp	r3, #255	; 0xff
 8000440:	d0bb      	beq.n	80003ba <__aeabi_fadd+0x19e>
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	04db      	lsls	r3, r3, #19
 8000446:	431f      	orrs	r7, r3
 8000448:	2a1b      	cmp	r2, #27
 800044a:	dd47      	ble.n	80004dc <__aeabi_fadd+0x2c0>
 800044c:	2301      	movs	r3, #1
 800044e:	4662      	mov	r2, ip
 8000450:	000c      	movs	r4, r1
 8000452:	464d      	mov	r5, r9
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	e749      	b.n	80002ec <__aeabi_fadd+0xd0>
 8000458:	0005      	movs	r5, r0
 800045a:	e79e      	b.n	800039a <__aeabi_fadd+0x17e>
 800045c:	4661      	mov	r1, ip
 800045e:	2320      	movs	r3, #32
 8000460:	40d1      	lsrs	r1, r2
 8000462:	1a9b      	subs	r3, r3, r2
 8000464:	4662      	mov	r2, ip
 8000466:	409a      	lsls	r2, r3
 8000468:	0013      	movs	r3, r2
 800046a:	1e5a      	subs	r2, r3, #1
 800046c:	4193      	sbcs	r3, r2
 800046e:	430b      	orrs	r3, r1
 8000470:	e722      	b.n	80002b8 <__aeabi_fadd+0x9c>
 8000472:	2d00      	cmp	r5, #0
 8000474:	d146      	bne.n	8000504 <__aeabi_fadd+0x2e8>
 8000476:	2f00      	cmp	r7, #0
 8000478:	d062      	beq.n	8000540 <__aeabi_fadd+0x324>
 800047a:	4663      	mov	r3, ip
 800047c:	2000      	movs	r0, #0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d100      	bne.n	8000484 <__aeabi_fadd+0x268>
 8000482:	e752      	b.n	800032a <__aeabi_fadd+0x10e>
 8000484:	003b      	movs	r3, r7
 8000486:	4463      	add	r3, ip
 8000488:	015a      	lsls	r2, r3, #5
 800048a:	d583      	bpl.n	8000394 <__aeabi_fadd+0x178>
 800048c:	4a32      	ldr	r2, [pc, #200]	; (8000558 <__aeabi_fadd+0x33c>)
 800048e:	3501      	adds	r5, #1
 8000490:	4013      	ands	r3, r2
 8000492:	e77f      	b.n	8000394 <__aeabi_fadd+0x178>
 8000494:	2f00      	cmp	r7, #0
 8000496:	d0c4      	beq.n	8000422 <__aeabi_fadd+0x206>
 8000498:	1e53      	subs	r3, r2, #1
 800049a:	2a01      	cmp	r2, #1
 800049c:	d012      	beq.n	80004c4 <__aeabi_fadd+0x2a8>
 800049e:	2aff      	cmp	r2, #255	; 0xff
 80004a0:	d08c      	beq.n	80003bc <__aeabi_fadd+0x1a0>
 80004a2:	001a      	movs	r2, r3
 80004a4:	e79e      	b.n	80003e4 <__aeabi_fadd+0x1c8>
 80004a6:	2f00      	cmp	r7, #0
 80004a8:	d000      	beq.n	80004ac <__aeabi_fadd+0x290>
 80004aa:	e77c      	b.n	80003a6 <__aeabi_fadd+0x18a>
 80004ac:	4663      	mov	r3, ip
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d183      	bne.n	80003ba <__aeabi_fadd+0x19e>
 80004b2:	2680      	movs	r6, #128	; 0x80
 80004b4:	2400      	movs	r4, #0
 80004b6:	20ff      	movs	r0, #255	; 0xff
 80004b8:	03f6      	lsls	r6, r6, #15
 80004ba:	e736      	b.n	800032a <__aeabi_fadd+0x10e>
 80004bc:	4663      	mov	r3, ip
 80004be:	000c      	movs	r4, r1
 80004c0:	1bde      	subs	r6, r3, r7
 80004c2:	e717      	b.n	80002f4 <__aeabi_fadd+0xd8>
 80004c4:	003b      	movs	r3, r7
 80004c6:	4463      	add	r3, ip
 80004c8:	2501      	movs	r5, #1
 80004ca:	015a      	lsls	r2, r3, #5
 80004cc:	d400      	bmi.n	80004d0 <__aeabi_fadd+0x2b4>
 80004ce:	e761      	b.n	8000394 <__aeabi_fadd+0x178>
 80004d0:	2502      	movs	r5, #2
 80004d2:	e6f7      	b.n	80002c4 <__aeabi_fadd+0xa8>
 80004d4:	4663      	mov	r3, ip
 80004d6:	2501      	movs	r5, #1
 80004d8:	1afb      	subs	r3, r7, r3
 80004da:	e707      	b.n	80002ec <__aeabi_fadd+0xd0>
 80004dc:	2320      	movs	r3, #32
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	0038      	movs	r0, r7
 80004e2:	409f      	lsls	r7, r3
 80004e4:	003b      	movs	r3, r7
 80004e6:	40d0      	lsrs	r0, r2
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	4193      	sbcs	r3, r2
 80004ec:	4303      	orrs	r3, r0
 80004ee:	e7ae      	b.n	800044e <__aeabi_fadd+0x232>
 80004f0:	2320      	movs	r3, #32
 80004f2:	1a9b      	subs	r3, r3, r2
 80004f4:	0039      	movs	r1, r7
 80004f6:	409f      	lsls	r7, r3
 80004f8:	003b      	movs	r3, r7
 80004fa:	40d1      	lsrs	r1, r2
 80004fc:	1e5a      	subs	r2, r3, #1
 80004fe:	4193      	sbcs	r3, r2
 8000500:	430b      	orrs	r3, r1
 8000502:	e773      	b.n	80003ec <__aeabi_fadd+0x1d0>
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x2ee>
 8000508:	e758      	b.n	80003bc <__aeabi_fadd+0x1a0>
 800050a:	4662      	mov	r2, ip
 800050c:	2a00      	cmp	r2, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_fadd+0x2f6>
 8000510:	e755      	b.n	80003be <__aeabi_fadd+0x1a2>
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	03d2      	lsls	r2, r2, #15
 8000516:	4213      	tst	r3, r2
 8000518:	d100      	bne.n	800051c <__aeabi_fadd+0x300>
 800051a:	e750      	b.n	80003be <__aeabi_fadd+0x1a2>
 800051c:	4641      	mov	r1, r8
 800051e:	4211      	tst	r1, r2
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x308>
 8000522:	e74c      	b.n	80003be <__aeabi_fadd+0x1a2>
 8000524:	4643      	mov	r3, r8
 8000526:	e74a      	b.n	80003be <__aeabi_fadd+0x1a2>
 8000528:	4663      	mov	r3, ip
 800052a:	2b00      	cmp	r3, #0
 800052c:	d083      	beq.n	8000436 <__aeabi_fadd+0x21a>
 800052e:	000c      	movs	r4, r1
 8000530:	4646      	mov	r6, r8
 8000532:	2000      	movs	r0, #0
 8000534:	e6f9      	b.n	800032a <__aeabi_fadd+0x10e>
 8000536:	4663      	mov	r3, ip
 8000538:	000c      	movs	r4, r1
 800053a:	1bdb      	subs	r3, r3, r7
 800053c:	3501      	adds	r5, #1
 800053e:	e6d5      	b.n	80002ec <__aeabi_fadd+0xd0>
 8000540:	4646      	mov	r6, r8
 8000542:	2000      	movs	r0, #0
 8000544:	e6f1      	b.n	800032a <__aeabi_fadd+0x10e>
 8000546:	2b00      	cmp	r3, #0
 8000548:	d000      	beq.n	800054c <__aeabi_fadd+0x330>
 800054a:	e723      	b.n	8000394 <__aeabi_fadd+0x178>
 800054c:	2400      	movs	r4, #0
 800054e:	2600      	movs	r6, #0
 8000550:	e6eb      	b.n	800032a <__aeabi_fadd+0x10e>
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	7dffffff 	.word	0x7dffffff
 8000558:	fbffffff 	.word	0xfbffffff

0800055c <__aeabi_f2iz>:
 800055c:	0241      	lsls	r1, r0, #9
 800055e:	0042      	lsls	r2, r0, #1
 8000560:	0fc3      	lsrs	r3, r0, #31
 8000562:	0a49      	lsrs	r1, r1, #9
 8000564:	2000      	movs	r0, #0
 8000566:	0e12      	lsrs	r2, r2, #24
 8000568:	2a7e      	cmp	r2, #126	; 0x7e
 800056a:	dd03      	ble.n	8000574 <__aeabi_f2iz+0x18>
 800056c:	2a9d      	cmp	r2, #157	; 0x9d
 800056e:	dd02      	ble.n	8000576 <__aeabi_f2iz+0x1a>
 8000570:	4a09      	ldr	r2, [pc, #36]	; (8000598 <__aeabi_f2iz+0x3c>)
 8000572:	1898      	adds	r0, r3, r2
 8000574:	4770      	bx	lr
 8000576:	2080      	movs	r0, #128	; 0x80
 8000578:	0400      	lsls	r0, r0, #16
 800057a:	4301      	orrs	r1, r0
 800057c:	2a95      	cmp	r2, #149	; 0x95
 800057e:	dc07      	bgt.n	8000590 <__aeabi_f2iz+0x34>
 8000580:	2096      	movs	r0, #150	; 0x96
 8000582:	1a82      	subs	r2, r0, r2
 8000584:	40d1      	lsrs	r1, r2
 8000586:	4248      	negs	r0, r1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f3      	bne.n	8000574 <__aeabi_f2iz+0x18>
 800058c:	0008      	movs	r0, r1
 800058e:	e7f1      	b.n	8000574 <__aeabi_f2iz+0x18>
 8000590:	3a96      	subs	r2, #150	; 0x96
 8000592:	4091      	lsls	r1, r2
 8000594:	e7f7      	b.n	8000586 <__aeabi_f2iz+0x2a>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	7fffffff 	.word	0x7fffffff

0800059c <__aeabi_i2f>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	2800      	cmp	r0, #0
 80005a0:	d013      	beq.n	80005ca <__aeabi_i2f+0x2e>
 80005a2:	17c3      	asrs	r3, r0, #31
 80005a4:	18c5      	adds	r5, r0, r3
 80005a6:	405d      	eors	r5, r3
 80005a8:	0fc4      	lsrs	r4, r0, #31
 80005aa:	0028      	movs	r0, r5
 80005ac:	f001 fa52 	bl	8001a54 <__clzsi2>
 80005b0:	239e      	movs	r3, #158	; 0x9e
 80005b2:	0001      	movs	r1, r0
 80005b4:	1a1b      	subs	r3, r3, r0
 80005b6:	2b96      	cmp	r3, #150	; 0x96
 80005b8:	dc0f      	bgt.n	80005da <__aeabi_i2f+0x3e>
 80005ba:	2808      	cmp	r0, #8
 80005bc:	d031      	beq.n	8000622 <__aeabi_i2f+0x86>
 80005be:	3908      	subs	r1, #8
 80005c0:	408d      	lsls	r5, r1
 80005c2:	026d      	lsls	r5, r5, #9
 80005c4:	0a6d      	lsrs	r5, r5, #9
 80005c6:	b2d8      	uxtb	r0, r3
 80005c8:	e002      	b.n	80005d0 <__aeabi_i2f+0x34>
 80005ca:	2400      	movs	r4, #0
 80005cc:	2000      	movs	r0, #0
 80005ce:	2500      	movs	r5, #0
 80005d0:	05c0      	lsls	r0, r0, #23
 80005d2:	4328      	orrs	r0, r5
 80005d4:	07e4      	lsls	r4, r4, #31
 80005d6:	4320      	orrs	r0, r4
 80005d8:	bd70      	pop	{r4, r5, r6, pc}
 80005da:	2b99      	cmp	r3, #153	; 0x99
 80005dc:	dd0c      	ble.n	80005f8 <__aeabi_i2f+0x5c>
 80005de:	2205      	movs	r2, #5
 80005e0:	1a12      	subs	r2, r2, r0
 80005e2:	0028      	movs	r0, r5
 80005e4:	40d0      	lsrs	r0, r2
 80005e6:	0002      	movs	r2, r0
 80005e8:	0008      	movs	r0, r1
 80005ea:	301b      	adds	r0, #27
 80005ec:	4085      	lsls	r5, r0
 80005ee:	0028      	movs	r0, r5
 80005f0:	1e45      	subs	r5, r0, #1
 80005f2:	41a8      	sbcs	r0, r5
 80005f4:	4302      	orrs	r2, r0
 80005f6:	0015      	movs	r5, r2
 80005f8:	2905      	cmp	r1, #5
 80005fa:	dc16      	bgt.n	800062a <__aeabi_i2f+0x8e>
 80005fc:	002a      	movs	r2, r5
 80005fe:	480f      	ldr	r0, [pc, #60]	; (800063c <__aeabi_i2f+0xa0>)
 8000600:	4002      	ands	r2, r0
 8000602:	076e      	lsls	r6, r5, #29
 8000604:	d009      	beq.n	800061a <__aeabi_i2f+0x7e>
 8000606:	260f      	movs	r6, #15
 8000608:	4035      	ands	r5, r6
 800060a:	2d04      	cmp	r5, #4
 800060c:	d005      	beq.n	800061a <__aeabi_i2f+0x7e>
 800060e:	3204      	adds	r2, #4
 8000610:	0155      	lsls	r5, r2, #5
 8000612:	d502      	bpl.n	800061a <__aeabi_i2f+0x7e>
 8000614:	239f      	movs	r3, #159	; 0x9f
 8000616:	4002      	ands	r2, r0
 8000618:	1a5b      	subs	r3, r3, r1
 800061a:	0192      	lsls	r2, r2, #6
 800061c:	0a55      	lsrs	r5, r2, #9
 800061e:	b2d8      	uxtb	r0, r3
 8000620:	e7d6      	b.n	80005d0 <__aeabi_i2f+0x34>
 8000622:	026d      	lsls	r5, r5, #9
 8000624:	2096      	movs	r0, #150	; 0x96
 8000626:	0a6d      	lsrs	r5, r5, #9
 8000628:	e7d2      	b.n	80005d0 <__aeabi_i2f+0x34>
 800062a:	1f4a      	subs	r2, r1, #5
 800062c:	4095      	lsls	r5, r2
 800062e:	002a      	movs	r2, r5
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <__aeabi_i2f+0xa0>)
 8000632:	4002      	ands	r2, r0
 8000634:	076e      	lsls	r6, r5, #29
 8000636:	d0f0      	beq.n	800061a <__aeabi_i2f+0x7e>
 8000638:	e7e5      	b.n	8000606 <__aeabi_i2f+0x6a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	fbffffff 	.word	0xfbffffff

08000640 <__aeabi_dadd>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	464f      	mov	r7, r9
 8000644:	4646      	mov	r6, r8
 8000646:	46d6      	mov	lr, sl
 8000648:	0004      	movs	r4, r0
 800064a:	b5c0      	push	{r6, r7, lr}
 800064c:	001f      	movs	r7, r3
 800064e:	030b      	lsls	r3, r1, #12
 8000650:	0010      	movs	r0, r2
 8000652:	004e      	lsls	r6, r1, #1
 8000654:	0a5b      	lsrs	r3, r3, #9
 8000656:	0fcd      	lsrs	r5, r1, #31
 8000658:	0f61      	lsrs	r1, r4, #29
 800065a:	007a      	lsls	r2, r7, #1
 800065c:	4319      	orrs	r1, r3
 800065e:	00e3      	lsls	r3, r4, #3
 8000660:	033c      	lsls	r4, r7, #12
 8000662:	0fff      	lsrs	r7, r7, #31
 8000664:	46bc      	mov	ip, r7
 8000666:	0a64      	lsrs	r4, r4, #9
 8000668:	0f47      	lsrs	r7, r0, #29
 800066a:	4327      	orrs	r7, r4
 800066c:	0d76      	lsrs	r6, r6, #21
 800066e:	0d52      	lsrs	r2, r2, #21
 8000670:	00c0      	lsls	r0, r0, #3
 8000672:	46b9      	mov	r9, r7
 8000674:	4680      	mov	r8, r0
 8000676:	1ab7      	subs	r7, r6, r2
 8000678:	4565      	cmp	r5, ip
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0x3e>
 800067c:	e09b      	b.n	80007b6 <__aeabi_dadd+0x176>
 800067e:	2f00      	cmp	r7, #0
 8000680:	dc00      	bgt.n	8000684 <__aeabi_dadd+0x44>
 8000682:	e084      	b.n	800078e <__aeabi_dadd+0x14e>
 8000684:	2a00      	cmp	r2, #0
 8000686:	d100      	bne.n	800068a <__aeabi_dadd+0x4a>
 8000688:	e0be      	b.n	8000808 <__aeabi_dadd+0x1c8>
 800068a:	4ac8      	ldr	r2, [pc, #800]	; (80009ac <__aeabi_dadd+0x36c>)
 800068c:	4296      	cmp	r6, r2
 800068e:	d100      	bne.n	8000692 <__aeabi_dadd+0x52>
 8000690:	e124      	b.n	80008dc <__aeabi_dadd+0x29c>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	464c      	mov	r4, r9
 8000696:	0412      	lsls	r2, r2, #16
 8000698:	4314      	orrs	r4, r2
 800069a:	46a1      	mov	r9, r4
 800069c:	2f38      	cmp	r7, #56	; 0x38
 800069e:	dd00      	ble.n	80006a2 <__aeabi_dadd+0x62>
 80006a0:	e167      	b.n	8000972 <__aeabi_dadd+0x332>
 80006a2:	2f1f      	cmp	r7, #31
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_dadd+0x68>
 80006a6:	e1d6      	b.n	8000a56 <__aeabi_dadd+0x416>
 80006a8:	2220      	movs	r2, #32
 80006aa:	464c      	mov	r4, r9
 80006ac:	1bd2      	subs	r2, r2, r7
 80006ae:	4094      	lsls	r4, r2
 80006b0:	46a2      	mov	sl, r4
 80006b2:	4644      	mov	r4, r8
 80006b4:	40fc      	lsrs	r4, r7
 80006b6:	0020      	movs	r0, r4
 80006b8:	4654      	mov	r4, sl
 80006ba:	4304      	orrs	r4, r0
 80006bc:	4640      	mov	r0, r8
 80006be:	4090      	lsls	r0, r2
 80006c0:	1e42      	subs	r2, r0, #1
 80006c2:	4190      	sbcs	r0, r2
 80006c4:	464a      	mov	r2, r9
 80006c6:	40fa      	lsrs	r2, r7
 80006c8:	4304      	orrs	r4, r0
 80006ca:	1a89      	subs	r1, r1, r2
 80006cc:	1b1c      	subs	r4, r3, r4
 80006ce:	42a3      	cmp	r3, r4
 80006d0:	4192      	sbcs	r2, r2
 80006d2:	4252      	negs	r2, r2
 80006d4:	1a8b      	subs	r3, r1, r2
 80006d6:	469a      	mov	sl, r3
 80006d8:	4653      	mov	r3, sl
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	d400      	bmi.n	80006e0 <__aeabi_dadd+0xa0>
 80006de:	e0d4      	b.n	800088a <__aeabi_dadd+0x24a>
 80006e0:	4653      	mov	r3, sl
 80006e2:	025a      	lsls	r2, r3, #9
 80006e4:	0a53      	lsrs	r3, r2, #9
 80006e6:	469a      	mov	sl, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d100      	bne.n	80006f0 <__aeabi_dadd+0xb0>
 80006ee:	e104      	b.n	80008fa <__aeabi_dadd+0x2ba>
 80006f0:	4650      	mov	r0, sl
 80006f2:	f001 f9af 	bl	8001a54 <__clzsi2>
 80006f6:	0003      	movs	r3, r0
 80006f8:	3b08      	subs	r3, #8
 80006fa:	2220      	movs	r2, #32
 80006fc:	0020      	movs	r0, r4
 80006fe:	1ad2      	subs	r2, r2, r3
 8000700:	4651      	mov	r1, sl
 8000702:	40d0      	lsrs	r0, r2
 8000704:	4099      	lsls	r1, r3
 8000706:	0002      	movs	r2, r0
 8000708:	409c      	lsls	r4, r3
 800070a:	430a      	orrs	r2, r1
 800070c:	42b3      	cmp	r3, r6
 800070e:	da00      	bge.n	8000712 <__aeabi_dadd+0xd2>
 8000710:	e102      	b.n	8000918 <__aeabi_dadd+0x2d8>
 8000712:	1b9b      	subs	r3, r3, r6
 8000714:	1c59      	adds	r1, r3, #1
 8000716:	291f      	cmp	r1, #31
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0xdc>
 800071a:	e0a7      	b.n	800086c <__aeabi_dadd+0x22c>
 800071c:	2320      	movs	r3, #32
 800071e:	0010      	movs	r0, r2
 8000720:	0026      	movs	r6, r4
 8000722:	1a5b      	subs	r3, r3, r1
 8000724:	409c      	lsls	r4, r3
 8000726:	4098      	lsls	r0, r3
 8000728:	40ce      	lsrs	r6, r1
 800072a:	40ca      	lsrs	r2, r1
 800072c:	1e63      	subs	r3, r4, #1
 800072e:	419c      	sbcs	r4, r3
 8000730:	4330      	orrs	r0, r6
 8000732:	4692      	mov	sl, r2
 8000734:	2600      	movs	r6, #0
 8000736:	4304      	orrs	r4, r0
 8000738:	0763      	lsls	r3, r4, #29
 800073a:	d009      	beq.n	8000750 <__aeabi_dadd+0x110>
 800073c:	230f      	movs	r3, #15
 800073e:	4023      	ands	r3, r4
 8000740:	2b04      	cmp	r3, #4
 8000742:	d005      	beq.n	8000750 <__aeabi_dadd+0x110>
 8000744:	1d23      	adds	r3, r4, #4
 8000746:	42a3      	cmp	r3, r4
 8000748:	41a4      	sbcs	r4, r4
 800074a:	4264      	negs	r4, r4
 800074c:	44a2      	add	sl, r4
 800074e:	001c      	movs	r4, r3
 8000750:	4653      	mov	r3, sl
 8000752:	021b      	lsls	r3, r3, #8
 8000754:	d400      	bmi.n	8000758 <__aeabi_dadd+0x118>
 8000756:	e09b      	b.n	8000890 <__aeabi_dadd+0x250>
 8000758:	4b94      	ldr	r3, [pc, #592]	; (80009ac <__aeabi_dadd+0x36c>)
 800075a:	3601      	adds	r6, #1
 800075c:	429e      	cmp	r6, r3
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x122>
 8000760:	e0b8      	b.n	80008d4 <__aeabi_dadd+0x294>
 8000762:	4653      	mov	r3, sl
 8000764:	4992      	ldr	r1, [pc, #584]	; (80009b0 <__aeabi_dadd+0x370>)
 8000766:	08e4      	lsrs	r4, r4, #3
 8000768:	400b      	ands	r3, r1
 800076a:	0019      	movs	r1, r3
 800076c:	075b      	lsls	r3, r3, #29
 800076e:	4323      	orrs	r3, r4
 8000770:	0572      	lsls	r2, r6, #21
 8000772:	024c      	lsls	r4, r1, #9
 8000774:	0b24      	lsrs	r4, r4, #12
 8000776:	0d52      	lsrs	r2, r2, #21
 8000778:	0512      	lsls	r2, r2, #20
 800077a:	07ed      	lsls	r5, r5, #31
 800077c:	4322      	orrs	r2, r4
 800077e:	432a      	orrs	r2, r5
 8000780:	0018      	movs	r0, r3
 8000782:	0011      	movs	r1, r2
 8000784:	bce0      	pop	{r5, r6, r7}
 8000786:	46ba      	mov	sl, r7
 8000788:	46b1      	mov	r9, r6
 800078a:	46a8      	mov	r8, r5
 800078c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800078e:	2f00      	cmp	r7, #0
 8000790:	d048      	beq.n	8000824 <__aeabi_dadd+0x1e4>
 8000792:	1b97      	subs	r7, r2, r6
 8000794:	2e00      	cmp	r6, #0
 8000796:	d000      	beq.n	800079a <__aeabi_dadd+0x15a>
 8000798:	e10e      	b.n	80009b8 <__aeabi_dadd+0x378>
 800079a:	000c      	movs	r4, r1
 800079c:	431c      	orrs	r4, r3
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x162>
 80007a0:	e1b7      	b.n	8000b12 <__aeabi_dadd+0x4d2>
 80007a2:	1e7c      	subs	r4, r7, #1
 80007a4:	2f01      	cmp	r7, #1
 80007a6:	d100      	bne.n	80007aa <__aeabi_dadd+0x16a>
 80007a8:	e226      	b.n	8000bf8 <__aeabi_dadd+0x5b8>
 80007aa:	4d80      	ldr	r5, [pc, #512]	; (80009ac <__aeabi_dadd+0x36c>)
 80007ac:	42af      	cmp	r7, r5
 80007ae:	d100      	bne.n	80007b2 <__aeabi_dadd+0x172>
 80007b0:	e1d5      	b.n	8000b5e <__aeabi_dadd+0x51e>
 80007b2:	0027      	movs	r7, r4
 80007b4:	e107      	b.n	80009c6 <__aeabi_dadd+0x386>
 80007b6:	2f00      	cmp	r7, #0
 80007b8:	dc00      	bgt.n	80007bc <__aeabi_dadd+0x17c>
 80007ba:	e0b2      	b.n	8000922 <__aeabi_dadd+0x2e2>
 80007bc:	2a00      	cmp	r2, #0
 80007be:	d047      	beq.n	8000850 <__aeabi_dadd+0x210>
 80007c0:	4a7a      	ldr	r2, [pc, #488]	; (80009ac <__aeabi_dadd+0x36c>)
 80007c2:	4296      	cmp	r6, r2
 80007c4:	d100      	bne.n	80007c8 <__aeabi_dadd+0x188>
 80007c6:	e089      	b.n	80008dc <__aeabi_dadd+0x29c>
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	464c      	mov	r4, r9
 80007cc:	0412      	lsls	r2, r2, #16
 80007ce:	4314      	orrs	r4, r2
 80007d0:	46a1      	mov	r9, r4
 80007d2:	2f38      	cmp	r7, #56	; 0x38
 80007d4:	dc6b      	bgt.n	80008ae <__aeabi_dadd+0x26e>
 80007d6:	2f1f      	cmp	r7, #31
 80007d8:	dc00      	bgt.n	80007dc <__aeabi_dadd+0x19c>
 80007da:	e16e      	b.n	8000aba <__aeabi_dadd+0x47a>
 80007dc:	003a      	movs	r2, r7
 80007de:	4648      	mov	r0, r9
 80007e0:	3a20      	subs	r2, #32
 80007e2:	40d0      	lsrs	r0, r2
 80007e4:	4684      	mov	ip, r0
 80007e6:	2f20      	cmp	r7, #32
 80007e8:	d007      	beq.n	80007fa <__aeabi_dadd+0x1ba>
 80007ea:	2240      	movs	r2, #64	; 0x40
 80007ec:	4648      	mov	r0, r9
 80007ee:	1bd2      	subs	r2, r2, r7
 80007f0:	4090      	lsls	r0, r2
 80007f2:	0002      	movs	r2, r0
 80007f4:	4640      	mov	r0, r8
 80007f6:	4310      	orrs	r0, r2
 80007f8:	4680      	mov	r8, r0
 80007fa:	4640      	mov	r0, r8
 80007fc:	1e42      	subs	r2, r0, #1
 80007fe:	4190      	sbcs	r0, r2
 8000800:	4662      	mov	r2, ip
 8000802:	0004      	movs	r4, r0
 8000804:	4314      	orrs	r4, r2
 8000806:	e057      	b.n	80008b8 <__aeabi_dadd+0x278>
 8000808:	464a      	mov	r2, r9
 800080a:	4302      	orrs	r2, r0
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x1d0>
 800080e:	e103      	b.n	8000a18 <__aeabi_dadd+0x3d8>
 8000810:	1e7a      	subs	r2, r7, #1
 8000812:	2f01      	cmp	r7, #1
 8000814:	d100      	bne.n	8000818 <__aeabi_dadd+0x1d8>
 8000816:	e193      	b.n	8000b40 <__aeabi_dadd+0x500>
 8000818:	4c64      	ldr	r4, [pc, #400]	; (80009ac <__aeabi_dadd+0x36c>)
 800081a:	42a7      	cmp	r7, r4
 800081c:	d100      	bne.n	8000820 <__aeabi_dadd+0x1e0>
 800081e:	e18a      	b.n	8000b36 <__aeabi_dadd+0x4f6>
 8000820:	0017      	movs	r7, r2
 8000822:	e73b      	b.n	800069c <__aeabi_dadd+0x5c>
 8000824:	4c63      	ldr	r4, [pc, #396]	; (80009b4 <__aeabi_dadd+0x374>)
 8000826:	1c72      	adds	r2, r6, #1
 8000828:	4222      	tst	r2, r4
 800082a:	d000      	beq.n	800082e <__aeabi_dadd+0x1ee>
 800082c:	e0e0      	b.n	80009f0 <__aeabi_dadd+0x3b0>
 800082e:	000a      	movs	r2, r1
 8000830:	431a      	orrs	r2, r3
 8000832:	2e00      	cmp	r6, #0
 8000834:	d000      	beq.n	8000838 <__aeabi_dadd+0x1f8>
 8000836:	e174      	b.n	8000b22 <__aeabi_dadd+0x4e2>
 8000838:	2a00      	cmp	r2, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x1fe>
 800083c:	e1d0      	b.n	8000be0 <__aeabi_dadd+0x5a0>
 800083e:	464a      	mov	r2, r9
 8000840:	4302      	orrs	r2, r0
 8000842:	d000      	beq.n	8000846 <__aeabi_dadd+0x206>
 8000844:	e1e3      	b.n	8000c0e <__aeabi_dadd+0x5ce>
 8000846:	074a      	lsls	r2, r1, #29
 8000848:	08db      	lsrs	r3, r3, #3
 800084a:	4313      	orrs	r3, r2
 800084c:	08c9      	lsrs	r1, r1, #3
 800084e:	e029      	b.n	80008a4 <__aeabi_dadd+0x264>
 8000850:	464a      	mov	r2, r9
 8000852:	4302      	orrs	r2, r0
 8000854:	d100      	bne.n	8000858 <__aeabi_dadd+0x218>
 8000856:	e17d      	b.n	8000b54 <__aeabi_dadd+0x514>
 8000858:	1e7a      	subs	r2, r7, #1
 800085a:	2f01      	cmp	r7, #1
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x220>
 800085e:	e0e0      	b.n	8000a22 <__aeabi_dadd+0x3e2>
 8000860:	4c52      	ldr	r4, [pc, #328]	; (80009ac <__aeabi_dadd+0x36c>)
 8000862:	42a7      	cmp	r7, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x228>
 8000866:	e166      	b.n	8000b36 <__aeabi_dadd+0x4f6>
 8000868:	0017      	movs	r7, r2
 800086a:	e7b2      	b.n	80007d2 <__aeabi_dadd+0x192>
 800086c:	0010      	movs	r0, r2
 800086e:	3b1f      	subs	r3, #31
 8000870:	40d8      	lsrs	r0, r3
 8000872:	2920      	cmp	r1, #32
 8000874:	d003      	beq.n	800087e <__aeabi_dadd+0x23e>
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	1a5b      	subs	r3, r3, r1
 800087a:	409a      	lsls	r2, r3
 800087c:	4314      	orrs	r4, r2
 800087e:	1e63      	subs	r3, r4, #1
 8000880:	419c      	sbcs	r4, r3
 8000882:	2300      	movs	r3, #0
 8000884:	2600      	movs	r6, #0
 8000886:	469a      	mov	sl, r3
 8000888:	4304      	orrs	r4, r0
 800088a:	0763      	lsls	r3, r4, #29
 800088c:	d000      	beq.n	8000890 <__aeabi_dadd+0x250>
 800088e:	e755      	b.n	800073c <__aeabi_dadd+0xfc>
 8000890:	4652      	mov	r2, sl
 8000892:	08e3      	lsrs	r3, r4, #3
 8000894:	0752      	lsls	r2, r2, #29
 8000896:	4313      	orrs	r3, r2
 8000898:	4652      	mov	r2, sl
 800089a:	0037      	movs	r7, r6
 800089c:	08d1      	lsrs	r1, r2, #3
 800089e:	4a43      	ldr	r2, [pc, #268]	; (80009ac <__aeabi_dadd+0x36c>)
 80008a0:	4297      	cmp	r7, r2
 80008a2:	d01f      	beq.n	80008e4 <__aeabi_dadd+0x2a4>
 80008a4:	0309      	lsls	r1, r1, #12
 80008a6:	057a      	lsls	r2, r7, #21
 80008a8:	0b0c      	lsrs	r4, r1, #12
 80008aa:	0d52      	lsrs	r2, r2, #21
 80008ac:	e764      	b.n	8000778 <__aeabi_dadd+0x138>
 80008ae:	4642      	mov	r2, r8
 80008b0:	464c      	mov	r4, r9
 80008b2:	4314      	orrs	r4, r2
 80008b4:	1e62      	subs	r2, r4, #1
 80008b6:	4194      	sbcs	r4, r2
 80008b8:	18e4      	adds	r4, r4, r3
 80008ba:	429c      	cmp	r4, r3
 80008bc:	4192      	sbcs	r2, r2
 80008be:	4252      	negs	r2, r2
 80008c0:	4692      	mov	sl, r2
 80008c2:	448a      	add	sl, r1
 80008c4:	4653      	mov	r3, sl
 80008c6:	021b      	lsls	r3, r3, #8
 80008c8:	d5df      	bpl.n	800088a <__aeabi_dadd+0x24a>
 80008ca:	4b38      	ldr	r3, [pc, #224]	; (80009ac <__aeabi_dadd+0x36c>)
 80008cc:	3601      	adds	r6, #1
 80008ce:	429e      	cmp	r6, r3
 80008d0:	d000      	beq.n	80008d4 <__aeabi_dadd+0x294>
 80008d2:	e0b3      	b.n	8000a3c <__aeabi_dadd+0x3fc>
 80008d4:	0032      	movs	r2, r6
 80008d6:	2400      	movs	r4, #0
 80008d8:	2300      	movs	r3, #0
 80008da:	e74d      	b.n	8000778 <__aeabi_dadd+0x138>
 80008dc:	074a      	lsls	r2, r1, #29
 80008de:	08db      	lsrs	r3, r3, #3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	08c9      	lsrs	r1, r1, #3
 80008e4:	001a      	movs	r2, r3
 80008e6:	430a      	orrs	r2, r1
 80008e8:	d100      	bne.n	80008ec <__aeabi_dadd+0x2ac>
 80008ea:	e200      	b.n	8000cee <__aeabi_dadd+0x6ae>
 80008ec:	2480      	movs	r4, #128	; 0x80
 80008ee:	0324      	lsls	r4, r4, #12
 80008f0:	430c      	orrs	r4, r1
 80008f2:	0324      	lsls	r4, r4, #12
 80008f4:	4a2d      	ldr	r2, [pc, #180]	; (80009ac <__aeabi_dadd+0x36c>)
 80008f6:	0b24      	lsrs	r4, r4, #12
 80008f8:	e73e      	b.n	8000778 <__aeabi_dadd+0x138>
 80008fa:	0020      	movs	r0, r4
 80008fc:	f001 f8aa 	bl	8001a54 <__clzsi2>
 8000900:	0003      	movs	r3, r0
 8000902:	3318      	adds	r3, #24
 8000904:	2b1f      	cmp	r3, #31
 8000906:	dc00      	bgt.n	800090a <__aeabi_dadd+0x2ca>
 8000908:	e6f7      	b.n	80006fa <__aeabi_dadd+0xba>
 800090a:	0022      	movs	r2, r4
 800090c:	3808      	subs	r0, #8
 800090e:	4082      	lsls	r2, r0
 8000910:	2400      	movs	r4, #0
 8000912:	42b3      	cmp	r3, r6
 8000914:	db00      	blt.n	8000918 <__aeabi_dadd+0x2d8>
 8000916:	e6fc      	b.n	8000712 <__aeabi_dadd+0xd2>
 8000918:	1af6      	subs	r6, r6, r3
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <__aeabi_dadd+0x370>)
 800091c:	401a      	ands	r2, r3
 800091e:	4692      	mov	sl, r2
 8000920:	e70a      	b.n	8000738 <__aeabi_dadd+0xf8>
 8000922:	2f00      	cmp	r7, #0
 8000924:	d02b      	beq.n	800097e <__aeabi_dadd+0x33e>
 8000926:	1b97      	subs	r7, r2, r6
 8000928:	2e00      	cmp	r6, #0
 800092a:	d100      	bne.n	800092e <__aeabi_dadd+0x2ee>
 800092c:	e0b8      	b.n	8000aa0 <__aeabi_dadd+0x460>
 800092e:	4c1f      	ldr	r4, [pc, #124]	; (80009ac <__aeabi_dadd+0x36c>)
 8000930:	42a2      	cmp	r2, r4
 8000932:	d100      	bne.n	8000936 <__aeabi_dadd+0x2f6>
 8000934:	e11c      	b.n	8000b70 <__aeabi_dadd+0x530>
 8000936:	2480      	movs	r4, #128	; 0x80
 8000938:	0424      	lsls	r4, r4, #16
 800093a:	4321      	orrs	r1, r4
 800093c:	2f38      	cmp	r7, #56	; 0x38
 800093e:	dd00      	ble.n	8000942 <__aeabi_dadd+0x302>
 8000940:	e11e      	b.n	8000b80 <__aeabi_dadd+0x540>
 8000942:	2f1f      	cmp	r7, #31
 8000944:	dd00      	ble.n	8000948 <__aeabi_dadd+0x308>
 8000946:	e19e      	b.n	8000c86 <__aeabi_dadd+0x646>
 8000948:	2620      	movs	r6, #32
 800094a:	000c      	movs	r4, r1
 800094c:	1bf6      	subs	r6, r6, r7
 800094e:	0018      	movs	r0, r3
 8000950:	40b3      	lsls	r3, r6
 8000952:	40b4      	lsls	r4, r6
 8000954:	40f8      	lsrs	r0, r7
 8000956:	1e5e      	subs	r6, r3, #1
 8000958:	41b3      	sbcs	r3, r6
 800095a:	40f9      	lsrs	r1, r7
 800095c:	4304      	orrs	r4, r0
 800095e:	431c      	orrs	r4, r3
 8000960:	4489      	add	r9, r1
 8000962:	4444      	add	r4, r8
 8000964:	4544      	cmp	r4, r8
 8000966:	419b      	sbcs	r3, r3
 8000968:	425b      	negs	r3, r3
 800096a:	444b      	add	r3, r9
 800096c:	469a      	mov	sl, r3
 800096e:	0016      	movs	r6, r2
 8000970:	e7a8      	b.n	80008c4 <__aeabi_dadd+0x284>
 8000972:	4642      	mov	r2, r8
 8000974:	464c      	mov	r4, r9
 8000976:	4314      	orrs	r4, r2
 8000978:	1e62      	subs	r2, r4, #1
 800097a:	4194      	sbcs	r4, r2
 800097c:	e6a6      	b.n	80006cc <__aeabi_dadd+0x8c>
 800097e:	4c0d      	ldr	r4, [pc, #52]	; (80009b4 <__aeabi_dadd+0x374>)
 8000980:	1c72      	adds	r2, r6, #1
 8000982:	4222      	tst	r2, r4
 8000984:	d000      	beq.n	8000988 <__aeabi_dadd+0x348>
 8000986:	e0a8      	b.n	8000ada <__aeabi_dadd+0x49a>
 8000988:	000a      	movs	r2, r1
 800098a:	431a      	orrs	r2, r3
 800098c:	2e00      	cmp	r6, #0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x352>
 8000990:	e10a      	b.n	8000ba8 <__aeabi_dadd+0x568>
 8000992:	2a00      	cmp	r2, #0
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x358>
 8000996:	e15e      	b.n	8000c56 <__aeabi_dadd+0x616>
 8000998:	464a      	mov	r2, r9
 800099a:	4302      	orrs	r2, r0
 800099c:	d000      	beq.n	80009a0 <__aeabi_dadd+0x360>
 800099e:	e161      	b.n	8000c64 <__aeabi_dadd+0x624>
 80009a0:	074a      	lsls	r2, r1, #29
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	08c9      	lsrs	r1, r1, #3
 80009a8:	e77c      	b.n	80008a4 <__aeabi_dadd+0x264>
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	000007ff 	.word	0x000007ff
 80009b0:	ff7fffff 	.word	0xff7fffff
 80009b4:	000007fe 	.word	0x000007fe
 80009b8:	4ccf      	ldr	r4, [pc, #828]	; (8000cf8 <__aeabi_dadd+0x6b8>)
 80009ba:	42a2      	cmp	r2, r4
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x380>
 80009be:	e0ce      	b.n	8000b5e <__aeabi_dadd+0x51e>
 80009c0:	2480      	movs	r4, #128	; 0x80
 80009c2:	0424      	lsls	r4, r4, #16
 80009c4:	4321      	orrs	r1, r4
 80009c6:	2f38      	cmp	r7, #56	; 0x38
 80009c8:	dc5b      	bgt.n	8000a82 <__aeabi_dadd+0x442>
 80009ca:	2f1f      	cmp	r7, #31
 80009cc:	dd00      	ble.n	80009d0 <__aeabi_dadd+0x390>
 80009ce:	e0dc      	b.n	8000b8a <__aeabi_dadd+0x54a>
 80009d0:	2520      	movs	r5, #32
 80009d2:	000c      	movs	r4, r1
 80009d4:	1bed      	subs	r5, r5, r7
 80009d6:	001e      	movs	r6, r3
 80009d8:	40ab      	lsls	r3, r5
 80009da:	40ac      	lsls	r4, r5
 80009dc:	40fe      	lsrs	r6, r7
 80009de:	1e5d      	subs	r5, r3, #1
 80009e0:	41ab      	sbcs	r3, r5
 80009e2:	4334      	orrs	r4, r6
 80009e4:	40f9      	lsrs	r1, r7
 80009e6:	431c      	orrs	r4, r3
 80009e8:	464b      	mov	r3, r9
 80009ea:	1a5b      	subs	r3, r3, r1
 80009ec:	4699      	mov	r9, r3
 80009ee:	e04c      	b.n	8000a8a <__aeabi_dadd+0x44a>
 80009f0:	464a      	mov	r2, r9
 80009f2:	1a1c      	subs	r4, r3, r0
 80009f4:	1a88      	subs	r0, r1, r2
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	4192      	sbcs	r2, r2
 80009fa:	4252      	negs	r2, r2
 80009fc:	4692      	mov	sl, r2
 80009fe:	0002      	movs	r2, r0
 8000a00:	4650      	mov	r0, sl
 8000a02:	1a12      	subs	r2, r2, r0
 8000a04:	4692      	mov	sl, r2
 8000a06:	0212      	lsls	r2, r2, #8
 8000a08:	d478      	bmi.n	8000afc <__aeabi_dadd+0x4bc>
 8000a0a:	4653      	mov	r3, sl
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x3d2>
 8000a10:	e66a      	b.n	80006e8 <__aeabi_dadd+0xa8>
 8000a12:	2100      	movs	r1, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e745      	b.n	80008a4 <__aeabi_dadd+0x264>
 8000a18:	074a      	lsls	r2, r1, #29
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	08c9      	lsrs	r1, r1, #3
 8000a20:	e73d      	b.n	800089e <__aeabi_dadd+0x25e>
 8000a22:	181c      	adds	r4, r3, r0
 8000a24:	429c      	cmp	r4, r3
 8000a26:	419b      	sbcs	r3, r3
 8000a28:	4449      	add	r1, r9
 8000a2a:	468a      	mov	sl, r1
 8000a2c:	425b      	negs	r3, r3
 8000a2e:	449a      	add	sl, r3
 8000a30:	4653      	mov	r3, sl
 8000a32:	2601      	movs	r6, #1
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	d400      	bmi.n	8000a3a <__aeabi_dadd+0x3fa>
 8000a38:	e727      	b.n	800088a <__aeabi_dadd+0x24a>
 8000a3a:	2602      	movs	r6, #2
 8000a3c:	4652      	mov	r2, sl
 8000a3e:	4baf      	ldr	r3, [pc, #700]	; (8000cfc <__aeabi_dadd+0x6bc>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	401a      	ands	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	4021      	ands	r1, r4
 8000a48:	0862      	lsrs	r2, r4, #1
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	07dc      	lsls	r4, r3, #31
 8000a4e:	085b      	lsrs	r3, r3, #1
 8000a50:	469a      	mov	sl, r3
 8000a52:	4314      	orrs	r4, r2
 8000a54:	e670      	b.n	8000738 <__aeabi_dadd+0xf8>
 8000a56:	003a      	movs	r2, r7
 8000a58:	464c      	mov	r4, r9
 8000a5a:	3a20      	subs	r2, #32
 8000a5c:	40d4      	lsrs	r4, r2
 8000a5e:	46a4      	mov	ip, r4
 8000a60:	2f20      	cmp	r7, #32
 8000a62:	d007      	beq.n	8000a74 <__aeabi_dadd+0x434>
 8000a64:	2240      	movs	r2, #64	; 0x40
 8000a66:	4648      	mov	r0, r9
 8000a68:	1bd2      	subs	r2, r2, r7
 8000a6a:	4090      	lsls	r0, r2
 8000a6c:	0002      	movs	r2, r0
 8000a6e:	4640      	mov	r0, r8
 8000a70:	4310      	orrs	r0, r2
 8000a72:	4680      	mov	r8, r0
 8000a74:	4640      	mov	r0, r8
 8000a76:	1e42      	subs	r2, r0, #1
 8000a78:	4190      	sbcs	r0, r2
 8000a7a:	4662      	mov	r2, ip
 8000a7c:	0004      	movs	r4, r0
 8000a7e:	4314      	orrs	r4, r2
 8000a80:	e624      	b.n	80006cc <__aeabi_dadd+0x8c>
 8000a82:	4319      	orrs	r1, r3
 8000a84:	000c      	movs	r4, r1
 8000a86:	1e63      	subs	r3, r4, #1
 8000a88:	419c      	sbcs	r4, r3
 8000a8a:	4643      	mov	r3, r8
 8000a8c:	1b1c      	subs	r4, r3, r4
 8000a8e:	45a0      	cmp	r8, r4
 8000a90:	419b      	sbcs	r3, r3
 8000a92:	4649      	mov	r1, r9
 8000a94:	425b      	negs	r3, r3
 8000a96:	1acb      	subs	r3, r1, r3
 8000a98:	469a      	mov	sl, r3
 8000a9a:	4665      	mov	r5, ip
 8000a9c:	0016      	movs	r6, r2
 8000a9e:	e61b      	b.n	80006d8 <__aeabi_dadd+0x98>
 8000aa0:	000c      	movs	r4, r1
 8000aa2:	431c      	orrs	r4, r3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_dadd+0x468>
 8000aa6:	e0c7      	b.n	8000c38 <__aeabi_dadd+0x5f8>
 8000aa8:	1e7c      	subs	r4, r7, #1
 8000aaa:	2f01      	cmp	r7, #1
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dadd+0x470>
 8000aae:	e0f9      	b.n	8000ca4 <__aeabi_dadd+0x664>
 8000ab0:	4e91      	ldr	r6, [pc, #580]	; (8000cf8 <__aeabi_dadd+0x6b8>)
 8000ab2:	42b7      	cmp	r7, r6
 8000ab4:	d05c      	beq.n	8000b70 <__aeabi_dadd+0x530>
 8000ab6:	0027      	movs	r7, r4
 8000ab8:	e740      	b.n	800093c <__aeabi_dadd+0x2fc>
 8000aba:	2220      	movs	r2, #32
 8000abc:	464c      	mov	r4, r9
 8000abe:	4640      	mov	r0, r8
 8000ac0:	1bd2      	subs	r2, r2, r7
 8000ac2:	4094      	lsls	r4, r2
 8000ac4:	40f8      	lsrs	r0, r7
 8000ac6:	4304      	orrs	r4, r0
 8000ac8:	4640      	mov	r0, r8
 8000aca:	4090      	lsls	r0, r2
 8000acc:	1e42      	subs	r2, r0, #1
 8000ace:	4190      	sbcs	r0, r2
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	40fa      	lsrs	r2, r7
 8000ad4:	4304      	orrs	r4, r0
 8000ad6:	1889      	adds	r1, r1, r2
 8000ad8:	e6ee      	b.n	80008b8 <__aeabi_dadd+0x278>
 8000ada:	4c87      	ldr	r4, [pc, #540]	; (8000cf8 <__aeabi_dadd+0x6b8>)
 8000adc:	42a2      	cmp	r2, r4
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dadd+0x4a2>
 8000ae0:	e6f9      	b.n	80008d6 <__aeabi_dadd+0x296>
 8000ae2:	1818      	adds	r0, r3, r0
 8000ae4:	4298      	cmp	r0, r3
 8000ae6:	419b      	sbcs	r3, r3
 8000ae8:	4449      	add	r1, r9
 8000aea:	425b      	negs	r3, r3
 8000aec:	18cb      	adds	r3, r1, r3
 8000aee:	07dc      	lsls	r4, r3, #31
 8000af0:	0840      	lsrs	r0, r0, #1
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	469a      	mov	sl, r3
 8000af6:	0016      	movs	r6, r2
 8000af8:	4304      	orrs	r4, r0
 8000afa:	e6c6      	b.n	800088a <__aeabi_dadd+0x24a>
 8000afc:	4642      	mov	r2, r8
 8000afe:	1ad4      	subs	r4, r2, r3
 8000b00:	45a0      	cmp	r8, r4
 8000b02:	4180      	sbcs	r0, r0
 8000b04:	464b      	mov	r3, r9
 8000b06:	4240      	negs	r0, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	1a0b      	subs	r3, r1, r0
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	4665      	mov	r5, ip
 8000b10:	e5ea      	b.n	80006e8 <__aeabi_dadd+0xa8>
 8000b12:	464b      	mov	r3, r9
 8000b14:	464a      	mov	r2, r9
 8000b16:	08c0      	lsrs	r0, r0, #3
 8000b18:	075b      	lsls	r3, r3, #29
 8000b1a:	4665      	mov	r5, ip
 8000b1c:	4303      	orrs	r3, r0
 8000b1e:	08d1      	lsrs	r1, r2, #3
 8000b20:	e6bd      	b.n	800089e <__aeabi_dadd+0x25e>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dadd+0x4e8>
 8000b26:	e08e      	b.n	8000c46 <__aeabi_dadd+0x606>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	d117      	bne.n	8000b5e <__aeabi_dadd+0x51e>
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	2500      	movs	r5, #0
 8000b32:	0309      	lsls	r1, r1, #12
 8000b34:	e6da      	b.n	80008ec <__aeabi_dadd+0x2ac>
 8000b36:	074a      	lsls	r2, r1, #29
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	08c9      	lsrs	r1, r1, #3
 8000b3e:	e6d1      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000b40:	1a1c      	subs	r4, r3, r0
 8000b42:	464a      	mov	r2, r9
 8000b44:	42a3      	cmp	r3, r4
 8000b46:	419b      	sbcs	r3, r3
 8000b48:	1a89      	subs	r1, r1, r2
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1acb      	subs	r3, r1, r3
 8000b4e:	469a      	mov	sl, r3
 8000b50:	2601      	movs	r6, #1
 8000b52:	e5c1      	b.n	80006d8 <__aeabi_dadd+0x98>
 8000b54:	074a      	lsls	r2, r1, #29
 8000b56:	08db      	lsrs	r3, r3, #3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	08c9      	lsrs	r1, r1, #3
 8000b5c:	e69f      	b.n	800089e <__aeabi_dadd+0x25e>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	08d8      	lsrs	r0, r3, #3
 8000b62:	464b      	mov	r3, r9
 8000b64:	464a      	mov	r2, r9
 8000b66:	075b      	lsls	r3, r3, #29
 8000b68:	4665      	mov	r5, ip
 8000b6a:	4303      	orrs	r3, r0
 8000b6c:	08d1      	lsrs	r1, r2, #3
 8000b6e:	e6b9      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000b70:	4643      	mov	r3, r8
 8000b72:	08d8      	lsrs	r0, r3, #3
 8000b74:	464b      	mov	r3, r9
 8000b76:	464a      	mov	r2, r9
 8000b78:	075b      	lsls	r3, r3, #29
 8000b7a:	4303      	orrs	r3, r0
 8000b7c:	08d1      	lsrs	r1, r2, #3
 8000b7e:	e6b1      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000b80:	4319      	orrs	r1, r3
 8000b82:	000c      	movs	r4, r1
 8000b84:	1e63      	subs	r3, r4, #1
 8000b86:	419c      	sbcs	r4, r3
 8000b88:	e6eb      	b.n	8000962 <__aeabi_dadd+0x322>
 8000b8a:	003c      	movs	r4, r7
 8000b8c:	000d      	movs	r5, r1
 8000b8e:	3c20      	subs	r4, #32
 8000b90:	40e5      	lsrs	r5, r4
 8000b92:	2f20      	cmp	r7, #32
 8000b94:	d003      	beq.n	8000b9e <__aeabi_dadd+0x55e>
 8000b96:	2440      	movs	r4, #64	; 0x40
 8000b98:	1be4      	subs	r4, r4, r7
 8000b9a:	40a1      	lsls	r1, r4
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	001c      	movs	r4, r3
 8000ba0:	1e63      	subs	r3, r4, #1
 8000ba2:	419c      	sbcs	r4, r3
 8000ba4:	432c      	orrs	r4, r5
 8000ba6:	e770      	b.n	8000a8a <__aeabi_dadd+0x44a>
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	d0e1      	beq.n	8000b70 <__aeabi_dadd+0x530>
 8000bac:	464a      	mov	r2, r9
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	d0c1      	beq.n	8000b36 <__aeabi_dadd+0x4f6>
 8000bb2:	074a      	lsls	r2, r1, #29
 8000bb4:	08db      	lsrs	r3, r3, #3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	0312      	lsls	r2, r2, #12
 8000bbe:	4211      	tst	r1, r2
 8000bc0:	d008      	beq.n	8000bd4 <__aeabi_dadd+0x594>
 8000bc2:	4648      	mov	r0, r9
 8000bc4:	08c4      	lsrs	r4, r0, #3
 8000bc6:	4214      	tst	r4, r2
 8000bc8:	d104      	bne.n	8000bd4 <__aeabi_dadd+0x594>
 8000bca:	4643      	mov	r3, r8
 8000bcc:	0021      	movs	r1, r4
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	0742      	lsls	r2, r0, #29
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	0f5a      	lsrs	r2, r3, #29
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	0752      	lsls	r2, r2, #29
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	e681      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000be0:	464b      	mov	r3, r9
 8000be2:	4303      	orrs	r3, r0
 8000be4:	d100      	bne.n	8000be8 <__aeabi_dadd+0x5a8>
 8000be6:	e714      	b.n	8000a12 <__aeabi_dadd+0x3d2>
 8000be8:	464b      	mov	r3, r9
 8000bea:	464a      	mov	r2, r9
 8000bec:	08c0      	lsrs	r0, r0, #3
 8000bee:	075b      	lsls	r3, r3, #29
 8000bf0:	4665      	mov	r5, ip
 8000bf2:	4303      	orrs	r3, r0
 8000bf4:	08d1      	lsrs	r1, r2, #3
 8000bf6:	e655      	b.n	80008a4 <__aeabi_dadd+0x264>
 8000bf8:	1ac4      	subs	r4, r0, r3
 8000bfa:	45a0      	cmp	r8, r4
 8000bfc:	4180      	sbcs	r0, r0
 8000bfe:	464b      	mov	r3, r9
 8000c00:	4240      	negs	r0, r0
 8000c02:	1a59      	subs	r1, r3, r1
 8000c04:	1a0b      	subs	r3, r1, r0
 8000c06:	469a      	mov	sl, r3
 8000c08:	4665      	mov	r5, ip
 8000c0a:	2601      	movs	r6, #1
 8000c0c:	e564      	b.n	80006d8 <__aeabi_dadd+0x98>
 8000c0e:	1a1c      	subs	r4, r3, r0
 8000c10:	464a      	mov	r2, r9
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	4180      	sbcs	r0, r0
 8000c16:	1a8a      	subs	r2, r1, r2
 8000c18:	4240      	negs	r0, r0
 8000c1a:	1a12      	subs	r2, r2, r0
 8000c1c:	4692      	mov	sl, r2
 8000c1e:	0212      	lsls	r2, r2, #8
 8000c20:	d549      	bpl.n	8000cb6 <__aeabi_dadd+0x676>
 8000c22:	4642      	mov	r2, r8
 8000c24:	1ad4      	subs	r4, r2, r3
 8000c26:	45a0      	cmp	r8, r4
 8000c28:	4180      	sbcs	r0, r0
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	1a59      	subs	r1, r3, r1
 8000c30:	1a0b      	subs	r3, r1, r0
 8000c32:	469a      	mov	sl, r3
 8000c34:	4665      	mov	r5, ip
 8000c36:	e57f      	b.n	8000738 <__aeabi_dadd+0xf8>
 8000c38:	464b      	mov	r3, r9
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	08c0      	lsrs	r0, r0, #3
 8000c3e:	075b      	lsls	r3, r3, #29
 8000c40:	4303      	orrs	r3, r0
 8000c42:	08d1      	lsrs	r1, r2, #3
 8000c44:	e62b      	b.n	800089e <__aeabi_dadd+0x25e>
 8000c46:	464a      	mov	r2, r9
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	4302      	orrs	r2, r0
 8000c4c:	d138      	bne.n	8000cc0 <__aeabi_dadd+0x680>
 8000c4e:	074a      	lsls	r2, r1, #29
 8000c50:	4313      	orrs	r3, r2
 8000c52:	08c9      	lsrs	r1, r1, #3
 8000c54:	e646      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000c56:	464b      	mov	r3, r9
 8000c58:	464a      	mov	r2, r9
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	075b      	lsls	r3, r3, #29
 8000c5e:	4303      	orrs	r3, r0
 8000c60:	08d1      	lsrs	r1, r2, #3
 8000c62:	e61f      	b.n	80008a4 <__aeabi_dadd+0x264>
 8000c64:	181c      	adds	r4, r3, r0
 8000c66:	429c      	cmp	r4, r3
 8000c68:	419b      	sbcs	r3, r3
 8000c6a:	4449      	add	r1, r9
 8000c6c:	468a      	mov	sl, r1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	449a      	add	sl, r3
 8000c72:	4653      	mov	r3, sl
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x63a>
 8000c78:	e607      	b.n	800088a <__aeabi_dadd+0x24a>
 8000c7a:	4652      	mov	r2, sl
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <__aeabi_dadd+0x6bc>)
 8000c7e:	2601      	movs	r6, #1
 8000c80:	401a      	ands	r2, r3
 8000c82:	4692      	mov	sl, r2
 8000c84:	e601      	b.n	800088a <__aeabi_dadd+0x24a>
 8000c86:	003c      	movs	r4, r7
 8000c88:	000e      	movs	r6, r1
 8000c8a:	3c20      	subs	r4, #32
 8000c8c:	40e6      	lsrs	r6, r4
 8000c8e:	2f20      	cmp	r7, #32
 8000c90:	d003      	beq.n	8000c9a <__aeabi_dadd+0x65a>
 8000c92:	2440      	movs	r4, #64	; 0x40
 8000c94:	1be4      	subs	r4, r4, r7
 8000c96:	40a1      	lsls	r1, r4
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	001c      	movs	r4, r3
 8000c9c:	1e63      	subs	r3, r4, #1
 8000c9e:	419c      	sbcs	r4, r3
 8000ca0:	4334      	orrs	r4, r6
 8000ca2:	e65e      	b.n	8000962 <__aeabi_dadd+0x322>
 8000ca4:	4443      	add	r3, r8
 8000ca6:	4283      	cmp	r3, r0
 8000ca8:	4180      	sbcs	r0, r0
 8000caa:	4449      	add	r1, r9
 8000cac:	468a      	mov	sl, r1
 8000cae:	4240      	negs	r0, r0
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	4482      	add	sl, r0
 8000cb4:	e6bc      	b.n	8000a30 <__aeabi_dadd+0x3f0>
 8000cb6:	4653      	mov	r3, sl
 8000cb8:	4323      	orrs	r3, r4
 8000cba:	d100      	bne.n	8000cbe <__aeabi_dadd+0x67e>
 8000cbc:	e6a9      	b.n	8000a12 <__aeabi_dadd+0x3d2>
 8000cbe:	e5e4      	b.n	800088a <__aeabi_dadd+0x24a>
 8000cc0:	074a      	lsls	r2, r1, #29
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	2280      	movs	r2, #128	; 0x80
 8000cc6:	08c9      	lsrs	r1, r1, #3
 8000cc8:	0312      	lsls	r2, r2, #12
 8000cca:	4211      	tst	r1, r2
 8000ccc:	d009      	beq.n	8000ce2 <__aeabi_dadd+0x6a2>
 8000cce:	4648      	mov	r0, r9
 8000cd0:	08c4      	lsrs	r4, r0, #3
 8000cd2:	4214      	tst	r4, r2
 8000cd4:	d105      	bne.n	8000ce2 <__aeabi_dadd+0x6a2>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	4665      	mov	r5, ip
 8000cda:	0021      	movs	r1, r4
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0742      	lsls	r2, r0, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	0f5a      	lsrs	r2, r3, #29
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	0752      	lsls	r2, r2, #29
 8000cea:	4313      	orrs	r3, r2
 8000cec:	e5fa      	b.n	80008e4 <__aeabi_dadd+0x2a4>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	4a01      	ldr	r2, [pc, #4]	; (8000cf8 <__aeabi_dadd+0x6b8>)
 8000cf2:	001c      	movs	r4, r3
 8000cf4:	e540      	b.n	8000778 <__aeabi_dadd+0x138>
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	000007ff 	.word	0x000007ff
 8000cfc:	ff7fffff 	.word	0xff7fffff

08000d00 <__aeabi_dmul>:
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	4645      	mov	r5, r8
 8000d04:	46de      	mov	lr, fp
 8000d06:	4657      	mov	r7, sl
 8000d08:	464e      	mov	r6, r9
 8000d0a:	b5e0      	push	{r5, r6, r7, lr}
 8000d0c:	001f      	movs	r7, r3
 8000d0e:	030b      	lsls	r3, r1, #12
 8000d10:	0b1b      	lsrs	r3, r3, #12
 8000d12:	469b      	mov	fp, r3
 8000d14:	004d      	lsls	r5, r1, #1
 8000d16:	0fcb      	lsrs	r3, r1, #31
 8000d18:	0004      	movs	r4, r0
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	4698      	mov	r8, r3
 8000d1e:	b087      	sub	sp, #28
 8000d20:	0d6d      	lsrs	r5, r5, #21
 8000d22:	d100      	bne.n	8000d26 <__aeabi_dmul+0x26>
 8000d24:	e1cd      	b.n	80010c2 <__aeabi_dmul+0x3c2>
 8000d26:	4bce      	ldr	r3, [pc, #824]	; (8001060 <__aeabi_dmul+0x360>)
 8000d28:	429d      	cmp	r5, r3
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dmul+0x2e>
 8000d2c:	e1e9      	b.n	8001102 <__aeabi_dmul+0x402>
 8000d2e:	465a      	mov	r2, fp
 8000d30:	0f43      	lsrs	r3, r0, #29
 8000d32:	00d2      	lsls	r2, r2, #3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	0412      	lsls	r2, r2, #16
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	00c3      	lsls	r3, r0, #3
 8000d3e:	469a      	mov	sl, r3
 8000d40:	4bc8      	ldr	r3, [pc, #800]	; (8001064 <__aeabi_dmul+0x364>)
 8000d42:	4693      	mov	fp, r2
 8000d44:	469c      	mov	ip, r3
 8000d46:	2300      	movs	r3, #0
 8000d48:	2600      	movs	r6, #0
 8000d4a:	4465      	add	r5, ip
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	033c      	lsls	r4, r7, #12
 8000d50:	007b      	lsls	r3, r7, #1
 8000d52:	4648      	mov	r0, r9
 8000d54:	0b24      	lsrs	r4, r4, #12
 8000d56:	0d5b      	lsrs	r3, r3, #21
 8000d58:	0fff      	lsrs	r7, r7, #31
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <__aeabi_dmul+0x60>
 8000d5e:	e189      	b.n	8001074 <__aeabi_dmul+0x374>
 8000d60:	4abf      	ldr	r2, [pc, #764]	; (8001060 <__aeabi_dmul+0x360>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d019      	beq.n	8000d9a <__aeabi_dmul+0x9a>
 8000d66:	0f42      	lsrs	r2, r0, #29
 8000d68:	00e4      	lsls	r4, r4, #3
 8000d6a:	4322      	orrs	r2, r4
 8000d6c:	2480      	movs	r4, #128	; 0x80
 8000d6e:	0424      	lsls	r4, r4, #16
 8000d70:	4314      	orrs	r4, r2
 8000d72:	4abc      	ldr	r2, [pc, #752]	; (8001064 <__aeabi_dmul+0x364>)
 8000d74:	2100      	movs	r1, #0
 8000d76:	4694      	mov	ip, r2
 8000d78:	4642      	mov	r2, r8
 8000d7a:	4463      	add	r3, ip
 8000d7c:	195b      	adds	r3, r3, r5
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	9b01      	ldr	r3, [sp, #4]
 8000d82:	407a      	eors	r2, r7
 8000d84:	3301      	adds	r3, #1
 8000d86:	00c0      	lsls	r0, r0, #3
 8000d88:	b2d2      	uxtb	r2, r2
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	2e0a      	cmp	r6, #10
 8000d8e:	dd1c      	ble.n	8000dca <__aeabi_dmul+0xca>
 8000d90:	003a      	movs	r2, r7
 8000d92:	2e0b      	cmp	r6, #11
 8000d94:	d05e      	beq.n	8000e54 <__aeabi_dmul+0x154>
 8000d96:	4647      	mov	r7, r8
 8000d98:	e056      	b.n	8000e48 <__aeabi_dmul+0x148>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	4bb0      	ldr	r3, [pc, #704]	; (8001060 <__aeabi_dmul+0x360>)
 8000d9e:	4321      	orrs	r1, r4
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	2900      	cmp	r1, #0
 8000da6:	d12a      	bne.n	8000dfe <__aeabi_dmul+0xfe>
 8000da8:	2080      	movs	r0, #128	; 0x80
 8000daa:	2202      	movs	r2, #2
 8000dac:	0100      	lsls	r0, r0, #4
 8000dae:	002b      	movs	r3, r5
 8000db0:	4684      	mov	ip, r0
 8000db2:	4316      	orrs	r6, r2
 8000db4:	4642      	mov	r2, r8
 8000db6:	4463      	add	r3, ip
 8000db8:	407a      	eors	r2, r7
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	9302      	str	r3, [sp, #8]
 8000dbe:	2e0a      	cmp	r6, #10
 8000dc0:	dd00      	ble.n	8000dc4 <__aeabi_dmul+0xc4>
 8000dc2:	e231      	b.n	8001228 <__aeabi_dmul+0x528>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	2102      	movs	r1, #2
 8000dca:	2e02      	cmp	r6, #2
 8000dcc:	dc26      	bgt.n	8000e1c <__aeabi_dmul+0x11c>
 8000dce:	3e01      	subs	r6, #1
 8000dd0:	2e01      	cmp	r6, #1
 8000dd2:	d852      	bhi.n	8000e7a <__aeabi_dmul+0x17a>
 8000dd4:	2902      	cmp	r1, #2
 8000dd6:	d04c      	beq.n	8000e72 <__aeabi_dmul+0x172>
 8000dd8:	2901      	cmp	r1, #1
 8000dda:	d000      	beq.n	8000dde <__aeabi_dmul+0xde>
 8000ddc:	e118      	b.n	8001010 <__aeabi_dmul+0x310>
 8000dde:	2300      	movs	r3, #0
 8000de0:	2400      	movs	r4, #0
 8000de2:	2500      	movs	r5, #0
 8000de4:	051b      	lsls	r3, r3, #20
 8000de6:	4323      	orrs	r3, r4
 8000de8:	07d2      	lsls	r2, r2, #31
 8000dea:	4313      	orrs	r3, r2
 8000dec:	0028      	movs	r0, r5
 8000dee:	0019      	movs	r1, r3
 8000df0:	b007      	add	sp, #28
 8000df2:	bcf0      	pop	{r4, r5, r6, r7}
 8000df4:	46bb      	mov	fp, r7
 8000df6:	46b2      	mov	sl, r6
 8000df8:	46a9      	mov	r9, r5
 8000dfa:	46a0      	mov	r8, r4
 8000dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dfe:	2180      	movs	r1, #128	; 0x80
 8000e00:	2203      	movs	r2, #3
 8000e02:	0109      	lsls	r1, r1, #4
 8000e04:	002b      	movs	r3, r5
 8000e06:	468c      	mov	ip, r1
 8000e08:	4316      	orrs	r6, r2
 8000e0a:	4642      	mov	r2, r8
 8000e0c:	4463      	add	r3, ip
 8000e0e:	407a      	eors	r2, r7
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	9302      	str	r3, [sp, #8]
 8000e14:	2e0a      	cmp	r6, #10
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dmul+0x11a>
 8000e18:	e228      	b.n	800126c <__aeabi_dmul+0x56c>
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	2501      	movs	r5, #1
 8000e1e:	40b5      	lsls	r5, r6
 8000e20:	46ac      	mov	ip, r5
 8000e22:	26a6      	movs	r6, #166	; 0xa6
 8000e24:	4663      	mov	r3, ip
 8000e26:	00f6      	lsls	r6, r6, #3
 8000e28:	4035      	ands	r5, r6
 8000e2a:	4233      	tst	r3, r6
 8000e2c:	d10b      	bne.n	8000e46 <__aeabi_dmul+0x146>
 8000e2e:	2690      	movs	r6, #144	; 0x90
 8000e30:	00b6      	lsls	r6, r6, #2
 8000e32:	4233      	tst	r3, r6
 8000e34:	d118      	bne.n	8000e68 <__aeabi_dmul+0x168>
 8000e36:	3eb9      	subs	r6, #185	; 0xb9
 8000e38:	3eff      	subs	r6, #255	; 0xff
 8000e3a:	421e      	tst	r6, r3
 8000e3c:	d01d      	beq.n	8000e7a <__aeabi_dmul+0x17a>
 8000e3e:	46a3      	mov	fp, r4
 8000e40:	4682      	mov	sl, r0
 8000e42:	9100      	str	r1, [sp, #0]
 8000e44:	e000      	b.n	8000e48 <__aeabi_dmul+0x148>
 8000e46:	0017      	movs	r7, r2
 8000e48:	9900      	ldr	r1, [sp, #0]
 8000e4a:	003a      	movs	r2, r7
 8000e4c:	2902      	cmp	r1, #2
 8000e4e:	d010      	beq.n	8000e72 <__aeabi_dmul+0x172>
 8000e50:	465c      	mov	r4, fp
 8000e52:	4650      	mov	r0, sl
 8000e54:	2903      	cmp	r1, #3
 8000e56:	d1bf      	bne.n	8000dd8 <__aeabi_dmul+0xd8>
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	031b      	lsls	r3, r3, #12
 8000e5c:	431c      	orrs	r4, r3
 8000e5e:	0324      	lsls	r4, r4, #12
 8000e60:	0005      	movs	r5, r0
 8000e62:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <__aeabi_dmul+0x360>)
 8000e64:	0b24      	lsrs	r4, r4, #12
 8000e66:	e7bd      	b.n	8000de4 <__aeabi_dmul+0xe4>
 8000e68:	2480      	movs	r4, #128	; 0x80
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <__aeabi_dmul+0x360>)
 8000e6e:	0324      	lsls	r4, r4, #12
 8000e70:	e7b8      	b.n	8000de4 <__aeabi_dmul+0xe4>
 8000e72:	2400      	movs	r4, #0
 8000e74:	2500      	movs	r5, #0
 8000e76:	4b7a      	ldr	r3, [pc, #488]	; (8001060 <__aeabi_dmul+0x360>)
 8000e78:	e7b4      	b.n	8000de4 <__aeabi_dmul+0xe4>
 8000e7a:	4653      	mov	r3, sl
 8000e7c:	041e      	lsls	r6, r3, #16
 8000e7e:	0c36      	lsrs	r6, r6, #16
 8000e80:	0c1f      	lsrs	r7, r3, #16
 8000e82:	0033      	movs	r3, r6
 8000e84:	0c01      	lsrs	r1, r0, #16
 8000e86:	0400      	lsls	r0, r0, #16
 8000e88:	0c00      	lsrs	r0, r0, #16
 8000e8a:	4343      	muls	r3, r0
 8000e8c:	4698      	mov	r8, r3
 8000e8e:	0003      	movs	r3, r0
 8000e90:	437b      	muls	r3, r7
 8000e92:	4699      	mov	r9, r3
 8000e94:	0033      	movs	r3, r6
 8000e96:	434b      	muls	r3, r1
 8000e98:	469c      	mov	ip, r3
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	000d      	movs	r5, r1
 8000e9e:	0c1b      	lsrs	r3, r3, #16
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	437d      	muls	r5, r7
 8000ea4:	44cc      	add	ip, r9
 8000ea6:	44d4      	add	ip, sl
 8000ea8:	9500      	str	r5, [sp, #0]
 8000eaa:	45e1      	cmp	r9, ip
 8000eac:	d904      	bls.n	8000eb8 <__aeabi_dmul+0x1b8>
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	4699      	mov	r9, r3
 8000eb4:	444d      	add	r5, r9
 8000eb6:	9500      	str	r5, [sp, #0]
 8000eb8:	4663      	mov	r3, ip
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	001d      	movs	r5, r3
 8000ebe:	4663      	mov	r3, ip
 8000ec0:	041b      	lsls	r3, r3, #16
 8000ec2:	469c      	mov	ip, r3
 8000ec4:	4643      	mov	r3, r8
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	0c1b      	lsrs	r3, r3, #16
 8000eca:	4698      	mov	r8, r3
 8000ecc:	4663      	mov	r3, ip
 8000ece:	4443      	add	r3, r8
 8000ed0:	9303      	str	r3, [sp, #12]
 8000ed2:	0c23      	lsrs	r3, r4, #16
 8000ed4:	4698      	mov	r8, r3
 8000ed6:	0033      	movs	r3, r6
 8000ed8:	0424      	lsls	r4, r4, #16
 8000eda:	0c24      	lsrs	r4, r4, #16
 8000edc:	4363      	muls	r3, r4
 8000ede:	469c      	mov	ip, r3
 8000ee0:	0023      	movs	r3, r4
 8000ee2:	437b      	muls	r3, r7
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	435e      	muls	r6, r3
 8000eea:	435f      	muls	r7, r3
 8000eec:	444e      	add	r6, r9
 8000eee:	4663      	mov	r3, ip
 8000ef0:	46b2      	mov	sl, r6
 8000ef2:	0c1e      	lsrs	r6, r3, #16
 8000ef4:	4456      	add	r6, sl
 8000ef6:	45b1      	cmp	r9, r6
 8000ef8:	d903      	bls.n	8000f02 <__aeabi_dmul+0x202>
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	025b      	lsls	r3, r3, #9
 8000efe:	4699      	mov	r9, r3
 8000f00:	444f      	add	r7, r9
 8000f02:	0c33      	lsrs	r3, r6, #16
 8000f04:	4699      	mov	r9, r3
 8000f06:	003b      	movs	r3, r7
 8000f08:	444b      	add	r3, r9
 8000f0a:	9305      	str	r3, [sp, #20]
 8000f0c:	4663      	mov	r3, ip
 8000f0e:	46ac      	mov	ip, r5
 8000f10:	041f      	lsls	r7, r3, #16
 8000f12:	0c3f      	lsrs	r7, r7, #16
 8000f14:	0436      	lsls	r6, r6, #16
 8000f16:	19f6      	adds	r6, r6, r7
 8000f18:	44b4      	add	ip, r6
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	9304      	str	r3, [sp, #16]
 8000f1e:	465b      	mov	r3, fp
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	469c      	mov	ip, r3
 8000f24:	465b      	mov	r3, fp
 8000f26:	041f      	lsls	r7, r3, #16
 8000f28:	0c3f      	lsrs	r7, r7, #16
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	4343      	muls	r3, r0
 8000f2e:	4699      	mov	r9, r3
 8000f30:	4663      	mov	r3, ip
 8000f32:	4343      	muls	r3, r0
 8000f34:	469a      	mov	sl, r3
 8000f36:	464b      	mov	r3, r9
 8000f38:	4660      	mov	r0, ip
 8000f3a:	0c1b      	lsrs	r3, r3, #16
 8000f3c:	469b      	mov	fp, r3
 8000f3e:	4348      	muls	r0, r1
 8000f40:	4379      	muls	r1, r7
 8000f42:	4451      	add	r1, sl
 8000f44:	4459      	add	r1, fp
 8000f46:	458a      	cmp	sl, r1
 8000f48:	d903      	bls.n	8000f52 <__aeabi_dmul+0x252>
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	469a      	mov	sl, r3
 8000f50:	4450      	add	r0, sl
 8000f52:	0c0b      	lsrs	r3, r1, #16
 8000f54:	469a      	mov	sl, r3
 8000f56:	464b      	mov	r3, r9
 8000f58:	041b      	lsls	r3, r3, #16
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	003b      	movs	r3, r7
 8000f60:	4363      	muls	r3, r4
 8000f62:	0409      	lsls	r1, r1, #16
 8000f64:	4645      	mov	r5, r8
 8000f66:	4449      	add	r1, r9
 8000f68:	4699      	mov	r9, r3
 8000f6a:	4663      	mov	r3, ip
 8000f6c:	435c      	muls	r4, r3
 8000f6e:	436b      	muls	r3, r5
 8000f70:	469c      	mov	ip, r3
 8000f72:	464b      	mov	r3, r9
 8000f74:	0c1b      	lsrs	r3, r3, #16
 8000f76:	4698      	mov	r8, r3
 8000f78:	436f      	muls	r7, r5
 8000f7a:	193f      	adds	r7, r7, r4
 8000f7c:	4447      	add	r7, r8
 8000f7e:	4450      	add	r0, sl
 8000f80:	42bc      	cmp	r4, r7
 8000f82:	d903      	bls.n	8000f8c <__aeabi_dmul+0x28c>
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	025b      	lsls	r3, r3, #9
 8000f88:	4698      	mov	r8, r3
 8000f8a:	44c4      	add	ip, r8
 8000f8c:	9b04      	ldr	r3, [sp, #16]
 8000f8e:	9d00      	ldr	r5, [sp, #0]
 8000f90:	4698      	mov	r8, r3
 8000f92:	4445      	add	r5, r8
 8000f94:	42b5      	cmp	r5, r6
 8000f96:	41b6      	sbcs	r6, r6
 8000f98:	4273      	negs	r3, r6
 8000f9a:	4698      	mov	r8, r3
 8000f9c:	464b      	mov	r3, r9
 8000f9e:	041e      	lsls	r6, r3, #16
 8000fa0:	9b05      	ldr	r3, [sp, #20]
 8000fa2:	043c      	lsls	r4, r7, #16
 8000fa4:	4699      	mov	r9, r3
 8000fa6:	0c36      	lsrs	r6, r6, #16
 8000fa8:	19a4      	adds	r4, r4, r6
 8000faa:	444c      	add	r4, r9
 8000fac:	46a1      	mov	r9, r4
 8000fae:	4683      	mov	fp, r0
 8000fb0:	186e      	adds	r6, r5, r1
 8000fb2:	44c1      	add	r9, r8
 8000fb4:	428e      	cmp	r6, r1
 8000fb6:	4189      	sbcs	r1, r1
 8000fb8:	44cb      	add	fp, r9
 8000fba:	465d      	mov	r5, fp
 8000fbc:	4249      	negs	r1, r1
 8000fbe:	186d      	adds	r5, r5, r1
 8000fc0:	429c      	cmp	r4, r3
 8000fc2:	41a4      	sbcs	r4, r4
 8000fc4:	45c1      	cmp	r9, r8
 8000fc6:	419b      	sbcs	r3, r3
 8000fc8:	4583      	cmp	fp, r0
 8000fca:	4180      	sbcs	r0, r0
 8000fcc:	428d      	cmp	r5, r1
 8000fce:	4189      	sbcs	r1, r1
 8000fd0:	425b      	negs	r3, r3
 8000fd2:	4264      	negs	r4, r4
 8000fd4:	431c      	orrs	r4, r3
 8000fd6:	4240      	negs	r0, r0
 8000fd8:	9b03      	ldr	r3, [sp, #12]
 8000fda:	4249      	negs	r1, r1
 8000fdc:	4301      	orrs	r1, r0
 8000fde:	0270      	lsls	r0, r6, #9
 8000fe0:	0c3f      	lsrs	r7, r7, #16
 8000fe2:	4318      	orrs	r0, r3
 8000fe4:	19e4      	adds	r4, r4, r7
 8000fe6:	1e47      	subs	r7, r0, #1
 8000fe8:	41b8      	sbcs	r0, r7
 8000fea:	1864      	adds	r4, r4, r1
 8000fec:	4464      	add	r4, ip
 8000fee:	0df6      	lsrs	r6, r6, #23
 8000ff0:	0261      	lsls	r1, r4, #9
 8000ff2:	4330      	orrs	r0, r6
 8000ff4:	0dec      	lsrs	r4, r5, #23
 8000ff6:	026e      	lsls	r6, r5, #9
 8000ff8:	430c      	orrs	r4, r1
 8000ffa:	4330      	orrs	r0, r6
 8000ffc:	01c9      	lsls	r1, r1, #7
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_dmul+0x302>
 8001000:	e0f1      	b.n	80011e6 <__aeabi_dmul+0x4e6>
 8001002:	2101      	movs	r1, #1
 8001004:	0843      	lsrs	r3, r0, #1
 8001006:	4001      	ands	r1, r0
 8001008:	430b      	orrs	r3, r1
 800100a:	07e0      	lsls	r0, r4, #31
 800100c:	4318      	orrs	r0, r3
 800100e:	0864      	lsrs	r4, r4, #1
 8001010:	4915      	ldr	r1, [pc, #84]	; (8001068 <__aeabi_dmul+0x368>)
 8001012:	9b02      	ldr	r3, [sp, #8]
 8001014:	468c      	mov	ip, r1
 8001016:	4463      	add	r3, ip
 8001018:	2b00      	cmp	r3, #0
 800101a:	dc00      	bgt.n	800101e <__aeabi_dmul+0x31e>
 800101c:	e097      	b.n	800114e <__aeabi_dmul+0x44e>
 800101e:	0741      	lsls	r1, r0, #29
 8001020:	d009      	beq.n	8001036 <__aeabi_dmul+0x336>
 8001022:	210f      	movs	r1, #15
 8001024:	4001      	ands	r1, r0
 8001026:	2904      	cmp	r1, #4
 8001028:	d005      	beq.n	8001036 <__aeabi_dmul+0x336>
 800102a:	1d01      	adds	r1, r0, #4
 800102c:	4281      	cmp	r1, r0
 800102e:	4180      	sbcs	r0, r0
 8001030:	4240      	negs	r0, r0
 8001032:	1824      	adds	r4, r4, r0
 8001034:	0008      	movs	r0, r1
 8001036:	01e1      	lsls	r1, r4, #7
 8001038:	d506      	bpl.n	8001048 <__aeabi_dmul+0x348>
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	00c9      	lsls	r1, r1, #3
 800103e:	468c      	mov	ip, r1
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <__aeabi_dmul+0x36c>)
 8001042:	401c      	ands	r4, r3
 8001044:	9b02      	ldr	r3, [sp, #8]
 8001046:	4463      	add	r3, ip
 8001048:	4909      	ldr	r1, [pc, #36]	; (8001070 <__aeabi_dmul+0x370>)
 800104a:	428b      	cmp	r3, r1
 800104c:	dd00      	ble.n	8001050 <__aeabi_dmul+0x350>
 800104e:	e710      	b.n	8000e72 <__aeabi_dmul+0x172>
 8001050:	0761      	lsls	r1, r4, #29
 8001052:	08c5      	lsrs	r5, r0, #3
 8001054:	0264      	lsls	r4, r4, #9
 8001056:	055b      	lsls	r3, r3, #21
 8001058:	430d      	orrs	r5, r1
 800105a:	0b24      	lsrs	r4, r4, #12
 800105c:	0d5b      	lsrs	r3, r3, #21
 800105e:	e6c1      	b.n	8000de4 <__aeabi_dmul+0xe4>
 8001060:	000007ff 	.word	0x000007ff
 8001064:	fffffc01 	.word	0xfffffc01
 8001068:	000003ff 	.word	0x000003ff
 800106c:	feffffff 	.word	0xfeffffff
 8001070:	000007fe 	.word	0x000007fe
 8001074:	464b      	mov	r3, r9
 8001076:	4323      	orrs	r3, r4
 8001078:	d059      	beq.n	800112e <__aeabi_dmul+0x42e>
 800107a:	2c00      	cmp	r4, #0
 800107c:	d100      	bne.n	8001080 <__aeabi_dmul+0x380>
 800107e:	e0a3      	b.n	80011c8 <__aeabi_dmul+0x4c8>
 8001080:	0020      	movs	r0, r4
 8001082:	f000 fce7 	bl	8001a54 <__clzsi2>
 8001086:	0001      	movs	r1, r0
 8001088:	0003      	movs	r3, r0
 800108a:	390b      	subs	r1, #11
 800108c:	221d      	movs	r2, #29
 800108e:	1a52      	subs	r2, r2, r1
 8001090:	4649      	mov	r1, r9
 8001092:	0018      	movs	r0, r3
 8001094:	40d1      	lsrs	r1, r2
 8001096:	464a      	mov	r2, r9
 8001098:	3808      	subs	r0, #8
 800109a:	4082      	lsls	r2, r0
 800109c:	4084      	lsls	r4, r0
 800109e:	0010      	movs	r0, r2
 80010a0:	430c      	orrs	r4, r1
 80010a2:	4a74      	ldr	r2, [pc, #464]	; (8001274 <__aeabi_dmul+0x574>)
 80010a4:	1aeb      	subs	r3, r5, r3
 80010a6:	4694      	mov	ip, r2
 80010a8:	4642      	mov	r2, r8
 80010aa:	4463      	add	r3, ip
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	9b01      	ldr	r3, [sp, #4]
 80010b0:	407a      	eors	r2, r7
 80010b2:	3301      	adds	r3, #1
 80010b4:	2100      	movs	r1, #0
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	9302      	str	r3, [sp, #8]
 80010ba:	2e0a      	cmp	r6, #10
 80010bc:	dd00      	ble.n	80010c0 <__aeabi_dmul+0x3c0>
 80010be:	e667      	b.n	8000d90 <__aeabi_dmul+0x90>
 80010c0:	e683      	b.n	8000dca <__aeabi_dmul+0xca>
 80010c2:	465b      	mov	r3, fp
 80010c4:	4303      	orrs	r3, r0
 80010c6:	469a      	mov	sl, r3
 80010c8:	d02a      	beq.n	8001120 <__aeabi_dmul+0x420>
 80010ca:	465b      	mov	r3, fp
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d06d      	beq.n	80011ac <__aeabi_dmul+0x4ac>
 80010d0:	4658      	mov	r0, fp
 80010d2:	f000 fcbf 	bl	8001a54 <__clzsi2>
 80010d6:	0001      	movs	r1, r0
 80010d8:	0003      	movs	r3, r0
 80010da:	390b      	subs	r1, #11
 80010dc:	221d      	movs	r2, #29
 80010de:	1a52      	subs	r2, r2, r1
 80010e0:	0021      	movs	r1, r4
 80010e2:	0018      	movs	r0, r3
 80010e4:	465d      	mov	r5, fp
 80010e6:	40d1      	lsrs	r1, r2
 80010e8:	3808      	subs	r0, #8
 80010ea:	4085      	lsls	r5, r0
 80010ec:	000a      	movs	r2, r1
 80010ee:	4084      	lsls	r4, r0
 80010f0:	432a      	orrs	r2, r5
 80010f2:	4693      	mov	fp, r2
 80010f4:	46a2      	mov	sl, r4
 80010f6:	4d5f      	ldr	r5, [pc, #380]	; (8001274 <__aeabi_dmul+0x574>)
 80010f8:	2600      	movs	r6, #0
 80010fa:	1aed      	subs	r5, r5, r3
 80010fc:	2300      	movs	r3, #0
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	e625      	b.n	8000d4e <__aeabi_dmul+0x4e>
 8001102:	465b      	mov	r3, fp
 8001104:	4303      	orrs	r3, r0
 8001106:	469a      	mov	sl, r3
 8001108:	d105      	bne.n	8001116 <__aeabi_dmul+0x416>
 800110a:	2300      	movs	r3, #0
 800110c:	469b      	mov	fp, r3
 800110e:	3302      	adds	r3, #2
 8001110:	2608      	movs	r6, #8
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	e61b      	b.n	8000d4e <__aeabi_dmul+0x4e>
 8001116:	2303      	movs	r3, #3
 8001118:	4682      	mov	sl, r0
 800111a:	260c      	movs	r6, #12
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	e616      	b.n	8000d4e <__aeabi_dmul+0x4e>
 8001120:	2300      	movs	r3, #0
 8001122:	469b      	mov	fp, r3
 8001124:	3301      	adds	r3, #1
 8001126:	2604      	movs	r6, #4
 8001128:	2500      	movs	r5, #0
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	e60f      	b.n	8000d4e <__aeabi_dmul+0x4e>
 800112e:	4642      	mov	r2, r8
 8001130:	3301      	adds	r3, #1
 8001132:	9501      	str	r5, [sp, #4]
 8001134:	431e      	orrs	r6, r3
 8001136:	9b01      	ldr	r3, [sp, #4]
 8001138:	407a      	eors	r2, r7
 800113a:	3301      	adds	r3, #1
 800113c:	2400      	movs	r4, #0
 800113e:	2000      	movs	r0, #0
 8001140:	2101      	movs	r1, #1
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2e0a      	cmp	r6, #10
 8001148:	dd00      	ble.n	800114c <__aeabi_dmul+0x44c>
 800114a:	e621      	b.n	8000d90 <__aeabi_dmul+0x90>
 800114c:	e63d      	b.n	8000dca <__aeabi_dmul+0xca>
 800114e:	2101      	movs	r1, #1
 8001150:	1ac9      	subs	r1, r1, r3
 8001152:	2938      	cmp	r1, #56	; 0x38
 8001154:	dd00      	ble.n	8001158 <__aeabi_dmul+0x458>
 8001156:	e642      	b.n	8000dde <__aeabi_dmul+0xde>
 8001158:	291f      	cmp	r1, #31
 800115a:	dd47      	ble.n	80011ec <__aeabi_dmul+0x4ec>
 800115c:	261f      	movs	r6, #31
 800115e:	0025      	movs	r5, r4
 8001160:	4276      	negs	r6, r6
 8001162:	1af3      	subs	r3, r6, r3
 8001164:	40dd      	lsrs	r5, r3
 8001166:	002b      	movs	r3, r5
 8001168:	2920      	cmp	r1, #32
 800116a:	d005      	beq.n	8001178 <__aeabi_dmul+0x478>
 800116c:	4942      	ldr	r1, [pc, #264]	; (8001278 <__aeabi_dmul+0x578>)
 800116e:	9d02      	ldr	r5, [sp, #8]
 8001170:	468c      	mov	ip, r1
 8001172:	4465      	add	r5, ip
 8001174:	40ac      	lsls	r4, r5
 8001176:	4320      	orrs	r0, r4
 8001178:	1e41      	subs	r1, r0, #1
 800117a:	4188      	sbcs	r0, r1
 800117c:	4318      	orrs	r0, r3
 800117e:	2307      	movs	r3, #7
 8001180:	001d      	movs	r5, r3
 8001182:	2400      	movs	r4, #0
 8001184:	4005      	ands	r5, r0
 8001186:	4203      	tst	r3, r0
 8001188:	d04a      	beq.n	8001220 <__aeabi_dmul+0x520>
 800118a:	230f      	movs	r3, #15
 800118c:	2400      	movs	r4, #0
 800118e:	4003      	ands	r3, r0
 8001190:	2b04      	cmp	r3, #4
 8001192:	d042      	beq.n	800121a <__aeabi_dmul+0x51a>
 8001194:	1d03      	adds	r3, r0, #4
 8001196:	4283      	cmp	r3, r0
 8001198:	4180      	sbcs	r0, r0
 800119a:	4240      	negs	r0, r0
 800119c:	1824      	adds	r4, r4, r0
 800119e:	0018      	movs	r0, r3
 80011a0:	0223      	lsls	r3, r4, #8
 80011a2:	d53a      	bpl.n	800121a <__aeabi_dmul+0x51a>
 80011a4:	2301      	movs	r3, #1
 80011a6:	2400      	movs	r4, #0
 80011a8:	2500      	movs	r5, #0
 80011aa:	e61b      	b.n	8000de4 <__aeabi_dmul+0xe4>
 80011ac:	f000 fc52 	bl	8001a54 <__clzsi2>
 80011b0:	0001      	movs	r1, r0
 80011b2:	0003      	movs	r3, r0
 80011b4:	3115      	adds	r1, #21
 80011b6:	3320      	adds	r3, #32
 80011b8:	291c      	cmp	r1, #28
 80011ba:	dd8f      	ble.n	80010dc <__aeabi_dmul+0x3dc>
 80011bc:	3808      	subs	r0, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	4084      	lsls	r4, r0
 80011c2:	4692      	mov	sl, r2
 80011c4:	46a3      	mov	fp, r4
 80011c6:	e796      	b.n	80010f6 <__aeabi_dmul+0x3f6>
 80011c8:	f000 fc44 	bl	8001a54 <__clzsi2>
 80011cc:	0001      	movs	r1, r0
 80011ce:	0003      	movs	r3, r0
 80011d0:	3115      	adds	r1, #21
 80011d2:	3320      	adds	r3, #32
 80011d4:	291c      	cmp	r1, #28
 80011d6:	dc00      	bgt.n	80011da <__aeabi_dmul+0x4da>
 80011d8:	e758      	b.n	800108c <__aeabi_dmul+0x38c>
 80011da:	0002      	movs	r2, r0
 80011dc:	464c      	mov	r4, r9
 80011de:	3a08      	subs	r2, #8
 80011e0:	2000      	movs	r0, #0
 80011e2:	4094      	lsls	r4, r2
 80011e4:	e75d      	b.n	80010a2 <__aeabi_dmul+0x3a2>
 80011e6:	9b01      	ldr	r3, [sp, #4]
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	e711      	b.n	8001010 <__aeabi_dmul+0x310>
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <__aeabi_dmul+0x57c>)
 80011ee:	0026      	movs	r6, r4
 80011f0:	469c      	mov	ip, r3
 80011f2:	0003      	movs	r3, r0
 80011f4:	9d02      	ldr	r5, [sp, #8]
 80011f6:	40cb      	lsrs	r3, r1
 80011f8:	4465      	add	r5, ip
 80011fa:	40ae      	lsls	r6, r5
 80011fc:	431e      	orrs	r6, r3
 80011fe:	0003      	movs	r3, r0
 8001200:	40ab      	lsls	r3, r5
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	4183      	sbcs	r3, r0
 8001206:	0030      	movs	r0, r6
 8001208:	4318      	orrs	r0, r3
 800120a:	40cc      	lsrs	r4, r1
 800120c:	0743      	lsls	r3, r0, #29
 800120e:	d0c7      	beq.n	80011a0 <__aeabi_dmul+0x4a0>
 8001210:	230f      	movs	r3, #15
 8001212:	4003      	ands	r3, r0
 8001214:	2b04      	cmp	r3, #4
 8001216:	d1bd      	bne.n	8001194 <__aeabi_dmul+0x494>
 8001218:	e7c2      	b.n	80011a0 <__aeabi_dmul+0x4a0>
 800121a:	0765      	lsls	r5, r4, #29
 800121c:	0264      	lsls	r4, r4, #9
 800121e:	0b24      	lsrs	r4, r4, #12
 8001220:	08c0      	lsrs	r0, r0, #3
 8001222:	2300      	movs	r3, #0
 8001224:	4305      	orrs	r5, r0
 8001226:	e5dd      	b.n	8000de4 <__aeabi_dmul+0xe4>
 8001228:	2500      	movs	r5, #0
 800122a:	2302      	movs	r3, #2
 800122c:	2e0f      	cmp	r6, #15
 800122e:	d10c      	bne.n	800124a <__aeabi_dmul+0x54a>
 8001230:	2480      	movs	r4, #128	; 0x80
 8001232:	465b      	mov	r3, fp
 8001234:	0324      	lsls	r4, r4, #12
 8001236:	4223      	tst	r3, r4
 8001238:	d00e      	beq.n	8001258 <__aeabi_dmul+0x558>
 800123a:	4221      	tst	r1, r4
 800123c:	d10c      	bne.n	8001258 <__aeabi_dmul+0x558>
 800123e:	430c      	orrs	r4, r1
 8001240:	0324      	lsls	r4, r4, #12
 8001242:	003a      	movs	r2, r7
 8001244:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <__aeabi_dmul+0x580>)
 8001246:	0b24      	lsrs	r4, r4, #12
 8001248:	e5cc      	b.n	8000de4 <__aeabi_dmul+0xe4>
 800124a:	2e0b      	cmp	r6, #11
 800124c:	d000      	beq.n	8001250 <__aeabi_dmul+0x550>
 800124e:	e5a2      	b.n	8000d96 <__aeabi_dmul+0x96>
 8001250:	468b      	mov	fp, r1
 8001252:	46aa      	mov	sl, r5
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	e5f7      	b.n	8000e48 <__aeabi_dmul+0x148>
 8001258:	2480      	movs	r4, #128	; 0x80
 800125a:	465b      	mov	r3, fp
 800125c:	0324      	lsls	r4, r4, #12
 800125e:	431c      	orrs	r4, r3
 8001260:	0324      	lsls	r4, r4, #12
 8001262:	4642      	mov	r2, r8
 8001264:	4655      	mov	r5, sl
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <__aeabi_dmul+0x580>)
 8001268:	0b24      	lsrs	r4, r4, #12
 800126a:	e5bb      	b.n	8000de4 <__aeabi_dmul+0xe4>
 800126c:	464d      	mov	r5, r9
 800126e:	0021      	movs	r1, r4
 8001270:	2303      	movs	r3, #3
 8001272:	e7db      	b.n	800122c <__aeabi_dmul+0x52c>
 8001274:	fffffc0d 	.word	0xfffffc0d
 8001278:	0000043e 	.word	0x0000043e
 800127c:	0000041e 	.word	0x0000041e
 8001280:	000007ff 	.word	0x000007ff

08001284 <__aeabi_dsub>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	4657      	mov	r7, sl
 8001288:	464e      	mov	r6, r9
 800128a:	4645      	mov	r5, r8
 800128c:	46de      	mov	lr, fp
 800128e:	b5e0      	push	{r5, r6, r7, lr}
 8001290:	000d      	movs	r5, r1
 8001292:	0004      	movs	r4, r0
 8001294:	0019      	movs	r1, r3
 8001296:	0010      	movs	r0, r2
 8001298:	032b      	lsls	r3, r5, #12
 800129a:	0a5b      	lsrs	r3, r3, #9
 800129c:	0f62      	lsrs	r2, r4, #29
 800129e:	431a      	orrs	r2, r3
 80012a0:	00e3      	lsls	r3, r4, #3
 80012a2:	030c      	lsls	r4, r1, #12
 80012a4:	0a64      	lsrs	r4, r4, #9
 80012a6:	0f47      	lsrs	r7, r0, #29
 80012a8:	4327      	orrs	r7, r4
 80012aa:	4cd0      	ldr	r4, [pc, #832]	; (80015ec <__aeabi_dsub+0x368>)
 80012ac:	006e      	lsls	r6, r5, #1
 80012ae:	4691      	mov	r9, r2
 80012b0:	b083      	sub	sp, #12
 80012b2:	004a      	lsls	r2, r1, #1
 80012b4:	00c0      	lsls	r0, r0, #3
 80012b6:	4698      	mov	r8, r3
 80012b8:	46a2      	mov	sl, r4
 80012ba:	0d76      	lsrs	r6, r6, #21
 80012bc:	0fed      	lsrs	r5, r5, #31
 80012be:	0d52      	lsrs	r2, r2, #21
 80012c0:	0fc9      	lsrs	r1, r1, #31
 80012c2:	9001      	str	r0, [sp, #4]
 80012c4:	42a2      	cmp	r2, r4
 80012c6:	d100      	bne.n	80012ca <__aeabi_dsub+0x46>
 80012c8:	e0b9      	b.n	800143e <__aeabi_dsub+0x1ba>
 80012ca:	2401      	movs	r4, #1
 80012cc:	4061      	eors	r1, r4
 80012ce:	468b      	mov	fp, r1
 80012d0:	428d      	cmp	r5, r1
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dsub+0x52>
 80012d4:	e08d      	b.n	80013f2 <__aeabi_dsub+0x16e>
 80012d6:	1ab4      	subs	r4, r6, r2
 80012d8:	46a4      	mov	ip, r4
 80012da:	2c00      	cmp	r4, #0
 80012dc:	dc00      	bgt.n	80012e0 <__aeabi_dsub+0x5c>
 80012de:	e0b7      	b.n	8001450 <__aeabi_dsub+0x1cc>
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x62>
 80012e4:	e0cb      	b.n	800147e <__aeabi_dsub+0x1fa>
 80012e6:	4ac1      	ldr	r2, [pc, #772]	; (80015ec <__aeabi_dsub+0x368>)
 80012e8:	4296      	cmp	r6, r2
 80012ea:	d100      	bne.n	80012ee <__aeabi_dsub+0x6a>
 80012ec:	e186      	b.n	80015fc <__aeabi_dsub+0x378>
 80012ee:	2280      	movs	r2, #128	; 0x80
 80012f0:	0412      	lsls	r2, r2, #16
 80012f2:	4317      	orrs	r7, r2
 80012f4:	4662      	mov	r2, ip
 80012f6:	2a38      	cmp	r2, #56	; 0x38
 80012f8:	dd00      	ble.n	80012fc <__aeabi_dsub+0x78>
 80012fa:	e1a4      	b.n	8001646 <__aeabi_dsub+0x3c2>
 80012fc:	2a1f      	cmp	r2, #31
 80012fe:	dd00      	ble.n	8001302 <__aeabi_dsub+0x7e>
 8001300:	e21d      	b.n	800173e <__aeabi_dsub+0x4ba>
 8001302:	4661      	mov	r1, ip
 8001304:	2220      	movs	r2, #32
 8001306:	003c      	movs	r4, r7
 8001308:	1a52      	subs	r2, r2, r1
 800130a:	0001      	movs	r1, r0
 800130c:	4090      	lsls	r0, r2
 800130e:	4094      	lsls	r4, r2
 8001310:	1e42      	subs	r2, r0, #1
 8001312:	4190      	sbcs	r0, r2
 8001314:	4662      	mov	r2, ip
 8001316:	46a0      	mov	r8, r4
 8001318:	4664      	mov	r4, ip
 800131a:	40d7      	lsrs	r7, r2
 800131c:	464a      	mov	r2, r9
 800131e:	40e1      	lsrs	r1, r4
 8001320:	4644      	mov	r4, r8
 8001322:	1bd2      	subs	r2, r2, r7
 8001324:	4691      	mov	r9, r2
 8001326:	430c      	orrs	r4, r1
 8001328:	4304      	orrs	r4, r0
 800132a:	1b1c      	subs	r4, r3, r4
 800132c:	42a3      	cmp	r3, r4
 800132e:	4192      	sbcs	r2, r2
 8001330:	464b      	mov	r3, r9
 8001332:	4252      	negs	r2, r2
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	469a      	mov	sl, r3
 8001338:	4653      	mov	r3, sl
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	d400      	bmi.n	8001340 <__aeabi_dsub+0xbc>
 800133e:	e12b      	b.n	8001598 <__aeabi_dsub+0x314>
 8001340:	4653      	mov	r3, sl
 8001342:	025a      	lsls	r2, r3, #9
 8001344:	0a53      	lsrs	r3, r2, #9
 8001346:	469a      	mov	sl, r3
 8001348:	4653      	mov	r3, sl
 800134a:	2b00      	cmp	r3, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_dsub+0xcc>
 800134e:	e166      	b.n	800161e <__aeabi_dsub+0x39a>
 8001350:	4650      	mov	r0, sl
 8001352:	f000 fb7f 	bl	8001a54 <__clzsi2>
 8001356:	0003      	movs	r3, r0
 8001358:	3b08      	subs	r3, #8
 800135a:	2220      	movs	r2, #32
 800135c:	0020      	movs	r0, r4
 800135e:	1ad2      	subs	r2, r2, r3
 8001360:	4651      	mov	r1, sl
 8001362:	40d0      	lsrs	r0, r2
 8001364:	4099      	lsls	r1, r3
 8001366:	0002      	movs	r2, r0
 8001368:	409c      	lsls	r4, r3
 800136a:	430a      	orrs	r2, r1
 800136c:	429e      	cmp	r6, r3
 800136e:	dd00      	ble.n	8001372 <__aeabi_dsub+0xee>
 8001370:	e164      	b.n	800163c <__aeabi_dsub+0x3b8>
 8001372:	1b9b      	subs	r3, r3, r6
 8001374:	1c59      	adds	r1, r3, #1
 8001376:	291f      	cmp	r1, #31
 8001378:	dd00      	ble.n	800137c <__aeabi_dsub+0xf8>
 800137a:	e0fe      	b.n	800157a <__aeabi_dsub+0x2f6>
 800137c:	2320      	movs	r3, #32
 800137e:	0010      	movs	r0, r2
 8001380:	0026      	movs	r6, r4
 8001382:	1a5b      	subs	r3, r3, r1
 8001384:	409c      	lsls	r4, r3
 8001386:	4098      	lsls	r0, r3
 8001388:	40ce      	lsrs	r6, r1
 800138a:	40ca      	lsrs	r2, r1
 800138c:	1e63      	subs	r3, r4, #1
 800138e:	419c      	sbcs	r4, r3
 8001390:	4330      	orrs	r0, r6
 8001392:	4692      	mov	sl, r2
 8001394:	2600      	movs	r6, #0
 8001396:	4304      	orrs	r4, r0
 8001398:	0763      	lsls	r3, r4, #29
 800139a:	d009      	beq.n	80013b0 <__aeabi_dsub+0x12c>
 800139c:	230f      	movs	r3, #15
 800139e:	4023      	ands	r3, r4
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d005      	beq.n	80013b0 <__aeabi_dsub+0x12c>
 80013a4:	1d23      	adds	r3, r4, #4
 80013a6:	42a3      	cmp	r3, r4
 80013a8:	41a4      	sbcs	r4, r4
 80013aa:	4264      	negs	r4, r4
 80013ac:	44a2      	add	sl, r4
 80013ae:	001c      	movs	r4, r3
 80013b0:	4653      	mov	r3, sl
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	d400      	bmi.n	80013b8 <__aeabi_dsub+0x134>
 80013b6:	e0f2      	b.n	800159e <__aeabi_dsub+0x31a>
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <__aeabi_dsub+0x368>)
 80013ba:	3601      	adds	r6, #1
 80013bc:	429e      	cmp	r6, r3
 80013be:	d100      	bne.n	80013c2 <__aeabi_dsub+0x13e>
 80013c0:	e10f      	b.n	80015e2 <__aeabi_dsub+0x35e>
 80013c2:	4653      	mov	r3, sl
 80013c4:	498a      	ldr	r1, [pc, #552]	; (80015f0 <__aeabi_dsub+0x36c>)
 80013c6:	08e4      	lsrs	r4, r4, #3
 80013c8:	400b      	ands	r3, r1
 80013ca:	0019      	movs	r1, r3
 80013cc:	075b      	lsls	r3, r3, #29
 80013ce:	4323      	orrs	r3, r4
 80013d0:	0572      	lsls	r2, r6, #21
 80013d2:	024c      	lsls	r4, r1, #9
 80013d4:	0b24      	lsrs	r4, r4, #12
 80013d6:	0d52      	lsrs	r2, r2, #21
 80013d8:	0512      	lsls	r2, r2, #20
 80013da:	4322      	orrs	r2, r4
 80013dc:	07ed      	lsls	r5, r5, #31
 80013de:	432a      	orrs	r2, r5
 80013e0:	0018      	movs	r0, r3
 80013e2:	0011      	movs	r1, r2
 80013e4:	b003      	add	sp, #12
 80013e6:	bcf0      	pop	{r4, r5, r6, r7}
 80013e8:	46bb      	mov	fp, r7
 80013ea:	46b2      	mov	sl, r6
 80013ec:	46a9      	mov	r9, r5
 80013ee:	46a0      	mov	r8, r4
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f2:	1ab4      	subs	r4, r6, r2
 80013f4:	46a4      	mov	ip, r4
 80013f6:	2c00      	cmp	r4, #0
 80013f8:	dd59      	ble.n	80014ae <__aeabi_dsub+0x22a>
 80013fa:	2a00      	cmp	r2, #0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dsub+0x17c>
 80013fe:	e0b0      	b.n	8001562 <__aeabi_dsub+0x2de>
 8001400:	4556      	cmp	r6, sl
 8001402:	d100      	bne.n	8001406 <__aeabi_dsub+0x182>
 8001404:	e0fa      	b.n	80015fc <__aeabi_dsub+0x378>
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0412      	lsls	r2, r2, #16
 800140a:	4317      	orrs	r7, r2
 800140c:	4662      	mov	r2, ip
 800140e:	2a38      	cmp	r2, #56	; 0x38
 8001410:	dd00      	ble.n	8001414 <__aeabi_dsub+0x190>
 8001412:	e0d4      	b.n	80015be <__aeabi_dsub+0x33a>
 8001414:	2a1f      	cmp	r2, #31
 8001416:	dc00      	bgt.n	800141a <__aeabi_dsub+0x196>
 8001418:	e1c0      	b.n	800179c <__aeabi_dsub+0x518>
 800141a:	0039      	movs	r1, r7
 800141c:	3a20      	subs	r2, #32
 800141e:	40d1      	lsrs	r1, r2
 8001420:	4662      	mov	r2, ip
 8001422:	2a20      	cmp	r2, #32
 8001424:	d006      	beq.n	8001434 <__aeabi_dsub+0x1b0>
 8001426:	4664      	mov	r4, ip
 8001428:	2240      	movs	r2, #64	; 0x40
 800142a:	1b12      	subs	r2, r2, r4
 800142c:	003c      	movs	r4, r7
 800142e:	4094      	lsls	r4, r2
 8001430:	4304      	orrs	r4, r0
 8001432:	9401      	str	r4, [sp, #4]
 8001434:	9c01      	ldr	r4, [sp, #4]
 8001436:	1e62      	subs	r2, r4, #1
 8001438:	4194      	sbcs	r4, r2
 800143a:	430c      	orrs	r4, r1
 800143c:	e0c3      	b.n	80015c6 <__aeabi_dsub+0x342>
 800143e:	003c      	movs	r4, r7
 8001440:	4304      	orrs	r4, r0
 8001442:	d02b      	beq.n	800149c <__aeabi_dsub+0x218>
 8001444:	468b      	mov	fp, r1
 8001446:	428d      	cmp	r5, r1
 8001448:	d02e      	beq.n	80014a8 <__aeabi_dsub+0x224>
 800144a:	4c6a      	ldr	r4, [pc, #424]	; (80015f4 <__aeabi_dsub+0x370>)
 800144c:	46a4      	mov	ip, r4
 800144e:	44b4      	add	ip, r6
 8001450:	4664      	mov	r4, ip
 8001452:	2c00      	cmp	r4, #0
 8001454:	d05f      	beq.n	8001516 <__aeabi_dsub+0x292>
 8001456:	1b94      	subs	r4, r2, r6
 8001458:	46a4      	mov	ip, r4
 800145a:	2e00      	cmp	r6, #0
 800145c:	d000      	beq.n	8001460 <__aeabi_dsub+0x1dc>
 800145e:	e120      	b.n	80016a2 <__aeabi_dsub+0x41e>
 8001460:	464c      	mov	r4, r9
 8001462:	431c      	orrs	r4, r3
 8001464:	d100      	bne.n	8001468 <__aeabi_dsub+0x1e4>
 8001466:	e1c7      	b.n	80017f8 <__aeabi_dsub+0x574>
 8001468:	4661      	mov	r1, ip
 800146a:	1e4c      	subs	r4, r1, #1
 800146c:	2901      	cmp	r1, #1
 800146e:	d100      	bne.n	8001472 <__aeabi_dsub+0x1ee>
 8001470:	e223      	b.n	80018ba <__aeabi_dsub+0x636>
 8001472:	4d5e      	ldr	r5, [pc, #376]	; (80015ec <__aeabi_dsub+0x368>)
 8001474:	45ac      	cmp	ip, r5
 8001476:	d100      	bne.n	800147a <__aeabi_dsub+0x1f6>
 8001478:	e1d8      	b.n	800182c <__aeabi_dsub+0x5a8>
 800147a:	46a4      	mov	ip, r4
 800147c:	e11a      	b.n	80016b4 <__aeabi_dsub+0x430>
 800147e:	003a      	movs	r2, r7
 8001480:	4302      	orrs	r2, r0
 8001482:	d100      	bne.n	8001486 <__aeabi_dsub+0x202>
 8001484:	e0e4      	b.n	8001650 <__aeabi_dsub+0x3cc>
 8001486:	0022      	movs	r2, r4
 8001488:	3a01      	subs	r2, #1
 800148a:	2c01      	cmp	r4, #1
 800148c:	d100      	bne.n	8001490 <__aeabi_dsub+0x20c>
 800148e:	e1c3      	b.n	8001818 <__aeabi_dsub+0x594>
 8001490:	4956      	ldr	r1, [pc, #344]	; (80015ec <__aeabi_dsub+0x368>)
 8001492:	428c      	cmp	r4, r1
 8001494:	d100      	bne.n	8001498 <__aeabi_dsub+0x214>
 8001496:	e0b1      	b.n	80015fc <__aeabi_dsub+0x378>
 8001498:	4694      	mov	ip, r2
 800149a:	e72b      	b.n	80012f4 <__aeabi_dsub+0x70>
 800149c:	2401      	movs	r4, #1
 800149e:	4061      	eors	r1, r4
 80014a0:	468b      	mov	fp, r1
 80014a2:	428d      	cmp	r5, r1
 80014a4:	d000      	beq.n	80014a8 <__aeabi_dsub+0x224>
 80014a6:	e716      	b.n	80012d6 <__aeabi_dsub+0x52>
 80014a8:	4952      	ldr	r1, [pc, #328]	; (80015f4 <__aeabi_dsub+0x370>)
 80014aa:	468c      	mov	ip, r1
 80014ac:	44b4      	add	ip, r6
 80014ae:	4664      	mov	r4, ip
 80014b0:	2c00      	cmp	r4, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_dsub+0x232>
 80014b4:	e0d3      	b.n	800165e <__aeabi_dsub+0x3da>
 80014b6:	1b91      	subs	r1, r2, r6
 80014b8:	468c      	mov	ip, r1
 80014ba:	2e00      	cmp	r6, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_dsub+0x23c>
 80014be:	e15e      	b.n	800177e <__aeabi_dsub+0x4fa>
 80014c0:	494a      	ldr	r1, [pc, #296]	; (80015ec <__aeabi_dsub+0x368>)
 80014c2:	428a      	cmp	r2, r1
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dsub+0x244>
 80014c6:	e1be      	b.n	8001846 <__aeabi_dsub+0x5c2>
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	464c      	mov	r4, r9
 80014cc:	0409      	lsls	r1, r1, #16
 80014ce:	430c      	orrs	r4, r1
 80014d0:	46a1      	mov	r9, r4
 80014d2:	4661      	mov	r1, ip
 80014d4:	2938      	cmp	r1, #56	; 0x38
 80014d6:	dd00      	ble.n	80014da <__aeabi_dsub+0x256>
 80014d8:	e1ba      	b.n	8001850 <__aeabi_dsub+0x5cc>
 80014da:	291f      	cmp	r1, #31
 80014dc:	dd00      	ble.n	80014e0 <__aeabi_dsub+0x25c>
 80014de:	e227      	b.n	8001930 <__aeabi_dsub+0x6ac>
 80014e0:	2420      	movs	r4, #32
 80014e2:	1a64      	subs	r4, r4, r1
 80014e4:	4649      	mov	r1, r9
 80014e6:	40a1      	lsls	r1, r4
 80014e8:	001e      	movs	r6, r3
 80014ea:	4688      	mov	r8, r1
 80014ec:	4661      	mov	r1, ip
 80014ee:	40a3      	lsls	r3, r4
 80014f0:	40ce      	lsrs	r6, r1
 80014f2:	4641      	mov	r1, r8
 80014f4:	1e5c      	subs	r4, r3, #1
 80014f6:	41a3      	sbcs	r3, r4
 80014f8:	4331      	orrs	r1, r6
 80014fa:	4319      	orrs	r1, r3
 80014fc:	000c      	movs	r4, r1
 80014fe:	4663      	mov	r3, ip
 8001500:	4649      	mov	r1, r9
 8001502:	40d9      	lsrs	r1, r3
 8001504:	187f      	adds	r7, r7, r1
 8001506:	1824      	adds	r4, r4, r0
 8001508:	4284      	cmp	r4, r0
 800150a:	419b      	sbcs	r3, r3
 800150c:	425b      	negs	r3, r3
 800150e:	469a      	mov	sl, r3
 8001510:	0016      	movs	r6, r2
 8001512:	44ba      	add	sl, r7
 8001514:	e05d      	b.n	80015d2 <__aeabi_dsub+0x34e>
 8001516:	4c38      	ldr	r4, [pc, #224]	; (80015f8 <__aeabi_dsub+0x374>)
 8001518:	1c72      	adds	r2, r6, #1
 800151a:	4222      	tst	r2, r4
 800151c:	d000      	beq.n	8001520 <__aeabi_dsub+0x29c>
 800151e:	e0df      	b.n	80016e0 <__aeabi_dsub+0x45c>
 8001520:	464a      	mov	r2, r9
 8001522:	431a      	orrs	r2, r3
 8001524:	2e00      	cmp	r6, #0
 8001526:	d000      	beq.n	800152a <__aeabi_dsub+0x2a6>
 8001528:	e15c      	b.n	80017e4 <__aeabi_dsub+0x560>
 800152a:	2a00      	cmp	r2, #0
 800152c:	d100      	bne.n	8001530 <__aeabi_dsub+0x2ac>
 800152e:	e1cf      	b.n	80018d0 <__aeabi_dsub+0x64c>
 8001530:	003a      	movs	r2, r7
 8001532:	4302      	orrs	r2, r0
 8001534:	d100      	bne.n	8001538 <__aeabi_dsub+0x2b4>
 8001536:	e17f      	b.n	8001838 <__aeabi_dsub+0x5b4>
 8001538:	1a1c      	subs	r4, r3, r0
 800153a:	464a      	mov	r2, r9
 800153c:	42a3      	cmp	r3, r4
 800153e:	4189      	sbcs	r1, r1
 8001540:	1bd2      	subs	r2, r2, r7
 8001542:	4249      	negs	r1, r1
 8001544:	1a52      	subs	r2, r2, r1
 8001546:	4692      	mov	sl, r2
 8001548:	0212      	lsls	r2, r2, #8
 800154a:	d400      	bmi.n	800154e <__aeabi_dsub+0x2ca>
 800154c:	e20a      	b.n	8001964 <__aeabi_dsub+0x6e0>
 800154e:	1ac4      	subs	r4, r0, r3
 8001550:	42a0      	cmp	r0, r4
 8001552:	4180      	sbcs	r0, r0
 8001554:	464b      	mov	r3, r9
 8001556:	4240      	negs	r0, r0
 8001558:	1aff      	subs	r7, r7, r3
 800155a:	1a3b      	subs	r3, r7, r0
 800155c:	469a      	mov	sl, r3
 800155e:	465d      	mov	r5, fp
 8001560:	e71a      	b.n	8001398 <__aeabi_dsub+0x114>
 8001562:	003a      	movs	r2, r7
 8001564:	4302      	orrs	r2, r0
 8001566:	d073      	beq.n	8001650 <__aeabi_dsub+0x3cc>
 8001568:	0022      	movs	r2, r4
 800156a:	3a01      	subs	r2, #1
 800156c:	2c01      	cmp	r4, #1
 800156e:	d100      	bne.n	8001572 <__aeabi_dsub+0x2ee>
 8001570:	e0cb      	b.n	800170a <__aeabi_dsub+0x486>
 8001572:	4554      	cmp	r4, sl
 8001574:	d042      	beq.n	80015fc <__aeabi_dsub+0x378>
 8001576:	4694      	mov	ip, r2
 8001578:	e748      	b.n	800140c <__aeabi_dsub+0x188>
 800157a:	0010      	movs	r0, r2
 800157c:	3b1f      	subs	r3, #31
 800157e:	40d8      	lsrs	r0, r3
 8001580:	2920      	cmp	r1, #32
 8001582:	d003      	beq.n	800158c <__aeabi_dsub+0x308>
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	409a      	lsls	r2, r3
 800158a:	4314      	orrs	r4, r2
 800158c:	1e63      	subs	r3, r4, #1
 800158e:	419c      	sbcs	r4, r3
 8001590:	2300      	movs	r3, #0
 8001592:	2600      	movs	r6, #0
 8001594:	469a      	mov	sl, r3
 8001596:	4304      	orrs	r4, r0
 8001598:	0763      	lsls	r3, r4, #29
 800159a:	d000      	beq.n	800159e <__aeabi_dsub+0x31a>
 800159c:	e6fe      	b.n	800139c <__aeabi_dsub+0x118>
 800159e:	4652      	mov	r2, sl
 80015a0:	08e3      	lsrs	r3, r4, #3
 80015a2:	0752      	lsls	r2, r2, #29
 80015a4:	4313      	orrs	r3, r2
 80015a6:	4652      	mov	r2, sl
 80015a8:	46b4      	mov	ip, r6
 80015aa:	08d2      	lsrs	r2, r2, #3
 80015ac:	490f      	ldr	r1, [pc, #60]	; (80015ec <__aeabi_dsub+0x368>)
 80015ae:	458c      	cmp	ip, r1
 80015b0:	d02a      	beq.n	8001608 <__aeabi_dsub+0x384>
 80015b2:	0312      	lsls	r2, r2, #12
 80015b4:	0b14      	lsrs	r4, r2, #12
 80015b6:	4662      	mov	r2, ip
 80015b8:	0552      	lsls	r2, r2, #21
 80015ba:	0d52      	lsrs	r2, r2, #21
 80015bc:	e70c      	b.n	80013d8 <__aeabi_dsub+0x154>
 80015be:	003c      	movs	r4, r7
 80015c0:	4304      	orrs	r4, r0
 80015c2:	1e62      	subs	r2, r4, #1
 80015c4:	4194      	sbcs	r4, r2
 80015c6:	18e4      	adds	r4, r4, r3
 80015c8:	429c      	cmp	r4, r3
 80015ca:	4192      	sbcs	r2, r2
 80015cc:	4252      	negs	r2, r2
 80015ce:	444a      	add	r2, r9
 80015d0:	4692      	mov	sl, r2
 80015d2:	4653      	mov	r3, sl
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	d5df      	bpl.n	8001598 <__aeabi_dsub+0x314>
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__aeabi_dsub+0x368>)
 80015da:	3601      	adds	r6, #1
 80015dc:	429e      	cmp	r6, r3
 80015de:	d000      	beq.n	80015e2 <__aeabi_dsub+0x35e>
 80015e0:	e0a0      	b.n	8001724 <__aeabi_dsub+0x4a0>
 80015e2:	0032      	movs	r2, r6
 80015e4:	2400      	movs	r4, #0
 80015e6:	2300      	movs	r3, #0
 80015e8:	e6f6      	b.n	80013d8 <__aeabi_dsub+0x154>
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	000007ff 	.word	0x000007ff
 80015f0:	ff7fffff 	.word	0xff7fffff
 80015f4:	fffff801 	.word	0xfffff801
 80015f8:	000007fe 	.word	0x000007fe
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	464a      	mov	r2, r9
 8001600:	0752      	lsls	r2, r2, #29
 8001602:	4313      	orrs	r3, r2
 8001604:	464a      	mov	r2, r9
 8001606:	08d2      	lsrs	r2, r2, #3
 8001608:	0019      	movs	r1, r3
 800160a:	4311      	orrs	r1, r2
 800160c:	d100      	bne.n	8001610 <__aeabi_dsub+0x38c>
 800160e:	e1b5      	b.n	800197c <__aeabi_dsub+0x6f8>
 8001610:	2480      	movs	r4, #128	; 0x80
 8001612:	0324      	lsls	r4, r4, #12
 8001614:	4314      	orrs	r4, r2
 8001616:	0324      	lsls	r4, r4, #12
 8001618:	4ad5      	ldr	r2, [pc, #852]	; (8001970 <__aeabi_dsub+0x6ec>)
 800161a:	0b24      	lsrs	r4, r4, #12
 800161c:	e6dc      	b.n	80013d8 <__aeabi_dsub+0x154>
 800161e:	0020      	movs	r0, r4
 8001620:	f000 fa18 	bl	8001a54 <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3318      	adds	r3, #24
 8001628:	2b1f      	cmp	r3, #31
 800162a:	dc00      	bgt.n	800162e <__aeabi_dsub+0x3aa>
 800162c:	e695      	b.n	800135a <__aeabi_dsub+0xd6>
 800162e:	0022      	movs	r2, r4
 8001630:	3808      	subs	r0, #8
 8001632:	4082      	lsls	r2, r0
 8001634:	2400      	movs	r4, #0
 8001636:	429e      	cmp	r6, r3
 8001638:	dc00      	bgt.n	800163c <__aeabi_dsub+0x3b8>
 800163a:	e69a      	b.n	8001372 <__aeabi_dsub+0xee>
 800163c:	1af6      	subs	r6, r6, r3
 800163e:	4bcd      	ldr	r3, [pc, #820]	; (8001974 <__aeabi_dsub+0x6f0>)
 8001640:	401a      	ands	r2, r3
 8001642:	4692      	mov	sl, r2
 8001644:	e6a8      	b.n	8001398 <__aeabi_dsub+0x114>
 8001646:	003c      	movs	r4, r7
 8001648:	4304      	orrs	r4, r0
 800164a:	1e62      	subs	r2, r4, #1
 800164c:	4194      	sbcs	r4, r2
 800164e:	e66c      	b.n	800132a <__aeabi_dsub+0xa6>
 8001650:	464a      	mov	r2, r9
 8001652:	08db      	lsrs	r3, r3, #3
 8001654:	0752      	lsls	r2, r2, #29
 8001656:	4313      	orrs	r3, r2
 8001658:	464a      	mov	r2, r9
 800165a:	08d2      	lsrs	r2, r2, #3
 800165c:	e7a6      	b.n	80015ac <__aeabi_dsub+0x328>
 800165e:	4cc6      	ldr	r4, [pc, #792]	; (8001978 <__aeabi_dsub+0x6f4>)
 8001660:	1c72      	adds	r2, r6, #1
 8001662:	4222      	tst	r2, r4
 8001664:	d000      	beq.n	8001668 <__aeabi_dsub+0x3e4>
 8001666:	e0ac      	b.n	80017c2 <__aeabi_dsub+0x53e>
 8001668:	464a      	mov	r2, r9
 800166a:	431a      	orrs	r2, r3
 800166c:	2e00      	cmp	r6, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dsub+0x3ee>
 8001670:	e105      	b.n	800187e <__aeabi_dsub+0x5fa>
 8001672:	2a00      	cmp	r2, #0
 8001674:	d100      	bne.n	8001678 <__aeabi_dsub+0x3f4>
 8001676:	e156      	b.n	8001926 <__aeabi_dsub+0x6a2>
 8001678:	003a      	movs	r2, r7
 800167a:	4302      	orrs	r2, r0
 800167c:	d100      	bne.n	8001680 <__aeabi_dsub+0x3fc>
 800167e:	e0db      	b.n	8001838 <__aeabi_dsub+0x5b4>
 8001680:	181c      	adds	r4, r3, r0
 8001682:	429c      	cmp	r4, r3
 8001684:	419b      	sbcs	r3, r3
 8001686:	444f      	add	r7, r9
 8001688:	46ba      	mov	sl, r7
 800168a:	425b      	negs	r3, r3
 800168c:	449a      	add	sl, r3
 800168e:	4653      	mov	r3, sl
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dsub+0x412>
 8001694:	e780      	b.n	8001598 <__aeabi_dsub+0x314>
 8001696:	4652      	mov	r2, sl
 8001698:	4bb6      	ldr	r3, [pc, #728]	; (8001974 <__aeabi_dsub+0x6f0>)
 800169a:	2601      	movs	r6, #1
 800169c:	401a      	ands	r2, r3
 800169e:	4692      	mov	sl, r2
 80016a0:	e77a      	b.n	8001598 <__aeabi_dsub+0x314>
 80016a2:	4cb3      	ldr	r4, [pc, #716]	; (8001970 <__aeabi_dsub+0x6ec>)
 80016a4:	42a2      	cmp	r2, r4
 80016a6:	d100      	bne.n	80016aa <__aeabi_dsub+0x426>
 80016a8:	e0c0      	b.n	800182c <__aeabi_dsub+0x5a8>
 80016aa:	2480      	movs	r4, #128	; 0x80
 80016ac:	464d      	mov	r5, r9
 80016ae:	0424      	lsls	r4, r4, #16
 80016b0:	4325      	orrs	r5, r4
 80016b2:	46a9      	mov	r9, r5
 80016b4:	4664      	mov	r4, ip
 80016b6:	2c38      	cmp	r4, #56	; 0x38
 80016b8:	dc53      	bgt.n	8001762 <__aeabi_dsub+0x4de>
 80016ba:	4661      	mov	r1, ip
 80016bc:	2c1f      	cmp	r4, #31
 80016be:	dd00      	ble.n	80016c2 <__aeabi_dsub+0x43e>
 80016c0:	e0cd      	b.n	800185e <__aeabi_dsub+0x5da>
 80016c2:	2520      	movs	r5, #32
 80016c4:	001e      	movs	r6, r3
 80016c6:	1b2d      	subs	r5, r5, r4
 80016c8:	464c      	mov	r4, r9
 80016ca:	40ab      	lsls	r3, r5
 80016cc:	40ac      	lsls	r4, r5
 80016ce:	40ce      	lsrs	r6, r1
 80016d0:	1e5d      	subs	r5, r3, #1
 80016d2:	41ab      	sbcs	r3, r5
 80016d4:	4334      	orrs	r4, r6
 80016d6:	4323      	orrs	r3, r4
 80016d8:	464c      	mov	r4, r9
 80016da:	40cc      	lsrs	r4, r1
 80016dc:	1b3f      	subs	r7, r7, r4
 80016de:	e045      	b.n	800176c <__aeabi_dsub+0x4e8>
 80016e0:	464a      	mov	r2, r9
 80016e2:	1a1c      	subs	r4, r3, r0
 80016e4:	1bd1      	subs	r1, r2, r7
 80016e6:	42a3      	cmp	r3, r4
 80016e8:	4192      	sbcs	r2, r2
 80016ea:	4252      	negs	r2, r2
 80016ec:	4692      	mov	sl, r2
 80016ee:	000a      	movs	r2, r1
 80016f0:	4651      	mov	r1, sl
 80016f2:	1a52      	subs	r2, r2, r1
 80016f4:	4692      	mov	sl, r2
 80016f6:	0212      	lsls	r2, r2, #8
 80016f8:	d500      	bpl.n	80016fc <__aeabi_dsub+0x478>
 80016fa:	e083      	b.n	8001804 <__aeabi_dsub+0x580>
 80016fc:	4653      	mov	r3, sl
 80016fe:	4323      	orrs	r3, r4
 8001700:	d000      	beq.n	8001704 <__aeabi_dsub+0x480>
 8001702:	e621      	b.n	8001348 <__aeabi_dsub+0xc4>
 8001704:	2200      	movs	r2, #0
 8001706:	2500      	movs	r5, #0
 8001708:	e753      	b.n	80015b2 <__aeabi_dsub+0x32e>
 800170a:	181c      	adds	r4, r3, r0
 800170c:	429c      	cmp	r4, r3
 800170e:	419b      	sbcs	r3, r3
 8001710:	444f      	add	r7, r9
 8001712:	46ba      	mov	sl, r7
 8001714:	425b      	negs	r3, r3
 8001716:	449a      	add	sl, r3
 8001718:	4653      	mov	r3, sl
 800171a:	2601      	movs	r6, #1
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	d400      	bmi.n	8001722 <__aeabi_dsub+0x49e>
 8001720:	e73a      	b.n	8001598 <__aeabi_dsub+0x314>
 8001722:	2602      	movs	r6, #2
 8001724:	4652      	mov	r2, sl
 8001726:	4b93      	ldr	r3, [pc, #588]	; (8001974 <__aeabi_dsub+0x6f0>)
 8001728:	2101      	movs	r1, #1
 800172a:	401a      	ands	r2, r3
 800172c:	0013      	movs	r3, r2
 800172e:	4021      	ands	r1, r4
 8001730:	0862      	lsrs	r2, r4, #1
 8001732:	430a      	orrs	r2, r1
 8001734:	07dc      	lsls	r4, r3, #31
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	469a      	mov	sl, r3
 800173a:	4314      	orrs	r4, r2
 800173c:	e62c      	b.n	8001398 <__aeabi_dsub+0x114>
 800173e:	0039      	movs	r1, r7
 8001740:	3a20      	subs	r2, #32
 8001742:	40d1      	lsrs	r1, r2
 8001744:	4662      	mov	r2, ip
 8001746:	2a20      	cmp	r2, #32
 8001748:	d006      	beq.n	8001758 <__aeabi_dsub+0x4d4>
 800174a:	4664      	mov	r4, ip
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	1b12      	subs	r2, r2, r4
 8001750:	003c      	movs	r4, r7
 8001752:	4094      	lsls	r4, r2
 8001754:	4304      	orrs	r4, r0
 8001756:	9401      	str	r4, [sp, #4]
 8001758:	9c01      	ldr	r4, [sp, #4]
 800175a:	1e62      	subs	r2, r4, #1
 800175c:	4194      	sbcs	r4, r2
 800175e:	430c      	orrs	r4, r1
 8001760:	e5e3      	b.n	800132a <__aeabi_dsub+0xa6>
 8001762:	4649      	mov	r1, r9
 8001764:	4319      	orrs	r1, r3
 8001766:	000b      	movs	r3, r1
 8001768:	1e5c      	subs	r4, r3, #1
 800176a:	41a3      	sbcs	r3, r4
 800176c:	1ac4      	subs	r4, r0, r3
 800176e:	42a0      	cmp	r0, r4
 8001770:	419b      	sbcs	r3, r3
 8001772:	425b      	negs	r3, r3
 8001774:	1afb      	subs	r3, r7, r3
 8001776:	469a      	mov	sl, r3
 8001778:	465d      	mov	r5, fp
 800177a:	0016      	movs	r6, r2
 800177c:	e5dc      	b.n	8001338 <__aeabi_dsub+0xb4>
 800177e:	4649      	mov	r1, r9
 8001780:	4319      	orrs	r1, r3
 8001782:	d100      	bne.n	8001786 <__aeabi_dsub+0x502>
 8001784:	e0ae      	b.n	80018e4 <__aeabi_dsub+0x660>
 8001786:	4661      	mov	r1, ip
 8001788:	4664      	mov	r4, ip
 800178a:	3901      	subs	r1, #1
 800178c:	2c01      	cmp	r4, #1
 800178e:	d100      	bne.n	8001792 <__aeabi_dsub+0x50e>
 8001790:	e0e0      	b.n	8001954 <__aeabi_dsub+0x6d0>
 8001792:	4c77      	ldr	r4, [pc, #476]	; (8001970 <__aeabi_dsub+0x6ec>)
 8001794:	45a4      	cmp	ip, r4
 8001796:	d056      	beq.n	8001846 <__aeabi_dsub+0x5c2>
 8001798:	468c      	mov	ip, r1
 800179a:	e69a      	b.n	80014d2 <__aeabi_dsub+0x24e>
 800179c:	4661      	mov	r1, ip
 800179e:	2220      	movs	r2, #32
 80017a0:	003c      	movs	r4, r7
 80017a2:	1a52      	subs	r2, r2, r1
 80017a4:	4094      	lsls	r4, r2
 80017a6:	0001      	movs	r1, r0
 80017a8:	4090      	lsls	r0, r2
 80017aa:	46a0      	mov	r8, r4
 80017ac:	4664      	mov	r4, ip
 80017ae:	1e42      	subs	r2, r0, #1
 80017b0:	4190      	sbcs	r0, r2
 80017b2:	4662      	mov	r2, ip
 80017b4:	40e1      	lsrs	r1, r4
 80017b6:	4644      	mov	r4, r8
 80017b8:	40d7      	lsrs	r7, r2
 80017ba:	430c      	orrs	r4, r1
 80017bc:	4304      	orrs	r4, r0
 80017be:	44b9      	add	r9, r7
 80017c0:	e701      	b.n	80015c6 <__aeabi_dsub+0x342>
 80017c2:	496b      	ldr	r1, [pc, #428]	; (8001970 <__aeabi_dsub+0x6ec>)
 80017c4:	428a      	cmp	r2, r1
 80017c6:	d100      	bne.n	80017ca <__aeabi_dsub+0x546>
 80017c8:	e70c      	b.n	80015e4 <__aeabi_dsub+0x360>
 80017ca:	1818      	adds	r0, r3, r0
 80017cc:	4298      	cmp	r0, r3
 80017ce:	419b      	sbcs	r3, r3
 80017d0:	444f      	add	r7, r9
 80017d2:	425b      	negs	r3, r3
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	07dc      	lsls	r4, r3, #31
 80017d8:	0840      	lsrs	r0, r0, #1
 80017da:	085b      	lsrs	r3, r3, #1
 80017dc:	469a      	mov	sl, r3
 80017de:	0016      	movs	r6, r2
 80017e0:	4304      	orrs	r4, r0
 80017e2:	e6d9      	b.n	8001598 <__aeabi_dsub+0x314>
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d000      	beq.n	80017ea <__aeabi_dsub+0x566>
 80017e8:	e081      	b.n	80018ee <__aeabi_dsub+0x66a>
 80017ea:	003b      	movs	r3, r7
 80017ec:	4303      	orrs	r3, r0
 80017ee:	d11d      	bne.n	800182c <__aeabi_dsub+0x5a8>
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	2500      	movs	r5, #0
 80017f4:	0312      	lsls	r2, r2, #12
 80017f6:	e70b      	b.n	8001610 <__aeabi_dsub+0x38c>
 80017f8:	08c0      	lsrs	r0, r0, #3
 80017fa:	077b      	lsls	r3, r7, #29
 80017fc:	465d      	mov	r5, fp
 80017fe:	4303      	orrs	r3, r0
 8001800:	08fa      	lsrs	r2, r7, #3
 8001802:	e6d3      	b.n	80015ac <__aeabi_dsub+0x328>
 8001804:	1ac4      	subs	r4, r0, r3
 8001806:	42a0      	cmp	r0, r4
 8001808:	4180      	sbcs	r0, r0
 800180a:	464b      	mov	r3, r9
 800180c:	4240      	negs	r0, r0
 800180e:	1aff      	subs	r7, r7, r3
 8001810:	1a3b      	subs	r3, r7, r0
 8001812:	469a      	mov	sl, r3
 8001814:	465d      	mov	r5, fp
 8001816:	e597      	b.n	8001348 <__aeabi_dsub+0xc4>
 8001818:	1a1c      	subs	r4, r3, r0
 800181a:	464a      	mov	r2, r9
 800181c:	42a3      	cmp	r3, r4
 800181e:	419b      	sbcs	r3, r3
 8001820:	1bd7      	subs	r7, r2, r7
 8001822:	425b      	negs	r3, r3
 8001824:	1afb      	subs	r3, r7, r3
 8001826:	469a      	mov	sl, r3
 8001828:	2601      	movs	r6, #1
 800182a:	e585      	b.n	8001338 <__aeabi_dsub+0xb4>
 800182c:	08c0      	lsrs	r0, r0, #3
 800182e:	077b      	lsls	r3, r7, #29
 8001830:	465d      	mov	r5, fp
 8001832:	4303      	orrs	r3, r0
 8001834:	08fa      	lsrs	r2, r7, #3
 8001836:	e6e7      	b.n	8001608 <__aeabi_dsub+0x384>
 8001838:	464a      	mov	r2, r9
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	0752      	lsls	r2, r2, #29
 800183e:	4313      	orrs	r3, r2
 8001840:	464a      	mov	r2, r9
 8001842:	08d2      	lsrs	r2, r2, #3
 8001844:	e6b5      	b.n	80015b2 <__aeabi_dsub+0x32e>
 8001846:	08c0      	lsrs	r0, r0, #3
 8001848:	077b      	lsls	r3, r7, #29
 800184a:	4303      	orrs	r3, r0
 800184c:	08fa      	lsrs	r2, r7, #3
 800184e:	e6db      	b.n	8001608 <__aeabi_dsub+0x384>
 8001850:	4649      	mov	r1, r9
 8001852:	4319      	orrs	r1, r3
 8001854:	000b      	movs	r3, r1
 8001856:	1e59      	subs	r1, r3, #1
 8001858:	418b      	sbcs	r3, r1
 800185a:	001c      	movs	r4, r3
 800185c:	e653      	b.n	8001506 <__aeabi_dsub+0x282>
 800185e:	464d      	mov	r5, r9
 8001860:	3c20      	subs	r4, #32
 8001862:	40e5      	lsrs	r5, r4
 8001864:	2920      	cmp	r1, #32
 8001866:	d005      	beq.n	8001874 <__aeabi_dsub+0x5f0>
 8001868:	2440      	movs	r4, #64	; 0x40
 800186a:	1a64      	subs	r4, r4, r1
 800186c:	4649      	mov	r1, r9
 800186e:	40a1      	lsls	r1, r4
 8001870:	430b      	orrs	r3, r1
 8001872:	4698      	mov	r8, r3
 8001874:	4643      	mov	r3, r8
 8001876:	1e5c      	subs	r4, r3, #1
 8001878:	41a3      	sbcs	r3, r4
 800187a:	432b      	orrs	r3, r5
 800187c:	e776      	b.n	800176c <__aeabi_dsub+0x4e8>
 800187e:	2a00      	cmp	r2, #0
 8001880:	d0e1      	beq.n	8001846 <__aeabi_dsub+0x5c2>
 8001882:	003a      	movs	r2, r7
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	4302      	orrs	r2, r0
 8001888:	d100      	bne.n	800188c <__aeabi_dsub+0x608>
 800188a:	e6b8      	b.n	80015fe <__aeabi_dsub+0x37a>
 800188c:	464a      	mov	r2, r9
 800188e:	0752      	lsls	r2, r2, #29
 8001890:	2480      	movs	r4, #128	; 0x80
 8001892:	4313      	orrs	r3, r2
 8001894:	464a      	mov	r2, r9
 8001896:	0324      	lsls	r4, r4, #12
 8001898:	08d2      	lsrs	r2, r2, #3
 800189a:	4222      	tst	r2, r4
 800189c:	d007      	beq.n	80018ae <__aeabi_dsub+0x62a>
 800189e:	08fe      	lsrs	r6, r7, #3
 80018a0:	4226      	tst	r6, r4
 80018a2:	d104      	bne.n	80018ae <__aeabi_dsub+0x62a>
 80018a4:	465d      	mov	r5, fp
 80018a6:	0032      	movs	r2, r6
 80018a8:	08c3      	lsrs	r3, r0, #3
 80018aa:	077f      	lsls	r7, r7, #29
 80018ac:	433b      	orrs	r3, r7
 80018ae:	0f59      	lsrs	r1, r3, #29
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	0749      	lsls	r1, r1, #29
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	430b      	orrs	r3, r1
 80018b8:	e6a6      	b.n	8001608 <__aeabi_dsub+0x384>
 80018ba:	1ac4      	subs	r4, r0, r3
 80018bc:	42a0      	cmp	r0, r4
 80018be:	4180      	sbcs	r0, r0
 80018c0:	464b      	mov	r3, r9
 80018c2:	4240      	negs	r0, r0
 80018c4:	1aff      	subs	r7, r7, r3
 80018c6:	1a3b      	subs	r3, r7, r0
 80018c8:	469a      	mov	sl, r3
 80018ca:	465d      	mov	r5, fp
 80018cc:	2601      	movs	r6, #1
 80018ce:	e533      	b.n	8001338 <__aeabi_dsub+0xb4>
 80018d0:	003b      	movs	r3, r7
 80018d2:	4303      	orrs	r3, r0
 80018d4:	d100      	bne.n	80018d8 <__aeabi_dsub+0x654>
 80018d6:	e715      	b.n	8001704 <__aeabi_dsub+0x480>
 80018d8:	08c0      	lsrs	r0, r0, #3
 80018da:	077b      	lsls	r3, r7, #29
 80018dc:	465d      	mov	r5, fp
 80018de:	4303      	orrs	r3, r0
 80018e0:	08fa      	lsrs	r2, r7, #3
 80018e2:	e666      	b.n	80015b2 <__aeabi_dsub+0x32e>
 80018e4:	08c0      	lsrs	r0, r0, #3
 80018e6:	077b      	lsls	r3, r7, #29
 80018e8:	4303      	orrs	r3, r0
 80018ea:	08fa      	lsrs	r2, r7, #3
 80018ec:	e65e      	b.n	80015ac <__aeabi_dsub+0x328>
 80018ee:	003a      	movs	r2, r7
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	4302      	orrs	r2, r0
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dsub+0x674>
 80018f6:	e682      	b.n	80015fe <__aeabi_dsub+0x37a>
 80018f8:	464a      	mov	r2, r9
 80018fa:	0752      	lsls	r2, r2, #29
 80018fc:	2480      	movs	r4, #128	; 0x80
 80018fe:	4313      	orrs	r3, r2
 8001900:	464a      	mov	r2, r9
 8001902:	0324      	lsls	r4, r4, #12
 8001904:	08d2      	lsrs	r2, r2, #3
 8001906:	4222      	tst	r2, r4
 8001908:	d007      	beq.n	800191a <__aeabi_dsub+0x696>
 800190a:	08fe      	lsrs	r6, r7, #3
 800190c:	4226      	tst	r6, r4
 800190e:	d104      	bne.n	800191a <__aeabi_dsub+0x696>
 8001910:	465d      	mov	r5, fp
 8001912:	0032      	movs	r2, r6
 8001914:	08c3      	lsrs	r3, r0, #3
 8001916:	077f      	lsls	r7, r7, #29
 8001918:	433b      	orrs	r3, r7
 800191a:	0f59      	lsrs	r1, r3, #29
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	08db      	lsrs	r3, r3, #3
 8001920:	0749      	lsls	r1, r1, #29
 8001922:	430b      	orrs	r3, r1
 8001924:	e670      	b.n	8001608 <__aeabi_dsub+0x384>
 8001926:	08c0      	lsrs	r0, r0, #3
 8001928:	077b      	lsls	r3, r7, #29
 800192a:	4303      	orrs	r3, r0
 800192c:	08fa      	lsrs	r2, r7, #3
 800192e:	e640      	b.n	80015b2 <__aeabi_dsub+0x32e>
 8001930:	464c      	mov	r4, r9
 8001932:	3920      	subs	r1, #32
 8001934:	40cc      	lsrs	r4, r1
 8001936:	4661      	mov	r1, ip
 8001938:	2920      	cmp	r1, #32
 800193a:	d006      	beq.n	800194a <__aeabi_dsub+0x6c6>
 800193c:	4666      	mov	r6, ip
 800193e:	2140      	movs	r1, #64	; 0x40
 8001940:	1b89      	subs	r1, r1, r6
 8001942:	464e      	mov	r6, r9
 8001944:	408e      	lsls	r6, r1
 8001946:	4333      	orrs	r3, r6
 8001948:	4698      	mov	r8, r3
 800194a:	4643      	mov	r3, r8
 800194c:	1e59      	subs	r1, r3, #1
 800194e:	418b      	sbcs	r3, r1
 8001950:	431c      	orrs	r4, r3
 8001952:	e5d8      	b.n	8001506 <__aeabi_dsub+0x282>
 8001954:	181c      	adds	r4, r3, r0
 8001956:	4284      	cmp	r4, r0
 8001958:	4180      	sbcs	r0, r0
 800195a:	444f      	add	r7, r9
 800195c:	46ba      	mov	sl, r7
 800195e:	4240      	negs	r0, r0
 8001960:	4482      	add	sl, r0
 8001962:	e6d9      	b.n	8001718 <__aeabi_dsub+0x494>
 8001964:	4653      	mov	r3, sl
 8001966:	4323      	orrs	r3, r4
 8001968:	d100      	bne.n	800196c <__aeabi_dsub+0x6e8>
 800196a:	e6cb      	b.n	8001704 <__aeabi_dsub+0x480>
 800196c:	e614      	b.n	8001598 <__aeabi_dsub+0x314>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	2300      	movs	r3, #0
 800197e:	4a01      	ldr	r2, [pc, #4]	; (8001984 <__aeabi_dsub+0x700>)
 8001980:	001c      	movs	r4, r3
 8001982:	e529      	b.n	80013d8 <__aeabi_dsub+0x154>
 8001984:	000007ff 	.word	0x000007ff

08001988 <__aeabi_d2iz>:
 8001988:	000a      	movs	r2, r1
 800198a:	b530      	push	{r4, r5, lr}
 800198c:	4c13      	ldr	r4, [pc, #76]	; (80019dc <__aeabi_d2iz+0x54>)
 800198e:	0053      	lsls	r3, r2, #1
 8001990:	0309      	lsls	r1, r1, #12
 8001992:	0005      	movs	r5, r0
 8001994:	0b09      	lsrs	r1, r1, #12
 8001996:	2000      	movs	r0, #0
 8001998:	0d5b      	lsrs	r3, r3, #21
 800199a:	0fd2      	lsrs	r2, r2, #31
 800199c:	42a3      	cmp	r3, r4
 800199e:	dd04      	ble.n	80019aa <__aeabi_d2iz+0x22>
 80019a0:	480f      	ldr	r0, [pc, #60]	; (80019e0 <__aeabi_d2iz+0x58>)
 80019a2:	4283      	cmp	r3, r0
 80019a4:	dd02      	ble.n	80019ac <__aeabi_d2iz+0x24>
 80019a6:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <__aeabi_d2iz+0x5c>)
 80019a8:	18d0      	adds	r0, r2, r3
 80019aa:	bd30      	pop	{r4, r5, pc}
 80019ac:	2080      	movs	r0, #128	; 0x80
 80019ae:	0340      	lsls	r0, r0, #13
 80019b0:	4301      	orrs	r1, r0
 80019b2:	480d      	ldr	r0, [pc, #52]	; (80019e8 <__aeabi_d2iz+0x60>)
 80019b4:	1ac0      	subs	r0, r0, r3
 80019b6:	281f      	cmp	r0, #31
 80019b8:	dd08      	ble.n	80019cc <__aeabi_d2iz+0x44>
 80019ba:	480c      	ldr	r0, [pc, #48]	; (80019ec <__aeabi_d2iz+0x64>)
 80019bc:	1ac3      	subs	r3, r0, r3
 80019be:	40d9      	lsrs	r1, r3
 80019c0:	000b      	movs	r3, r1
 80019c2:	4258      	negs	r0, r3
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d1f0      	bne.n	80019aa <__aeabi_d2iz+0x22>
 80019c8:	0018      	movs	r0, r3
 80019ca:	e7ee      	b.n	80019aa <__aeabi_d2iz+0x22>
 80019cc:	4c08      	ldr	r4, [pc, #32]	; (80019f0 <__aeabi_d2iz+0x68>)
 80019ce:	40c5      	lsrs	r5, r0
 80019d0:	46a4      	mov	ip, r4
 80019d2:	4463      	add	r3, ip
 80019d4:	4099      	lsls	r1, r3
 80019d6:	000b      	movs	r3, r1
 80019d8:	432b      	orrs	r3, r5
 80019da:	e7f2      	b.n	80019c2 <__aeabi_d2iz+0x3a>
 80019dc:	000003fe 	.word	0x000003fe
 80019e0:	0000041d 	.word	0x0000041d
 80019e4:	7fffffff 	.word	0x7fffffff
 80019e8:	00000433 	.word	0x00000433
 80019ec:	00000413 	.word	0x00000413
 80019f0:	fffffbed 	.word	0xfffffbed

080019f4 <__aeabi_i2d>:
 80019f4:	b570      	push	{r4, r5, r6, lr}
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d016      	beq.n	8001a28 <__aeabi_i2d+0x34>
 80019fa:	17c3      	asrs	r3, r0, #31
 80019fc:	18c5      	adds	r5, r0, r3
 80019fe:	405d      	eors	r5, r3
 8001a00:	0fc4      	lsrs	r4, r0, #31
 8001a02:	0028      	movs	r0, r5
 8001a04:	f000 f826 	bl	8001a54 <__clzsi2>
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <__aeabi_i2d+0x5c>)
 8001a0a:	1a1b      	subs	r3, r3, r0
 8001a0c:	280a      	cmp	r0, #10
 8001a0e:	dc16      	bgt.n	8001a3e <__aeabi_i2d+0x4a>
 8001a10:	0002      	movs	r2, r0
 8001a12:	002e      	movs	r6, r5
 8001a14:	3215      	adds	r2, #21
 8001a16:	4096      	lsls	r6, r2
 8001a18:	220b      	movs	r2, #11
 8001a1a:	1a12      	subs	r2, r2, r0
 8001a1c:	40d5      	lsrs	r5, r2
 8001a1e:	055b      	lsls	r3, r3, #21
 8001a20:	032d      	lsls	r5, r5, #12
 8001a22:	0b2d      	lsrs	r5, r5, #12
 8001a24:	0d5b      	lsrs	r3, r3, #21
 8001a26:	e003      	b.n	8001a30 <__aeabi_i2d+0x3c>
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	2600      	movs	r6, #0
 8001a30:	051b      	lsls	r3, r3, #20
 8001a32:	432b      	orrs	r3, r5
 8001a34:	07e4      	lsls	r4, r4, #31
 8001a36:	4323      	orrs	r3, r4
 8001a38:	0030      	movs	r0, r6
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	bd70      	pop	{r4, r5, r6, pc}
 8001a3e:	380b      	subs	r0, #11
 8001a40:	4085      	lsls	r5, r0
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	032d      	lsls	r5, r5, #12
 8001a46:	2600      	movs	r6, #0
 8001a48:	0b2d      	lsrs	r5, r5, #12
 8001a4a:	0d5b      	lsrs	r3, r3, #21
 8001a4c:	e7f0      	b.n	8001a30 <__aeabi_i2d+0x3c>
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	0000041e 	.word	0x0000041e

08001a54 <__clzsi2>:
 8001a54:	211c      	movs	r1, #28
 8001a56:	2301      	movs	r3, #1
 8001a58:	041b      	lsls	r3, r3, #16
 8001a5a:	4298      	cmp	r0, r3
 8001a5c:	d301      	bcc.n	8001a62 <__clzsi2+0xe>
 8001a5e:	0c00      	lsrs	r0, r0, #16
 8001a60:	3910      	subs	r1, #16
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	4298      	cmp	r0, r3
 8001a66:	d301      	bcc.n	8001a6c <__clzsi2+0x18>
 8001a68:	0a00      	lsrs	r0, r0, #8
 8001a6a:	3908      	subs	r1, #8
 8001a6c:	091b      	lsrs	r3, r3, #4
 8001a6e:	4298      	cmp	r0, r3
 8001a70:	d301      	bcc.n	8001a76 <__clzsi2+0x22>
 8001a72:	0900      	lsrs	r0, r0, #4
 8001a74:	3904      	subs	r1, #4
 8001a76:	a202      	add	r2, pc, #8	; (adr r2, 8001a80 <__clzsi2+0x2c>)
 8001a78:	5c10      	ldrb	r0, [r2, r0]
 8001a7a:	1840      	adds	r0, r0, r1
 8001a7c:	4770      	bx	lr
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	02020304 	.word	0x02020304
 8001a84:	01010101 	.word	0x01010101
	...

08001a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a90:	b5b0      	push	{r4, r5, r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a96:	f000 ff9d 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f901 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a9e:	f000 faf1 	bl	8002084 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001aa2:	f000 f9c1 	bl	8001e28 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001aa6:	f000 f959 	bl	8001d5c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001aaa:	f000 fa93 	bl	8001fd4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, ENR);
 8001aae:	4b72      	ldr	r3, [pc, #456]	; (8001c78 <main+0x1e8>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	f003 fa70 	bl	8004f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, ENL);
 8001ab8:	4b6f      	ldr	r3, [pc, #444]	; (8001c78 <main+0x1e8>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	0018      	movs	r0, r3
 8001abe:	f003 fa6b 	bl	8004f98 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 8001ac2:	4b6e      	ldr	r3, [pc, #440]	; (8001c7c <main+0x1ec>)
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f003 f9a5 	bl	8004e14 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8001aca:	4b6d      	ldr	r3, [pc, #436]	; (8001c80 <main+0x1f0>)
 8001acc:	0018      	movs	r0, r3
 8001ace:	f001 fb53 	bl	8003178 <HAL_ADC_Start>

  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8001ad2:	4b6c      	ldr	r3, [pc, #432]	; (8001c84 <main+0x1f4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	; (8001c84 <main+0x1f4>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]

  calibrate();
 8001ade:	f000 fd3b 	bl	8002558 <calibrate>
  HAL_Delay(1000);
 8001ae2:	23fa      	movs	r3, #250	; 0xfa
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f000 fffa 	bl	8002ae0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  updateIR();
 8001aec:	f000 fbf8 	bl	80022e0 <updateIR>
//	  } else{
//		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
//	  }


	  motor(left, Forward);
 8001af0:	2101      	movs	r1, #1
 8001af2:	2000      	movs	r0, #0
 8001af4:	f000 fba6 	bl	8002244 <motor>
	  motor(right, Forward);
 8001af8:	2101      	movs	r1, #1
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 fba2 	bl	8002244 <motor>

	  int array_lit_amount = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	e009      	b.n	8001b1e <main+0x8e>
	  {
		  array_lit_amount += digital_IR[i];
 8001b0a:	4b5f      	ldr	r3, [pc, #380]	; (8001c88 <main+0x1f8>)
 8001b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	58d3      	ldr	r3, [r2, r3]
 8001b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	2b07      	cmp	r3, #7
 8001b22:	ddf2      	ble.n	8001b0a <main+0x7a>
	  }

	  float left_sum = - 4 * digital_IR[0] - 3 * digital_IR[1] - 2 * digital_IR[2] - 1 * digital_IR[3];
 8001b24:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <main+0x1f8>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	0013      	movs	r3, r2
 8001b2a:	079b      	lsls	r3, r3, #30
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	001a      	movs	r2, r3
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <main+0x1f8>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	0019      	movs	r1, r3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	1acb      	subs	r3, r1, r3
 8001b3c:	18d2      	adds	r2, r2, r3
 8001b3e:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <main+0x1f8>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	1ad2      	subs	r2, r2, r3
 8001b46:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <main+0x1f8>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7fe fd25 	bl	800059c <__aeabi_i2f>
 8001b52:	1c03      	adds	r3, r0, #0
 8001b54:	61fb      	str	r3, [r7, #28]
	  float right_sum = 1 * digital_IR[4] + 2 * digital_IR[5] + 3 * digital_IR[6] + 4 * digital_IR[7];
 8001b56:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <main+0x1f8>)
 8001b58:	691a      	ldr	r2, [r3, #16]
 8001b5a:	4b4b      	ldr	r3, [pc, #300]	; (8001c88 <main+0x1f8>)
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	18d1      	adds	r1, r2, r3
 8001b62:	4b49      	ldr	r3, [pc, #292]	; (8001c88 <main+0x1f8>)
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	0013      	movs	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	189b      	adds	r3, r3, r2
 8001b6c:	18ca      	adds	r2, r1, r3
 8001b6e:	4b46      	ldr	r3, [pc, #280]	; (8001c88 <main+0x1f8>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	18d3      	adds	r3, r2, r3
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fd10 	bl	800059c <__aeabi_i2f>
 8001b7c:	1c03      	adds	r3, r0, #0
 8001b7e:	61bb      	str	r3, [r7, #24]

	  int position = left_sum + right_sum;
 8001b80:	69b9      	ldr	r1, [r7, #24]
 8001b82:	69f8      	ldr	r0, [r7, #28]
 8001b84:	f7fe fb4a 	bl	800021c <__aeabi_fadd>
 8001b88:	1c03      	adds	r3, r0, #0
 8001b8a:	1c18      	adds	r0, r3, #0
 8001b8c:	f7fe fce6 	bl	800055c <__aeabi_f2iz>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]

	  int derivative = position - prevError;
 8001b94:	6978      	ldr	r0, [r7, #20]
 8001b96:	f7ff ff2d 	bl	80019f4 <__aeabi_i2d>
 8001b9a:	4b3c      	ldr	r3, [pc, #240]	; (8001c8c <main+0x1fc>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f7ff fb70 	bl	8001284 <__aeabi_dsub>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	000b      	movs	r3, r1
 8001ba8:	0010      	movs	r0, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	f7ff feec 	bl	8001988 <__aeabi_d2iz>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]

	  int PID_constant = Kp * position + Kd * derivative;
 8001bb4:	6978      	ldr	r0, [r7, #20]
 8001bb6:	f7ff ff1d 	bl	80019f4 <__aeabi_i2d>
 8001bba:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <main+0x200>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f7ff f89e 	bl	8000d00 <__aeabi_dmul>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	000b      	movs	r3, r1
 8001bc8:	0014      	movs	r4, r2
 8001bca:	001d      	movs	r5, r3
 8001bcc:	6938      	ldr	r0, [r7, #16]
 8001bce:	f7ff ff11 	bl	80019f4 <__aeabi_i2d>
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <main+0x204>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f7ff f892 	bl	8000d00 <__aeabi_dmul>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	000b      	movs	r3, r1
 8001be0:	0020      	movs	r0, r4
 8001be2:	0029      	movs	r1, r5
 8001be4:	f7fe fd2c 	bl	8000640 <__aeabi_dadd>
 8001be8:	0002      	movs	r2, r0
 8001bea:	000b      	movs	r3, r1
 8001bec:	0010      	movs	r0, r2
 8001bee:	0019      	movs	r1, r3
 8001bf0:	f7ff feca 	bl	8001988 <__aeabi_d2iz>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	60fb      	str	r3, [r7, #12]

	  prevError = position;
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f7ff fefb 	bl	80019f4 <__aeabi_i2d>
 8001bfe:	0002      	movs	r2, r0
 8001c00:	000b      	movs	r3, r1
 8001c02:	4922      	ldr	r1, [pc, #136]	; (8001c8c <main+0x1fc>)
 8001c04:	600a      	str	r2, [r1, #0]
 8001c06:	604b      	str	r3, [r1, #4]

	  Drive_constant = 200;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <main+0x208>)
 8001c0a:	22c8      	movs	r2, #200	; 0xc8
 8001c0c:	601a      	str	r2, [r3, #0]

	  int offset = 30; // For correcting motor speeds
 8001c0e:	231e      	movs	r3, #30
 8001c10:	60bb      	str	r3, [r7, #8]
	  int Left_drive = Drive_constant + offset - PID_constant;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <main+0x208>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	18d2      	adds	r2, r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
	  int Right_drive = Drive_constant - offset + PID_constant;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <main+0x208>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	18d3      	adds	r3, r2, r3
 8001c2c:	623b      	str	r3, [r7, #32]

	  const int MIN_VALUE = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	607b      	str	r3, [r7, #4]
	  const int MAX_VALUE = 625;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <main+0x20c>)
 8001c34:	603b      	str	r3, [r7, #0]

	  if (Left_drive < MIN_VALUE) {
 8001c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	da02      	bge.n	8001c44 <main+0x1b4>
	      Left_drive = MIN_VALUE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
 8001c42:	e005      	b.n	8001c50 <main+0x1c0>
	  } else if (Left_drive > MAX_VALUE) {
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dd01      	ble.n	8001c50 <main+0x1c0>
	      Left_drive = MAX_VALUE;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
	  }

	  if (Right_drive < MIN_VALUE) {
 8001c50:	6a3a      	ldr	r2, [r7, #32]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	da02      	bge.n	8001c5e <main+0x1ce>
	      Right_drive = MIN_VALUE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	e005      	b.n	8001c6a <main+0x1da>
	  } else if (Right_drive > MAX_VALUE) {
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dd01      	ble.n	8001c6a <main+0x1da>
	      Right_drive = MAX_VALUE;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	623b      	str	r3, [r7, #32]
	  }

	  speed(Left_drive, Right_drive);
 8001c6a:	6a3a      	ldr	r2, [r7, #32]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 fad3 	bl	800221c <speed>
  {
 8001c76:	e739      	b.n	8001aec <main+0x5c>
 8001c78:	200000c0 	.word	0x200000c0
 8001c7c:	2000010c 	.word	0x2000010c
 8001c80:	2000005c 	.word	0x2000005c
 8001c84:	20000158 	.word	0x20000158
 8001c88:	20000188 	.word	0x20000188
 8001c8c:	200001a8 	.word	0x200001a8
 8001c90:	20000020 	.word	0x20000020
 8001c94:	20000028 	.word	0x20000028
 8001c98:	20000030 	.word	0x20000030
 8001c9c:	00000271 	.word	0x00000271

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b095      	sub	sp, #84	; 0x54
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	2414      	movs	r4, #20
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	0018      	movs	r0, r3
 8001cac:	233c      	movs	r3, #60	; 0x3c
 8001cae:	001a      	movs	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f004 facb 	bl	800624c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	0018      	movs	r0, r3
 8001cba:	2310      	movs	r3, #16
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	f004 fac4 	bl	800624c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f002 f8e5 	bl	8003e98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cce:	193b      	adds	r3, r7, r4
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	2280      	movs	r2, #128	; 0x80
 8001cd8:	0052      	lsls	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001cdc:	0021      	movs	r1, r4
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2240      	movs	r2, #64	; 0x40
 8001ce8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2202      	movs	r2, #2
 8001cee:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001cf6:	187b      	adds	r3, r7, r1
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001cfc:	187b      	adds	r3, r7, r1
 8001cfe:	2208      	movs	r2, #8
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2280      	movs	r2, #128	; 0x80
 8001d06:	0292      	lsls	r2, r2, #10
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0492      	lsls	r2, r2, #18
 8001d10:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0592      	lsls	r2, r2, #22
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f002 f8fb 	bl	8003f18 <HAL_RCC_OscConfig>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d26:	f000 fce3 	bl	80026f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2202      	movs	r2, #2
 8001d34:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2102      	movs	r1, #2
 8001d46:	0018      	movs	r0, r3
 8001d48:	f002 fc46 	bl	80045d8 <HAL_RCC_ClockConfig>
 8001d4c:	1e03      	subs	r3, r0, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d50:	f000 fcce 	bl	80026f0 <Error_Handler>
  }
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b015      	add	sp, #84	; 0x54
 8001d5a:	bd90      	pop	{r4, r7, pc}

08001d5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	0018      	movs	r0, r3
 8001d66:	230c      	movs	r3, #12
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f004 fa6e 	bl	800624c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <MX_ADC1_Init+0xc8>)
 8001d74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	05d2      	lsls	r2, r2, #23
 8001d7c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d7e:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d84:	4b26      	ldr	r3, [pc, #152]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d92:	2204      	movs	r2, #4
 8001d94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d96:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001d9c:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001da2:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001da8:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dbc:	222c      	movs	r2, #44	; 0x2c
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dd6:	223c      	movs	r2, #60	; 0x3c
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001de4:	0018      	movs	r0, r3
 8001de6:	f001 f81f 	bl	8002e28 <HAL_ADC_Init>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001dee:	f000 fc7f 	bl	80026f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	1d3a      	adds	r2, r7, #4
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_ADC1_Init+0xc4>)
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f001 fade 	bl	80033cc <HAL_ADC_ConfigChannel>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8001e14:	f000 fc6c 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000005c 	.word	0x2000005c
 8001e24:	40012400 	.word	0x40012400

08001e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09c      	sub	sp, #112	; 0x70
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2e:	2360      	movs	r3, #96	; 0x60
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	2310      	movs	r3, #16
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f004 fa07 	bl	800624c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	2354      	movs	r3, #84	; 0x54
 8001e40:	18fb      	adds	r3, r7, r3
 8001e42:	0018      	movs	r0, r3
 8001e44:	230c      	movs	r3, #12
 8001e46:	001a      	movs	r2, r3
 8001e48:	2100      	movs	r1, #0
 8001e4a:	f004 f9ff 	bl	800624c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e4e:	2338      	movs	r3, #56	; 0x38
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	0018      	movs	r0, r3
 8001e54:	231c      	movs	r3, #28
 8001e56:	001a      	movs	r2, r3
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f004 f9f7 	bl	800624c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	0018      	movs	r0, r3
 8001e62:	2334      	movs	r3, #52	; 0x34
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f004 f9f0 	bl	800624c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e6c:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e6e:	4a57      	ldr	r2, [pc, #348]	; (8001fcc <MX_TIM1_Init+0x1a4>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8001e72:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e74:	227f      	movs	r2, #127	; 0x7f
 8001e76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	4b53      	ldr	r3, [pc, #332]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e80:	4a53      	ldr	r2, [pc, #332]	; (8001fd0 <MX_TIM1_Init+0x1a8>)
 8001e82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e84:	4b50      	ldr	r3, [pc, #320]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e8a:	4b4f      	ldr	r3, [pc, #316]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b4d      	ldr	r3, [pc, #308]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e96:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f002 ff63 	bl	8004d64 <HAL_TIM_Base_Init>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001ea2:	f000 fc25 	bl	80026f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea6:	2160      	movs	r1, #96	; 0x60
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	0152      	lsls	r2, r2, #5
 8001eae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eb0:	187a      	adds	r2, r7, r1
 8001eb2:	4b45      	ldr	r3, [pc, #276]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001eb4:	0011      	movs	r1, r2
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f003 fb90 	bl	80055dc <HAL_TIM_ConfigClockSource>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001ec0:	f000 fc16 	bl	80026f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec4:	4b40      	ldr	r3, [pc, #256]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f003 f806 	bl	8004ed8 <HAL_TIM_PWM_Init>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001ed0:	f000 fc0e 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed4:	2154      	movs	r1, #84	; 0x54
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ee8:	187a      	adds	r2, r7, r1
 8001eea:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001eec:	0011      	movs	r1, r2
 8001eee:	0018      	movs	r0, r3
 8001ef0:	f004 f878 	bl	8005fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	1e03      	subs	r3, r0, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001ef8:	f000 fbfa 	bl	80026f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2138      	movs	r1, #56	; 0x38
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2260      	movs	r2, #96	; 0x60
 8001f02:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f28:	1879      	adds	r1, r7, r1
 8001f2a:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f003 fa54 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d001      	beq.n	8001f3c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001f38:	f000 fbda 	bl	80026f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f3c:	2338      	movs	r3, #56	; 0x38
 8001f3e:	18f9      	adds	r1, r7, r3
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001f42:	2204      	movs	r2, #4
 8001f44:	0018      	movs	r0, r3
 8001f46:	f003 fa49 	bl	80053dc <HAL_TIM_PWM_ConfigChannel>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001f4e:	f000 fbcf 	bl	80026f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0192      	lsls	r2, r2, #6
 8001f76:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	0492      	lsls	r2, r2, #18
 8001f90:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fa4:	1d3a      	adds	r2, r7, #4
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001fa8:	0011      	movs	r1, r2
 8001faa:	0018      	movs	r0, r3
 8001fac:	f004 f890 	bl	80060d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001fb4:	f000 fb9c 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fb8:	4b03      	ldr	r3, [pc, #12]	; (8001fc8 <MX_TIM1_Init+0x1a0>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fc78 	bl	80028b0 <HAL_TIM_MspPostInit>

}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b01c      	add	sp, #112	; 0x70
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200000c0 	.word	0x200000c0
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	00000271 	.word	0x00000271

08001fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b088      	sub	sp, #32
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	2310      	movs	r3, #16
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	0018      	movs	r0, r3
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	f004 f931 	bl	800624c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	0018      	movs	r0, r3
 8001fee:	230c      	movs	r3, #12
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f004 f92a 	bl	800624c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_TIM3_Init+0xa0>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <MX_TIM3_Init+0xa4>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM3_Init+0xa0>)
 8002000:	4a1e      	ldr	r2, [pc, #120]	; (800207c <MX_TIM3_Init+0xa8>)
 8002002:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM3_Init+0xa0>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_TIM3_Init+0xa0>)
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <MX_TIM3_Init+0xac>)
 800200e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM3_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <MX_TIM3_Init+0xa0>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800201c:	4b15      	ldr	r3, [pc, #84]	; (8002074 <MX_TIM3_Init+0xa0>)
 800201e:	0018      	movs	r0, r3
 8002020:	f002 fea0 	bl	8004d64 <HAL_TIM_Base_Init>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d001      	beq.n	800202c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002028:	f000 fb62 	bl	80026f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800202c:	2110      	movs	r1, #16
 800202e:	187b      	adds	r3, r7, r1
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	0152      	lsls	r2, r2, #5
 8002034:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002036:	187a      	adds	r2, r7, r1
 8002038:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <MX_TIM3_Init+0xa0>)
 800203a:	0011      	movs	r1, r2
 800203c:	0018      	movs	r0, r3
 800203e:	f003 facd 	bl	80055dc <HAL_TIM_ConfigClockSource>
 8002042:	1e03      	subs	r3, r0, #0
 8002044:	d001      	beq.n	800204a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002046:	f000 fb53 	bl	80026f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002056:	1d3a      	adds	r2, r7, #4
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <MX_TIM3_Init+0xa0>)
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f003 ffc1 	bl	8005fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8002062:	1e03      	subs	r3, r0, #0
 8002064:	d001      	beq.n	800206a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002066:	f000 fb43 	bl	80026f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	2000010c 	.word	0x2000010c
 8002078:	40000400 	.word	0x40000400
 800207c:	000018ff 	.word	0x000018ff
 8002080:	00002710 	.word	0x00002710

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	240c      	movs	r4, #12
 800208c:	193b      	adds	r3, r7, r4
 800208e:	0018      	movs	r0, r3
 8002090:	2314      	movs	r3, #20
 8002092:	001a      	movs	r2, r3
 8002094:	2100      	movs	r1, #0
 8002096:	f004 f8d9 	bl	800624c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	4b4d      	ldr	r3, [pc, #308]	; (80021d0 <MX_GPIO_Init+0x14c>)
 800209c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800209e:	4b4c      	ldr	r3, [pc, #304]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020a0:	2104      	movs	r1, #4
 80020a2:	430a      	orrs	r2, r1
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020aa:	2204      	movs	r2, #4
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b6:	4b46      	ldr	r3, [pc, #280]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020b8:	2101      	movs	r1, #1
 80020ba:	430a      	orrs	r2, r1
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2201      	movs	r2, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	607b      	str	r3, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020d0:	2102      	movs	r1, #2
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34
 80020d6:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <MX_GPIO_Init+0x14c>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	603b      	str	r3, [r7, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|Motor_3_Pin, GPIO_PIN_RESET);
 80020e2:	2384      	movs	r3, #132	; 0x84
 80020e4:	00d9      	lsls	r1, r3, #3
 80020e6:	23a0      	movs	r3, #160	; 0xa0
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	2200      	movs	r2, #0
 80020ec:	0018      	movs	r0, r3
 80020ee:	f001 feb5 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor_2_Pin|Motor_1_Pin, GPIO_PIN_RESET);
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <MX_GPIO_Init+0x150>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	2130      	movs	r1, #48	; 0x30
 80020f8:	0018      	movs	r0, r3
 80020fa:	f001 feaf 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_4_GPIO_Port, Motor_4_Pin, GPIO_PIN_RESET);
 80020fe:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <MX_GPIO_Init+0x154>)
 8002100:	2200      	movs	r2, #0
 8002102:	2108      	movs	r1, #8
 8002104:	0018      	movs	r0, r3
 8002106:	f001 fea9 	bl	8003e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Caliberation_button_Pin */
  GPIO_InitStruct.Pin = Caliberation_button_Pin;
 800210a:	193b      	adds	r3, r7, r4
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0192      	lsls	r2, r2, #6
 8002110:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002112:	193b      	adds	r3, r7, r4
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	193b      	adds	r3, r7, r4
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Caliberation_button_GPIO_Port, &GPIO_InitStruct);
 800211e:	193b      	adds	r3, r7, r4
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <MX_GPIO_Init+0x150>)
 8002122:	0019      	movs	r1, r3
 8002124:	0010      	movs	r0, r2
 8002126:	f001 fd2d 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800212a:	193b      	adds	r3, r7, r4
 800212c:	2220      	movs	r2, #32
 800212e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2201      	movs	r2, #1
 8002134:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2202      	movs	r2, #2
 8002140:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002142:	193a      	adds	r2, r7, r4
 8002144:	23a0      	movs	r3, #160	; 0xa0
 8002146:	05db      	lsls	r3, r3, #23
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f001 fd1a 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_2_Pin Motor_1_Pin */
  GPIO_InitStruct.Pin = Motor_2_Pin|Motor_1_Pin;
 8002150:	193b      	adds	r3, r7, r4
 8002152:	2230      	movs	r2, #48	; 0x30
 8002154:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	193b      	adds	r3, r7, r4
 8002158:	2201      	movs	r2, #1
 800215a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	193b      	adds	r3, r7, r4
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	193b      	adds	r3, r7, r4
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <MX_GPIO_Init+0x150>)
 800216c:	0019      	movs	r1, r3
 800216e:	0010      	movs	r0, r2
 8002170:	f001 fd08 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_3_Pin */
  GPIO_InitStruct.Pin = Motor_3_Pin;
 8002174:	0021      	movs	r1, r4
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2280      	movs	r2, #128	; 0x80
 800217a:	00d2      	lsls	r2, r2, #3
 800217c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217e:	000c      	movs	r4, r1
 8002180:	193b      	adds	r3, r7, r4
 8002182:	2201      	movs	r2, #1
 8002184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	193b      	adds	r3, r7, r4
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	193b      	adds	r3, r7, r4
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Motor_3_GPIO_Port, &GPIO_InitStruct);
 8002192:	193a      	adds	r2, r7, r4
 8002194:	23a0      	movs	r3, #160	; 0xa0
 8002196:	05db      	lsls	r3, r3, #23
 8002198:	0011      	movs	r1, r2
 800219a:	0018      	movs	r0, r3
 800219c:	f001 fcf2 	bl	8003b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_4_Pin */
  GPIO_InitStruct.Pin = Motor_4_Pin;
 80021a0:	0021      	movs	r1, r4
 80021a2:	187b      	adds	r3, r7, r1
 80021a4:	2208      	movs	r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	187b      	adds	r3, r7, r1
 80021aa:	2201      	movs	r2, #1
 80021ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Motor_4_GPIO_Port, &GPIO_InitStruct);
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <MX_GPIO_Init+0x154>)
 80021be:	0019      	movs	r1, r3
 80021c0:	0010      	movs	r0, r2
 80021c2:	f001 fcdf 	bl	8003b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b009      	add	sp, #36	; 0x24
 80021cc:	bd90      	pop	{r4, r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	50000800 	.word	0x50000800
 80021d8:	50000400 	.word	0x50000400

080021dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d104      	bne.n	80021f8 <HAL_TIM_PeriodElapsedCallback+0x1c>
    millis_counter++;
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80021f6:	601a      	str	r2, [r3, #0]
  }
}
 80021f8:	46c0      	nop			; (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	b002      	add	sp, #8
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40000400 	.word	0x40000400
 8002204:	20000164 	.word	0x20000164

08002208 <millis>:

uint32_t millis() {
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return millis_counter;
 800220c:	4b02      	ldr	r3, [pc, #8]	; (8002218 <millis+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000164 	.word	0x20000164

0800221c <speed>:

void speed(int Left, int Right){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,ENR,Right);
 8002226:	4b06      	ldr	r3, [pc, #24]	; (8002240 <speed+0x24>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,ENL,Left);
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <speed+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	200000c0 	.word	0x200000c0

08002244 <motor>:

void motor(int motor,int direction){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	if (motor == 0){
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d120      	bne.n	8002296 <motor+0x52>
		if (direction == 1){
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d10e      	bne.n	8002278 <motor+0x34>
			HAL_GPIO_WritePin(Motor_LB_gpio, Motor_LB_pin, 0);
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	00d9      	lsls	r1, r3, #3
 800225e:	23a0      	movs	r3, #160	; 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	2200      	movs	r2, #0
 8002264:	0018      	movs	r0, r3
 8002266:	f001 fdf9 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_LF_gpio, Motor_LF_pin, 1);
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <motor+0x94>)
 800226c:	2201      	movs	r2, #1
 800226e:	2108      	movs	r1, #8
 8002270:	0018      	movs	r0, r3
 8002272:	f001 fdf3 	bl	8003e5c <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 1);
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 0);
		}
	}
}
 8002276:	e02a      	b.n	80022ce <motor+0x8a>
			HAL_GPIO_WritePin(Motor_LB_gpio, Motor_LB_pin, 1);
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	00d9      	lsls	r1, r3, #3
 800227c:	23a0      	movs	r3, #160	; 0xa0
 800227e:	05db      	lsls	r3, r3, #23
 8002280:	2201      	movs	r2, #1
 8002282:	0018      	movs	r0, r3
 8002284:	f001 fdea 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_LF_gpio, Motor_LF_pin, 0);
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <motor+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	2108      	movs	r1, #8
 800228e:	0018      	movs	r0, r3
 8002290:	f001 fde4 	bl	8003e5c <HAL_GPIO_WritePin>
}
 8002294:	e01b      	b.n	80022ce <motor+0x8a>
		if (direction == 1){
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10c      	bne.n	80022b6 <motor+0x72>
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 0);
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <motor+0x98>)
 800229e:	2200      	movs	r2, #0
 80022a0:	2120      	movs	r1, #32
 80022a2:	0018      	movs	r0, r3
 80022a4:	f001 fdda 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 1);
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <motor+0x98>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	2110      	movs	r1, #16
 80022ae:	0018      	movs	r0, r3
 80022b0:	f001 fdd4 	bl	8003e5c <HAL_GPIO_WritePin>
}
 80022b4:	e00b      	b.n	80022ce <motor+0x8a>
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 1);
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <motor+0x98>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	2120      	movs	r1, #32
 80022bc:	0018      	movs	r0, r3
 80022be:	f001 fdcd 	bl	8003e5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 0);
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <motor+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	2110      	movs	r1, #16
 80022c8:	0018      	movs	r0, r3
 80022ca:	f001 fdc7 	bl	8003e5c <HAL_GPIO_WritePin>
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	b002      	add	sp, #8
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	46c0      	nop			; (mov r8, r8)
 80022d8:	50000400 	.word	0x50000400
 80022dc:	50000800 	.word	0x50000800

080022e0 <updateIR>:

void updateIR(){
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 80022e6:	4b90      	ldr	r3, [pc, #576]	; (8002528 <updateIR+0x248>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80022ec:	4a8e      	ldr	r2, [pc, #568]	; (8002528 <updateIR+0x248>)
 80022ee:	4b8f      	ldr	r3, [pc, #572]	; (800252c <updateIR+0x24c>)
 80022f0:	0011      	movs	r1, r2
 80022f2:	0018      	movs	r0, r3
 80022f4:	f001 f86a 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80022f8:	4b8c      	ldr	r3, [pc, #560]	; (800252c <updateIR+0x24c>)
 80022fa:	0018      	movs	r0, r3
 80022fc:	f000 ff3c 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002300:	23fa      	movs	r3, #250	; 0xfa
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	4b89      	ldr	r3, [pc, #548]	; (800252c <updateIR+0x24c>)
 8002306:	0011      	movs	r1, r2
 8002308:	0018      	movs	r0, r3
 800230a:	f000 ffbf 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[0] = HAL_ADC_GetValue(&hadc1);
 800230e:	4b87      	ldr	r3, [pc, #540]	; (800252c <updateIR+0x24c>)
 8002310:	0018      	movs	r0, r3
 8002312:	f001 f84f 	bl	80033b4 <HAL_ADC_GetValue>
 8002316:	0003      	movs	r3, r0
 8002318:	001a      	movs	r2, r3
 800231a:	4b85      	ldr	r3, [pc, #532]	; (8002530 <updateIR+0x250>)
 800231c:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800231e:	4b83      	ldr	r3, [pc, #524]	; (800252c <updateIR+0x24c>)
 8002320:	0018      	movs	r0, r3
 8002322:	f000 ff77 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_1;
 8002326:	4b80      	ldr	r3, [pc, #512]	; (8002528 <updateIR+0x248>)
 8002328:	4a82      	ldr	r2, [pc, #520]	; (8002534 <updateIR+0x254>)
 800232a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800232c:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <updateIR+0x248>)
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <updateIR+0x24c>)
 8002330:	0011      	movs	r1, r2
 8002332:	0018      	movs	r0, r3
 8002334:	f001 f84a 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8002338:	4b7c      	ldr	r3, [pc, #496]	; (800252c <updateIR+0x24c>)
 800233a:	0018      	movs	r0, r3
 800233c:	f000 ff1c 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002340:	23fa      	movs	r3, #250	; 0xfa
 8002342:	009a      	lsls	r2, r3, #2
 8002344:	4b79      	ldr	r3, [pc, #484]	; (800252c <updateIR+0x24c>)
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f000 ff9f 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[1] = HAL_ADC_GetValue(&hadc1);
 800234e:	4b77      	ldr	r3, [pc, #476]	; (800252c <updateIR+0x24c>)
 8002350:	0018      	movs	r0, r3
 8002352:	f001 f82f 	bl	80033b4 <HAL_ADC_GetValue>
 8002356:	0003      	movs	r3, r0
 8002358:	001a      	movs	r2, r3
 800235a:	4b75      	ldr	r3, [pc, #468]	; (8002530 <updateIR+0x250>)
 800235c:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <updateIR+0x24c>)
 8002360:	0018      	movs	r0, r3
 8002362:	f000 ff57 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_2;
 8002366:	4b70      	ldr	r3, [pc, #448]	; (8002528 <updateIR+0x248>)
 8002368:	4a73      	ldr	r2, [pc, #460]	; (8002538 <updateIR+0x258>)
 800236a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <updateIR+0x248>)
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <updateIR+0x24c>)
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f001 f82a 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <updateIR+0x24c>)
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fefc 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002380:	23fa      	movs	r3, #250	; 0xfa
 8002382:	009a      	lsls	r2, r3, #2
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <updateIR+0x24c>)
 8002386:	0011      	movs	r1, r2
 8002388:	0018      	movs	r0, r3
 800238a:	f000 ff7f 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[2] = HAL_ADC_GetValue(&hadc1);
 800238e:	4b67      	ldr	r3, [pc, #412]	; (800252c <updateIR+0x24c>)
 8002390:	0018      	movs	r0, r3
 8002392:	f001 f80f 	bl	80033b4 <HAL_ADC_GetValue>
 8002396:	0003      	movs	r3, r0
 8002398:	001a      	movs	r2, r3
 800239a:	4b65      	ldr	r3, [pc, #404]	; (8002530 <updateIR+0x250>)
 800239c:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Stop(&hadc1);
 800239e:	4b63      	ldr	r3, [pc, #396]	; (800252c <updateIR+0x24c>)
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 ff37 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_9;
 80023a6:	4b60      	ldr	r3, [pc, #384]	; (8002528 <updateIR+0x248>)
 80023a8:	4a64      	ldr	r2, [pc, #400]	; (800253c <updateIR+0x25c>)
 80023aa:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80023ac:	4a5e      	ldr	r2, [pc, #376]	; (8002528 <updateIR+0x248>)
 80023ae:	4b5f      	ldr	r3, [pc, #380]	; (800252c <updateIR+0x24c>)
 80023b0:	0011      	movs	r1, r2
 80023b2:	0018      	movs	r0, r3
 80023b4:	f001 f80a 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80023b8:	4b5c      	ldr	r3, [pc, #368]	; (800252c <updateIR+0x24c>)
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fedc 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	009a      	lsls	r2, r3, #2
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <updateIR+0x24c>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 ff5f 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[3] = HAL_ADC_GetValue(&hadc1);
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <updateIR+0x24c>)
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 ffef 	bl	80033b4 <HAL_ADC_GetValue>
 80023d6:	0003      	movs	r3, r0
 80023d8:	001a      	movs	r2, r3
 80023da:	4b55      	ldr	r3, [pc, #340]	; (8002530 <updateIR+0x250>)
 80023dc:	60da      	str	r2, [r3, #12]
	  HAL_ADC_Stop(&hadc1);
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <updateIR+0x24c>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f000 ff17 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_4;
 80023e6:	4b50      	ldr	r3, [pc, #320]	; (8002528 <updateIR+0x248>)
 80023e8:	4a55      	ldr	r2, [pc, #340]	; (8002540 <updateIR+0x260>)
 80023ea:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80023ec:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <updateIR+0x248>)
 80023ee:	4b4f      	ldr	r3, [pc, #316]	; (800252c <updateIR+0x24c>)
 80023f0:	0011      	movs	r1, r2
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 ffea 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <updateIR+0x24c>)
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 febc 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002400:	23fa      	movs	r3, #250	; 0xfa
 8002402:	009a      	lsls	r2, r3, #2
 8002404:	4b49      	ldr	r3, [pc, #292]	; (800252c <updateIR+0x24c>)
 8002406:	0011      	movs	r1, r2
 8002408:	0018      	movs	r0, r3
 800240a:	f000 ff3f 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[4] = HAL_ADC_GetValue(&hadc1);
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <updateIR+0x24c>)
 8002410:	0018      	movs	r0, r3
 8002412:	f000 ffcf 	bl	80033b4 <HAL_ADC_GetValue>
 8002416:	0003      	movs	r3, r0
 8002418:	001a      	movs	r2, r3
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <updateIR+0x250>)
 800241c:	611a      	str	r2, [r3, #16]
	  HAL_ADC_Stop(&hadc1);
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <updateIR+0x24c>)
 8002420:	0018      	movs	r0, r3
 8002422:	f000 fef7 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_6;
 8002426:	4b40      	ldr	r3, [pc, #256]	; (8002528 <updateIR+0x248>)
 8002428:	4a46      	ldr	r2, [pc, #280]	; (8002544 <updateIR+0x264>)
 800242a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800242c:	4a3e      	ldr	r2, [pc, #248]	; (8002528 <updateIR+0x248>)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <updateIR+0x24c>)
 8002430:	0011      	movs	r1, r2
 8002432:	0018      	movs	r0, r3
 8002434:	f000 ffca 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8002438:	4b3c      	ldr	r3, [pc, #240]	; (800252c <updateIR+0x24c>)
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fe9c 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002440:	23fa      	movs	r3, #250	; 0xfa
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	4b39      	ldr	r3, [pc, #228]	; (800252c <updateIR+0x24c>)
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f000 ff1f 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[5] = HAL_ADC_GetValue(&hadc1);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <updateIR+0x24c>)
 8002450:	0018      	movs	r0, r3
 8002452:	f000 ffaf 	bl	80033b4 <HAL_ADC_GetValue>
 8002456:	0003      	movs	r3, r0
 8002458:	001a      	movs	r2, r3
 800245a:	4b35      	ldr	r3, [pc, #212]	; (8002530 <updateIR+0x250>)
 800245c:	615a      	str	r2, [r3, #20]
	  HAL_ADC_Stop(&hadc1);
 800245e:	4b33      	ldr	r3, [pc, #204]	; (800252c <updateIR+0x24c>)
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fed7 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_7;
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <updateIR+0x248>)
 8002468:	4a37      	ldr	r2, [pc, #220]	; (8002548 <updateIR+0x268>)
 800246a:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 800246c:	4a2e      	ldr	r2, [pc, #184]	; (8002528 <updateIR+0x248>)
 800246e:	4b2f      	ldr	r3, [pc, #188]	; (800252c <updateIR+0x24c>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f000 ffaa 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8002478:	4b2c      	ldr	r3, [pc, #176]	; (800252c <updateIR+0x24c>)
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fe7c 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 8002480:	23fa      	movs	r3, #250	; 0xfa
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	4b29      	ldr	r3, [pc, #164]	; (800252c <updateIR+0x24c>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f000 feff 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[6] = HAL_ADC_GetValue(&hadc1);
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <updateIR+0x24c>)
 8002490:	0018      	movs	r0, r3
 8002492:	f000 ff8f 	bl	80033b4 <HAL_ADC_GetValue>
 8002496:	0003      	movs	r3, r0
 8002498:	001a      	movs	r2, r3
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <updateIR+0x250>)
 800249c:	619a      	str	r2, [r3, #24]
	  HAL_ADC_Stop(&hadc1);
 800249e:	4b23      	ldr	r3, [pc, #140]	; (800252c <updateIR+0x24c>)
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 feb7 	bl	8003214 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_8;
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <updateIR+0x248>)
 80024a8:	4a28      	ldr	r2, [pc, #160]	; (800254c <updateIR+0x26c>)
 80024aa:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80024ac:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <updateIR+0x248>)
 80024ae:	4b1f      	ldr	r3, [pc, #124]	; (800252c <updateIR+0x24c>)
 80024b0:	0011      	movs	r1, r2
 80024b2:	0018      	movs	r0, r3
 80024b4:	f000 ff8a 	bl	80033cc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <updateIR+0x24c>)
 80024ba:	0018      	movs	r0, r3
 80024bc:	f000 fe5c 	bl	8003178 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80024c0:	23fa      	movs	r3, #250	; 0xfa
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <updateIR+0x24c>)
 80024c6:	0011      	movs	r1, r2
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fedf 	bl	800328c <HAL_ADC_PollForConversion>
	  IR_array[7] = HAL_ADC_GetValue(&hadc1);
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <updateIR+0x24c>)
 80024d0:	0018      	movs	r0, r3
 80024d2:	f000 ff6f 	bl	80033b4 <HAL_ADC_GetValue>
 80024d6:	0003      	movs	r3, r0
 80024d8:	001a      	movs	r2, r3
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <updateIR+0x250>)
 80024dc:	61da      	str	r2, [r3, #28]
	  HAL_ADC_Stop(&hadc1);
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <updateIR+0x24c>)
 80024e0:	0018      	movs	r0, r3
 80024e2:	f000 fe97 	bl	8003214 <HAL_ADC_Stop>

	  	  for (int i = 0; i < 8; ++i) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
 80024ea:	e015      	b.n	8002518 <updateIR+0x238>
	  	      digital_IR[i] = IR_array[i] > Ir_thresholds[i];
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <updateIR+0x250>)
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	58d2      	ldr	r2, [r2, r3]
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <updateIR+0x270>)
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	0089      	lsls	r1, r1, #2
 80024fa:	58cb      	ldr	r3, [r1, r3]
 80024fc:	2101      	movs	r1, #1
 80024fe:	429a      	cmp	r2, r3
 8002500:	dc01      	bgt.n	8002506 <updateIR+0x226>
 8002502:	2300      	movs	r3, #0
 8002504:	1c19      	adds	r1, r3, #0
 8002506:	b2cb      	uxtb	r3, r1
 8002508:	0019      	movs	r1, r3
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <updateIR+0x274>)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	50d1      	str	r1, [r2, r3]
	  	  for (int i = 0; i < 8; ++i) {
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3301      	adds	r3, #1
 8002516:	607b      	str	r3, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b07      	cmp	r3, #7
 800251c:	dde6      	ble.n	80024ec <updateIR+0x20c>
	  //		  HAL_ADC_Start(&hadc1);
	  //		  HAL_ADC_PollForConversion(&hadc1,1000);
	  //		  IR_array[i] = HAL_ADC_GetValue(&hadc1);
	  //		  HAL_ADC_Stop(&hadc1);
	  //	  }
}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000158 	.word	0x20000158
 800252c:	2000005c 	.word	0x2000005c
 8002530:	20000168 	.word	0x20000168
 8002534:	04000002 	.word	0x04000002
 8002538:	08000004 	.word	0x08000004
 800253c:	24000200 	.word	0x24000200
 8002540:	10000010 	.word	0x10000010
 8002544:	18000040 	.word	0x18000040
 8002548:	1c000080 	.word	0x1c000080
 800254c:	20000100 	.word	0x20000100
 8002550:	20000000 	.word	0x20000000
 8002554:	20000188 	.word	0x20000188

08002558 <calibrate>:

void calibrate()
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b096      	sub	sp, #88	; 0x58
 800255c:	af00      	add	r7, sp, #0

  motor(right, Backward);
 800255e:	2301      	movs	r3, #1
 8002560:	425b      	negs	r3, r3
 8002562:	0019      	movs	r1, r3
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff fe6d 	bl	8002244 <motor>
  motor(left, Forward);
 800256a:	2101      	movs	r1, #1
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff fe69 	bl	8002244 <motor>

  // Stop motors when calibrating
  speed(255,255);
 8002572:	21ff      	movs	r1, #255	; 0xff
 8002574:	20ff      	movs	r0, #255	; 0xff
 8002576:	f7ff fe51 	bl	800221c <speed>

  // make sensor_max_values array of length 8 equal to sensor calibration array
  int sensor_max_values[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800257a:	2320      	movs	r3, #32
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	0018      	movs	r0, r3
 8002580:	2320      	movs	r3, #32
 8002582:	001a      	movs	r2, r3
 8002584:	2100      	movs	r1, #0
 8002586:	f003 fe61 	bl	800624c <memset>

  // sensor min values array
  int sensor_min_values[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 800258a:	003b      	movs	r3, r7
 800258c:	0018      	movs	r0, r3
 800258e:	2320      	movs	r3, #32
 8002590:	001a      	movs	r2, r3
 8002592:	2100      	movs	r1, #0
 8002594:	f003 fe5a 	bl	800624c <memset>

  int now_time_for_calibration = millis();
 8002598:	f7ff fe36 	bl	8002208 <millis>
 800259c:	0003      	movs	r3, r0
 800259e:	643b      	str	r3, [r7, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 80025a0:	23a0      	movs	r3, #160	; 0xa0
 80025a2:	05db      	lsls	r3, r3, #23
 80025a4:	2201      	movs	r2, #1
 80025a6:	2120      	movs	r1, #32
 80025a8:	0018      	movs	r0, r3
 80025aa:	f001 fc57 	bl	8003e5c <HAL_GPIO_WritePin>

  while (millis() - now_time_for_calibration < 5)
 80025ae:	e067      	b.n	8002680 <calibrate+0x128>
  {

	updateIR();
 80025b0:	f7ff fe96 	bl	80022e0 <updateIR>
    uint8_t allZeros = 1;
 80025b4:	2357      	movs	r3, #87	; 0x57
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	653b      	str	r3, [r7, #80]	; 0x50
 80025c0:	e00e      	b.n	80025e0 <calibrate+0x88>
    {
      if (sensor_max_values[i] != 0)
 80025c2:	2320      	movs	r3, #32
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025c8:	0092      	lsls	r2, r2, #2
 80025ca:	58d3      	ldr	r3, [r2, r3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d004      	beq.n	80025da <calibrate+0x82>
      {
        allZeros = 0;
 80025d0:	2357      	movs	r3, #87	; 0x57
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
        break; // No need to continue checking if we find a non-zero value
 80025d8:	e005      	b.n	80025e6 <calibrate+0x8e>
    for (int i = 0; i < 8; i++)
 80025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025dc:	3301      	adds	r3, #1
 80025de:	653b      	str	r3, [r7, #80]	; 0x50
 80025e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e2:	2b07      	cmp	r3, #7
 80025e4:	dded      	ble.n	80025c2 <calibrate+0x6a>
      }
    }

    if (allZeros)
 80025e6:	2357      	movs	r3, #87	; 0x57
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d019      	beq.n	8002624 <calibrate+0xcc>
    {
      for (int i = 0; i < 8; i++)
 80025f0:	2300      	movs	r3, #0
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e013      	b.n	800261e <calibrate+0xc6>
      {
        sensor_max_values[i] = IR_array[i];
 80025f6:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <calibrate+0x190>)
 80025f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025fa:	0092      	lsls	r2, r2, #2
 80025fc:	58d1      	ldr	r1, [r2, r3]
 80025fe:	2320      	movs	r3, #32
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002604:	0092      	lsls	r2, r2, #2
 8002606:	50d1      	str	r1, [r2, r3]
        sensor_min_values[i] = IR_array[i];
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <calibrate+0x190>)
 800260a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800260c:	0092      	lsls	r2, r2, #2
 800260e:	58d1      	ldr	r1, [r2, r3]
 8002610:	003b      	movs	r3, r7
 8002612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002614:	0092      	lsls	r2, r2, #2
 8002616:	50d1      	str	r1, [r2, r3]
      for (int i = 0; i < 8; i++)
 8002618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800261a:	3301      	adds	r3, #1
 800261c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800261e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002620:	2b07      	cmp	r3, #7
 8002622:	dde8      	ble.n	80025f6 <calibrate+0x9e>
      }
    }

    for (int i = 0; i < 8; i++)
 8002624:	2300      	movs	r3, #0
 8002626:	64bb      	str	r3, [r7, #72]	; 0x48
 8002628:	e027      	b.n	800267a <calibrate+0x122>
    {
      if (IR_array[i] > sensor_max_values[i])
 800262a:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <calibrate+0x190>)
 800262c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800262e:	0092      	lsls	r2, r2, #2
 8002630:	58d2      	ldr	r2, [r2, r3]
 8002632:	2020      	movs	r0, #32
 8002634:	183b      	adds	r3, r7, r0
 8002636:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002638:	0089      	lsls	r1, r1, #2
 800263a:	58cb      	ldr	r3, [r1, r3]
 800263c:	429a      	cmp	r2, r3
 800263e:	dd07      	ble.n	8002650 <calibrate+0xf8>
      {
        sensor_max_values[i] = IR_array[i];
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <calibrate+0x190>)
 8002642:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	58d1      	ldr	r1, [r2, r3]
 8002648:	183b      	adds	r3, r7, r0
 800264a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	50d1      	str	r1, [r2, r3]
      }
      if (IR_array[i] < sensor_min_values[i])
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <calibrate+0x190>)
 8002652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002654:	0092      	lsls	r2, r2, #2
 8002656:	58d2      	ldr	r2, [r2, r3]
 8002658:	003b      	movs	r3, r7
 800265a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800265c:	0089      	lsls	r1, r1, #2
 800265e:	58cb      	ldr	r3, [r1, r3]
 8002660:	429a      	cmp	r2, r3
 8002662:	da07      	bge.n	8002674 <calibrate+0x11c>
      {
        sensor_min_values[i] = IR_array[i];
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <calibrate+0x190>)
 8002666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002668:	0092      	lsls	r2, r2, #2
 800266a:	58d1      	ldr	r1, [r2, r3]
 800266c:	003b      	movs	r3, r7
 800266e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	50d1      	str	r1, [r2, r3]
    for (int i = 0; i < 8; i++)
 8002674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002676:	3301      	adds	r3, #1
 8002678:	64bb      	str	r3, [r7, #72]	; 0x48
 800267a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800267c:	2b07      	cmp	r3, #7
 800267e:	ddd4      	ble.n	800262a <calibrate+0xd2>
  while (millis() - now_time_for_calibration < 5)
 8002680:	f7ff fdc2 	bl	8002208 <millis>
 8002684:	0002      	movs	r2, r0
 8002686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b04      	cmp	r3, #4
 800268c:	d990      	bls.n	80025b0 <calibrate+0x58>
      }
    }
  }

  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 800268e:	23a0      	movs	r3, #160	; 0xa0
 8002690:	05db      	lsls	r3, r3, #23
 8002692:	2200      	movs	r2, #0
 8002694:	2120      	movs	r1, #32
 8002696:	0018      	movs	r0, r3
 8002698:	f001 fbe0 	bl	8003e5c <HAL_GPIO_WritePin>

  speed(0,0);
 800269c:	2100      	movs	r1, #0
 800269e:	2000      	movs	r0, #0
 80026a0:	f7ff fdbc 	bl	800221c <speed>

  for (int i = 0; i < 8; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	647b      	str	r3, [r7, #68]	; 0x44
 80026a8:	e015      	b.n	80026d6 <calibrate+0x17e>
  {
    Ir_thresholds[i] = (sensor_max_values[i] + sensor_min_values[i]) / 2;
 80026aa:	2320      	movs	r3, #32
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026b0:	0092      	lsls	r2, r2, #2
 80026b2:	58d2      	ldr	r2, [r2, r3]
 80026b4:	003b      	movs	r3, r7
 80026b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80026b8:	0089      	lsls	r1, r1, #2
 80026ba:	58cb      	ldr	r3, [r1, r3]
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da00      	bge.n	80026c4 <calibrate+0x16c>
 80026c2:	3301      	adds	r3, #1
 80026c4:	105b      	asrs	r3, r3, #1
 80026c6:	0019      	movs	r1, r3
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <calibrate+0x194>)
 80026ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026cc:	0092      	lsls	r2, r2, #2
 80026ce:	50d1      	str	r1, [r2, r3]
  for (int i = 0; i < 8; i++)
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	3301      	adds	r3, #1
 80026d4:	647b      	str	r3, [r7, #68]	; 0x44
 80026d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d8:	2b07      	cmp	r3, #7
 80026da:	dde6      	ble.n	80026aa <calibrate+0x152>
  }

}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b016      	add	sp, #88	; 0x58
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000168 	.word	0x20000168
 80026ec:	20000000 	.word	0x20000000

080026f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f4:	b672      	cpsid	i
}
 80026f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026f8:	e7fe      	b.n	80026f8 <Error_Handler+0x8>
	...

080026fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_MspInit+0x4c>)
 8002704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <HAL_MspInit+0x4c>)
 8002708:	2101      	movs	r1, #1
 800270a:	430a      	orrs	r2, r1
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <HAL_MspInit+0x4c>)
 800271c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_MspInit+0x4c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0549      	lsls	r1, r1, #21
 8002724:	430a      	orrs	r2, r1
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c
 8002728:	4b07      	ldr	r3, [pc, #28]	; (8002748 <HAL_MspInit+0x4c>)
 800272a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	055b      	lsls	r3, r3, #21
 8002730:	4013      	ands	r3, r2
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f9f4 	bl	8002b28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40021000 	.word	0x40021000

0800274c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b08b      	sub	sp, #44	; 0x2c
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	2414      	movs	r4, #20
 8002756:	193b      	adds	r3, r7, r4
 8002758:	0018      	movs	r0, r3
 800275a:	2314      	movs	r3, #20
 800275c:	001a      	movs	r2, r3
 800275e:	2100      	movs	r1, #0
 8002760:	f003 fd74 	bl	800624c <memset>
  if(hadc->Instance==ADC1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a25      	ldr	r2, [pc, #148]	; (8002800 <HAL_ADC_MspInit+0xb4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d144      	bne.n	80027f8 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 8002770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	0349      	lsls	r1, r1, #13
 8002778:	430a      	orrs	r2, r1
 800277a:	641a      	str	r2, [r3, #64]	; 0x40
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 800277e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	035b      	lsls	r3, r3, #13
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 800278c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 8002790:	2101      	movs	r1, #1
 8002792:	430a      	orrs	r2, r1
 8002794:	635a      	str	r2, [r3, #52]	; 0x34
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 80027a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 80027a8:	2102      	movs	r1, #2
 80027aa:	430a      	orrs	r2, r1
 80027ac:	635a      	str	r2, [r3, #52]	; 0x34
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_ADC_MspInit+0xb8>)
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2202      	movs	r2, #2
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = Sensor_1_Pin|Sensor_2_Pin|Sensor_3_Pin|Sensor_5_Pin
 80027ba:	193b      	adds	r3, r7, r4
 80027bc:	22d7      	movs	r2, #215	; 0xd7
 80027be:	601a      	str	r2, [r3, #0]
                          |Sensor_6_Pin|Sensor_7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c0:	193b      	adds	r3, r7, r4
 80027c2:	2203      	movs	r2, #3
 80027c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	2200      	movs	r2, #0
 80027ca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027cc:	193a      	adds	r2, r7, r4
 80027ce:	23a0      	movs	r3, #160	; 0xa0
 80027d0:	05db      	lsls	r3, r3, #23
 80027d2:	0011      	movs	r1, r2
 80027d4:	0018      	movs	r0, r3
 80027d6:	f001 f9d5 	bl	8003b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Sensor_8_Pin|Sensor_4_Pin;
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	2203      	movs	r2, #3
 80027de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e0:	193b      	adds	r3, r7, r4
 80027e2:	2203      	movs	r2, #3
 80027e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <HAL_ADC_MspInit+0xbc>)
 80027f0:	0019      	movs	r1, r3
 80027f2:	0010      	movs	r0, r2
 80027f4:	f001 f9c6 	bl	8003b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b00b      	add	sp, #44	; 0x2c
 80027fe:	bd90      	pop	{r4, r7, pc}
 8002800:	40012400 	.word	0x40012400
 8002804:	40021000 	.word	0x40021000
 8002808:	50000400 	.word	0x50000400

0800280c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b099      	sub	sp, #100	; 0x64
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002814:	2414      	movs	r4, #20
 8002816:	193b      	adds	r3, r7, r4
 8002818:	0018      	movs	r0, r3
 800281a:	234c      	movs	r3, #76	; 0x4c
 800281c:	001a      	movs	r2, r3
 800281e:	2100      	movs	r1, #0
 8002820:	f003 fd14 	bl	800624c <memset>
  if(htim_base->Instance==TIM1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1e      	ldr	r2, [pc, #120]	; (80028a4 <HAL_TIM_Base_MspInit+0x98>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d11d      	bne.n	800286a <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	0392      	lsls	r2, r2, #14
 8002834:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2200      	movs	r2, #0
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800283c:	193b      	adds	r3, r7, r4
 800283e:	0018      	movs	r0, r3
 8002840:	f002 f854 	bl	80048ec <HAL_RCCEx_PeriphCLKConfig>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002848:	f7ff ff52 	bl	80026f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 800284e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002850:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0109      	lsls	r1, r1, #4
 8002856:	430a      	orrs	r2, r1
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 800285c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
 8002866:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002868:	e018      	b.n	800289c <HAL_TIM_Base_MspInit+0x90>
  else if(htim_base->Instance==TIM3)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0f      	ldr	r2, [pc, #60]	; (80028ac <HAL_TIM_Base_MspInit+0xa0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d113      	bne.n	800289c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 800287a:	2102      	movs	r1, #2
 800287c:	430a      	orrs	r2, r1
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002880:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_TIM_Base_MspInit+0x9c>)
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 800288c:	2200      	movs	r2, #0
 800288e:	2100      	movs	r1, #0
 8002890:	2010      	movs	r0, #16
 8002892:	f001 f945 	bl	8003b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8002896:	2010      	movs	r0, #16
 8002898:	f001 f957 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	b019      	add	sp, #100	; 0x64
 80028a2:	bd90      	pop	{r4, r7, pc}
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40021000 	.word	0x40021000
 80028ac:	40000400 	.word	0x40000400

080028b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b0:	b590      	push	{r4, r7, lr}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	240c      	movs	r4, #12
 80028ba:	193b      	adds	r3, r7, r4
 80028bc:	0018      	movs	r0, r3
 80028be:	2314      	movs	r3, #20
 80028c0:	001a      	movs	r2, r3
 80028c2:	2100      	movs	r1, #0
 80028c4:	f003 fcc2 	bl	800624c <memset>
  if(htim->Instance==TIM1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a15      	ldr	r2, [pc, #84]	; (8002924 <HAL_TIM_MspPostInit+0x74>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d123      	bne.n	800291a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <HAL_TIM_MspPostInit+0x78>)
 80028d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_TIM_MspPostInit+0x78>)
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34
 80028de:	4b12      	ldr	r3, [pc, #72]	; (8002928 <HAL_TIM_MspPostInit+0x78>)
 80028e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENR_Pin|ENL_Pin;
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	22c0      	movs	r2, #192	; 0xc0
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f2:	0021      	movs	r1, r4
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2202      	movs	r2, #2
 80028f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	187b      	adds	r3, r7, r1
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2202      	movs	r2, #2
 800290a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	187a      	adds	r2, r7, r1
 800290e:	23a0      	movs	r3, #160	; 0xa0
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	0011      	movs	r1, r2
 8002914:	0018      	movs	r0, r3
 8002916:	f001 f935 	bl	8003b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b009      	add	sp, #36	; 0x24
 8002920:	bd90      	pop	{r4, r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40021000 	.word	0x40021000

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002930:	e7fe      	b.n	8002930 <NMI_Handler+0x4>

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <HardFault_Handler+0x4>

08002938 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002950:	f000 f8aa 	bl	8002aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002960:	4b03      	ldr	r3, [pc, #12]	; (8002970 <TIM3_TIM4_IRQHandler+0x14>)
 8002962:	0018      	movs	r0, r3
 8002964:	f002 fc08 	bl	8005178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	2000010c 	.word	0x2000010c

08002974 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002982:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002984:	f7ff fff6 	bl	8002974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002988:	480c      	ldr	r0, [pc, #48]	; (80029bc <LoopForever+0x6>)
  ldr r1, =_edata
 800298a:	490d      	ldr	r1, [pc, #52]	; (80029c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800298c:	4a0d      	ldr	r2, [pc, #52]	; (80029c4 <LoopForever+0xe>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002990:	e002      	b.n	8002998 <LoopCopyDataInit>

08002992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002996:	3304      	adds	r3, #4

08002998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800299c:	d3f9      	bcc.n	8002992 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029a0:	4c0a      	ldr	r4, [pc, #40]	; (80029cc <LoopForever+0x16>)
  movs r3, #0
 80029a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a4:	e001      	b.n	80029aa <LoopFillZerobss>

080029a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a8:	3204      	adds	r2, #4

080029aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029ac:	d3fb      	bcc.n	80029a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029ae:	f003 fc55 	bl	800625c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029b2:	f7ff f86d 	bl	8001a90 <main>

080029b6 <LoopForever>:

LoopForever:
  b LoopForever
 80029b6:	e7fe      	b.n	80029b6 <LoopForever>
  ldr   r0, =_estack
 80029b8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80029bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80029c4:	08006358 	.word	0x08006358
  ldr r2, =_sbss
 80029c8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80029cc:	200001b4 	.word	0x200001b4

080029d0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC1_COMP_IRQHandler>
	...

080029d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029da:	1dfb      	adds	r3, r7, #7
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_Init+0x3c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_Init+0x3c>)
 80029e6:	2180      	movs	r1, #128	; 0x80
 80029e8:	0049      	lsls	r1, r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ee:	2000      	movs	r0, #0
 80029f0:	f000 f810 	bl	8002a14 <HAL_InitTick>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029f8:	1dfb      	adds	r3, r7, #7
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e001      	b.n	8002a04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002a00:	f7ff fe7c 	bl	80026fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a04:	1dfb      	adds	r3, r7, #7
 8002a06:	781b      	ldrb	r3, [r3, #0]
}
 8002a08:	0018      	movs	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b002      	add	sp, #8
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_InitTick+0x88>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d02b      	beq.n	8002a84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_InitTick+0x8c>)
 8002a2e:	681c      	ldr	r4, [r3, #0]
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_InitTick+0x88>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	0019      	movs	r1, r3
 8002a36:	23fa      	movs	r3, #250	; 0xfa
 8002a38:	0098      	lsls	r0, r3, #2
 8002a3a:	f7fd fb63 	bl	8000104 <__udivsi3>
 8002a3e:	0003      	movs	r3, r0
 8002a40:	0019      	movs	r1, r3
 8002a42:	0020      	movs	r0, r4
 8002a44:	f7fd fb5e 	bl	8000104 <__udivsi3>
 8002a48:	0003      	movs	r3, r0
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f001 f88d 	bl	8003b6a <HAL_SYSTICK_Config>
 8002a50:	1e03      	subs	r3, r0, #0
 8002a52:	d112      	bne.n	8002a7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d80a      	bhi.n	8002a70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	425b      	negs	r3, r3
 8002a60:	2200      	movs	r2, #0
 8002a62:	0018      	movs	r0, r3
 8002a64:	f001 f85c 	bl	8003b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_InitTick+0x90>)
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e00d      	b.n	8002a8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002a70:	230f      	movs	r3, #15
 8002a72:	18fb      	adds	r3, r7, r3
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
 8002a78:	e008      	b.n	8002a8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a7a:	230f      	movs	r3, #15
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e003      	b.n	8002a8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a84:	230f      	movs	r3, #15
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002a8c:	230f      	movs	r3, #15
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	781b      	ldrb	r3, [r3, #0]
}
 8002a92:	0018      	movs	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b005      	add	sp, #20
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	2000003c 	.word	0x2000003c
 8002aa0:	20000034 	.word	0x20000034
 8002aa4:	20000038 	.word	0x20000038

08002aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aac:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_IncTick+0x1c>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_IncTick+0x20>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	18d2      	adds	r2, r2, r3
 8002ab8:	4b03      	ldr	r3, [pc, #12]	; (8002ac8 <HAL_IncTick+0x20>)
 8002aba:	601a      	str	r2, [r3, #0]
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	2000003c 	.word	0x2000003c
 8002ac8:	200001b0 	.word	0x200001b0

08002acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  return uwTick;
 8002ad0:	4b02      	ldr	r3, [pc, #8]	; (8002adc <HAL_GetTick+0x10>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	200001b0 	.word	0x200001b0

08002ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae8:	f7ff fff0 	bl	8002acc <HAL_GetTick>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	3301      	adds	r3, #1
 8002af8:	d005      	beq.n	8002b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002afa:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <HAL_Delay+0x44>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	001a      	movs	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	f7ff ffe0 	bl	8002acc <HAL_GetTick>
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d8f7      	bhi.n	8002b08 <HAL_Delay+0x28>
  {
  }
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	2000003c 	.word	0x2000003c

08002b28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	fffff9ff 	.word	0xfffff9ff

08002b54 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002b64:	401a      	ands	r2, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	fe3fffff 	.word	0xfe3fffff

08002b7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	23e0      	movs	r3, #224	; 0xe0
 8002b8a:	045b      	lsls	r3, r3, #17
 8002b8c:	4013      	ands	r3, r2
}
 8002b8e:	0018      	movs	r0, r3
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b002      	add	sp, #8
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	2104      	movs	r1, #4
 8002baa:	400a      	ands	r2, r1
 8002bac:	2107      	movs	r1, #7
 8002bae:	4091      	lsls	r1, r2
 8002bb0:	000a      	movs	r2, r1
 8002bb2:	43d2      	mvns	r2, r2
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2104      	movs	r1, #4
 8002bba:	400b      	ands	r3, r1
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4099      	lsls	r1, r3
 8002bc0:	000b      	movs	r3, r1
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	2104      	movs	r1, #4
 8002be2:	400a      	ands	r2, r1
 8002be4:	2107      	movs	r1, #7
 8002be6:	4091      	lsls	r1, r2
 8002be8:	000a      	movs	r2, r1
 8002bea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2104      	movs	r1, #4
 8002bf0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002bf2:	40da      	lsrs	r2, r3
 8002bf4:	0013      	movs	r3, r2
}
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	23c0      	movs	r3, #192	; 0xc0
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d101      	bne.n	8002c16 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c12:	2301      	movs	r3, #1
 8002c14:	e000      	b.n	8002c18 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	211f      	movs	r1, #31
 8002c34:	400a      	ands	r2, r1
 8002c36:	210f      	movs	r1, #15
 8002c38:	4091      	lsls	r1, r2
 8002c3a:	000a      	movs	r2, r1
 8002c3c:	43d2      	mvns	r2, r2
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	0e9b      	lsrs	r3, r3, #26
 8002c44:	210f      	movs	r1, #15
 8002c46:	4019      	ands	r1, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	201f      	movs	r0, #31
 8002c4c:	4003      	ands	r3, r0
 8002c4e:	4099      	lsls	r1, r3
 8002c50:	000b      	movs	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	035b      	lsls	r3, r3, #13
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b002      	add	sp, #8
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	0352      	lsls	r2, r2, #13
 8002c94:	0b52      	lsrs	r2, r2, #13
 8002c96:	43d2      	mvns	r2, r2
 8002c98:	401a      	ands	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b002      	add	sp, #8
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	0212      	lsls	r2, r2, #8
 8002cbc:	43d2      	mvns	r2, r2
 8002cbe:	401a      	ands	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	4904      	ldr	r1, [pc, #16]	; (8002cdc <LL_ADC_SetChannelSamplingTime+0x34>)
 8002cca:	400b      	ands	r3, r1
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002cd2:	46c0      	nop			; (mov r8, r8)
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	b004      	add	sp, #16
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	46c0      	nop			; (mov r8, r8)
 8002cdc:	07ffff00 	.word	0x07ffff00

08002ce0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2280      	movs	r2, #128	; 0x80
 8002cf2:	0552      	lsls	r2, r2, #21
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b002      	add	sp, #8
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	6fffffe8 	.word	0x6fffffe8

08002d08 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	401a      	ands	r2, r3
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	055b      	lsls	r3, r3, #21
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d101      	bne.n	8002d26 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b002      	add	sp, #8
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <LL_ADC_Enable+0x20>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2201      	movs	r2, #1
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	7fffffe8 	.word	0x7fffffe8

08002d54 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a04      	ldr	r2, [pc, #16]	; (8002d74 <LL_ADC_Disable+0x20>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	2202      	movs	r2, #2
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	7fffffe8 	.word	0x7fffffe8

08002d78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <LL_ADC_IsEnabled+0x18>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <LL_ADC_IsEnabled+0x1a>
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b002      	add	sp, #8
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2202      	movs	r2, #2
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d101      	bne.n	8002db2 <LL_ADC_IsDisableOngoing+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_ADC_IsDisableOngoing+0x1a>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	4a04      	ldr	r2, [pc, #16]	; (8002ddc <LL_ADC_REG_StartConversion+0x20>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2204      	movs	r2, #4
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002dd4:	46c0      	nop			; (mov r8, r8)
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b002      	add	sp, #8
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	7fffffe8 	.word	0x7fffffe8

08002de0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a04      	ldr	r2, [pc, #16]	; (8002e00 <LL_ADC_REG_StopConversion+0x20>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	2210      	movs	r2, #16
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002df8:	46c0      	nop			; (mov r8, r8)
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	7fffffe8 	.word	0x7fffffe8

08002e04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2204      	movs	r2, #4
 8002e12:	4013      	ands	r3, r2
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d101      	bne.n	8002e1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b002      	add	sp, #8
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e30:	231f      	movs	r3, #31
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e17f      	b.n	800314e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fc77 	bl	800274c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2254      	movs	r2, #84	; 0x54
 8002e68:	2100      	movs	r1, #0
 8002e6a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff49 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff ff2e 	bl	8002ce0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e84:	4bb4      	ldr	r3, [pc, #720]	; (8003158 <HAL_ADC_Init+0x330>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	49b4      	ldr	r1, [pc, #720]	; (800315c <HAL_ADC_Init+0x334>)
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7fd f93a 	bl	8000104 <__udivsi3>
 8002e90:	0003      	movs	r3, r0
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff ff2c 	bl	8002d08 <LL_ADC_IsInternalRegulatorEnabled>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d10f      	bne.n	8002ed4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	2210      	movs	r2, #16
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ecc:	231f      	movs	r3, #31
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff93 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d000      	beq.n	8002eee <HAL_ADC_Init+0xc6>
 8002eec:	e122      	b.n	8003134 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d000      	beq.n	8002ef6 <HAL_ADC_Init+0xce>
 8002ef4:	e11e      	b.n	8003134 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efa:	4a99      	ldr	r2, [pc, #612]	; (8003160 <HAL_ADC_Init+0x338>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	2202      	movs	r2, #2
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff ff34 	bl	8002d78 <LL_ADC_IsEnabled>
 8002f10:	1e03      	subs	r3, r0, #0
 8002f12:	d000      	beq.n	8002f16 <HAL_ADC_Init+0xee>
 8002f14:	e0ad      	b.n	8003072 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7e1b      	ldrb	r3, [r3, #24]
 8002f1e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f20:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7e5b      	ldrb	r3, [r3, #25]
 8002f26:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002f28:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7e9b      	ldrb	r3, [r3, #26]
 8002f2e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002f30:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_ADC_Init+0x118>
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	015b      	lsls	r3, r3, #5
 8002f3e:	e000      	b.n	8002f42 <HAL_ADC_Init+0x11a>
 8002f40:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002f42:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002f48:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da04      	bge.n	8002f5c <HAL_ADC_Init+0x134>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	e001      	b.n	8002f60 <HAL_ADC_Init+0x138>
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002f60:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	5c5b      	ldrb	r3, [r3, r1]
 8002f68:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002f6a:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2220      	movs	r2, #32
 8002f76:	5c9b      	ldrb	r3, [r3, r2]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d115      	bne.n	8002fa8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7e9b      	ldrb	r3, [r3, #26]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d105      	bne.n	8002f90 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2280      	movs	r2, #128	; 0x80
 8002f88:	0252      	lsls	r2, r2, #9
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	2220      	movs	r2, #32
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fb4:	23e0      	movs	r3, #224	; 0xe0
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_ADC_Init+0x33c>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	0f9b      	lsrs	r3, r3, #30
 8002fe2:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	223c      	movs	r2, #60	; 0x3c
 8002ff4:	5c9b      	ldrb	r3, [r3, r2]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d111      	bne.n	800301e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0f9b      	lsrs	r3, r3, #30
 8003000:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003006:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800300c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8003012:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	2201      	movs	r2, #1
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a50      	ldr	r2, [pc, #320]	; (8003168 <HAL_ADC_Init+0x340>)
 8003026:	4013      	ands	r3, r2
 8003028:	0019      	movs	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	430a      	orrs	r2, r1
 8003032:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	23c0      	movs	r3, #192	; 0xc0
 800303a:	061b      	lsls	r3, r3, #24
 800303c:	429a      	cmp	r2, r3
 800303e:	d018      	beq.n	8003072 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	05db      	lsls	r3, r3, #23
 8003048:	429a      	cmp	r2, r3
 800304a:	d012      	beq.n	8003072 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	061b      	lsls	r3, r3, #24
 8003054:	429a      	cmp	r2, r3
 8003056:	d00c      	beq.n	8003072 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8003058:	4b44      	ldr	r3, [pc, #272]	; (800316c <HAL_ADC_Init+0x344>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a44      	ldr	r2, [pc, #272]	; (8003170 <HAL_ADC_Init+0x348>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	23f0      	movs	r3, #240	; 0xf0
 8003068:	039b      	lsls	r3, r3, #14
 800306a:	401a      	ands	r2, r3
 800306c:	4b3f      	ldr	r3, [pc, #252]	; (800316c <HAL_ADC_Init+0x344>)
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307a:	001a      	movs	r2, r3
 800307c:	2100      	movs	r1, #0
 800307e:	f7ff fd8a 	bl	8002b96 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	493a      	ldr	r1, [pc, #232]	; (8003174 <HAL_ADC_Init+0x34c>)
 800308c:	001a      	movs	r2, r3
 800308e:	f7ff fd82 	bl	8002b96 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2110      	movs	r1, #16
 80030a6:	4249      	negs	r1, r1
 80030a8:	430a      	orrs	r2, r1
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28
 80030ac:	e018      	b.n	80030e0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	039b      	lsls	r3, r3, #14
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d112      	bne.n	80030e0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	221c      	movs	r2, #28
 80030ca:	4013      	ands	r3, r2
 80030cc:	2210      	movs	r2, #16
 80030ce:	4252      	negs	r2, r2
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0011      	movs	r1, r2
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2100      	movs	r1, #0
 80030e6:	0018      	movs	r0, r3
 80030e8:	f7ff fd72 	bl	8002bd0 <LL_ADC_GetSamplingTimeCommonChannels>
 80030ec:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10b      	bne.n	800310e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	2203      	movs	r2, #3
 8003102:	4393      	bics	r3, r2
 8003104:	2201      	movs	r2, #1
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800310c:	e01c      	b.n	8003148 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	2212      	movs	r2, #18
 8003114:	4393      	bics	r3, r2
 8003116:	2210      	movs	r2, #16
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	2201      	movs	r2, #1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800312a:	231f      	movs	r3, #31
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003132:	e009      	b.n	8003148 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	2210      	movs	r2, #16
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003140:	231f      	movs	r3, #31
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	2201      	movs	r2, #1
 8003146:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003148:	231f      	movs	r3, #31
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	781b      	ldrb	r3, [r3, #0]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b008      	add	sp, #32
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	20000034 	.word	0x20000034
 800315c:	00030d40 	.word	0x00030d40
 8003160:	fffffefd 	.word	0xfffffefd
 8003164:	fffe0201 	.word	0xfffe0201
 8003168:	1ffffc02 	.word	0x1ffffc02
 800316c:	40012708 	.word	0x40012708
 8003170:	ffc3ffff 	.word	0xffc3ffff
 8003174:	07ffff04 	.word	0x07ffff04

08003178 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff fe3d 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d135      	bne.n	80031fa <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2254      	movs	r2, #84	; 0x54
 8003192:	5c9b      	ldrb	r3, [r3, r2]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d101      	bne.n	800319c <HAL_ADC_Start+0x24>
 8003198:	2302      	movs	r3, #2
 800319a:	e035      	b.n	8003208 <HAL_ADC_Start+0x90>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2254      	movs	r2, #84	; 0x54
 80031a0:	2101      	movs	r1, #1
 80031a2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031a4:	250f      	movs	r5, #15
 80031a6:	197c      	adds	r4, r7, r5
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fb28 	bl	8003800 <ADC_Enable>
 80031b0:	0003      	movs	r3, r0
 80031b2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031b4:	197b      	adds	r3, r7, r5
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a13      	ldr	r2, [pc, #76]	; (8003210 <HAL_ADC_Start+0x98>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	2280      	movs	r2, #128	; 0x80
 80031c6:	0052      	lsls	r2, r2, #1
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	221c      	movs	r2, #28
 80031da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2254      	movs	r2, #84	; 0x54
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff fde7 	bl	8002dbc <LL_ADC_REG_StartConversion>
 80031ee:	e008      	b.n	8003202 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2254      	movs	r2, #84	; 0x54
 80031f4:	2100      	movs	r1, #0
 80031f6:	5499      	strb	r1, [r3, r2]
 80031f8:	e003      	b.n	8003202 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031fa:	230f      	movs	r3, #15
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003202:	230f      	movs	r3, #15
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	781b      	ldrb	r3, [r3, #0]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bdb0      	pop	{r4, r5, r7, pc}
 8003210:	fffff0fe 	.word	0xfffff0fe

08003214 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2254      	movs	r2, #84	; 0x54
 8003220:	5c9b      	ldrb	r3, [r3, r2]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_ADC_Stop+0x16>
 8003226:	2302      	movs	r3, #2
 8003228:	e029      	b.n	800327e <HAL_ADC_Stop+0x6a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2254      	movs	r2, #84	; 0x54
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003232:	250f      	movs	r5, #15
 8003234:	197c      	adds	r4, r7, r5
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fa9f 	bl	800377c <ADC_ConversionStop>
 800323e:	0003      	movs	r3, r0
 8003240:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003242:	197b      	adds	r3, r7, r5
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d112      	bne.n	8003270 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800324a:	197c      	adds	r4, r7, r5
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	0018      	movs	r0, r3
 8003250:	f000 fb5c 	bl	800390c <ADC_Disable>
 8003254:	0003      	movs	r3, r0
 8003256:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003258:	197b      	adds	r3, r7, r5
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a08      	ldr	r2, [pc, #32]	; (8003288 <HAL_ADC_Stop+0x74>)
 8003266:	4013      	ands	r3, r2
 8003268:	2201      	movs	r2, #1
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2254      	movs	r2, #84	; 0x54
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003278:	230f      	movs	r3, #15
 800327a:	18fb      	adds	r3, r7, r3
 800327c:	781b      	ldrb	r3, [r3, #0]
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bdb0      	pop	{r4, r5, r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	fffffefe 	.word	0xfffffefe

0800328c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b08      	cmp	r3, #8
 800329c:	d102      	bne.n	80032a4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800329e:	2308      	movs	r3, #8
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e00f      	b.n	80032c4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	4013      	ands	r3, r2
 80032ae:	d007      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b4:	2220      	movs	r2, #32
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e072      	b.n	80033a6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032c0:	2304      	movs	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032c4:	f7ff fc02 	bl	8002acc <HAL_GetTick>
 80032c8:	0003      	movs	r3, r0
 80032ca:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032cc:	e01f      	b.n	800330e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	d01c      	beq.n	800330e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032d4:	f7ff fbfa 	bl	8002acc <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d302      	bcc.n	80032ea <HAL_ADC_PollForConversion+0x5e>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d111      	bne.n	800330e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4013      	ands	r3, r2
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032fa:	2204      	movs	r2, #4
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2254      	movs	r2, #84	; 0x54
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04b      	b.n	80033a6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	d0d9      	beq.n	80032ce <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	0092      	lsls	r2, r2, #2
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fc66 	bl	8002bfe <LL_ADC_REG_IsTriggerSourceSWStart>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d02e      	beq.n	8003394 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7e9b      	ldrb	r3, [r3, #26]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d12a      	bne.n	8003394 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2208      	movs	r2, #8
 8003346:	4013      	ands	r3, r2
 8003348:	2b08      	cmp	r3, #8
 800334a:	d123      	bne.n	8003394 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff fd57 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 8003356:	1e03      	subs	r3, r0, #0
 8003358:	d110      	bne.n	800337c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	210c      	movs	r1, #12
 8003366:	438a      	bics	r2, r1
 8003368:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_ADC_PollForConversion+0x124>)
 8003370:	4013      	ands	r3, r2
 8003372:	2201      	movs	r2, #1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	659a      	str	r2, [r3, #88]	; 0x58
 800337a:	e00b      	b.n	8003394 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	2220      	movs	r2, #32
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2201      	movs	r2, #1
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d103      	bne.n	80033a4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	220c      	movs	r2, #12
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	fffffefe 	.word	0xfffffefe

080033b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80033c2:	0018      	movs	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033d6:	2317      	movs	r3, #23
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2254      	movs	r2, #84	; 0x54
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x24>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e1c0      	b.n	8003772 <HAL_ADC_ConfigChannel+0x3a6>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2254      	movs	r2, #84	; 0x54
 80033f4:	2101      	movs	r1, #1
 80033f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7ff fd01 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 8003402:	1e03      	subs	r3, r0, #0
 8003404:	d000      	beq.n	8003408 <HAL_ADC_ConfigChannel+0x3c>
 8003406:	e1a3      	b.n	8003750 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d100      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x46>
 8003410:	e143      	b.n	800369a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691a      	ldr	r2, [r3, #16]
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	429a      	cmp	r2, r3
 800341c:	d004      	beq.n	8003428 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003422:	4ac1      	ldr	r2, [pc, #772]	; (8003728 <HAL_ADC_ConfigChannel+0x35c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d108      	bne.n	800343a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0019      	movs	r1, r3
 8003432:	0010      	movs	r0, r2
 8003434:	f7ff fc14 	bl	8002c60 <LL_ADC_REG_SetSequencerChAdd>
 8003438:	e0c9      	b.n	80035ce <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	211f      	movs	r1, #31
 8003444:	400b      	ands	r3, r1
 8003446:	210f      	movs	r1, #15
 8003448:	4099      	lsls	r1, r3
 800344a:	000b      	movs	r3, r1
 800344c:	43db      	mvns	r3, r3
 800344e:	4013      	ands	r3, r2
 8003450:	0019      	movs	r1, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	035b      	lsls	r3, r3, #13
 8003458:	0b5b      	lsrs	r3, r3, #13
 800345a:	d105      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x9c>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	221f      	movs	r2, #31
 8003464:	4013      	ands	r3, r2
 8003466:	e098      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d000      	beq.n	8003474 <HAL_ADC_ConfigChannel+0xa8>
 8003472:	e091      	b.n	8003598 <HAL_ADC_ConfigChannel+0x1cc>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2202      	movs	r2, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d000      	beq.n	8003480 <HAL_ADC_ConfigChannel+0xb4>
 800347e:	e089      	b.n	8003594 <HAL_ADC_ConfigChannel+0x1c8>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2204      	movs	r2, #4
 8003486:	4013      	ands	r3, r2
 8003488:	d000      	beq.n	800348c <HAL_ADC_ConfigChannel+0xc0>
 800348a:	e081      	b.n	8003590 <HAL_ADC_ConfigChannel+0x1c4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	4013      	ands	r3, r2
 8003494:	d000      	beq.n	8003498 <HAL_ADC_ConfigChannel+0xcc>
 8003496:	e079      	b.n	800358c <HAL_ADC_ConfigChannel+0x1c0>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2210      	movs	r2, #16
 800349e:	4013      	ands	r3, r2
 80034a0:	d000      	beq.n	80034a4 <HAL_ADC_ConfigChannel+0xd8>
 80034a2:	e071      	b.n	8003588 <HAL_ADC_ConfigChannel+0x1bc>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2220      	movs	r2, #32
 80034aa:	4013      	ands	r3, r2
 80034ac:	d000      	beq.n	80034b0 <HAL_ADC_ConfigChannel+0xe4>
 80034ae:	e069      	b.n	8003584 <HAL_ADC_ConfigChannel+0x1b8>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2240      	movs	r2, #64	; 0x40
 80034b6:	4013      	ands	r3, r2
 80034b8:	d000      	beq.n	80034bc <HAL_ADC_ConfigChannel+0xf0>
 80034ba:	e061      	b.n	8003580 <HAL_ADC_ConfigChannel+0x1b4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	4013      	ands	r3, r2
 80034c4:	d000      	beq.n	80034c8 <HAL_ADC_ConfigChannel+0xfc>
 80034c6:	e059      	b.n	800357c <HAL_ADC_ConfigChannel+0x1b0>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4013      	ands	r3, r2
 80034d2:	d151      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x1ac>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	d149      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x1a8>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	d141      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1a4>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	4013      	ands	r3, r2
 80034f6:	d139      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1a0>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	015b      	lsls	r3, r3, #5
 8003500:	4013      	ands	r3, r2
 8003502:	d131      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x19c>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	019b      	lsls	r3, r3, #6
 800350c:	4013      	ands	r3, r2
 800350e:	d129      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x198>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	01db      	lsls	r3, r3, #7
 8003518:	4013      	ands	r3, r2
 800351a:	d121      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x194>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	4013      	ands	r3, r2
 8003526:	d119      	bne.n	800355c <HAL_ADC_ConfigChannel+0x190>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	2380      	movs	r3, #128	; 0x80
 800352e:	025b      	lsls	r3, r3, #9
 8003530:	4013      	ands	r3, r2
 8003532:	d111      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x18c>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	029b      	lsls	r3, r3, #10
 800353c:	4013      	ands	r3, r2
 800353e:	d109      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x188>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	02db      	lsls	r3, r3, #11
 8003548:	4013      	ands	r3, r2
 800354a:	d001      	beq.n	8003550 <HAL_ADC_ConfigChannel+0x184>
 800354c:	2312      	movs	r3, #18
 800354e:	e024      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003550:	2300      	movs	r3, #0
 8003552:	e022      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003554:	2311      	movs	r3, #17
 8003556:	e020      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003558:	2310      	movs	r3, #16
 800355a:	e01e      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 800355c:	230f      	movs	r3, #15
 800355e:	e01c      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003560:	230e      	movs	r3, #14
 8003562:	e01a      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003564:	230d      	movs	r3, #13
 8003566:	e018      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003568:	230c      	movs	r3, #12
 800356a:	e016      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 800356c:	230b      	movs	r3, #11
 800356e:	e014      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003570:	230a      	movs	r3, #10
 8003572:	e012      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003574:	2309      	movs	r3, #9
 8003576:	e010      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003578:	2308      	movs	r3, #8
 800357a:	e00e      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 800357c:	2307      	movs	r3, #7
 800357e:	e00c      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003580:	2306      	movs	r3, #6
 8003582:	e00a      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003584:	2305      	movs	r3, #5
 8003586:	e008      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003588:	2304      	movs	r3, #4
 800358a:	e006      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 800358c:	2303      	movs	r3, #3
 800358e:	e004      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003590:	2302      	movs	r3, #2
 8003592:	e002      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_ADC_ConfigChannel+0x1ce>
 8003598:	2300      	movs	r3, #0
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	6852      	ldr	r2, [r2, #4]
 800359e:	201f      	movs	r0, #31
 80035a0:	4002      	ands	r2, r0
 80035a2:	4093      	lsls	r3, r2
 80035a4:	000a      	movs	r2, r1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d808      	bhi.n	80035ce <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	001a      	movs	r2, r3
 80035ca:	f7ff fb29 	bl	8002c20 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	001a      	movs	r2, r3
 80035dc:	f7ff fb64 	bl	8002ca8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	db00      	blt.n	80035ea <HAL_ADC_ConfigChannel+0x21e>
 80035e8:	e0bc      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ea:	4b50      	ldr	r3, [pc, #320]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 80035ec:	0018      	movs	r0, r3
 80035ee:	f7ff fac5 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 80035f2:	0003      	movs	r3, r0
 80035f4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a4d      	ldr	r2, [pc, #308]	; (8003730 <HAL_ADC_ConfigChannel+0x364>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d122      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	2380      	movs	r3, #128	; 0x80
 8003604:	041b      	lsls	r3, r3, #16
 8003606:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003608:	d11d      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0412      	lsls	r2, r2, #16
 8003610:	4313      	orrs	r3, r2
 8003612:	4a46      	ldr	r2, [pc, #280]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 8003614:	0019      	movs	r1, r3
 8003616:	0010      	movs	r0, r2
 8003618:	f7ff fa9c 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800361c:	4b45      	ldr	r3, [pc, #276]	; (8003734 <HAL_ADC_ConfigChannel+0x368>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4945      	ldr	r1, [pc, #276]	; (8003738 <HAL_ADC_ConfigChannel+0x36c>)
 8003622:	0018      	movs	r0, r3
 8003624:	f7fc fd6e 	bl	8000104 <__udivsi3>
 8003628:	0003      	movs	r3, r0
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	0013      	movs	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	189b      	adds	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003636:	e002      	b.n	800363e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3b01      	subs	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f9      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003644:	e08e      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_ADC_ConfigChannel+0x370>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10e      	bne.n	800366e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	045b      	lsls	r3, r3, #17
 8003656:	4013      	ands	r3, r2
 8003658:	d109      	bne.n	800366e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	0452      	lsls	r2, r2, #17
 8003660:	4313      	orrs	r3, r2
 8003662:	4a32      	ldr	r2, [pc, #200]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 8003664:	0019      	movs	r1, r3
 8003666:	0010      	movs	r0, r2
 8003668:	f7ff fa74 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
 800366c:	e07a      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a33      	ldr	r2, [pc, #204]	; (8003740 <HAL_ADC_ConfigChannel+0x374>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d000      	beq.n	800367a <HAL_ADC_ConfigChannel+0x2ae>
 8003678:	e074      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	03db      	lsls	r3, r3, #15
 8003680:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003682:	d000      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x2ba>
 8003684:	e06e      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	03d2      	lsls	r2, r2, #15
 800368c:	4313      	orrs	r3, r2
 800368e:	4a27      	ldr	r2, [pc, #156]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 8003690:	0019      	movs	r1, r3
 8003692:	0010      	movs	r0, r2
 8003694:	f7ff fa5e 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
 8003698:	e064      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d004      	beq.n	80036b0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80036aa:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <HAL_ADC_ConfigChannel+0x35c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d107      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0019      	movs	r1, r3
 80036ba:	0010      	movs	r0, r2
 80036bc:	f7ff fae1 	bl	8002c82 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da4d      	bge.n	8003764 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7ff fa56 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 80036d0:	0003      	movs	r3, r0
 80036d2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a15      	ldr	r2, [pc, #84]	; (8003730 <HAL_ADC_ConfigChannel+0x364>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d108      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4a18      	ldr	r2, [pc, #96]	; (8003744 <HAL_ADC_ConfigChannel+0x378>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	4a11      	ldr	r2, [pc, #68]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 80036e6:	0019      	movs	r1, r3
 80036e8:	0010      	movs	r0, r2
 80036ea:	f7ff fa33 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
 80036ee:	e039      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_ADC_ConfigChannel+0x370>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d108      	bne.n	800370c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_ADC_ConfigChannel+0x37c>)
 80036fe:	4013      	ands	r3, r2
 8003700:	4a0a      	ldr	r2, [pc, #40]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 8003702:	0019      	movs	r1, r3
 8003704:	0010      	movs	r0, r2
 8003706:	f7ff fa25 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
 800370a:	e02b      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_ADC_ConfigChannel+0x374>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d126      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4a0c      	ldr	r2, [pc, #48]	; (800374c <HAL_ADC_ConfigChannel+0x380>)
 800371a:	4013      	ands	r3, r2
 800371c:	4a03      	ldr	r2, [pc, #12]	; (800372c <HAL_ADC_ConfigChannel+0x360>)
 800371e:	0019      	movs	r1, r3
 8003720:	0010      	movs	r0, r2
 8003722:	f7ff fa17 	bl	8002b54 <LL_ADC_SetCommonPathInternalCh>
 8003726:	e01d      	b.n	8003764 <HAL_ADC_ConfigChannel+0x398>
 8003728:	80000004 	.word	0x80000004
 800372c:	40012708 	.word	0x40012708
 8003730:	b0001000 	.word	0xb0001000
 8003734:	20000034 	.word	0x20000034
 8003738:	00030d40 	.word	0x00030d40
 800373c:	b8004000 	.word	0xb8004000
 8003740:	b4002000 	.word	0xb4002000
 8003744:	ff7fffff 	.word	0xff7fffff
 8003748:	feffffff 	.word	0xfeffffff
 800374c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003754:	2220      	movs	r2, #32
 8003756:	431a      	orrs	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800375c:	2317      	movs	r3, #23
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2254      	movs	r2, #84	; 0x54
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800376c:	2317      	movs	r3, #23
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b006      	add	sp, #24
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)

0800377c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fb3b 	bl	8002e04 <LL_ADC_REG_IsConversionOngoing>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d031      	beq.n	80037f6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff faff 	bl	8002d9a <LL_ADC_IsDisableOngoing>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d104      	bne.n	80037aa <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fb1b 	bl	8002de0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037aa:	f7ff f98f 	bl	8002acc <HAL_GetTick>
 80037ae:	0003      	movs	r3, r0
 80037b0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037b2:	e01a      	b.n	80037ea <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037b4:	f7ff f98a 	bl	8002acc <HAL_GetTick>
 80037b8:	0002      	movs	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d913      	bls.n	80037ea <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d00d      	beq.n	80037ea <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d2:	2210      	movs	r2, #16
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	2201      	movs	r2, #1
 80037e0:	431a      	orrs	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e006      	b.n	80037f8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2204      	movs	r2, #4
 80037f2:	4013      	ands	r3, r2
 80037f4:	d1de      	bne.n	80037b4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b004      	add	sp, #16
 80037fe:	bd80      	pop	{r7, pc}

08003800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003808:	2300      	movs	r3, #0
 800380a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff fab1 	bl	8002d78 <LL_ADC_IsEnabled>
 8003816:	1e03      	subs	r3, r0, #0
 8003818:	d000      	beq.n	800381c <ADC_Enable+0x1c>
 800381a:	e069      	b.n	80038f0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a36      	ldr	r2, [pc, #216]	; (80038fc <ADC_Enable+0xfc>)
 8003824:	4013      	ands	r3, r2
 8003826:	d00d      	beq.n	8003844 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382c:	2210      	movs	r2, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2201      	movs	r2, #1
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e056      	b.n	80038f2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff fa71 	bl	8002d30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <ADC_Enable+0x100>)
 8003850:	0018      	movs	r0, r3
 8003852:	f7ff f993 	bl	8002b7c <LL_ADC_GetCommonPathInternalCh>
 8003856:	0002      	movs	r2, r0
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	4013      	ands	r3, r2
 800385e:	d00f      	beq.n	8003880 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003860:	4b28      	ldr	r3, [pc, #160]	; (8003904 <ADC_Enable+0x104>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4928      	ldr	r1, [pc, #160]	; (8003908 <ADC_Enable+0x108>)
 8003866:	0018      	movs	r0, r3
 8003868:	f7fc fc4c 	bl	8000104 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003870:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003872:	e002      	b.n	800387a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	3b01      	subs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f9      	bne.n	8003874 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	7e5b      	ldrb	r3, [r3, #25]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d033      	beq.n	80038f0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003888:	f7ff f920 	bl	8002acc <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003890:	e027      	b.n	80038e2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fa6e 	bl	8002d78 <LL_ADC_IsEnabled>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d104      	bne.n	80038aa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f7ff fa43 	bl	8002d30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038aa:	f7ff f90f 	bl	8002acc <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d914      	bls.n	80038e2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2201      	movs	r2, #1
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d00d      	beq.n	80038e2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ca:	2210      	movs	r2, #16
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2201      	movs	r2, #1
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e007      	b.n	80038f2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d1d0      	bne.n	8003892 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	80000017 	.word	0x80000017
 8003900:	40012708 	.word	0x40012708
 8003904:	20000034 	.word	0x20000034
 8003908:	00030d40 	.word	0x00030d40

0800390c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fa3e 	bl	8002d9a <LL_ADC_IsDisableOngoing>
 800391e:	0003      	movs	r3, r0
 8003920:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fa26 	bl	8002d78 <LL_ADC_IsEnabled>
 800392c:	1e03      	subs	r3, r0, #0
 800392e:	d046      	beq.n	80039be <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d143      	bne.n	80039be <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2205      	movs	r2, #5
 800393e:	4013      	ands	r3, r2
 8003940:	2b01      	cmp	r3, #1
 8003942:	d10d      	bne.n	8003960 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff fa03 	bl	8002d54 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2203      	movs	r2, #3
 8003954:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003956:	f7ff f8b9 	bl	8002acc <HAL_GetTick>
 800395a:	0003      	movs	r3, r0
 800395c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800395e:	e028      	b.n	80039b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	2210      	movs	r2, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	2201      	movs	r2, #1
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e021      	b.n	80039c0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800397c:	f7ff f8a6 	bl	8002acc <HAL_GetTick>
 8003980:	0002      	movs	r2, r0
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d913      	bls.n	80039b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	d00d      	beq.n	80039b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	2210      	movs	r2, #16
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a6:	2201      	movs	r2, #1
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e006      	b.n	80039c0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d1de      	bne.n	800397c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	0002      	movs	r2, r0
 80039d0:	1dfb      	adds	r3, r7, #7
 80039d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039d4:	1dfb      	adds	r3, r7, #7
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b7f      	cmp	r3, #127	; 0x7f
 80039da:	d809      	bhi.n	80039f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039dc:	1dfb      	adds	r3, r7, #7
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	001a      	movs	r2, r3
 80039e2:	231f      	movs	r3, #31
 80039e4:	401a      	ands	r2, r3
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <__NVIC_EnableIRQ+0x30>)
 80039e8:	2101      	movs	r1, #1
 80039ea:	4091      	lsls	r1, r2
 80039ec:	000a      	movs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80039f0:	46c0      	nop			; (mov r8, r8)
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b002      	add	sp, #8
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	0002      	movs	r2, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a10:	d828      	bhi.n	8003a64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a12:	4a2f      	ldr	r2, [pc, #188]	; (8003ad0 <__NVIC_SetPriority+0xd4>)
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	33c0      	adds	r3, #192	; 0xc0
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	589b      	ldr	r3, [r3, r2]
 8003a22:	1dfa      	adds	r2, r7, #7
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	0011      	movs	r1, r2
 8003a28:	2203      	movs	r2, #3
 8003a2a:	400a      	ands	r2, r1
 8003a2c:	00d2      	lsls	r2, r2, #3
 8003a2e:	21ff      	movs	r1, #255	; 0xff
 8003a30:	4091      	lsls	r1, r2
 8003a32:	000a      	movs	r2, r1
 8003a34:	43d2      	mvns	r2, r2
 8003a36:	401a      	ands	r2, r3
 8003a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	019b      	lsls	r3, r3, #6
 8003a3e:	22ff      	movs	r2, #255	; 0xff
 8003a40:	401a      	ands	r2, r3
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	0018      	movs	r0, r3
 8003a48:	2303      	movs	r3, #3
 8003a4a:	4003      	ands	r3, r0
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a50:	481f      	ldr	r0, [pc, #124]	; (8003ad0 <__NVIC_SetPriority+0xd4>)
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b25b      	sxtb	r3, r3
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	33c0      	adds	r3, #192	; 0xc0
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a62:	e031      	b.n	8003ac8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <__NVIC_SetPriority+0xd8>)
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	230f      	movs	r3, #15
 8003a6e:	400b      	ands	r3, r1
 8003a70:	3b08      	subs	r3, #8
 8003a72:	089b      	lsrs	r3, r3, #2
 8003a74:	3306      	adds	r3, #6
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	18d3      	adds	r3, r2, r3
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	1dfa      	adds	r2, r7, #7
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	0011      	movs	r1, r2
 8003a84:	2203      	movs	r2, #3
 8003a86:	400a      	ands	r2, r1
 8003a88:	00d2      	lsls	r2, r2, #3
 8003a8a:	21ff      	movs	r1, #255	; 0xff
 8003a8c:	4091      	lsls	r1, r2
 8003a8e:	000a      	movs	r2, r1
 8003a90:	43d2      	mvns	r2, r2
 8003a92:	401a      	ands	r2, r3
 8003a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	019b      	lsls	r3, r3, #6
 8003a9a:	22ff      	movs	r2, #255	; 0xff
 8003a9c:	401a      	ands	r2, r3
 8003a9e:	1dfb      	adds	r3, r7, #7
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003aac:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <__NVIC_SetPriority+0xd8>)
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	001c      	movs	r4, r3
 8003ab4:	230f      	movs	r3, #15
 8003ab6:	4023      	ands	r3, r4
 8003ab8:	3b08      	subs	r3, #8
 8003aba:	089b      	lsrs	r3, r3, #2
 8003abc:	430a      	orrs	r2, r1
 8003abe:	3306      	adds	r3, #6
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	18c3      	adds	r3, r0, r3
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	601a      	str	r2, [r3, #0]
}
 8003ac8:	46c0      	nop			; (mov r8, r8)
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b003      	add	sp, #12
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	e000e100 	.word	0xe000e100
 8003ad4:	e000ed00 	.word	0xe000ed00

08003ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1e5a      	subs	r2, r3, #1
 8003ae4:	2380      	movs	r3, #128	; 0x80
 8003ae6:	045b      	lsls	r3, r3, #17
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d301      	bcc.n	8003af0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aec:	2301      	movs	r3, #1
 8003aee:	e010      	b.n	8003b12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003af0:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <SysTick_Config+0x44>)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	3a01      	subs	r2, #1
 8003af6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af8:	2301      	movs	r3, #1
 8003afa:	425b      	negs	r3, r3
 8003afc:	2103      	movs	r1, #3
 8003afe:	0018      	movs	r0, r3
 8003b00:	f7ff ff7c 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <SysTick_Config+0x44>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b0a:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <SysTick_Config+0x44>)
 8003b0c:	2207      	movs	r2, #7
 8003b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b002      	add	sp, #8
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	e000e010 	.word	0xe000e010

08003b20 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	187b      	adds	r3, r7, r1
 8003b2e:	1c02      	adds	r2, r0, #0
 8003b30:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	187b      	adds	r3, r7, r1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff ff5d 	bl	80039fc <__NVIC_SetPriority>
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b004      	add	sp, #16
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	0002      	movs	r2, r0
 8003b52:	1dfb      	adds	r3, r7, #7
 8003b54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b56:	1dfb      	adds	r3, r7, #7
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b25b      	sxtb	r3, r3
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff ff33 	bl	80039c8 <__NVIC_EnableIRQ>
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	0018      	movs	r0, r3
 8003b76:	f7ff ffaf 	bl	8003ad8 <SysTick_Config>
 8003b7a:	0003      	movs	r3, r0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b92:	e14d      	b.n	8003e30 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2101      	movs	r1, #1
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4091      	lsls	r1, r2
 8003b9e:	000a      	movs	r2, r1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d100      	bne.n	8003bac <HAL_GPIO_Init+0x28>
 8003baa:	e13e      	b.n	8003e2a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d005      	beq.n	8003bc4 <HAL_GPIO_Init+0x40>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d130      	bne.n	8003c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	0013      	movs	r3, r2
 8003bd4:	43da      	mvns	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	0013      	movs	r3, r2
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	0013      	movs	r3, r2
 8003c02:	43da      	mvns	r2, r3
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4013      	ands	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	2201      	movs	r2, #1
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
 8003c18:	0013      	movs	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d017      	beq.n	8003c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	0013      	movs	r3, r2
 8003c42:	43da      	mvns	r2, r3
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	409a      	lsls	r2, r3
 8003c54:	0013      	movs	r3, r2
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d123      	bne.n	8003cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	08da      	lsrs	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3208      	adds	r2, #8
 8003c76:	0092      	lsls	r2, r2, #2
 8003c78:	58d3      	ldr	r3, [r2, r3]
 8003c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	4013      	ands	r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691a      	ldr	r2, [r3, #16]
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2107      	movs	r1, #7
 8003c9a:	400b      	ands	r3, r1
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	08da      	lsrs	r2, r3, #3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3208      	adds	r2, #8
 8003cb0:	0092      	lsls	r2, r2, #2
 8003cb2:	6939      	ldr	r1, [r7, #16]
 8003cb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	2203      	movs	r2, #3
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	43da      	mvns	r2, r3
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	0013      	movs	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	23c0      	movs	r3, #192	; 0xc0
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d100      	bne.n	8003cf8 <HAL_GPIO_Init+0x174>
 8003cf6:	e098      	b.n	8003e2a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003cf8:	4a53      	ldr	r2, [pc, #332]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3318      	adds	r3, #24
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	589b      	ldr	r3, [r3, r2]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2203      	movs	r2, #3
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	220f      	movs	r2, #15
 8003d10:	409a      	lsls	r2, r3
 8003d12:	0013      	movs	r3, r2
 8003d14:	43da      	mvns	r2, r3
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	23a0      	movs	r3, #160	; 0xa0
 8003d20:	05db      	lsls	r3, r3, #23
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d019      	beq.n	8003d5a <HAL_GPIO_Init+0x1d6>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a48      	ldr	r2, [pc, #288]	; (8003e4c <HAL_GPIO_Init+0x2c8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <HAL_GPIO_Init+0x1d2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a47      	ldr	r2, [pc, #284]	; (8003e50 <HAL_GPIO_Init+0x2cc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00d      	beq.n	8003d52 <HAL_GPIO_Init+0x1ce>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a46      	ldr	r2, [pc, #280]	; (8003e54 <HAL_GPIO_Init+0x2d0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <HAL_GPIO_Init+0x1ca>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a45      	ldr	r2, [pc, #276]	; (8003e58 <HAL_GPIO_Init+0x2d4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d101      	bne.n	8003d4a <HAL_GPIO_Init+0x1c6>
 8003d46:	2304      	movs	r3, #4
 8003d48:	e008      	b.n	8003d5c <HAL_GPIO_Init+0x1d8>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_Init+0x1d8>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e004      	b.n	8003d5c <HAL_GPIO_Init+0x1d8>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e002      	b.n	8003d5c <HAL_GPIO_Init+0x1d8>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <HAL_GPIO_Init+0x1d8>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	2103      	movs	r1, #3
 8003d60:	400a      	ands	r2, r1
 8003d62:	00d2      	lsls	r2, r2, #3
 8003d64:	4093      	lsls	r3, r2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d6c:	4936      	ldr	r1, [pc, #216]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	3318      	adds	r3, #24
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d7a:	4b33      	ldr	r3, [pc, #204]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	43da      	mvns	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	2380      	movs	r3, #128	; 0x80
 8003d90:	035b      	lsls	r3, r3, #13
 8003d92:	4013      	ands	r3, r2
 8003d94:	d003      	beq.n	8003d9e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	43da      	mvns	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4013      	ands	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	2380      	movs	r3, #128	; 0x80
 8003dba:	039b      	lsls	r3, r3, #14
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003dd0:	2384      	movs	r3, #132	; 0x84
 8003dd2:	58d3      	ldr	r3, [r2, r3]
 8003dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	43da      	mvns	r2, r3
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	4013      	ands	r3, r2
 8003dea:	d003      	beq.n	8003df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df4:	4914      	ldr	r1, [pc, #80]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003df6:	2284      	movs	r2, #132	; 0x84
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003dfe:	2380      	movs	r3, #128	; 0x80
 8003e00:	58d3      	ldr	r3, [r2, r3]
 8003e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	43da      	mvns	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	4013      	ands	r3, r2
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e22:	4909      	ldr	r1, [pc, #36]	; (8003e48 <HAL_GPIO_Init+0x2c4>)
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	40da      	lsrs	r2, r3
 8003e38:	1e13      	subs	r3, r2, #0
 8003e3a:	d000      	beq.n	8003e3e <HAL_GPIO_Init+0x2ba>
 8003e3c:	e6aa      	b.n	8003b94 <HAL_GPIO_Init+0x10>
  }
}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b006      	add	sp, #24
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40021800 	.word	0x40021800
 8003e4c:	50000400 	.word	0x50000400
 8003e50:	50000800 	.word	0x50000800
 8003e54:	50000c00 	.word	0x50000c00
 8003e58:	50001000 	.word	0x50001000

08003e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	0008      	movs	r0, r1
 8003e66:	0011      	movs	r1, r2
 8003e68:	1cbb      	adds	r3, r7, #2
 8003e6a:	1c02      	adds	r2, r0, #0
 8003e6c:	801a      	strh	r2, [r3, #0]
 8003e6e:	1c7b      	adds	r3, r7, #1
 8003e70:	1c0a      	adds	r2, r1, #0
 8003e72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e74:	1c7b      	adds	r3, r7, #1
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e7c:	1cbb      	adds	r3, r7, #2
 8003e7e:	881a      	ldrh	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e84:	e003      	b.n	8003e8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e86:	1cbb      	adds	r3, r7, #2
 8003e88:	881a      	ldrh	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b002      	add	sp, #8
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d11f      	bne.n	8003efc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003ebc:	4b14      	ldr	r3, [pc, #80]	; (8003f10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	0013      	movs	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	189b      	adds	r3, r3, r2
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	4912      	ldr	r1, [pc, #72]	; (8003f14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f7fc f91a 	bl	8000104 <__udivsi3>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ed6:	e008      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e001      	b.n	8003eea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e009      	b.n	8003efe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	2380      	movs	r3, #128	; 0x80
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d0ed      	beq.n	8003ed8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b004      	add	sp, #16
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	fffff9ff 	.word	0xfffff9ff
 8003f10:	20000034 	.word	0x20000034
 8003f14:	000f4240 	.word	0x000f4240

08003f18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f000 fb50 	bl	80045cc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2201      	movs	r2, #1
 8003f32:	4013      	ands	r3, r2
 8003f34:	d100      	bne.n	8003f38 <HAL_RCC_OscConfig+0x20>
 8003f36:	e07c      	b.n	8004032 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f38:	4bc3      	ldr	r3, [pc, #780]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	2238      	movs	r2, #56	; 0x38
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f42:	4bc1      	ldr	r3, [pc, #772]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	2203      	movs	r2, #3
 8003f48:	4013      	ands	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d102      	bne.n	8003f58 <HAL_RCC_OscConfig+0x40>
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d002      	beq.n	8003f5e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5e:	4bba      	ldr	r3, [pc, #744]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	029b      	lsls	r3, r3, #10
 8003f66:	4013      	ands	r3, r2
 8003f68:	d062      	beq.n	8004030 <HAL_RCC_OscConfig+0x118>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d15e      	bne.n	8004030 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e32a      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_OscConfig+0x7a>
 8003f82:	4bb1      	ldr	r3, [pc, #708]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4bb0      	ldr	r3, [pc, #704]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003f88:	2180      	movs	r1, #128	; 0x80
 8003f8a:	0249      	lsls	r1, r1, #9
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	e020      	b.n	8003fd4 <HAL_RCC_OscConfig+0xbc>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	23a0      	movs	r3, #160	; 0xa0
 8003f98:	02db      	lsls	r3, r3, #11
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10e      	bne.n	8003fbc <HAL_RCC_OscConfig+0xa4>
 8003f9e:	4baa      	ldr	r3, [pc, #680]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	4ba9      	ldr	r3, [pc, #676]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	02c9      	lsls	r1, r1, #11
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	4ba6      	ldr	r3, [pc, #664]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4ba5      	ldr	r3, [pc, #660]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	0249      	lsls	r1, r1, #9
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	e00b      	b.n	8003fd4 <HAL_RCC_OscConfig+0xbc>
 8003fbc:	4ba2      	ldr	r3, [pc, #648]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4ba1      	ldr	r3, [pc, #644]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fc2:	49a2      	ldr	r1, [pc, #648]	; (800424c <HAL_RCC_OscConfig+0x334>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	4b9f      	ldr	r3, [pc, #636]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b9e      	ldr	r3, [pc, #632]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003fce:	49a0      	ldr	r1, [pc, #640]	; (8004250 <HAL_RCC_OscConfig+0x338>)
 8003fd0:	400a      	ands	r2, r1
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d014      	beq.n	8004006 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fe fd76 	bl	8002acc <HAL_GetTick>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe6:	f7fe fd71 	bl	8002acc <HAL_GetTick>
 8003fea:	0002      	movs	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b64      	cmp	r3, #100	; 0x64
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e2e9      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff8:	4b93      	ldr	r3, [pc, #588]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	029b      	lsls	r3, r3, #10
 8004000:	4013      	ands	r3, r2
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0xce>
 8004004:	e015      	b.n	8004032 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fe fd61 	bl	8002acc <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7fe fd5c 	bl	8002acc <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	; 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e2d4      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	4b89      	ldr	r3, [pc, #548]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	4013      	ands	r3, r2
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0xf8>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d100      	bne.n	800403e <HAL_RCC_OscConfig+0x126>
 800403c:	e099      	b.n	8004172 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800403e:	4b82      	ldr	r3, [pc, #520]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2238      	movs	r2, #56	; 0x38
 8004044:	4013      	ands	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004048:	4b7f      	ldr	r3, [pc, #508]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2203      	movs	r2, #3
 800404e:	4013      	ands	r3, r2
 8004050:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b10      	cmp	r3, #16
 8004056:	d102      	bne.n	800405e <HAL_RCC_OscConfig+0x146>
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d002      	beq.n	8004064 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d135      	bne.n	80040d0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	4b78      	ldr	r3, [pc, #480]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	; 0x80
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4013      	ands	r3, r2
 800406e:	d005      	beq.n	800407c <HAL_RCC_OscConfig+0x164>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e2a7      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407c:	4b72      	ldr	r3, [pc, #456]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4a74      	ldr	r2, [pc, #464]	; (8004254 <HAL_RCC_OscConfig+0x33c>)
 8004082:	4013      	ands	r3, r2
 8004084:	0019      	movs	r1, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	021a      	lsls	r2, r3, #8
 800408c:	4b6e      	ldr	r3, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d112      	bne.n	80040be <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004098:	4b6b      	ldr	r3, [pc, #428]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6e      	ldr	r2, [pc, #440]	; (8004258 <HAL_RCC_OscConfig+0x340>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	4b68      	ldr	r3, [pc, #416]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80040ac:	4b66      	ldr	r3, [pc, #408]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0adb      	lsrs	r3, r3, #11
 80040b2:	2207      	movs	r2, #7
 80040b4:	4013      	ands	r3, r2
 80040b6:	4a69      	ldr	r2, [pc, #420]	; (800425c <HAL_RCC_OscConfig+0x344>)
 80040b8:	40da      	lsrs	r2, r3
 80040ba:	4b69      	ldr	r3, [pc, #420]	; (8004260 <HAL_RCC_OscConfig+0x348>)
 80040bc:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040be:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x34c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7fe fca6 	bl	8002a14 <HAL_InitTick>
 80040c8:	1e03      	subs	r3, r0, #0
 80040ca:	d051      	beq.n	8004170 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e27d      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d030      	beq.n	800413a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80040d8:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_RCC_OscConfig+0x340>)
 80040de:	4013      	ands	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691a      	ldr	r2, [r3, #16]
 80040e6:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80040ec:	4b56      	ldr	r3, [pc, #344]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b55      	ldr	r3, [pc, #340]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80040f2:	2180      	movs	r1, #128	; 0x80
 80040f4:	0049      	lsls	r1, r1, #1
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fe fce7 	bl	8002acc <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004104:	f7fe fce2 	bl	8002acc <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e25a      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004116:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4013      	ands	r3, r2
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b49      	ldr	r3, [pc, #292]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a4b      	ldr	r2, [pc, #300]	; (8004254 <HAL_RCC_OscConfig+0x33c>)
 8004128:	4013      	ands	r3, r2
 800412a:	0019      	movs	r1, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	4b45      	ldr	r3, [pc, #276]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	e01b      	b.n	8004172 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800413a:	4b43      	ldr	r3, [pc, #268]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b42      	ldr	r3, [pc, #264]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004140:	4949      	ldr	r1, [pc, #292]	; (8004268 <HAL_RCC_OscConfig+0x350>)
 8004142:	400a      	ands	r2, r1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe fcc1 	bl	8002acc <HAL_GetTick>
 800414a:	0003      	movs	r3, r0
 800414c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004150:	f7fe fcbc 	bl	8002acc <HAL_GetTick>
 8004154:	0002      	movs	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b02      	cmp	r3, #2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e234      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4013      	ands	r3, r2
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x238>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004170:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	d047      	beq.n	800420c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800417c:	4b32      	ldr	r3, [pc, #200]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2238      	movs	r2, #56	; 0x38
 8004182:	4013      	ands	r3, r2
 8004184:	2b18      	cmp	r3, #24
 8004186:	d10a      	bne.n	800419e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004188:	4b2f      	ldr	r3, [pc, #188]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	2202      	movs	r2, #2
 800418e:	4013      	ands	r3, r2
 8004190:	d03c      	beq.n	800420c <HAL_RCC_OscConfig+0x2f4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d138      	bne.n	800420c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e216      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d019      	beq.n	80041da <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041a6:	4b28      	ldr	r3, [pc, #160]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80041a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80041ac:	2101      	movs	r1, #1
 80041ae:	430a      	orrs	r2, r1
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fe fc8b 	bl	8002acc <HAL_GetTick>
 80041b6:	0003      	movs	r3, r0
 80041b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fe fc86 	bl	8002acc <HAL_GetTick>
 80041c0:	0002      	movs	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e1fe      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ce:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	2202      	movs	r2, #2
 80041d4:	4013      	ands	r3, r2
 80041d6:	d0f1      	beq.n	80041bc <HAL_RCC_OscConfig+0x2a4>
 80041d8:	e018      	b.n	800420c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80041da:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80041dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	438a      	bics	r2, r1
 80041e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e6:	f7fe fc71 	bl	8002acc <HAL_GetTick>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041ee:	e008      	b.n	8004202 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041f0:	f7fe fc6c 	bl	8002acc <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e1e4      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	2202      	movs	r2, #2
 8004208:	4013      	ands	r3, r2
 800420a:	d1f1      	bne.n	80041f0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2204      	movs	r2, #4
 8004212:	4013      	ands	r3, r2
 8004214:	d100      	bne.n	8004218 <HAL_RCC_OscConfig+0x300>
 8004216:	e0c7      	b.n	80043a8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004218:	231f      	movs	r3, #31
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004220:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2238      	movs	r2, #56	; 0x38
 8004226:	4013      	ands	r3, r2
 8004228:	2b20      	cmp	r3, #32
 800422a:	d11f      	bne.n	800426c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_OscConfig+0x330>)
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2202      	movs	r2, #2
 8004232:	4013      	ands	r3, r2
 8004234:	d100      	bne.n	8004238 <HAL_RCC_OscConfig+0x320>
 8004236:	e0b7      	b.n	80043a8 <HAL_RCC_OscConfig+0x490>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d000      	beq.n	8004242 <HAL_RCC_OscConfig+0x32a>
 8004240:	e0b2      	b.n	80043a8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1c2      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	40021000 	.word	0x40021000
 800424c:	fffeffff 	.word	0xfffeffff
 8004250:	fffbffff 	.word	0xfffbffff
 8004254:	ffff80ff 	.word	0xffff80ff
 8004258:	ffffc7ff 	.word	0xffffc7ff
 800425c:	00f42400 	.word	0x00f42400
 8004260:	20000034 	.word	0x20000034
 8004264:	20000038 	.word	0x20000038
 8004268:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800426c:	4bb5      	ldr	r3, [pc, #724]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800426e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	055b      	lsls	r3, r3, #21
 8004274:	4013      	ands	r3, r2
 8004276:	d101      	bne.n	800427c <HAL_RCC_OscConfig+0x364>
 8004278:	2301      	movs	r3, #1
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x366>
 800427c:	2300      	movs	r3, #0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d011      	beq.n	80042a6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4bb0      	ldr	r3, [pc, #704]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004286:	4baf      	ldr	r3, [pc, #700]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004288:	2180      	movs	r1, #128	; 0x80
 800428a:	0549      	lsls	r1, r1, #21
 800428c:	430a      	orrs	r2, r1
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004290:	4bac      	ldr	r3, [pc, #688]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004292:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	055b      	lsls	r3, r3, #21
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800429e:	231f      	movs	r3, #31
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a6:	4ba8      	ldr	r3, [pc, #672]	; (8004548 <HAL_RCC_OscConfig+0x630>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	d11a      	bne.n	80042e8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042b2:	4ba5      	ldr	r3, [pc, #660]	; (8004548 <HAL_RCC_OscConfig+0x630>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	4ba4      	ldr	r3, [pc, #656]	; (8004548 <HAL_RCC_OscConfig+0x630>)
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	0049      	lsls	r1, r1, #1
 80042bc:	430a      	orrs	r2, r1
 80042be:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80042c0:	f7fe fc04 	bl	8002acc <HAL_GetTick>
 80042c4:	0003      	movs	r3, r0
 80042c6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fe fbff 	bl	8002acc <HAL_GetTick>
 80042ce:	0002      	movs	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e177      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042dc:	4b9a      	ldr	r3, [pc, #616]	; (8004548 <HAL_RCC_OscConfig+0x630>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x3e6>
 80042f0:	4b94      	ldr	r3, [pc, #592]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80042f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042f4:	4b93      	ldr	r3, [pc, #588]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80042f6:	2101      	movs	r1, #1
 80042f8:	430a      	orrs	r2, r1
 80042fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x420>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x408>
 8004306:	4b8f      	ldr	r3, [pc, #572]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800430a:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800430c:	2104      	movs	r1, #4
 800430e:	430a      	orrs	r2, r1
 8004310:	65da      	str	r2, [r3, #92]	; 0x5c
 8004312:	4b8c      	ldr	r3, [pc, #560]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004316:	4b8b      	ldr	r3, [pc, #556]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004318:	2101      	movs	r1, #1
 800431a:	430a      	orrs	r2, r1
 800431c:	65da      	str	r2, [r3, #92]	; 0x5c
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x420>
 8004320:	4b88      	ldr	r3, [pc, #544]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004322:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004324:	4b87      	ldr	r3, [pc, #540]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	65da      	str	r2, [r3, #92]	; 0x5c
 800432c:	4b85      	ldr	r3, [pc, #532]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800432e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004330:	4b84      	ldr	r3, [pc, #528]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004332:	2104      	movs	r1, #4
 8004334:	438a      	bics	r2, r1
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d014      	beq.n	800436a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fe fbc4 	bl	8002acc <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004348:	e009      	b.n	800435e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe fbbf 	bl	8002acc <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	4a7d      	ldr	r2, [pc, #500]	; (800454c <HAL_RCC_OscConfig+0x634>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e136      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	4b79      	ldr	r3, [pc, #484]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x432>
 8004368:	e013      	b.n	8004392 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436a:	f7fe fbaf 	bl	8002acc <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004372:	e009      	b.n	8004388 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fbaa 	bl	8002acc <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	4a73      	ldr	r2, [pc, #460]	; (800454c <HAL_RCC_OscConfig+0x634>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e121      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004388:	4b6e      	ldr	r3, [pc, #440]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800438a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d1f0      	bne.n	8004374 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004392:	231f      	movs	r3, #31
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b69      	ldr	r3, [pc, #420]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800439e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a0:	4b68      	ldr	r3, [pc, #416]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043a2:	496b      	ldr	r1, [pc, #428]	; (8004550 <HAL_RCC_OscConfig+0x638>)
 80043a4:	400a      	ands	r2, r1
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2220      	movs	r2, #32
 80043ae:	4013      	ands	r3, r2
 80043b0:	d039      	beq.n	8004426 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01b      	beq.n	80043f2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043ba:	4b62      	ldr	r3, [pc, #392]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043c0:	2180      	movs	r1, #128	; 0x80
 80043c2:	03c9      	lsls	r1, r1, #15
 80043c4:	430a      	orrs	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c8:	f7fe fb80 	bl	8002acc <HAL_GetTick>
 80043cc:	0003      	movs	r3, r0
 80043ce:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d2:	f7fe fb7b 	bl	8002acc <HAL_GetTick>
 80043d6:	0002      	movs	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0f3      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	4013      	ands	r3, r2
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x4ba>
 80043f0:	e019      	b.n	8004426 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043f2:	4b54      	ldr	r3, [pc, #336]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80043f8:	4956      	ldr	r1, [pc, #344]	; (8004554 <HAL_RCC_OscConfig+0x63c>)
 80043fa:	400a      	ands	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fe fb65 	bl	8002acc <HAL_GetTick>
 8004402:	0003      	movs	r3, r0
 8004404:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004408:	f7fe fb60 	bl	8002acc <HAL_GetTick>
 800440c:	0002      	movs	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0d8      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	2380      	movs	r3, #128	; 0x80
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	4013      	ands	r3, r2
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d100      	bne.n	8004430 <HAL_RCC_OscConfig+0x518>
 800442e:	e0cc      	b.n	80045ca <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004430:	4b44      	ldr	r3, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2238      	movs	r2, #56	; 0x38
 8004436:	4013      	ands	r3, r2
 8004438:	2b10      	cmp	r3, #16
 800443a:	d100      	bne.n	800443e <HAL_RCC_OscConfig+0x526>
 800443c:	e07b      	b.n	8004536 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d156      	bne.n	80044f4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004446:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800444c:	4942      	ldr	r1, [pc, #264]	; (8004558 <HAL_RCC_OscConfig+0x640>)
 800444e:	400a      	ands	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fe fb3b 	bl	8002acc <HAL_GetTick>
 8004456:	0003      	movs	r3, r0
 8004458:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fe fb36 	bl	8002acc <HAL_GetTick>
 8004460:	0002      	movs	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e0ae      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800446e:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	049b      	lsls	r3, r3, #18
 8004476:	4013      	ands	r3, r2
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447a:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	4a37      	ldr	r2, [pc, #220]	; (800455c <HAL_RCC_OscConfig+0x644>)
 8004480:	4013      	ands	r3, r2
 8004482:	0019      	movs	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	431a      	orrs	r2, r3
 80044a8:	4b26      	ldr	r3, [pc, #152]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044aa:	430a      	orrs	r2, r1
 80044ac:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044b4:	2180      	movs	r1, #128	; 0x80
 80044b6:	0449      	lsls	r1, r1, #17
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	0549      	lsls	r1, r1, #21
 80044c6:	430a      	orrs	r2, r1
 80044c8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ca:	f7fe faff 	bl	8002acc <HAL_GetTick>
 80044ce:	0003      	movs	r3, r0
 80044d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d4:	f7fe fafa 	bl	8002acc <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e072      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	2380      	movs	r3, #128	; 0x80
 80044ec:	049b      	lsls	r3, r3, #18
 80044ee:	4013      	ands	r3, r2
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCC_OscConfig+0x5bc>
 80044f2:	e06a      	b.n	80045ca <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b12      	ldr	r3, [pc, #72]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 80044fa:	4917      	ldr	r1, [pc, #92]	; (8004558 <HAL_RCC_OscConfig+0x640>)
 80044fc:	400a      	ands	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fe fae4 	bl	8002acc <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe fadf 	bl	8002acc <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e057      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	049b      	lsls	r3, r3, #18
 8004524:	4013      	ands	r3, r2
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x62c>)
 800452e:	490c      	ldr	r1, [pc, #48]	; (8004560 <HAL_RCC_OscConfig+0x648>)
 8004530:	400a      	ands	r2, r1
 8004532:	60da      	str	r2, [r3, #12]
 8004534:	e049      	b.n	80045ca <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d112      	bne.n	8004564 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e044      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
 8004542:	46c0      	nop			; (mov r8, r8)
 8004544:	40021000 	.word	0x40021000
 8004548:	40007000 	.word	0x40007000
 800454c:	00001388 	.word	0x00001388
 8004550:	efffffff 	.word	0xefffffff
 8004554:	ffbfffff 	.word	0xffbfffff
 8004558:	feffffff 	.word	0xfeffffff
 800455c:	11c1808c 	.word	0x11c1808c
 8004560:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x6bc>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2203      	movs	r2, #3
 800456e:	401a      	ands	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	429a      	cmp	r2, r3
 8004576:	d126      	bne.n	80045c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2270      	movs	r2, #112	; 0x70
 800457c:	401a      	ands	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d11f      	bne.n	80045c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	23fe      	movs	r3, #254	; 0xfe
 800458a:	01db      	lsls	r3, r3, #7
 800458c:	401a      	ands	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d116      	bne.n	80045c6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	23f8      	movs	r3, #248	; 0xf8
 800459c:	039b      	lsls	r3, r3, #14
 800459e:	401a      	ands	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	23e0      	movs	r3, #224	; 0xe0
 80045ac:	051b      	lsls	r3, r3, #20
 80045ae:	401a      	ands	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	0f5b      	lsrs	r3, r3, #29
 80045bc:	075a      	lsls	r2, r3, #29
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b008      	add	sp, #32
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000

080045d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0e9      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045ec:	4b76      	ldr	r3, [pc, #472]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2207      	movs	r2, #7
 80045f2:	4013      	ands	r3, r2
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d91e      	bls.n	8004638 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fa:	4b73      	ldr	r3, [pc, #460]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2207      	movs	r2, #7
 8004600:	4393      	bics	r3, r2
 8004602:	0019      	movs	r1, r3
 8004604:	4b70      	ldr	r3, [pc, #448]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800460c:	f7fe fa5e 	bl	8002acc <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004614:	e009      	b.n	800462a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004616:	f7fe fa59 	bl	8002acc <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a6a      	ldr	r2, [pc, #424]	; (80047cc <HAL_RCC_ClockConfig+0x1f4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0ca      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800462a:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2207      	movs	r2, #7
 8004630:	4013      	ands	r3, r2
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d1ee      	bne.n	8004616 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2202      	movs	r2, #2
 800463e:	4013      	ands	r3, r2
 8004640:	d015      	beq.n	800466e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2204      	movs	r2, #4
 8004648:	4013      	ands	r3, r2
 800464a:	d006      	beq.n	800465a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800464c:	4b60      	ldr	r3, [pc, #384]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004652:	21e0      	movs	r1, #224	; 0xe0
 8004654:	01c9      	lsls	r1, r1, #7
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465a:	4b5d      	ldr	r3, [pc, #372]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4a5d      	ldr	r2, [pc, #372]	; (80047d4 <HAL_RCC_ClockConfig+0x1fc>)
 8004660:	4013      	ands	r3, r2
 8004662:	0019      	movs	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b59      	ldr	r3, [pc, #356]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800466a:	430a      	orrs	r2, r1
 800466c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	4013      	ands	r3, r2
 8004676:	d057      	beq.n	8004728 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d107      	bne.n	8004690 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	029b      	lsls	r3, r3, #10
 8004688:	4013      	ands	r3, r2
 800468a:	d12b      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e097      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004698:	4b4d      	ldr	r3, [pc, #308]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2380      	movs	r3, #128	; 0x80
 800469e:	049b      	lsls	r3, r3, #18
 80046a0:	4013      	ands	r3, r2
 80046a2:	d11f      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e08b      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046b0:	4b47      	ldr	r3, [pc, #284]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2380      	movs	r3, #128	; 0x80
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4013      	ands	r3, r2
 80046ba:	d113      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e07f      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046c8:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2202      	movs	r2, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e074      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	2202      	movs	r2, #2
 80046dc:	4013      	ands	r3, r2
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e06d      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046e4:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	2207      	movs	r2, #7
 80046ea:	4393      	bics	r3, r2
 80046ec:	0019      	movs	r1, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f8:	f7fe f9e8 	bl	8002acc <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004700:	e009      	b.n	8004716 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004702:	f7fe f9e3 	bl	8002acc <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	4a2f      	ldr	r2, [pc, #188]	; (80047cc <HAL_RCC_ClockConfig+0x1f4>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e054      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2e      	ldr	r3, [pc, #184]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2238      	movs	r2, #56	; 0x38
 800471c:	401a      	ands	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	429a      	cmp	r2, r3
 8004726:	d1ec      	bne.n	8004702 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2207      	movs	r2, #7
 800472e:	4013      	ands	r3, r2
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d21e      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2207      	movs	r2, #7
 800473c:	4393      	bics	r3, r2
 800473e:	0019      	movs	r1, r3
 8004740:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004748:	f7fe f9c0 	bl	8002acc <HAL_GetTick>
 800474c:	0003      	movs	r3, r0
 800474e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004750:	e009      	b.n	8004766 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fe f9bb 	bl	8002acc <HAL_GetTick>
 8004756:	0002      	movs	r2, r0
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	4a1b      	ldr	r2, [pc, #108]	; (80047cc <HAL_RCC_ClockConfig+0x1f4>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e02c      	b.n	80047c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004766:	4b18      	ldr	r3, [pc, #96]	; (80047c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2207      	movs	r2, #7
 800476c:	4013      	ands	r3, r2
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d1ee      	bne.n	8004752 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2204      	movs	r2, #4
 800477a:	4013      	ands	r3, r2
 800477c:	d009      	beq.n	8004792 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <HAL_RCC_ClockConfig+0x200>)
 8004784:	4013      	ands	r3, r2
 8004786:	0019      	movs	r1, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800478e:	430a      	orrs	r2, r1
 8004790:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004792:	f000 f829 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8004796:	0001      	movs	r1, r0
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_RCC_ClockConfig+0x1f8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	220f      	movs	r2, #15
 80047a0:	401a      	ands	r2, r3
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <HAL_RCC_ClockConfig+0x204>)
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	58d3      	ldr	r3, [r2, r3]
 80047a8:	221f      	movs	r2, #31
 80047aa:	4013      	ands	r3, r2
 80047ac:	000a      	movs	r2, r1
 80047ae:	40da      	lsrs	r2, r3
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <HAL_RCC_ClockConfig+0x208>)
 80047b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_RCC_ClockConfig+0x20c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fe f92b 	bl	8002a14 <HAL_InitTick>
 80047be:	0003      	movs	r3, r0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b004      	add	sp, #16
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40022000 	.word	0x40022000
 80047cc:	00001388 	.word	0x00001388
 80047d0:	40021000 	.word	0x40021000
 80047d4:	fffff0ff 	.word	0xfffff0ff
 80047d8:	ffff8fff 	.word	0xffff8fff
 80047dc:	080062bc 	.word	0x080062bc
 80047e0:	20000034 	.word	0x20000034
 80047e4:	20000038 	.word	0x20000038

080047e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b086      	sub	sp, #24
 80047ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ee:	4b3c      	ldr	r3, [pc, #240]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2238      	movs	r2, #56	; 0x38
 80047f4:	4013      	ands	r3, r2
 80047f6:	d10f      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	0adb      	lsrs	r3, r3, #11
 80047fe:	2207      	movs	r2, #7
 8004800:	4013      	ands	r3, r2
 8004802:	2201      	movs	r2, #1
 8004804:	409a      	lsls	r2, r3
 8004806:	0013      	movs	r3, r2
 8004808:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800480a:	6839      	ldr	r1, [r7, #0]
 800480c:	4835      	ldr	r0, [pc, #212]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800480e:	f7fb fc79 	bl	8000104 <__udivsi3>
 8004812:	0003      	movs	r3, r0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	e05d      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2238      	movs	r2, #56	; 0x38
 800481e:	4013      	ands	r3, r2
 8004820:	2b08      	cmp	r3, #8
 8004822:	d102      	bne.n	800482a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004824:	4b30      	ldr	r3, [pc, #192]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e054      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482a:	4b2d      	ldr	r3, [pc, #180]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2238      	movs	r2, #56	; 0x38
 8004830:	4013      	ands	r3, r2
 8004832:	2b10      	cmp	r3, #16
 8004834:	d138      	bne.n	80048a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004836:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2203      	movs	r2, #3
 800483c:	4013      	ands	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004840:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	2207      	movs	r2, #7
 8004848:	4013      	ands	r3, r2
 800484a:	3301      	adds	r3, #1
 800484c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b03      	cmp	r3, #3
 8004852:	d10d      	bne.n	8004870 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	4824      	ldr	r0, [pc, #144]	; (80048e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004858:	f7fb fc54 	bl	8000104 <__udivsi3>
 800485c:	0003      	movs	r3, r0
 800485e:	0019      	movs	r1, r3
 8004860:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	0a1b      	lsrs	r3, r3, #8
 8004866:	227f      	movs	r2, #127	; 0x7f
 8004868:	4013      	ands	r3, r2
 800486a:	434b      	muls	r3, r1
 800486c:	617b      	str	r3, [r7, #20]
        break;
 800486e:	e00d      	b.n	800488c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	481c      	ldr	r0, [pc, #112]	; (80048e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004874:	f7fb fc46 	bl	8000104 <__udivsi3>
 8004878:	0003      	movs	r3, r0
 800487a:	0019      	movs	r1, r3
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	0a1b      	lsrs	r3, r3, #8
 8004882:	227f      	movs	r2, #127	; 0x7f
 8004884:	4013      	ands	r3, r2
 8004886:	434b      	muls	r3, r1
 8004888:	617b      	str	r3, [r7, #20]
        break;
 800488a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0f5b      	lsrs	r3, r3, #29
 8004892:	2207      	movs	r2, #7
 8004894:	4013      	ands	r3, r2
 8004896:	3301      	adds	r3, #1
 8004898:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	6978      	ldr	r0, [r7, #20]
 800489e:	f7fb fc31 	bl	8000104 <__udivsi3>
 80048a2:	0003      	movs	r3, r0
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	e015      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2238      	movs	r2, #56	; 0x38
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d103      	bne.n	80048bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	613b      	str	r3, [r7, #16]
 80048ba:	e00b      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2238      	movs	r2, #56	; 0x38
 80048c2:	4013      	ands	r3, r2
 80048c4:	2b18      	cmp	r3, #24
 80048c6:	d103      	bne.n	80048d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80048c8:	23fa      	movs	r3, #250	; 0xfa
 80048ca:	01db      	lsls	r3, r3, #7
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	e001      	b.n	80048d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048d4:	693b      	ldr	r3, [r7, #16]
}
 80048d6:	0018      	movs	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	b006      	add	sp, #24
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	40021000 	.word	0x40021000
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	007a1200 	.word	0x007a1200

080048ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80048f4:	2313      	movs	r3, #19
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048fc:	2312      	movs	r3, #18
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	029b      	lsls	r3, r3, #10
 800490c:	4013      	ands	r3, r2
 800490e:	d100      	bne.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004910:	e0ad      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2011      	movs	r0, #17
 8004914:	183b      	adds	r3, r7, r0
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491a:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800491c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800491e:	2380      	movs	r3, #128	; 0x80
 8004920:	055b      	lsls	r3, r3, #21
 8004922:	4013      	ands	r3, r2
 8004924:	d110      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	4b44      	ldr	r3, [pc, #272]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800492a:	4b43      	ldr	r3, [pc, #268]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800492c:	2180      	movs	r1, #128	; 0x80
 800492e:	0549      	lsls	r1, r1, #21
 8004930:	430a      	orrs	r2, r1
 8004932:	63da      	str	r2, [r3, #60]	; 0x3c
 8004934:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	055b      	lsls	r3, r3, #21
 800493c:	4013      	ands	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	183b      	adds	r3, r7, r0
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800494e:	2180      	movs	r1, #128	; 0x80
 8004950:	0049      	lsls	r1, r1, #1
 8004952:	430a      	orrs	r2, r1
 8004954:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004956:	f7fe f8b9 	bl	8002acc <HAL_GetTick>
 800495a:	0003      	movs	r3, r0
 800495c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495e:	e00b      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fe f8b4 	bl	8002acc <HAL_GetTick>
 8004964:	0002      	movs	r2, r0
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d904      	bls.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800496e:	2313      	movs	r3, #19
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	2203      	movs	r2, #3
 8004974:	701a      	strb	r2, [r3, #0]
        break;
 8004976:	e005      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004978:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	4013      	ands	r3, r2
 8004982:	d0ed      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004984:	2313      	movs	r3, #19
 8004986:	18fb      	adds	r3, r7, r3
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d15e      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800498e:	4b2a      	ldr	r3, [pc, #168]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004992:	23c0      	movs	r3, #192	; 0xc0
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4013      	ands	r3, r2
 8004998:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d019      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d014      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ae:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80049b0:	4013      	ands	r3, r2
 80049b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049b4:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049b8:	4b1f      	ldr	r3, [pc, #124]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049ba:	2180      	movs	r1, #128	; 0x80
 80049bc:	0249      	lsls	r1, r1, #9
 80049be:	430a      	orrs	r2, r1
 80049c0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049c8:	491e      	ldr	r1, [pc, #120]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80049ca:	400a      	ands	r2, r1
 80049cc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	2201      	movs	r2, #1
 80049d8:	4013      	ands	r3, r2
 80049da:	d016      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fe f876 	bl	8002acc <HAL_GetTick>
 80049e0:	0003      	movs	r3, r0
 80049e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e4:	e00c      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fe f871 	bl	8002acc <HAL_GetTick>
 80049ea:	0002      	movs	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	4a15      	ldr	r2, [pc, #84]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d904      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80049f6:	2313      	movs	r3, #19
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2203      	movs	r2, #3
 80049fc:	701a      	strb	r2, [r3, #0]
            break;
 80049fe:	e004      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d0ed      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a0a:	2313      	movs	r3, #19
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10a      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	0019      	movs	r1, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004a24:	430a      	orrs	r2, r1
 8004a26:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a28:	e016      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2a:	2312      	movs	r3, #18
 8004a2c:	18fb      	adds	r3, r7, r3
 8004a2e:	2213      	movs	r2, #19
 8004a30:	18ba      	adds	r2, r7, r2
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e00f      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
 8004a40:	fffffcff 	.word	0xfffffcff
 8004a44:	fffeffff 	.word	0xfffeffff
 8004a48:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	2312      	movs	r3, #18
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2213      	movs	r2, #19
 8004a52:	18ba      	adds	r2, r7, r2
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a58:	2311      	movs	r3, #17
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d105      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a62:	4bb6      	ldr	r3, [pc, #728]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a66:	4bb5      	ldr	r3, [pc, #724]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a68:	49b5      	ldr	r1, [pc, #724]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004a6a:	400a      	ands	r2, r1
 8004a6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2201      	movs	r2, #1
 8004a74:	4013      	ands	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a78:	4bb0      	ldr	r3, [pc, #704]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	4393      	bics	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4bad      	ldr	r3, [pc, #692]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a96:	4ba9      	ldr	r3, [pc, #676]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	220c      	movs	r2, #12
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	4ba5      	ldr	r3, [pc, #660]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2204      	movs	r2, #4
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab4:	4ba1      	ldr	r3, [pc, #644]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab8:	2230      	movs	r2, #48	; 0x30
 8004aba:	4393      	bics	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	4b9e      	ldr	r3, [pc, #632]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad2:	4b9a      	ldr	r3, [pc, #616]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad6:	4a9b      	ldr	r2, [pc, #620]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	4b96      	ldr	r3, [pc, #600]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	015b      	lsls	r3, r3, #5
 8004aee:	4013      	ands	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004af2:	4b92      	ldr	r3, [pc, #584]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af6:	4a94      	ldr	r2, [pc, #592]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	0019      	movs	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	4b8e      	ldr	r3, [pc, #568]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b02:	430a      	orrs	r2, r1
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b12:	4b8a      	ldr	r3, [pc, #552]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b16:	4a8d      	ldr	r2, [pc, #564]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b20:	4b86      	ldr	r3, [pc, #536]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b22:	430a      	orrs	r2, r1
 8004b24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d009      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b32:	4b82      	ldr	r3, [pc, #520]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	4a86      	ldr	r2, [pc, #536]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b40:	4b7e      	ldr	r3, [pc, #504]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b42:	430a      	orrs	r2, r1
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d009      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b50:	4b7a      	ldr	r3, [pc, #488]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	4a7f      	ldr	r2, [pc, #508]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699a      	ldr	r2, [r3, #24]
 8004b5e:	4b77      	ldr	r3, [pc, #476]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2240      	movs	r2, #64	; 0x40
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b6e:	4b73      	ldr	r3, [pc, #460]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b72:	4a79      	ldr	r2, [pc, #484]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	01db      	lsls	r3, r3, #7
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d015      	beq.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b8e:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	0899      	lsrs	r1, r3, #2
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b9a:	4b68      	ldr	r3, [pc, #416]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	05db      	lsls	r3, r3, #23
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004bac:	4b63      	ldr	r3, [pc, #396]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	4b62      	ldr	r3, [pc, #392]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bb2:	2180      	movs	r1, #128	; 0x80
 8004bb4:	0249      	lsls	r1, r1, #9
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bc6:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	4393      	bics	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bd4:	4b59      	ldr	r3, [pc, #356]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	039b      	lsls	r3, r3, #14
 8004be2:	4013      	ands	r3, r2
 8004be4:	d016      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004be6:	4b55      	ldr	r3, [pc, #340]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	4a5c      	ldr	r2, [pc, #368]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8004bec:	4013      	ands	r3, r2
 8004bee:	0019      	movs	r1, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf4:	4b51      	ldr	r3, [pc, #324]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	03db      	lsls	r3, r3, #15
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d106      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c06:	4b4d      	ldr	r3, [pc, #308]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	4b4c      	ldr	r3, [pc, #304]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	0449      	lsls	r1, r1, #17
 8004c10:	430a      	orrs	r2, r1
 8004c12:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	2380      	movs	r3, #128	; 0x80
 8004c1a:	03db      	lsls	r3, r3, #15
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d016      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004c20:	4b46      	ldr	r3, [pc, #280]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	4a4e      	ldr	r2, [pc, #312]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2e:	4b43      	ldr	r3, [pc, #268]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	045b      	lsls	r3, r3, #17
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d106      	bne.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004c40:	4b3e      	ldr	r3, [pc, #248]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	4b3d      	ldr	r3, [pc, #244]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c46:	2180      	movs	r1, #128	; 0x80
 8004c48:	0449      	lsls	r1, r1, #17
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	2380      	movs	r3, #128	; 0x80
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4013      	ands	r3, r2
 8004c58:	d014      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004c5a:	4b38      	ldr	r3, [pc, #224]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4393      	bics	r3, r2
 8004c62:	0019      	movs	r1, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1a      	ldr	r2, [r3, #32]
 8004c68:	4b34      	ldr	r3, [pc, #208]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d106      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004c76:	4b31      	ldr	r3, [pc, #196]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c7c:	2180      	movs	r1, #128	; 0x80
 8004c7e:	0249      	lsls	r1, r1, #9
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	d014      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004c90:	4b2a      	ldr	r3, [pc, #168]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	220c      	movs	r2, #12
 8004c96:	4393      	bics	r3, r2
 8004c98:	0019      	movs	r1, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c9e:	4b27      	ldr	r3, [pc, #156]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d106      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004cac:	4b23      	ldr	r3, [pc, #140]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	4b22      	ldr	r3, [pc, #136]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	0249      	lsls	r1, r1, #9
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	2380      	movs	r3, #128	; 0x80
 8004cc0:	045b      	lsls	r3, r3, #17
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d016      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd4:	4b19      	ldr	r3, [pc, #100]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	019b      	lsls	r3, r3, #6
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d106      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004ce6:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	0449      	lsls	r1, r1, #17
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	2380      	movs	r3, #128	; 0x80
 8004cfa:	049b      	lsls	r3, r3, #18
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	d016      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d00:	4b0e      	ldr	r3, [pc, #56]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	4a10      	ldr	r2, [pc, #64]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	0019      	movs	r1, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d10:	430a      	orrs	r2, r1
 8004d12:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004d26:	2180      	movs	r1, #128	; 0x80
 8004d28:	0449      	lsls	r1, r1, #17
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004d2e:	2312      	movs	r3, #18
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
}
 8004d34:	0018      	movs	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b006      	add	sp, #24
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000
 8004d40:	efffffff 	.word	0xefffffff
 8004d44:	fffff3ff 	.word	0xfffff3ff
 8004d48:	fffffcff 	.word	0xfffffcff
 8004d4c:	fff3ffff 	.word	0xfff3ffff
 8004d50:	ffcfffff 	.word	0xffcfffff
 8004d54:	ffffcfff 	.word	0xffffcfff
 8004d58:	ffff3fff 	.word	0xffff3fff
 8004d5c:	ffbfffff 	.word	0xffbfffff
 8004d60:	feffffff 	.word	0xfeffffff

08004d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e04a      	b.n	8004e0c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	223d      	movs	r2, #61	; 0x3d
 8004d7a:	5c9b      	ldrb	r3, [r3, r2]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	223c      	movs	r2, #60	; 0x3c
 8004d86:	2100      	movs	r1, #0
 8004d88:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f7fd fd3d 	bl	800280c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	223d      	movs	r2, #61	; 0x3d
 8004d96:	2102      	movs	r1, #2
 8004d98:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	3304      	adds	r3, #4
 8004da2:	0019      	movs	r1, r3
 8004da4:	0010      	movs	r0, r2
 8004da6:	f000 fd0f 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2248      	movs	r2, #72	; 0x48
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	223e      	movs	r2, #62	; 0x3e
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	223f      	movs	r2, #63	; 0x3f
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5499      	strb	r1, [r3, r2]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2241      	movs	r2, #65	; 0x41
 8004dce:	2101      	movs	r1, #1
 8004dd0:	5499      	strb	r1, [r3, r2]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2242      	movs	r2, #66	; 0x42
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	5499      	strb	r1, [r3, r2]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2243      	movs	r2, #67	; 0x43
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2244      	movs	r2, #68	; 0x44
 8004de6:	2101      	movs	r1, #1
 8004de8:	5499      	strb	r1, [r3, r2]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2245      	movs	r2, #69	; 0x45
 8004dee:	2101      	movs	r1, #1
 8004df0:	5499      	strb	r1, [r3, r2]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2246      	movs	r2, #70	; 0x46
 8004df6:	2101      	movs	r1, #1
 8004df8:	5499      	strb	r1, [r3, r2]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2247      	movs	r2, #71	; 0x47
 8004dfe:	2101      	movs	r1, #1
 8004e00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	223d      	movs	r2, #61	; 0x3d
 8004e06:	2101      	movs	r1, #1
 8004e08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b002      	add	sp, #8
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	223d      	movs	r2, #61	; 0x3d
 8004e20:	5c9b      	ldrb	r3, [r3, r2]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d001      	beq.n	8004e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e047      	b.n	8004ebc <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223d      	movs	r2, #61	; 0x3d
 8004e30:	2102      	movs	r1, #2
 8004e32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2101      	movs	r1, #1
 8004e40:	430a      	orrs	r2, r1
 8004e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d014      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x64>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	05db      	lsls	r3, r3, #23
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d00e      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x64>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d009      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x64>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a18      	ldr	r2, [pc, #96]	; (8004ecc <HAL_TIM_Base_Start_IT+0xb8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d004      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x64>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d116      	bne.n	8004ea6 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b06      	cmp	r3, #6
 8004e88:	d016      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0xa4>
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	025b      	lsls	r3, r3, #9
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d011      	beq.n	8004eb8 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	e008      	b.n	8004eb8 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e000      	b.n	8004eba <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb8:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b004      	add	sp, #16
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40014000 	.word	0x40014000
 8004ed4:	00010007 	.word	0x00010007

08004ed8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e04a      	b.n	8004f80 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	223d      	movs	r2, #61	; 0x3d
 8004eee:	5c9b      	ldrb	r3, [r3, r2]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	223c      	movs	r2, #60	; 0x3c
 8004efa:	2100      	movs	r1, #0
 8004efc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	0018      	movs	r0, r3
 8004f02:	f000 f841 	bl	8004f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	223d      	movs	r2, #61	; 0x3d
 8004f0a:	2102      	movs	r1, #2
 8004f0c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	0019      	movs	r1, r3
 8004f18:	0010      	movs	r0, r2
 8004f1a:	f000 fc55 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2248      	movs	r2, #72	; 0x48
 8004f22:	2101      	movs	r1, #1
 8004f24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	223e      	movs	r2, #62	; 0x3e
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	223f      	movs	r2, #63	; 0x3f
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2240      	movs	r2, #64	; 0x40
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	5499      	strb	r1, [r3, r2]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2241      	movs	r2, #65	; 0x41
 8004f42:	2101      	movs	r1, #1
 8004f44:	5499      	strb	r1, [r3, r2]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2242      	movs	r2, #66	; 0x42
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	5499      	strb	r1, [r3, r2]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2243      	movs	r2, #67	; 0x43
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2244      	movs	r2, #68	; 0x44
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	5499      	strb	r1, [r3, r2]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2245      	movs	r2, #69	; 0x45
 8004f62:	2101      	movs	r1, #1
 8004f64:	5499      	strb	r1, [r3, r2]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2246      	movs	r2, #70	; 0x46
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	5499      	strb	r1, [r3, r2]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2247      	movs	r2, #71	; 0x47
 8004f72:	2101      	movs	r1, #1
 8004f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	223d      	movs	r2, #61	; 0x3d
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b002      	add	sp, #8
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f90:	46c0      	nop			; (mov r8, r8)
 8004f92:	46bd      	mov	sp, r7
 8004f94:	b002      	add	sp, #8
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <HAL_TIM_PWM_Start+0x22>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223e      	movs	r2, #62	; 0x3e
 8004fac:	5c9b      	ldrb	r3, [r3, r2]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	1e5a      	subs	r2, r3, #1
 8004fb4:	4193      	sbcs	r3, r2
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	e037      	b.n	800502a <HAL_TIM_PWM_Start+0x92>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d108      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x3a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	223f      	movs	r2, #63	; 0x3f
 8004fc4:	5c9b      	ldrb	r3, [r3, r2]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	1e5a      	subs	r2, r3, #1
 8004fcc:	4193      	sbcs	r3, r2
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e02b      	b.n	800502a <HAL_TIM_PWM_Start+0x92>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d108      	bne.n	8004fea <HAL_TIM_PWM_Start+0x52>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	5c9b      	ldrb	r3, [r3, r2]
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	4193      	sbcs	r3, r2
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	e01f      	b.n	800502a <HAL_TIM_PWM_Start+0x92>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b0c      	cmp	r3, #12
 8004fee:	d108      	bne.n	8005002 <HAL_TIM_PWM_Start+0x6a>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2241      	movs	r2, #65	; 0x41
 8004ff4:	5c9b      	ldrb	r3, [r3, r2]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	1e5a      	subs	r2, r3, #1
 8004ffc:	4193      	sbcs	r3, r2
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e013      	b.n	800502a <HAL_TIM_PWM_Start+0x92>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d108      	bne.n	800501a <HAL_TIM_PWM_Start+0x82>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2242      	movs	r2, #66	; 0x42
 800500c:	5c9b      	ldrb	r3, [r3, r2]
 800500e:	b2db      	uxtb	r3, r3
 8005010:	3b01      	subs	r3, #1
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	4193      	sbcs	r3, r2
 8005016:	b2db      	uxtb	r3, r3
 8005018:	e007      	b.n	800502a <HAL_TIM_PWM_Start+0x92>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2243      	movs	r2, #67	; 0x43
 800501e:	5c9b      	ldrb	r3, [r3, r2]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	1e5a      	subs	r2, r3, #1
 8005026:	4193      	sbcs	r3, r2
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e090      	b.n	8005154 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d104      	bne.n	8005042 <HAL_TIM_PWM_Start+0xaa>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	223e      	movs	r2, #62	; 0x3e
 800503c:	2102      	movs	r1, #2
 800503e:	5499      	strb	r1, [r3, r2]
 8005040:	e023      	b.n	800508a <HAL_TIM_PWM_Start+0xf2>
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b04      	cmp	r3, #4
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Start+0xba>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	223f      	movs	r2, #63	; 0x3f
 800504c:	2102      	movs	r1, #2
 800504e:	5499      	strb	r1, [r3, r2]
 8005050:	e01b      	b.n	800508a <HAL_TIM_PWM_Start+0xf2>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b08      	cmp	r3, #8
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0xca>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2240      	movs	r2, #64	; 0x40
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]
 8005060:	e013      	b.n	800508a <HAL_TIM_PWM_Start+0xf2>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xda>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2241      	movs	r2, #65	; 0x41
 800506c:	2102      	movs	r1, #2
 800506e:	5499      	strb	r1, [r3, r2]
 8005070:	e00b      	b.n	800508a <HAL_TIM_PWM_Start+0xf2>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b10      	cmp	r3, #16
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xea>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2242      	movs	r2, #66	; 0x42
 800507c:	2102      	movs	r1, #2
 800507e:	5499      	strb	r1, [r3, r2]
 8005080:	e003      	b.n	800508a <HAL_TIM_PWM_Start+0xf2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2243      	movs	r2, #67	; 0x43
 8005086:	2102      	movs	r1, #2
 8005088:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6839      	ldr	r1, [r7, #0]
 8005090:	2201      	movs	r2, #1
 8005092:	0018      	movs	r0, r3
 8005094:	f000 ff82 	bl	8005f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2f      	ldr	r2, [pc, #188]	; (800515c <HAL_TIM_PWM_Start+0x1c4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x128>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2e      	ldr	r2, [pc, #184]	; (8005160 <HAL_TIM_PWM_Start+0x1c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x128>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	; (8005164 <HAL_TIM_PWM_Start+0x1cc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_TIM_PWM_Start+0x128>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a2b      	ldr	r2, [pc, #172]	; (8005168 <HAL_TIM_PWM_Start+0x1d0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_TIM_PWM_Start+0x12c>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_TIM_PWM_Start+0x12e>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d008      	beq.n	80050dc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	0209      	lsls	r1, r1, #8
 80050d8:	430a      	orrs	r2, r1
 80050da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_TIM_PWM_Start+0x1c4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d014      	beq.n	8005110 <HAL_TIM_PWM_Start+0x178>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	05db      	lsls	r3, r3, #23
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d00e      	beq.n	8005110 <HAL_TIM_PWM_Start+0x178>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <HAL_TIM_PWM_Start+0x1d4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_TIM_PWM_Start+0x178>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1b      	ldr	r2, [pc, #108]	; (8005170 <HAL_TIM_PWM_Start+0x1d8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <HAL_TIM_PWM_Start+0x178>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <HAL_TIM_PWM_Start+0x1c8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d116      	bne.n	800513e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4a17      	ldr	r2, [pc, #92]	; (8005174 <HAL_TIM_PWM_Start+0x1dc>)
 8005118:	4013      	ands	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2b06      	cmp	r3, #6
 8005120:	d016      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1b8>
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	025b      	lsls	r3, r3, #9
 8005128:	429a      	cmp	r2, r3
 800512a:	d011      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2101      	movs	r1, #1
 8005138:	430a      	orrs	r2, r1
 800513a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	e008      	b.n	8005150 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	430a      	orrs	r2, r1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e000      	b.n	8005152 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	b004      	add	sp, #16
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40014000 	.word	0x40014000
 8005164:	40014400 	.word	0x40014400
 8005168:	40014800 	.word	0x40014800
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	00010007 	.word	0x00010007

08005178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	2202      	movs	r2, #2
 8005188:	4013      	ands	r3, r2
 800518a:	2b02      	cmp	r3, #2
 800518c:	d124      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	2202      	movs	r2, #2
 8005196:	4013      	ands	r3, r2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d11d      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2203      	movs	r2, #3
 80051a2:	4252      	negs	r2, r2
 80051a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4013      	ands	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	0018      	movs	r0, r3
 80051bc:	f000 faec 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 80051c0:	e007      	b.n	80051d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 fadf 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	0018      	movs	r0, r3
 80051ce:	f000 faeb 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2204      	movs	r2, #4
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d125      	bne.n	8005232 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	2204      	movs	r2, #4
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b04      	cmp	r3, #4
 80051f2:	d11e      	bne.n	8005232 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2205      	movs	r2, #5
 80051fa:	4252      	negs	r2, r2
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	23c0      	movs	r3, #192	; 0xc0
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4013      	ands	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	0018      	movs	r0, r3
 8005216:	f000 fabf 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 800521a:	e007      	b.n	800522c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 fab2 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	0018      	movs	r0, r3
 8005228:	f000 fabe 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2208      	movs	r2, #8
 800523a:	4013      	ands	r3, r2
 800523c:	2b08      	cmp	r3, #8
 800523e:	d124      	bne.n	800528a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2208      	movs	r2, #8
 8005248:	4013      	ands	r3, r2
 800524a:	2b08      	cmp	r3, #8
 800524c:	d11d      	bne.n	800528a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2209      	movs	r2, #9
 8005254:	4252      	negs	r2, r2
 8005256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2204      	movs	r2, #4
 800525c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	69db      	ldr	r3, [r3, #28]
 8005264:	2203      	movs	r2, #3
 8005266:	4013      	ands	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	0018      	movs	r0, r3
 800526e:	f000 fa93 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 8005272:	e007      	b.n	8005284 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	0018      	movs	r0, r3
 8005278:	f000 fa86 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	0018      	movs	r0, r3
 8005280:	f000 fa92 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	2210      	movs	r2, #16
 8005292:	4013      	ands	r3, r2
 8005294:	2b10      	cmp	r3, #16
 8005296:	d125      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2210      	movs	r2, #16
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d11e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2211      	movs	r2, #17
 80052ac:	4252      	negs	r2, r2
 80052ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2208      	movs	r2, #8
 80052b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69da      	ldr	r2, [r3, #28]
 80052bc:	23c0      	movs	r3, #192	; 0xc0
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4013      	ands	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	0018      	movs	r0, r3
 80052c8:	f000 fa66 	bl	8005798 <HAL_TIM_IC_CaptureCallback>
 80052cc:	e007      	b.n	80052de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 fa59 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	0018      	movs	r0, r3
 80052da:	f000 fa65 	bl	80057a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2201      	movs	r2, #1
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d10f      	bne.n	8005312 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d108      	bne.n	8005312 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2202      	movs	r2, #2
 8005306:	4252      	negs	r2, r2
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fc ff65 	bl	80021dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2280      	movs	r2, #128	; 0x80
 800531a:	4013      	ands	r3, r2
 800531c:	2b80      	cmp	r3, #128	; 0x80
 800531e:	d10f      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	4013      	ands	r3, r2
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d108      	bne.n	8005340 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2281      	movs	r2, #129	; 0x81
 8005334:	4252      	negs	r2, r2
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	0018      	movs	r0, r3
 800533c:	f000 ff76 	bl	800622c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	401a      	ands	r2, r3
 800534c:	2380      	movs	r3, #128	; 0x80
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	429a      	cmp	r2, r3
 8005352:	d10e      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	4013      	ands	r3, r2
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	d107      	bne.n	8005372 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <HAL_TIM_IRQHandler+0x260>)
 8005368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 ff65 	bl	800623c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	2240      	movs	r2, #64	; 0x40
 800537a:	4013      	ands	r3, r2
 800537c:	2b40      	cmp	r3, #64	; 0x40
 800537e:	d10f      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2240      	movs	r2, #64	; 0x40
 8005388:	4013      	ands	r3, r2
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d108      	bne.n	80053a0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2241      	movs	r2, #65	; 0x41
 8005394:	4252      	negs	r2, r2
 8005396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	0018      	movs	r0, r3
 800539c:	f000 fa0c 	bl	80057b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2220      	movs	r2, #32
 80053a8:	4013      	ands	r3, r2
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	d10f      	bne.n	80053ce <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	d108      	bne.n	80053ce <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2221      	movs	r2, #33	; 0x21
 80053c2:	4252      	negs	r2, r2
 80053c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	0018      	movs	r0, r3
 80053ca:	f000 ff27 	bl	800621c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	fffffeff 	.word	0xfffffeff

080053dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e8:	2317      	movs	r3, #23
 80053ea:	18fb      	adds	r3, r7, r3
 80053ec:	2200      	movs	r2, #0
 80053ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	223c      	movs	r2, #60	; 0x3c
 80053f4:	5c9b      	ldrb	r3, [r3, r2]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0e5      	b.n	80055ca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	223c      	movs	r2, #60	; 0x3c
 8005402:	2101      	movs	r1, #1
 8005404:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b14      	cmp	r3, #20
 800540a:	d900      	bls.n	800540e <HAL_TIM_PWM_ConfigChannel+0x32>
 800540c:	e0d1      	b.n	80055b2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	009a      	lsls	r2, r3, #2
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005414:	18d3      	adds	r3, r2, r3
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0011      	movs	r1, r2
 8005422:	0018      	movs	r0, r3
 8005424:	f000 fa5a 	bl	80058dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2108      	movs	r1, #8
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	2104      	movs	r1, #4
 8005444:	438a      	bics	r2, r1
 8005446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6999      	ldr	r1, [r3, #24]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	691a      	ldr	r2, [r3, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	619a      	str	r2, [r3, #24]
      break;
 800545a:	e0af      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	0011      	movs	r1, r2
 8005464:	0018      	movs	r0, r3
 8005466:	f000 fac3 	bl	80059f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2180      	movs	r1, #128	; 0x80
 8005476:	0109      	lsls	r1, r1, #4
 8005478:	430a      	orrs	r2, r1
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4954      	ldr	r1, [pc, #336]	; (80055d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005488:	400a      	ands	r2, r1
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	021a      	lsls	r2, r3, #8
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	619a      	str	r2, [r3, #24]
      break;
 80054a0:	e08c      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0011      	movs	r1, r2
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 fb24 	bl	8005af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2108      	movs	r1, #8
 80054bc:	430a      	orrs	r2, r1
 80054be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69da      	ldr	r2, [r3, #28]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2104      	movs	r1, #4
 80054cc:	438a      	bics	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69d9      	ldr	r1, [r3, #28]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	61da      	str	r2, [r3, #28]
      break;
 80054e2:	e06b      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0011      	movs	r1, r2
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 fb8b 	bl	8005c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2180      	movs	r1, #128	; 0x80
 80054fe:	0109      	lsls	r1, r1, #4
 8005500:	430a      	orrs	r2, r1
 8005502:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69da      	ldr	r2, [r3, #28]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4932      	ldr	r1, [pc, #200]	; (80055d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005510:	400a      	ands	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69d9      	ldr	r1, [r3, #28]
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	021a      	lsls	r2, r3, #8
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	61da      	str	r2, [r3, #28]
      break;
 8005528:	e048      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	0011      	movs	r1, r2
 8005532:	0018      	movs	r0, r3
 8005534:	f000 fbd2 	bl	8005cdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2108      	movs	r1, #8
 8005544:	430a      	orrs	r2, r1
 8005546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2104      	movs	r1, #4
 8005554:	438a      	bics	r2, r1
 8005556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	691a      	ldr	r2, [r3, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800556a:	e027      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	0011      	movs	r1, r2
 8005574:	0018      	movs	r0, r3
 8005576:	f000 fc11 	bl	8005d9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2180      	movs	r1, #128	; 0x80
 8005586:	0109      	lsls	r1, r1, #4
 8005588:	430a      	orrs	r2, r1
 800558a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4910      	ldr	r1, [pc, #64]	; (80055d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005598:	400a      	ands	r2, r1
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	021a      	lsls	r2, r3, #8
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055b0:	e004      	b.n	80055bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80055b2:	2317      	movs	r3, #23
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
      break;
 80055ba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	223c      	movs	r2, #60	; 0x3c
 80055c0:	2100      	movs	r1, #0
 80055c2:	5499      	strb	r1, [r3, r2]

  return status;
 80055c4:	2317      	movs	r3, #23
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	781b      	ldrb	r3, [r3, #0]
}
 80055ca:	0018      	movs	r0, r3
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b006      	add	sp, #24
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	080062fc 	.word	0x080062fc
 80055d8:	fffffbff 	.word	0xfffffbff

080055dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e6:	230f      	movs	r3, #15
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	2200      	movs	r2, #0
 80055ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	223c      	movs	r2, #60	; 0x3c
 80055f2:	5c9b      	ldrb	r3, [r3, r2]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_ConfigClockSource+0x20>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e0bc      	b.n	8005776 <HAL_TIM_ConfigClockSource+0x19a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	223c      	movs	r2, #60	; 0x3c
 8005600:	2101      	movs	r1, #1
 8005602:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	223d      	movs	r2, #61	; 0x3d
 8005608:	2102      	movs	r1, #2
 800560a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	4a5a      	ldr	r2, [pc, #360]	; (8005780 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005618:	4013      	ands	r3, r2
 800561a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a59      	ldr	r2, [pc, #356]	; (8005784 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005620:	4013      	ands	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2280      	movs	r2, #128	; 0x80
 8005632:	0192      	lsls	r2, r2, #6
 8005634:	4293      	cmp	r3, r2
 8005636:	d040      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0xde>
 8005638:	2280      	movs	r2, #128	; 0x80
 800563a:	0192      	lsls	r2, r2, #6
 800563c:	4293      	cmp	r3, r2
 800563e:	d900      	bls.n	8005642 <HAL_TIM_ConfigClockSource+0x66>
 8005640:	e088      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	0152      	lsls	r2, r2, #5
 8005646:	4293      	cmp	r3, r2
 8005648:	d100      	bne.n	800564c <HAL_TIM_ConfigClockSource+0x70>
 800564a:	e088      	b.n	800575e <HAL_TIM_ConfigClockSource+0x182>
 800564c:	2280      	movs	r2, #128	; 0x80
 800564e:	0152      	lsls	r2, r2, #5
 8005650:	4293      	cmp	r3, r2
 8005652:	d900      	bls.n	8005656 <HAL_TIM_ConfigClockSource+0x7a>
 8005654:	e07e      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 8005656:	2b70      	cmp	r3, #112	; 0x70
 8005658:	d018      	beq.n	800568c <HAL_TIM_ConfigClockSource+0xb0>
 800565a:	d900      	bls.n	800565e <HAL_TIM_ConfigClockSource+0x82>
 800565c:	e07a      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 800565e:	2b60      	cmp	r3, #96	; 0x60
 8005660:	d04f      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0x126>
 8005662:	d900      	bls.n	8005666 <HAL_TIM_ConfigClockSource+0x8a>
 8005664:	e076      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 8005666:	2b50      	cmp	r3, #80	; 0x50
 8005668:	d03b      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x106>
 800566a:	d900      	bls.n	800566e <HAL_TIM_ConfigClockSource+0x92>
 800566c:	e072      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d057      	beq.n	8005722 <HAL_TIM_ConfigClockSource+0x146>
 8005672:	d900      	bls.n	8005676 <HAL_TIM_ConfigClockSource+0x9a>
 8005674:	e06e      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	d063      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x166>
 800567a:	d86b      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 800567c:	2b20      	cmp	r3, #32
 800567e:	d060      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x166>
 8005680:	d868      	bhi.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d05d      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x166>
 8005686:	2b10      	cmp	r3, #16
 8005688:	d05b      	beq.n	8005742 <HAL_TIM_ConfigClockSource+0x166>
 800568a:	e063      	b.n	8005754 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800569c:	f000 fc5e 	bl	8005f5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2277      	movs	r2, #119	; 0x77
 80056ac:	4313      	orrs	r3, r2
 80056ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	609a      	str	r2, [r3, #8]
      break;
 80056b8:	e052      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ca:	f000 fc47 	bl	8005f5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2180      	movs	r1, #128	; 0x80
 80056da:	01c9      	lsls	r1, r1, #7
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
      break;
 80056e0:	e03e      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ee:	001a      	movs	r2, r3
 80056f0:	f000 fbb8 	bl	8005e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2150      	movs	r1, #80	; 0x50
 80056fa:	0018      	movs	r0, r3
 80056fc:	f000 fc12 	bl	8005f24 <TIM_ITRx_SetConfig>
      break;
 8005700:	e02e      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800570e:	001a      	movs	r2, r3
 8005710:	f000 fbd6 	bl	8005ec0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2160      	movs	r1, #96	; 0x60
 800571a:	0018      	movs	r0, r3
 800571c:	f000 fc02 	bl	8005f24 <TIM_ITRx_SetConfig>
      break;
 8005720:	e01e      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572e:	001a      	movs	r2, r3
 8005730:	f000 fb98 	bl	8005e64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2140      	movs	r1, #64	; 0x40
 800573a:	0018      	movs	r0, r3
 800573c:	f000 fbf2 	bl	8005f24 <TIM_ITRx_SetConfig>
      break;
 8005740:	e00e      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	0019      	movs	r1, r3
 800574c:	0010      	movs	r0, r2
 800574e:	f000 fbe9 	bl	8005f24 <TIM_ITRx_SetConfig>
      break;
 8005752:	e005      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005754:	230f      	movs	r3, #15
 8005756:	18fb      	adds	r3, r7, r3
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
      break;
 800575c:	e000      	b.n	8005760 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800575e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	223d      	movs	r2, #61	; 0x3d
 8005764:	2101      	movs	r1, #1
 8005766:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	223c      	movs	r2, #60	; 0x3c
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]

  return status;
 8005770:	230f      	movs	r3, #15
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b004      	add	sp, #16
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	ffceff88 	.word	0xffceff88
 8005784:	ffff00ff 	.word	0xffff00ff

08005788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005790:	46c0      	nop			; (mov r8, r8)
 8005792:	46bd      	mov	sp, r7
 8005794:	b002      	add	sp, #8
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	46bd      	mov	sp, r7
 80057a4:	b002      	add	sp, #8
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057b0:	46c0      	nop			; (mov r8, r8)
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057c0:	46c0      	nop			; (mov r8, r8)
 80057c2:	46bd      	mov	sp, r7
 80057c4:	b002      	add	sp, #8
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a38      	ldr	r2, [pc, #224]	; (80058bc <TIM_Base_SetConfig+0xf4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00c      	beq.n	80057fa <TIM_Base_SetConfig+0x32>
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	05db      	lsls	r3, r3, #23
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d007      	beq.n	80057fa <TIM_Base_SetConfig+0x32>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a34      	ldr	r2, [pc, #208]	; (80058c0 <TIM_Base_SetConfig+0xf8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d003      	beq.n	80057fa <TIM_Base_SetConfig+0x32>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a33      	ldr	r2, [pc, #204]	; (80058c4 <TIM_Base_SetConfig+0xfc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d108      	bne.n	800580c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2270      	movs	r2, #112	; 0x70
 80057fe:	4393      	bics	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a2b      	ldr	r2, [pc, #172]	; (80058bc <TIM_Base_SetConfig+0xf4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01c      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	05db      	lsls	r3, r3, #23
 800581a:	429a      	cmp	r2, r3
 800581c:	d017      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a27      	ldr	r2, [pc, #156]	; (80058c0 <TIM_Base_SetConfig+0xf8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a26      	ldr	r2, [pc, #152]	; (80058c4 <TIM_Base_SetConfig+0xfc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d00f      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a25      	ldr	r2, [pc, #148]	; (80058c8 <TIM_Base_SetConfig+0x100>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d00b      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a24      	ldr	r2, [pc, #144]	; (80058cc <TIM_Base_SetConfig+0x104>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d007      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <TIM_Base_SetConfig+0x108>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_Base_SetConfig+0x86>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <TIM_Base_SetConfig+0x10c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d108      	bne.n	8005860 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <TIM_Base_SetConfig+0x110>)
 8005852:	4013      	ands	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2280      	movs	r2, #128	; 0x80
 8005864:	4393      	bics	r3, r2
 8005866:	001a      	movs	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a0c      	ldr	r2, [pc, #48]	; (80058bc <TIM_Base_SetConfig+0xf4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00b      	beq.n	80058a6 <TIM_Base_SetConfig+0xde>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <TIM_Base_SetConfig+0x104>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_Base_SetConfig+0xde>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a0d      	ldr	r2, [pc, #52]	; (80058d0 <TIM_Base_SetConfig+0x108>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_Base_SetConfig+0xde>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <TIM_Base_SetConfig+0x10c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d103      	bne.n	80058ae <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	615a      	str	r2, [r3, #20]
}
 80058b4:	46c0      	nop			; (mov r8, r8)
 80058b6:	46bd      	mov	sp, r7
 80058b8:	b004      	add	sp, #16
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40002000 	.word	0x40002000
 80058cc:	40014000 	.word	0x40014000
 80058d0:	40014400 	.word	0x40014400
 80058d4:	40014800 	.word	0x40014800
 80058d8:	fffffcff 	.word	0xfffffcff

080058dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	2201      	movs	r2, #1
 80058ec:	4393      	bics	r3, r2
 80058ee:	001a      	movs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4a32      	ldr	r2, [pc, #200]	; (80059d4 <TIM_OC1_SetConfig+0xf8>)
 800590a:	4013      	ands	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2203      	movs	r2, #3
 8005912:	4393      	bics	r3, r2
 8005914:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2202      	movs	r2, #2
 8005924:	4393      	bics	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	4313      	orrs	r3, r2
 8005930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a28      	ldr	r2, [pc, #160]	; (80059d8 <TIM_OC1_SetConfig+0xfc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00b      	beq.n	8005952 <TIM_OC1_SetConfig+0x76>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a27      	ldr	r2, [pc, #156]	; (80059dc <TIM_OC1_SetConfig+0x100>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_OC1_SetConfig+0x76>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <TIM_OC1_SetConfig+0x104>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC1_SetConfig+0x76>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a25      	ldr	r2, [pc, #148]	; (80059e4 <TIM_OC1_SetConfig+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10c      	bne.n	800596c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2208      	movs	r2, #8
 8005956:	4393      	bics	r3, r2
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	4313      	orrs	r3, r2
 8005962:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2204      	movs	r2, #4
 8005968:	4393      	bics	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a1a      	ldr	r2, [pc, #104]	; (80059d8 <TIM_OC1_SetConfig+0xfc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC1_SetConfig+0xb0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a19      	ldr	r2, [pc, #100]	; (80059dc <TIM_OC1_SetConfig+0x100>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC1_SetConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a18      	ldr	r2, [pc, #96]	; (80059e0 <TIM_OC1_SetConfig+0x104>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC1_SetConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <TIM_OC1_SetConfig+0x108>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d111      	bne.n	80059b0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <TIM_OC1_SetConfig+0x10c>)
 8005990:	4013      	ands	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <TIM_OC1_SetConfig+0x110>)
 8005998:	4013      	ands	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	621a      	str	r2, [r3, #32]
}
 80059ca:	46c0      	nop			; (mov r8, r8)
 80059cc:	46bd      	mov	sp, r7
 80059ce:	b006      	add	sp, #24
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	fffeff8f 	.word	0xfffeff8f
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800
 80059e8:	fffffeff 	.word	0xfffffeff
 80059ec:	fffffdff 	.word	0xfffffdff

080059f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	2210      	movs	r2, #16
 8005a00:	4393      	bics	r3, r2
 8005a02:	001a      	movs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <TIM_OC2_SetConfig+0xe8>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <TIM_OC2_SetConfig+0xec>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	021b      	lsls	r3, r3, #8
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	4393      	bics	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a24      	ldr	r2, [pc, #144]	; (8005ae0 <TIM_OC2_SetConfig+0xf0>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d10d      	bne.n	8005a6e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2280      	movs	r2, #128	; 0x80
 8005a56:	4393      	bics	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	2240      	movs	r2, #64	; 0x40
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <TIM_OC2_SetConfig+0xf0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00b      	beq.n	8005a8e <TIM_OC2_SetConfig+0x9e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <TIM_OC2_SetConfig+0xf4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d007      	beq.n	8005a8e <TIM_OC2_SetConfig+0x9e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <TIM_OC2_SetConfig+0xf8>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d003      	beq.n	8005a8e <TIM_OC2_SetConfig+0x9e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a18      	ldr	r2, [pc, #96]	; (8005aec <TIM_OC2_SetConfig+0xfc>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d113      	bne.n	8005ab6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4a17      	ldr	r2, [pc, #92]	; (8005af0 <TIM_OC2_SetConfig+0x100>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4a16      	ldr	r2, [pc, #88]	; (8005af4 <TIM_OC2_SetConfig+0x104>)
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	621a      	str	r2, [r3, #32]
}
 8005ad0:	46c0      	nop			; (mov r8, r8)
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	b006      	add	sp, #24
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	feff8fff 	.word	0xfeff8fff
 8005adc:	fffffcff 	.word	0xfffffcff
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40014400 	.word	0x40014400
 8005aec:	40014800 	.word	0x40014800
 8005af0:	fffffbff 	.word	0xfffffbff
 8005af4:	fffff7ff 	.word	0xfffff7ff

08005af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4a35      	ldr	r2, [pc, #212]	; (8005bdc <TIM_OC3_SetConfig+0xe4>)
 8005b08:	401a      	ands	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	4a2f      	ldr	r2, [pc, #188]	; (8005be0 <TIM_OC3_SetConfig+0xe8>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2203      	movs	r2, #3
 8005b2c:	4393      	bics	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4a29      	ldr	r2, [pc, #164]	; (8005be4 <TIM_OC3_SetConfig+0xec>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <TIM_OC3_SetConfig+0xf0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d10d      	bne.n	8005b72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4a24      	ldr	r2, [pc, #144]	; (8005bec <TIM_OC3_SetConfig+0xf4>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <TIM_OC3_SetConfig+0xf8>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a1c      	ldr	r2, [pc, #112]	; (8005be8 <TIM_OC3_SetConfig+0xf0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_OC3_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <TIM_OC3_SetConfig+0xfc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_OC3_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1c      	ldr	r2, [pc, #112]	; (8005bf8 <TIM_OC3_SetConfig+0x100>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_OC3_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <TIM_OC3_SetConfig+0x104>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d113      	bne.n	8005bba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <TIM_OC3_SetConfig+0x108>)
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	4a19      	ldr	r2, [pc, #100]	; (8005c04 <TIM_OC3_SetConfig+0x10c>)
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	011b      	lsls	r3, r3, #4
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	621a      	str	r2, [r3, #32]
}
 8005bd4:	46c0      	nop			; (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b006      	add	sp, #24
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	fffffeff 	.word	0xfffffeff
 8005be0:	fffeff8f 	.word	0xfffeff8f
 8005be4:	fffffdff 	.word	0xfffffdff
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	fffff7ff 	.word	0xfffff7ff
 8005bf0:	fffffbff 	.word	0xfffffbff
 8005bf4:	40014000 	.word	0x40014000
 8005bf8:	40014400 	.word	0x40014400
 8005bfc:	40014800 	.word	0x40014800
 8005c00:	ffffefff 	.word	0xffffefff
 8005c04:	ffffdfff 	.word	0xffffdfff

08005c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	4a28      	ldr	r2, [pc, #160]	; (8005cb8 <TIM_OC4_SetConfig+0xb0>)
 8005c18:	401a      	ands	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a22      	ldr	r2, [pc, #136]	; (8005cbc <TIM_OC4_SetConfig+0xb4>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a21      	ldr	r2, [pc, #132]	; (8005cc0 <TIM_OC4_SetConfig+0xb8>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4a1d      	ldr	r2, [pc, #116]	; (8005cc4 <TIM_OC4_SetConfig+0xbc>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	031b      	lsls	r3, r3, #12
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a19      	ldr	r2, [pc, #100]	; (8005cc8 <TIM_OC4_SetConfig+0xc0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <TIM_OC4_SetConfig+0x78>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a18      	ldr	r2, [pc, #96]	; (8005ccc <TIM_OC4_SetConfig+0xc4>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <TIM_OC4_SetConfig+0x78>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a17      	ldr	r2, [pc, #92]	; (8005cd0 <TIM_OC4_SetConfig+0xc8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_OC4_SetConfig+0x78>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a16      	ldr	r2, [pc, #88]	; (8005cd4 <TIM_OC4_SetConfig+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d109      	bne.n	8005c94 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	4a15      	ldr	r2, [pc, #84]	; (8005cd8 <TIM_OC4_SetConfig+0xd0>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	019b      	lsls	r3, r3, #6
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b006      	add	sp, #24
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	ffffefff 	.word	0xffffefff
 8005cbc:	feff8fff 	.word	0xfeff8fff
 8005cc0:	fffffcff 	.word	0xfffffcff
 8005cc4:	ffffdfff 	.word	0xffffdfff
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40014000 	.word	0x40014000
 8005cd0:	40014400 	.word	0x40014400
 8005cd4:	40014800 	.word	0x40014800
 8005cd8:	ffffbfff 	.word	0xffffbfff

08005cdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	4a25      	ldr	r2, [pc, #148]	; (8005d80 <TIM_OC5_SetConfig+0xa4>)
 8005cec:	401a      	ands	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
 8005cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a1f      	ldr	r2, [pc, #124]	; (8005d84 <TIM_OC5_SetConfig+0xa8>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <TIM_OC5_SetConfig+0xac>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	041b      	lsls	r3, r3, #16
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a17      	ldr	r2, [pc, #92]	; (8005d8c <TIM_OC5_SetConfig+0xb0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_OC5_SetConfig+0x6e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a16      	ldr	r2, [pc, #88]	; (8005d90 <TIM_OC5_SetConfig+0xb4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_OC5_SetConfig+0x6e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <TIM_OC5_SetConfig+0xb8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_OC5_SetConfig+0x6e>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <TIM_OC5_SetConfig+0xbc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d109      	bne.n	8005d5e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <TIM_OC5_SetConfig+0xa4>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	621a      	str	r2, [r3, #32]
}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b006      	add	sp, #24
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	fffeffff 	.word	0xfffeffff
 8005d84:	fffeff8f 	.word	0xfffeff8f
 8005d88:	fffdffff 	.word	0xfffdffff
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40014400 	.word	0x40014400
 8005d98:	40014800 	.word	0x40014800

08005d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	4a26      	ldr	r2, [pc, #152]	; (8005e44 <TIM_OC6_SetConfig+0xa8>)
 8005dac:	401a      	ands	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	4a20      	ldr	r2, [pc, #128]	; (8005e48 <TIM_OC6_SetConfig+0xac>)
 8005dc8:	4013      	ands	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <TIM_OC6_SetConfig+0xb0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <TIM_OC6_SetConfig+0xb4>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_OC6_SetConfig+0x70>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <TIM_OC6_SetConfig+0xb8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_OC6_SetConfig+0x70>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a16      	ldr	r2, [pc, #88]	; (8005e58 <TIM_OC6_SetConfig+0xbc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_OC6_SetConfig+0x70>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <TIM_OC6_SetConfig+0xc0>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d109      	bne.n	8005e20 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4a14      	ldr	r2, [pc, #80]	; (8005e60 <TIM_OC6_SetConfig+0xc4>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	029b      	lsls	r3, r3, #10
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	621a      	str	r2, [r3, #32]
}
 8005e3a:	46c0      	nop			; (mov r8, r8)
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b006      	add	sp, #24
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	ffefffff 	.word	0xffefffff
 8005e48:	feff8fff 	.word	0xfeff8fff
 8005e4c:	ffdfffff 	.word	0xffdfffff
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40014400 	.word	0x40014400
 8005e5c:	40014800 	.word	0x40014800
 8005e60:	fffbffff 	.word	0xfffbffff

08005e64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	4393      	bics	r3, r2
 8005e7e:	001a      	movs	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	22f0      	movs	r2, #240	; 0xf0
 8005e8e:	4393      	bics	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	011b      	lsls	r3, r3, #4
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4393      	bics	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	621a      	str	r2, [r3, #32]
}
 8005eb8:	46c0      	nop			; (mov r8, r8)
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	b006      	add	sp, #24
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b086      	sub	sp, #24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	2210      	movs	r2, #16
 8005ed2:	4393      	bics	r3, r2
 8005ed4:	001a      	movs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	; (8005f20 <TIM_TI2_ConfigInputStage+0x60>)
 8005eea:	4013      	ands	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	22a0      	movs	r2, #160	; 0xa0
 8005efc:	4393      	bics	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	011b      	lsls	r3, r3, #4
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b006      	add	sp, #24
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	ffff0fff 	.word	0xffff0fff

08005f24 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <TIM_ITRx_SetConfig+0x34>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	2207      	movs	r2, #7
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	609a      	str	r2, [r3, #8]
}
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b004      	add	sp, #16
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	ffcfff8f 	.word	0xffcfff8f

08005f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <TIM_ETR_SetConfig+0x3c>)
 8005f74:	4013      	ands	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	021a      	lsls	r2, r3, #8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	431a      	orrs	r2, r3
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	609a      	str	r2, [r3, #8]
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b006      	add	sp, #24
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	ffff00ff 	.word	0xffff00ff

08005f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	221f      	movs	r2, #31
 8005fac:	4013      	ands	r3, r2
 8005fae:	2201      	movs	r2, #1
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	0013      	movs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	43d2      	mvns	r2, r2
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1a      	ldr	r2, [r3, #32]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	211f      	movs	r1, #31
 8005fcc:	400b      	ands	r3, r1
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4099      	lsls	r1, r3
 8005fd2:	000b      	movs	r3, r1
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b006      	add	sp, #24
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	223c      	movs	r2, #60	; 0x3c
 8005ff2:	5c9b      	ldrb	r3, [r3, r2]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	e05a      	b.n	80060b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	223c      	movs	r2, #60	; 0x3c
 8006000:	2101      	movs	r1, #1
 8006002:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	223d      	movs	r2, #61	; 0x3d
 8006008:	2102      	movs	r1, #2
 800600a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d108      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	4a25      	ldr	r2, [pc, #148]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800602a:	4013      	ands	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2270      	movs	r2, #112	; 0x70
 800603c:	4393      	bics	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d014      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	05db      	lsls	r3, r3, #23
 8006064:	429a      	cmp	r2, r3
 8006066:	d00e      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d009      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a14      	ldr	r2, [pc, #80]	; (80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a12      	ldr	r2, [pc, #72]	; (80060cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d10c      	bne.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	4393      	bics	r3, r2
 800608c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	4313      	orrs	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	223d      	movs	r2, #61	; 0x3d
 80060a4:	2101      	movs	r1, #1
 80060a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	223c      	movs	r2, #60	; 0x3c
 80060ac:	2100      	movs	r1, #0
 80060ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	0018      	movs	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	b004      	add	sp, #16
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	46c0      	nop			; (mov r8, r8)
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	ff0fffff 	.word	0xff0fffff
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40014000 	.word	0x40014000

080060d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	223c      	movs	r2, #60	; 0x3c
 80060e2:	5c9b      	ldrb	r3, [r3, r2]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e079      	b.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	223c      	movs	r2, #60	; 0x3c
 80060f0:	2101      	movs	r1, #1
 80060f2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	22ff      	movs	r2, #255	; 0xff
 80060f8:	4393      	bics	r3, r2
 80060fa:	001a      	movs	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4a38      	ldr	r2, [pc, #224]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006108:	401a      	ands	r2, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a35      	ldr	r2, [pc, #212]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006116:	401a      	ands	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	4313      	orrs	r3, r2
 800611e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4a33      	ldr	r2, [pc, #204]	; (80061f0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006124:	401a      	ands	r2, r3
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4313      	orrs	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4a30      	ldr	r2, [pc, #192]	; (80061f4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006132:	401a      	ands	r2, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4a2e      	ldr	r2, [pc, #184]	; (80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006140:	401a      	ands	r2, r3
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a2b      	ldr	r2, [pc, #172]	; (80061fc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800614e:	401a      	ands	r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006154:	4313      	orrs	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4a29      	ldr	r2, [pc, #164]	; (8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800615c:	401a      	ands	r2, r3
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a25      	ldr	r2, [pc, #148]	; (8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d106      	bne.n	8006180 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a24      	ldr	r2, [pc, #144]	; (8006208 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006176:	401a      	ands	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d121      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800618e:	401a      	ands	r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	051b      	lsls	r3, r3, #20
 8006196:	4313      	orrs	r3, r2
 8006198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800619e:	401a      	ands	r2, r3
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a1a      	ldr	r2, [pc, #104]	; (8006214 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80061ac:	401a      	ands	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d106      	bne.n	80061ce <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a15      	ldr	r2, [pc, #84]	; (8006218 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80061c4:	401a      	ands	r2, r3
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	223c      	movs	r2, #60	; 0x3c
 80061da:	2100      	movs	r1, #0
 80061dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	0018      	movs	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b004      	add	sp, #16
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	fffffcff 	.word	0xfffffcff
 80061ec:	fffffbff 	.word	0xfffffbff
 80061f0:	fffff7ff 	.word	0xfffff7ff
 80061f4:	ffffefff 	.word	0xffffefff
 80061f8:	ffffdfff 	.word	0xffffdfff
 80061fc:	ffffbfff 	.word	0xffffbfff
 8006200:	fff0ffff 	.word	0xfff0ffff
 8006204:	40012c00 	.word	0x40012c00
 8006208:	efffffff 	.word	0xefffffff
 800620c:	ff0fffff 	.word	0xff0fffff
 8006210:	feffffff 	.word	0xfeffffff
 8006214:	fdffffff 	.word	0xfdffffff
 8006218:	dfffffff 	.word	0xdfffffff

0800621c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b002      	add	sp, #8
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006234:	46c0      	nop			; (mov r8, r8)
 8006236:	46bd      	mov	sp, r7
 8006238:	b002      	add	sp, #8
 800623a:	bd80      	pop	{r7, pc}

0800623c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006244:	46c0      	nop			; (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b002      	add	sp, #8
 800624a:	bd80      	pop	{r7, pc}

0800624c <memset>:
 800624c:	0003      	movs	r3, r0
 800624e:	1882      	adds	r2, r0, r2
 8006250:	4293      	cmp	r3, r2
 8006252:	d100      	bne.n	8006256 <memset+0xa>
 8006254:	4770      	bx	lr
 8006256:	7019      	strb	r1, [r3, #0]
 8006258:	3301      	adds	r3, #1
 800625a:	e7f9      	b.n	8006250 <memset+0x4>

0800625c <__libc_init_array>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	2600      	movs	r6, #0
 8006260:	4c0c      	ldr	r4, [pc, #48]	; (8006294 <__libc_init_array+0x38>)
 8006262:	4d0d      	ldr	r5, [pc, #52]	; (8006298 <__libc_init_array+0x3c>)
 8006264:	1b64      	subs	r4, r4, r5
 8006266:	10a4      	asrs	r4, r4, #2
 8006268:	42a6      	cmp	r6, r4
 800626a:	d109      	bne.n	8006280 <__libc_init_array+0x24>
 800626c:	2600      	movs	r6, #0
 800626e:	f000 f819 	bl	80062a4 <_init>
 8006272:	4c0a      	ldr	r4, [pc, #40]	; (800629c <__libc_init_array+0x40>)
 8006274:	4d0a      	ldr	r5, [pc, #40]	; (80062a0 <__libc_init_array+0x44>)
 8006276:	1b64      	subs	r4, r4, r5
 8006278:	10a4      	asrs	r4, r4, #2
 800627a:	42a6      	cmp	r6, r4
 800627c:	d105      	bne.n	800628a <__libc_init_array+0x2e>
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	00b3      	lsls	r3, r6, #2
 8006282:	58eb      	ldr	r3, [r5, r3]
 8006284:	4798      	blx	r3
 8006286:	3601      	adds	r6, #1
 8006288:	e7ee      	b.n	8006268 <__libc_init_array+0xc>
 800628a:	00b3      	lsls	r3, r6, #2
 800628c:	58eb      	ldr	r3, [r5, r3]
 800628e:	4798      	blx	r3
 8006290:	3601      	adds	r6, #1
 8006292:	e7f2      	b.n	800627a <__libc_init_array+0x1e>
 8006294:	08006350 	.word	0x08006350
 8006298:	08006350 	.word	0x08006350
 800629c:	08006354 	.word	0x08006354
 80062a0:	08006350 	.word	0x08006350

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
