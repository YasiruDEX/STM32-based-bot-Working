
OLED_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c88  08004c88  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c88  08004c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c8c  08004c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000014  08004ca4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08004ca4  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f612  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002326  00000000  00000000  0002f691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc0  00000000  00000000  000319b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f4  00000000  00000000  00032678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf59  00000000  00000000  0003306c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001126e  00000000  00000000  0004efc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2f8c  00000000  00000000  00060233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d68  00000000  00000000  001131c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00115f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e70 	.word	0x08003e70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08003e70 	.word	0x08003e70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fd98 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f826 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f90a 	bl	8000840 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f8ba 	bl	80007a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000630:	f000 f878 	bl	8000724 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the display
 8000634:	f000 f976 	bl	8000924 <SSD1306_Init>

  SSD1306_GotoXY (10,10); // goto 10, 10
 8000638:	210a      	movs	r1, #10
 800063a:	200a      	movs	r0, #10
 800063c:	f000 faf2 	bl	8000c24 <SSD1306_GotoXY>
  SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello
 8000640:	4909      	ldr	r1, [pc, #36]	; (8000668 <main+0x4c>)
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <main+0x50>)
 8000644:	2201      	movs	r2, #1
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fb86 	bl	8000d58 <SSD1306_Puts>
  SSD1306_GotoXY (10, 30);
 800064c:	211e      	movs	r1, #30
 800064e:	200a      	movs	r0, #10
 8000650:	f000 fae8 	bl	8000c24 <SSD1306_GotoXY>
  SSD1306_Puts ("WORLD !!", &Font_11x18, 1);
 8000654:	4904      	ldr	r1, [pc, #16]	; (8000668 <main+0x4c>)
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <main+0x54>)
 8000658:	2201      	movs	r2, #1
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fb7c 	bl	8000d58 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000660:	f000 fa24 	bl	8000aac <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x48>
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	20000000 	.word	0x20000000
 800066c:	08003e88 	.word	0x08003e88
 8000670:	08003e90 	.word	0x08003e90

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b095      	sub	sp, #84	; 0x54
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	2414      	movs	r4, #20
 800067c:	193b      	adds	r3, r7, r4
 800067e:	0018      	movs	r0, r3
 8000680:	233c      	movs	r3, #60	; 0x3c
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 fbc7 	bl	8003e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	0018      	movs	r0, r3
 800068e:	2310      	movs	r3, #16
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f003 fbc0 	bl	8003e18 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fd99 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2201      	movs	r2, #1
 80006a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0252      	lsls	r2, r2, #9
 80006ae:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	0021      	movs	r1, r4
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2203      	movs	r2, #3
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2210      	movs	r2, #16
 80006c8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2280      	movs	r2, #128	; 0x80
 80006ce:	0292      	lsls	r2, r2, #10
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0492      	lsls	r2, r2, #18
 80006d8:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0592      	lsls	r2, r2, #22
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fdc1 	bl	800226c <HAL_RCC_OscConfig>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006ee:	f000 f913 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2202      	movs	r2, #2
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2102      	movs	r1, #2
 800070e:	0018      	movs	r0, r3
 8000710:	f002 f90c 	bl	800292c <HAL_RCC_ClockConfig>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000718:	f000 f8fe 	bl	8000918 <Error_Handler>
  }
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b015      	add	sp, #84	; 0x54
 8000722:	bd90      	pop	{r4, r7, pc}

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2201      	movs	r2, #1
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x74>)
 8000760:	0018      	movs	r0, r3
 8000762:	f000 ffd1 	bl	8001708 <HAL_I2C_Init>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800076a:	f000 f8d5 	bl	8000918 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x74>)
 8000770:	2100      	movs	r1, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fc96 	bl	80020a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800077c:	f000 f8cc 	bl	8000918 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <MX_I2C1_Init+0x74>)
 8000782:	2100      	movs	r1, #0
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fcd9 	bl	800213c <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	1e03      	subs	r3, r0, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800078e:	f000 f8c3 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000030 	.word	0x20000030
 800079c:	40005400 	.word	0x40005400
 80007a0:	00602173 	.word	0x00602173

080007a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a8:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007aa:	4a24      	ldr	r2, [pc, #144]	; (800083c <MX_USART2_UART_Init+0x98>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007b0:	22e1      	movs	r2, #225	; 0xe1
 80007b2:	0252      	lsls	r2, r2, #9
 80007b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e0:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f002 fc82 	bl	80030f8 <HAL_UART_Init>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007f8:	f000 f88e 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART2_UART_Init+0x94>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f003 fa29 	bl	8003c58 <HAL_UARTEx_SetTxFifoThreshold>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800080a:	f000 f885 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_USART2_UART_Init+0x94>)
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f003 fa60 	bl	8003cd8 <HAL_UARTEx_SetRxFifoThreshold>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800081c:	f000 f87c 	bl	8000918 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <MX_USART2_UART_Init+0x94>)
 8000822:	0018      	movs	r0, r3
 8000824:	f003 f9de 	bl	8003be4 <HAL_UARTEx_DisableFifoMode>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 f874 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	20000084 	.word	0x20000084
 800083c:	40004400 	.word	0x40004400

08000840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000840:	b590      	push	{r4, r7, lr}
 8000842:	b089      	sub	sp, #36	; 0x24
 8000844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	240c      	movs	r4, #12
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0018      	movs	r0, r3
 800084c:	2314      	movs	r3, #20
 800084e:	001a      	movs	r2, r3
 8000850:	2100      	movs	r1, #0
 8000852:	f003 fae1 	bl	8003e18 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	4b2e      	ldr	r3, [pc, #184]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <MX_GPIO_Init+0xd0>)
 800085c:	2104      	movs	r1, #4
 800085e:	430a      	orrs	r2, r1
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
 8000862:	4b2b      	ldr	r3, [pc, #172]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000866:	2204      	movs	r2, #4
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000872:	4b27      	ldr	r3, [pc, #156]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000874:	2120      	movs	r1, #32
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <MX_GPIO_Init+0xd0>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087e:	2220      	movs	r2, #32
 8000880:	4013      	ands	r3, r2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800088a:	4b21      	ldr	r3, [pc, #132]	; (8000910 <MX_GPIO_Init+0xd0>)
 800088c:	2101      	movs	r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	635a      	str	r2, [r3, #52]	; 0x34
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <MX_GPIO_Init+0xd0>)
 8000894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000896:	2201      	movs	r2, #1
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	019b      	lsls	r3, r3, #6
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	0019      	movs	r1, r3
 80008a8:	f000 ff10 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008ac:	23a0      	movs	r3, #160	; 0xa0
 80008ae:	05db      	lsls	r3, r3, #23
 80008b0:	2200      	movs	r2, #0
 80008b2:	2120      	movs	r1, #32
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 ff09 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0192      	lsls	r2, r2, #6
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_GPIO_Init+0xd4>)
 80008d8:	0019      	movs	r1, r3
 80008da:	0010      	movs	r0, r2
 80008dc:	f000 fd8a 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008e0:	0021      	movs	r1, r4
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2220      	movs	r2, #32
 80008e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2202      	movs	r2, #2
 80008f8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008fa:	187a      	adds	r2, r7, r1
 80008fc:	23a0      	movs	r3, #160	; 0xa0
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	0011      	movs	r1, r2
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fd76 	bl	80013f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b009      	add	sp, #36	; 0x24
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	40021000 	.word	0x40021000
 8000914:	50000800 	.word	0x50000800

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800092a:	f000 fa3b 	bl	8000da4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800092e:	4b5b      	ldr	r3, [pc, #364]	; (8000a9c <SSD1306_Init+0x178>)
 8000930:	485b      	ldr	r0, [pc, #364]	; (8000aa0 <SSD1306_Init+0x17c>)
 8000932:	2201      	movs	r2, #1
 8000934:	2178      	movs	r1, #120	; 0x78
 8000936:	f001 f885 	bl	8001a44 <HAL_I2C_IsDeviceReady>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800093e:	2300      	movs	r3, #0
 8000940:	e0a8      	b.n	8000a94 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <SSD1306_Init+0x180>)
 8000944:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000946:	e002      	b.n	800094e <SSD1306_Init+0x2a>
		p--;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	3b01      	subs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1f9      	bne.n	8000948 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000954:	22ae      	movs	r2, #174	; 0xae
 8000956:	2100      	movs	r1, #0
 8000958:	2078      	movs	r0, #120	; 0x78
 800095a:	f000 faa3 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800095e:	2220      	movs	r2, #32
 8000960:	2100      	movs	r1, #0
 8000962:	2078      	movs	r0, #120	; 0x78
 8000964:	f000 fa9e 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000968:	2210      	movs	r2, #16
 800096a:	2100      	movs	r1, #0
 800096c:	2078      	movs	r0, #120	; 0x78
 800096e:	f000 fa99 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000972:	22b0      	movs	r2, #176	; 0xb0
 8000974:	2100      	movs	r1, #0
 8000976:	2078      	movs	r0, #120	; 0x78
 8000978:	f000 fa94 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800097c:	22c8      	movs	r2, #200	; 0xc8
 800097e:	2100      	movs	r1, #0
 8000980:	2078      	movs	r0, #120	; 0x78
 8000982:	f000 fa8f 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2078      	movs	r0, #120	; 0x78
 800098c:	f000 fa8a 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000990:	2210      	movs	r2, #16
 8000992:	2100      	movs	r1, #0
 8000994:	2078      	movs	r0, #120	; 0x78
 8000996:	f000 fa85 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800099a:	2240      	movs	r2, #64	; 0x40
 800099c:	2100      	movs	r1, #0
 800099e:	2078      	movs	r0, #120	; 0x78
 80009a0:	f000 fa80 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80009a4:	2281      	movs	r2, #129	; 0x81
 80009a6:	2100      	movs	r1, #0
 80009a8:	2078      	movs	r0, #120	; 0x78
 80009aa:	f000 fa7b 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80009ae:	22ff      	movs	r2, #255	; 0xff
 80009b0:	2100      	movs	r1, #0
 80009b2:	2078      	movs	r0, #120	; 0x78
 80009b4:	f000 fa76 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80009b8:	22a1      	movs	r2, #161	; 0xa1
 80009ba:	2100      	movs	r1, #0
 80009bc:	2078      	movs	r0, #120	; 0x78
 80009be:	f000 fa71 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009c2:	22a6      	movs	r2, #166	; 0xa6
 80009c4:	2100      	movs	r1, #0
 80009c6:	2078      	movs	r0, #120	; 0x78
 80009c8:	f000 fa6c 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80009cc:	22a8      	movs	r2, #168	; 0xa8
 80009ce:	2100      	movs	r1, #0
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 fa67 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80009d6:	223f      	movs	r2, #63	; 0x3f
 80009d8:	2100      	movs	r1, #0
 80009da:	2078      	movs	r0, #120	; 0x78
 80009dc:	f000 fa62 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80009e0:	22a4      	movs	r2, #164	; 0xa4
 80009e2:	2100      	movs	r1, #0
 80009e4:	2078      	movs	r0, #120	; 0x78
 80009e6:	f000 fa5d 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80009ea:	22d3      	movs	r2, #211	; 0xd3
 80009ec:	2100      	movs	r1, #0
 80009ee:	2078      	movs	r0, #120	; 0x78
 80009f0:	f000 fa58 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	2078      	movs	r0, #120	; 0x78
 80009fa:	f000 fa53 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80009fe:	22d5      	movs	r2, #213	; 0xd5
 8000a00:	2100      	movs	r1, #0
 8000a02:	2078      	movs	r0, #120	; 0x78
 8000a04:	f000 fa4e 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a08:	22f0      	movs	r2, #240	; 0xf0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2078      	movs	r0, #120	; 0x78
 8000a0e:	f000 fa49 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a12:	22d9      	movs	r2, #217	; 0xd9
 8000a14:	2100      	movs	r1, #0
 8000a16:	2078      	movs	r0, #120	; 0x78
 8000a18:	f000 fa44 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a1c:	2222      	movs	r2, #34	; 0x22
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2078      	movs	r0, #120	; 0x78
 8000a22:	f000 fa3f 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a26:	22da      	movs	r2, #218	; 0xda
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2078      	movs	r0, #120	; 0x78
 8000a2c:	f000 fa3a 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000a30:	2212      	movs	r2, #18
 8000a32:	2100      	movs	r1, #0
 8000a34:	2078      	movs	r0, #120	; 0x78
 8000a36:	f000 fa35 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a3a:	22db      	movs	r2, #219	; 0xdb
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2078      	movs	r0, #120	; 0x78
 8000a40:	f000 fa30 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a44:	2220      	movs	r2, #32
 8000a46:	2100      	movs	r1, #0
 8000a48:	2078      	movs	r0, #120	; 0x78
 8000a4a:	f000 fa2b 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a4e:	228d      	movs	r2, #141	; 0x8d
 8000a50:	2100      	movs	r1, #0
 8000a52:	2078      	movs	r0, #120	; 0x78
 8000a54:	f000 fa26 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a58:	2214      	movs	r2, #20
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2078      	movs	r0, #120	; 0x78
 8000a5e:	f000 fa21 	bl	8000ea4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a62:	22af      	movs	r2, #175	; 0xaf
 8000a64:	2100      	movs	r1, #0
 8000a66:	2078      	movs	r0, #120	; 0x78
 8000a68:	f000 fa1c 	bl	8000ea4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a6c:	222e      	movs	r2, #46	; 0x2e
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2078      	movs	r0, #120	; 0x78
 8000a72:	f000 fa17 	bl	8000ea4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f84c 	bl	8000b14 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000a7c:	f000 f816 	bl	8000aac <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <SSD1306_Init+0x184>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <SSD1306_Init+0x184>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SSD1306_Init+0x184>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	0018      	movs	r0, r3
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	00004e20 	.word	0x00004e20
 8000aa0:	20000030 	.word	0x20000030
 8000aa4:	000009c4 	.word	0x000009c4
 8000aa8:	20000318 	.word	0x20000318

08000aac <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e021      	b.n	8000afe <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3b50      	subs	r3, #80	; 0x50
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2078      	movs	r0, #120	; 0x78
 8000ac8:	f000 f9ec 	bl	8000ea4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2078      	movs	r0, #120	; 0x78
 8000ad2:	f000 f9e7 	bl	8000ea4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2078      	movs	r0, #120	; 0x78
 8000adc:	f000 f9e2 	bl	8000ea4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	01da      	lsls	r2, r3, #7
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <SSD1306_UpdateScreen+0x64>)
 8000ae8:	18d2      	adds	r2, r2, r3
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	2078      	movs	r0, #120	; 0x78
 8000af0:	f000 f96c 	bl	8000dcc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	3201      	adds	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	d9d9      	bls.n	8000aba <SSD1306_UpdateScreen+0xe>
	}
}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000118 	.word	0x20000118

08000b14 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	0002      	movs	r2, r0
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b20:	1dfb      	adds	r3, r7, #7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d101      	bne.n	8000b2c <SSD1306_Fill+0x18>
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e000      	b.n	8000b2e <SSD1306_Fill+0x1a>
 8000b2c:	23ff      	movs	r3, #255	; 0xff
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	0092      	lsls	r2, r2, #2
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <SSD1306_Fill+0x30>)
 8000b34:	0019      	movs	r1, r3
 8000b36:	f003 f96f 	bl	8003e18 <memset>
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	20000118 	.word	0x20000118

08000b48 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	0004      	movs	r4, r0
 8000b50:	0008      	movs	r0, r1
 8000b52:	0011      	movs	r1, r2
 8000b54:	1dbb      	adds	r3, r7, #6
 8000b56:	1c22      	adds	r2, r4, #0
 8000b58:	801a      	strh	r2, [r3, #0]
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	1c02      	adds	r2, r0, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
 8000b60:	1cfb      	adds	r3, r7, #3
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	if (
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b6c:	d852      	bhi.n	8000c14 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2b1f      	cmp	r3, #31
 8000b74:	d84e      	bhi.n	8000c14 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <SSD1306_DrawPixel+0xd4>)
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8000b7e:	1cfb      	adds	r3, r7, #3
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	425a      	negs	r2, r3
 8000b84:	4153      	adcs	r3, r2
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	1cfb      	adds	r3, r7, #3
 8000b8a:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b8c:	1cfb      	adds	r3, r7, #3
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d11e      	bne.n	8000bd2 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b94:	1dbb      	adds	r3, r7, #6
 8000b96:	881a      	ldrh	r2, [r3, #0]
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b298      	uxth	r0, r3
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	01db      	lsls	r3, r3, #7
 8000ba4:	18d3      	adds	r3, r2, r3
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <SSD1306_DrawPixel+0xd8>)
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	b25a      	sxtb	r2, r3
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	2107      	movs	r1, #7
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	4099      	lsls	r1, r3
 8000bb8:	000b      	movs	r3, r1
 8000bba:	b25b      	sxtb	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b259      	sxtb	r1, r3
 8000bc0:	1dbb      	adds	r3, r7, #6
 8000bc2:	881a      	ldrh	r2, [r3, #0]
 8000bc4:	0003      	movs	r3, r0
 8000bc6:	01db      	lsls	r3, r3, #7
 8000bc8:	18d3      	adds	r3, r2, r3
 8000bca:	b2c9      	uxtb	r1, r1
 8000bcc:	4a14      	ldr	r2, [pc, #80]	; (8000c20 <SSD1306_DrawPixel+0xd8>)
 8000bce:	54d1      	strb	r1, [r2, r3]
 8000bd0:	e021      	b.n	8000c16 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bd2:	1dbb      	adds	r3, r7, #6
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	08db      	lsrs	r3, r3, #3
 8000bdc:	b298      	uxth	r0, r3
 8000bde:	0003      	movs	r3, r0
 8000be0:	01db      	lsls	r3, r3, #7
 8000be2:	18d3      	adds	r3, r2, r3
 8000be4:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <SSD1306_DrawPixel+0xd8>)
 8000be6:	5cd3      	ldrb	r3, [r2, r3]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	1d3a      	adds	r2, r7, #4
 8000bec:	8812      	ldrh	r2, [r2, #0]
 8000bee:	2107      	movs	r1, #7
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	000a      	movs	r2, r1
 8000bf8:	b252      	sxtb	r2, r2
 8000bfa:	43d2      	mvns	r2, r2
 8000bfc:	b252      	sxtb	r2, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	b259      	sxtb	r1, r3
 8000c02:	1dbb      	adds	r3, r7, #6
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	0003      	movs	r3, r0
 8000c08:	01db      	lsls	r3, r3, #7
 8000c0a:	18d3      	adds	r3, r2, r3
 8000c0c:	b2c9      	uxtb	r1, r1
 8000c0e:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <SSD1306_DrawPixel+0xd8>)
 8000c10:	54d1      	strb	r1, [r2, r3]
 8000c12:	e000      	b.n	8000c16 <SSD1306_DrawPixel+0xce>
		return;
 8000c14:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b003      	add	sp, #12
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	20000318 	.word	0x20000318
 8000c20:	20000118 	.word	0x20000118

08000c24 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	1dbb      	adds	r3, r7, #6
 8000c2e:	801a      	strh	r2, [r3, #0]
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	1c0a      	adds	r2, r1, #0
 8000c34:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <SSD1306_GotoXY+0x2c>)
 8000c38:	1dba      	adds	r2, r7, #6
 8000c3a:	8812      	ldrh	r2, [r2, #0]
 8000c3c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SSD1306_GotoXY+0x2c>)
 8000c40:	1d3a      	adds	r2, r7, #4
 8000c42:	8812      	ldrh	r2, [r2, #0]
 8000c44:	805a      	strh	r2, [r3, #2]
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b002      	add	sp, #8
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000318 	.word	0x20000318

08000c54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6039      	str	r1, [r7, #0]
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	1c02      	adds	r2, r0, #0
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	1dbb      	adds	r3, r7, #6
 8000c66:	1c0a      	adds	r2, r1, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	; (8000d54 <SSD1306_Putc+0x100>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	001a      	movs	r2, r3
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	18d3      	adds	r3, r2, r3
	if (
 8000c76:	2b7f      	cmp	r3, #127	; 0x7f
 8000c78:	dc07      	bgt.n	8000c8a <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <SSD1306_Putc+0x100>)
 8000c7c:	885b      	ldrh	r3, [r3, #2]
 8000c7e:	001a      	movs	r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	785b      	ldrb	r3, [r3, #1]
 8000c84:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c86:	2b1f      	cmp	r3, #31
 8000c88:	dd01      	ble.n	8000c8e <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e05e      	b.n	8000d4c <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e04a      	b.n	8000d2a <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	3b20      	subs	r3, #32
 8000c9e:	6839      	ldr	r1, [r7, #0]
 8000ca0:	7849      	ldrb	r1, [r1, #1]
 8000ca2:	434b      	muls	r3, r1
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	18cb      	adds	r3, r1, r3
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	881b      	ldrh	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	e02f      	b.n	8000d18 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	409a      	lsls	r2, r3
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d011      	beq.n	8000cea <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <SSD1306_Putc+0x100>)
 8000cc8:	881a      	ldrh	r2, [r3, #0]
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	18d3      	adds	r3, r2, r3
 8000cd0:	b298      	uxth	r0, r3
 8000cd2:	4b20      	ldr	r3, [pc, #128]	; (8000d54 <SSD1306_Putc+0x100>)
 8000cd4:	885a      	ldrh	r2, [r3, #2]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	18d3      	adds	r3, r2, r3
 8000cdc:	b299      	uxth	r1, r3
 8000cde:	1dbb      	adds	r3, r7, #6
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	f7ff ff30 	bl	8000b48 <SSD1306_DrawPixel>
 8000ce8:	e013      	b.n	8000d12 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <SSD1306_Putc+0x100>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	b298      	uxth	r0, r3
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <SSD1306_Putc+0x100>)
 8000cf8:	885a      	ldrh	r2, [r3, #2]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	18d3      	adds	r3, r2, r3
 8000d00:	b299      	uxth	r1, r3
 8000d02:	1dbb      	adds	r3, r7, #6
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	425a      	negs	r2, r3
 8000d08:	4153      	adcs	r3, r2
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	f7ff ff1b 	bl	8000b48 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	3301      	adds	r3, #1
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d3c9      	bcc.n	8000cb8 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	001a      	movs	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d3ae      	bcc.n	8000c94 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d36:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <SSD1306_Putc+0x100>)
 8000d38:	881a      	ldrh	r2, [r3, #0]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	b29a      	uxth	r2, r3
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <SSD1306_Putc+0x100>)
 8000d46:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b006      	add	sp, #24
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000318 	.word	0x20000318

08000d58 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000d66:	e013      	b.n	8000d90 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	7818      	ldrb	r0, [r3, #0]
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	781a      	ldrb	r2, [r3, #0]
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0019      	movs	r1, r3
 8000d74:	f7ff ff6e 	bl	8000c54 <SSD1306_Putc>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d002      	beq.n	8000d8a <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	e008      	b.n	8000d9c <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1e7      	bne.n	8000d68 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b004      	add	sp, #16
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <ssd1306_I2C_Init+0x24>)
 8000dac:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000dae:	e002      	b.n	8000db6 <ssd1306_I2C_Init+0x12>
		p--;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f9      	bne.n	8000db0 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	0003d090 	.word	0x0003d090

08000dcc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000dcc:	b5b0      	push	{r4, r5, r7, lr}
 8000dce:	b0c6      	sub	sp, #280	; 0x118
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	0004      	movs	r4, r0
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	603a      	str	r2, [r7, #0]
 8000dd8:	0019      	movs	r1, r3
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <ssd1306_I2C_WriteMulti+0xc4>)
 8000ddc:	2588      	movs	r5, #136	; 0x88
 8000dde:	006d      	lsls	r5, r5, #1
 8000de0:	195b      	adds	r3, r3, r5
 8000de2:	19db      	adds	r3, r3, r7
 8000de4:	1c22      	adds	r2, r4, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <ssd1306_I2C_WriteMulti+0xc8>)
 8000dea:	002c      	movs	r4, r5
 8000dec:	191b      	adds	r3, r3, r4
 8000dee:	19db      	adds	r3, r3, r7
 8000df0:	1c02      	adds	r2, r0, #0
 8000df2:	701a      	strb	r2, [r3, #0]
 8000df4:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <ssd1306_I2C_WriteMulti+0xcc>)
 8000df6:	0020      	movs	r0, r4
 8000df8:	181b      	adds	r3, r3, r0
 8000dfa:	19db      	adds	r3, r3, r7
 8000dfc:	1c0a      	adds	r2, r1, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <ssd1306_I2C_WriteMulti+0xd0>)
 8000e02:	181b      	adds	r3, r3, r0
 8000e04:	19db      	adds	r3, r3, r7
 8000e06:	4a23      	ldr	r2, [pc, #140]	; (8000e94 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e08:	1812      	adds	r2, r2, r0
 8000e0a:	19d2      	adds	r2, r2, r7
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e10:	2310      	movs	r3, #16
 8000e12:	33ff      	adds	r3, #255	; 0xff
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e014      	b.n	8000e46 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000e1c:	2010      	movs	r0, #16
 8000e1e:	30ff      	adds	r0, #255	; 0xff
 8000e20:	183b      	adds	r3, r7, r0
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	18d2      	adds	r2, r2, r3
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	7811      	ldrb	r1, [r2, #0]
 8000e30:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <ssd1306_I2C_WriteMulti+0xd0>)
 8000e32:	2488      	movs	r4, #136	; 0x88
 8000e34:	0064      	lsls	r4, r4, #1
 8000e36:	1912      	adds	r2, r2, r4
 8000e38:	19d2      	adds	r2, r2, r7
 8000e3a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	183b      	adds	r3, r7, r0
 8000e42:	3201      	adds	r2, #1
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	2310      	movs	r3, #16
 8000e48:	33ff      	adds	r3, #255	; 0xff
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <ssd1306_I2C_WriteMulti+0xcc>)
 8000e52:	2188      	movs	r1, #136	; 0x88
 8000e54:	0049      	lsls	r1, r1, #1
 8000e56:	1852      	adds	r2, r2, r1
 8000e58:	19d2      	adds	r2, r2, r7
 8000e5a:	8812      	ldrh	r2, [r2, #0]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8dd      	bhi.n	8000e1c <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <ssd1306_I2C_WriteMulti+0xc4>)
 8000e62:	000a      	movs	r2, r1
 8000e64:	189b      	adds	r3, r3, r2
 8000e66:	19db      	adds	r3, r3, r7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <ssd1306_I2C_WriteMulti+0xcc>)
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	19db      	adds	r3, r3, r7
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	220c      	movs	r2, #12
 8000e7a:	18ba      	adds	r2, r7, r2
 8000e7c:	4808      	ldr	r0, [pc, #32]	; (8000ea0 <ssd1306_I2C_WriteMulti+0xd4>)
 8000e7e:	240a      	movs	r4, #10
 8000e80:	9400      	str	r4, [sp, #0]
 8000e82:	f000 fcd7 	bl	8001834 <HAL_I2C_Master_Transmit>
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b044      	add	sp, #272	; 0x110
 8000e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	fffffef7 	.word	0xfffffef7
 8000e94:	fffffef6 	.word	0xfffffef6
 8000e98:	fffffef4 	.word	0xfffffef4
 8000e9c:	fffffefc 	.word	0xfffffefc
 8000ea0:	20000030 	.word	0x20000030

08000ea4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	0004      	movs	r4, r0
 8000eac:	0008      	movs	r0, r1
 8000eae:	0011      	movs	r1, r2
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	1c22      	adds	r2, r4, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	1dbb      	adds	r3, r7, #6
 8000eb8:	1c02      	adds	r2, r0, #0
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	1d7b      	adds	r3, r7, #5
 8000ebe:	1c0a      	adds	r2, r1, #0
 8000ec0:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	1dba      	adds	r2, r7, #6
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000ecc:	183b      	adds	r3, r7, r0
 8000ece:	1d7a      	adds	r2, r7, #5
 8000ed0:	7812      	ldrb	r2, [r2, #0]
 8000ed2:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	183a      	adds	r2, r7, r0
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <ssd1306_I2C_Write+0x4c>)
 8000ede:	230a      	movs	r3, #10
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f000 fca6 	bl	8001834 <HAL_I2C_Master_Transmit>
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b005      	add	sp, #20
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000030 	.word	0x20000030

08000ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_MspInit+0x4c>)
 8000efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	430a      	orrs	r2, r1
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f16:	4b0a      	ldr	r3, [pc, #40]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	0549      	lsls	r1, r1, #21
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <HAL_MspInit+0x4c>)
 8000f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	055b      	lsls	r3, r3, #21
 8000f28:	4013      	ands	r3, r2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000f2e:	23c0      	movs	r3, #192	; 0xc0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f000 f994 	bl	8001260 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b09d      	sub	sp, #116	; 0x74
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	235c      	movs	r3, #92	; 0x5c
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f002 ff5e 	bl	8003e18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	2410      	movs	r4, #16
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	0018      	movs	r0, r3
 8000f62:	234c      	movs	r3, #76	; 0x4c
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f002 ff56 	bl	8003e18 <memset>
  if(hi2c->Instance==I2C1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_I2C_MspInit+0xbc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d13f      	bne.n	8000ff6 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2220      	movs	r2, #32
 8000f7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 fe7b 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f8e:	f7ff fcc3 	bl	8000918 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f96:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000faa:	215c      	movs	r1, #92	; 0x5c
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	22c0      	movs	r2, #192	; 0xc0
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2212      	movs	r2, #18
 8000fb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2206      	movs	r2, #6
 8000fca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	187a      	adds	r2, r7, r1
 8000fce:	23a0      	movs	r3, #160	; 0xa0
 8000fd0:	05db      	lsls	r3, r3, #23
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fa0d 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0389      	lsls	r1, r1, #14
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_I2C_MspInit+0xc0>)
 8000fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	039b      	lsls	r3, r3, #14
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b01d      	add	sp, #116	; 0x74
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40005400 	.word	0x40005400
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b09d      	sub	sp, #116	; 0x74
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	235c      	movs	r3, #92	; 0x5c
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	0018      	movs	r0, r3
 8001016:	2314      	movs	r3, #20
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f002 fefc 	bl	8003e18 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	2410      	movs	r4, #16
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	234c      	movs	r3, #76	; 0x4c
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f002 fef4 	bl	8003e18 <memset>
  if(huart->Instance==USART2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_UART_MspInit+0xb8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d13e      	bne.n	80010b8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2202      	movs	r2, #2
 800103e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	f001 fe19 	bl	8002c80 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001052:	f7ff fc61 	bl	8000918 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0289      	lsls	r1, r1, #10
 8001060:	430a      	orrs	r2, r1
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c
 8001064:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_UART_MspInit+0xbc>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800108a:	215c      	movs	r1, #92	; 0x5c
 800108c:	187b      	adds	r3, r7, r1
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2202      	movs	r2, #2
 8001096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2201      	movs	r2, #1
 80010a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	187a      	adds	r2, r7, r1
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f000 f99e 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b01d      	add	sp, #116	; 0x74
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f89c 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001102:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001104:	f7ff fff7 	bl	80010f6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800112e:	f002 fe7b 	bl	8003e28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001132:	f7ff fa73 	bl	800061c <main>

08001136 <LoopForever>:

LoopForever:
  b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   r0, =_estack
 8001138:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001144:	08004c90 	.word	0x08004c90
  ldr r2, =_sbss
 8001148:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800114c:	20000324 	.word	0x20000324

08001150 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_COMP_IRQHandler>
	...

08001154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Init+0x3c>)
 8001166:	2180      	movs	r1, #128	; 0x80
 8001168:	0049      	lsls	r1, r1, #1
 800116a:	430a      	orrs	r2, r1
 800116c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f810 	bl	8001194 <HAL_InitTick>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d003      	beq.n	8001180 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e001      	b.n	8001184 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff feb8 	bl	8000ef4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	230f      	movs	r3, #15
 800119e:	18fb      	adds	r3, r7, r3
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_InitTick+0x88>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d02b      	beq.n	8001204 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <HAL_InitTick+0x8c>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_InitTick+0x88>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	0019      	movs	r1, r3
 80011b6:	23fa      	movs	r3, #250	; 0xfa
 80011b8:	0098      	lsls	r0, r3, #2
 80011ba:	f7fe ffa3 	bl	8000104 <__udivsi3>
 80011be:	0003      	movs	r3, r0
 80011c0:	0019      	movs	r1, r3
 80011c2:	0020      	movs	r0, r4
 80011c4:	f7fe ff9e 	bl	8000104 <__udivsi3>
 80011c8:	0003      	movs	r3, r0
 80011ca:	0018      	movs	r0, r3
 80011cc:	f000 f905 	bl	80013da <HAL_SYSTICK_Config>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d112      	bne.n	80011fa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d80a      	bhi.n	80011f0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f8e4 	bl	80013b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_InitTick+0x90>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	e00d      	b.n	800120c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e008      	b.n	800120c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e003      	b.n	800120c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001204:	230f      	movs	r3, #15
 8001206:	18fb      	adds	r3, r7, r3
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800120c:	230f      	movs	r3, #15
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	781b      	ldrb	r3, [r3, #0]
}
 8001212:	0018      	movs	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	b005      	add	sp, #20
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	20000010 	.word	0x20000010
 8001220:	20000008 	.word	0x20000008
 8001224:	2000000c 	.word	0x2000000c

08001228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x1c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	001a      	movs	r2, r3
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_IncTick+0x20>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	18d2      	adds	r2, r2, r3
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_IncTick+0x20>)
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000010 	.word	0x20000010
 8001248:	20000320 	.word	0x20000320

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b02      	ldr	r3, [pc, #8]	; (800125c <HAL_GetTick+0x10>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	20000320 	.word	0x20000320

08001260 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800126e:	4013      	ands	r3, r2
 8001270:	0019      	movs	r1, r3
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	40010000 	.word	0x40010000
 8001288:	fffff9ff 	.word	0xfffff9ff

0800128c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	0002      	movs	r2, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b7f      	cmp	r3, #127	; 0x7f
 80012a0:	d828      	bhi.n	80012f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <__NVIC_SetPriority+0xd4>)
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	089b      	lsrs	r3, r3, #2
 80012ac:	33c0      	adds	r3, #192	; 0xc0
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	589b      	ldr	r3, [r3, r2]
 80012b2:	1dfa      	adds	r2, r7, #7
 80012b4:	7812      	ldrb	r2, [r2, #0]
 80012b6:	0011      	movs	r1, r2
 80012b8:	2203      	movs	r2, #3
 80012ba:	400a      	ands	r2, r1
 80012bc:	00d2      	lsls	r2, r2, #3
 80012be:	21ff      	movs	r1, #255	; 0xff
 80012c0:	4091      	lsls	r1, r2
 80012c2:	000a      	movs	r2, r1
 80012c4:	43d2      	mvns	r2, r2
 80012c6:	401a      	ands	r2, r3
 80012c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	22ff      	movs	r2, #255	; 0xff
 80012d0:	401a      	ands	r2, r3
 80012d2:	1dfb      	adds	r3, r7, #7
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	0018      	movs	r0, r3
 80012d8:	2303      	movs	r3, #3
 80012da:	4003      	ands	r3, r0
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e0:	481f      	ldr	r0, [pc, #124]	; (8001360 <__NVIC_SetPriority+0xd4>)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	089b      	lsrs	r3, r3, #2
 80012ea:	430a      	orrs	r2, r1
 80012ec:	33c0      	adds	r3, #192	; 0xc0
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012f2:	e031      	b.n	8001358 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4a1b      	ldr	r2, [pc, #108]	; (8001364 <__NVIC_SetPriority+0xd8>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0019      	movs	r1, r3
 80012fc:	230f      	movs	r3, #15
 80012fe:	400b      	ands	r3, r1
 8001300:	3b08      	subs	r3, #8
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3306      	adds	r3, #6
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	18d3      	adds	r3, r2, r3
 800130a:	3304      	adds	r3, #4
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	1dfa      	adds	r2, r7, #7
 8001310:	7812      	ldrb	r2, [r2, #0]
 8001312:	0011      	movs	r1, r2
 8001314:	2203      	movs	r2, #3
 8001316:	400a      	ands	r2, r1
 8001318:	00d2      	lsls	r2, r2, #3
 800131a:	21ff      	movs	r1, #255	; 0xff
 800131c:	4091      	lsls	r1, r2
 800131e:	000a      	movs	r2, r1
 8001320:	43d2      	mvns	r2, r2
 8001322:	401a      	ands	r2, r3
 8001324:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	019b      	lsls	r3, r3, #6
 800132a:	22ff      	movs	r2, #255	; 0xff
 800132c:	401a      	ands	r2, r3
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	0018      	movs	r0, r3
 8001334:	2303      	movs	r3, #3
 8001336:	4003      	ands	r3, r0
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <__NVIC_SetPriority+0xd8>)
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	001c      	movs	r4, r3
 8001344:	230f      	movs	r3, #15
 8001346:	4023      	ands	r3, r4
 8001348:	3b08      	subs	r3, #8
 800134a:	089b      	lsrs	r3, r3, #2
 800134c:	430a      	orrs	r2, r1
 800134e:	3306      	adds	r3, #6
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	18c3      	adds	r3, r0, r3
 8001354:	3304      	adds	r3, #4
 8001356:	601a      	str	r2, [r3, #0]
}
 8001358:	46c0      	nop			; (mov r8, r8)
 800135a:	46bd      	mov	sp, r7
 800135c:	b003      	add	sp, #12
 800135e:	bd90      	pop	{r4, r7, pc}
 8001360:	e000e100 	.word	0xe000e100
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	1e5a      	subs	r2, r3, #1
 8001374:	2380      	movs	r3, #128	; 0x80
 8001376:	045b      	lsls	r3, r3, #17
 8001378:	429a      	cmp	r2, r3
 800137a:	d301      	bcc.n	8001380 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137c:	2301      	movs	r3, #1
 800137e:	e010      	b.n	80013a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <SysTick_Config+0x44>)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	3a01      	subs	r2, #1
 8001386:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001388:	2301      	movs	r3, #1
 800138a:	425b      	negs	r3, r3
 800138c:	2103      	movs	r1, #3
 800138e:	0018      	movs	r0, r3
 8001390:	f7ff ff7c 	bl	800128c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x44>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x44>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	210f      	movs	r1, #15
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	1c02      	adds	r2, r0, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ff5d 	bl	800128c <__NVIC_SetPriority>
}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ffbf 	bl	8001368 <SysTick_Config>
 80013ea:	0003      	movs	r3, r0
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001402:	e14d      	b.n	80016a0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d100      	bne.n	800141c <HAL_GPIO_Init+0x28>
 800141a:	e13e      	b.n	800169a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	4013      	ands	r3, r2
 8001424:	2b01      	cmp	r3, #1
 8001426:	d005      	beq.n	8001434 <HAL_GPIO_Init+0x40>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2203      	movs	r2, #3
 800142e:	4013      	ands	r3, r2
 8001430:	2b02      	cmp	r3, #2
 8001432:	d130      	bne.n	8001496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	409a      	lsls	r2, r3
 8001442:	0013      	movs	r3, r2
 8001444:	43da      	mvns	r2, r3
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	409a      	lsls	r2, r3
 8001456:	0013      	movs	r3, r2
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146a:	2201      	movs	r2, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	2201      	movs	r2, #1
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
 8001488:	0013      	movs	r3, r2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2203      	movs	r2, #3
 800149c:	4013      	ands	r3, r2
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d017      	beq.n	80014d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d123      	bne.n	8001526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	58d3      	ldr	r3, [r2, r3]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2207      	movs	r2, #7
 80014f0:	4013      	ands	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	43da      	mvns	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	2107      	movs	r1, #7
 800150a:	400b      	ands	r3, r1
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	6939      	ldr	r1, [r7, #16]
 8001524:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	401a      	ands	r2, r3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685a      	ldr	r2, [r3, #4]
 800155e:	23c0      	movs	r3, #192	; 0xc0
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d100      	bne.n	8001568 <HAL_GPIO_Init+0x174>
 8001566:	e098      	b.n	800169a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001568:	4a53      	ldr	r2, [pc, #332]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3318      	adds	r3, #24
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	589b      	ldr	r3, [r3, r2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	220f      	movs	r2, #15
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	23a0      	movs	r3, #160	; 0xa0
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	429a      	cmp	r2, r3
 8001594:	d019      	beq.n	80015ca <HAL_GPIO_Init+0x1d6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2c8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d013      	beq.n	80015c6 <HAL_GPIO_Init+0x1d2>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a47      	ldr	r2, [pc, #284]	; (80016c0 <HAL_GPIO_Init+0x2cc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00d      	beq.n	80015c2 <HAL_GPIO_Init+0x1ce>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a46      	ldr	r2, [pc, #280]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <HAL_GPIO_Init+0x1ca>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a45      	ldr	r2, [pc, #276]	; (80016c8 <HAL_GPIO_Init+0x2d4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d101      	bne.n	80015ba <HAL_GPIO_Init+0x1c6>
 80015b6:	2304      	movs	r3, #4
 80015b8:	e008      	b.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015ba:	2305      	movs	r3, #5
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015be:	2303      	movs	r3, #3
 80015c0:	e004      	b.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e002      	b.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_Init+0x1d8>
 80015ca:	2300      	movs	r3, #0
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	2103      	movs	r1, #3
 80015d0:	400a      	ands	r2, r1
 80015d2:	00d2      	lsls	r2, r2, #3
 80015d4:	4093      	lsls	r3, r2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4313      	orrs	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015dc:	4936      	ldr	r1, [pc, #216]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3318      	adds	r3, #24
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ea:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43da      	mvns	r2, r3
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4013      	ands	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	035b      	lsls	r3, r3, #13
 8001602:	4013      	ands	r3, r2
 8001604:	d003      	beq.n	800160e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	43da      	mvns	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4013      	ands	r3, r2
 8001622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	4013      	ands	r3, r2
 800162e:	d003      	beq.n	8001638 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001640:	2384      	movs	r3, #132	; 0x84
 8001642:	58d3      	ldr	r3, [r2, r3]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001664:	4914      	ldr	r1, [pc, #80]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001666:	2284      	movs	r2, #132	; 0x84
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	58d3      	ldr	r3, [r2, r3]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001692:	4909      	ldr	r1, [pc, #36]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 8001694:	2280      	movs	r2, #128	; 0x80
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	1e13      	subs	r3, r2, #0
 80016aa:	d000      	beq.n	80016ae <HAL_GPIO_Init+0x2ba>
 80016ac:	e6aa      	b.n	8001404 <HAL_GPIO_Init+0x10>
  }
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b006      	add	sp, #24
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021800 	.word	0x40021800
 80016bc:	50000400 	.word	0x50000400
 80016c0:	50000800 	.word	0x50000800
 80016c4:	50000c00 	.word	0x50000c00
 80016c8:	50001000 	.word	0x50001000

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	0008      	movs	r0, r1
 80016d6:	0011      	movs	r1, r2
 80016d8:	1cbb      	adds	r3, r7, #2
 80016da:	1c02      	adds	r2, r0, #0
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	1c7b      	adds	r3, r7, #1
 80016e0:	1c0a      	adds	r2, r1, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e4:	1c7b      	adds	r3, r7, #1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ec:	1cbb      	adds	r3, r7, #2
 80016ee:	881a      	ldrh	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016f6:	1cbb      	adds	r3, r7, #2
 80016f8:	881a      	ldrh	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e082      	b.n	8001820 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2241      	movs	r2, #65	; 0x41
 800171e:	5c9b      	ldrb	r3, [r3, r2]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	d107      	bne.n	8001736 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2240      	movs	r2, #64	; 0x40
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff fc07 	bl	8000f44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2241      	movs	r2, #65	; 0x41
 800173a:	2124      	movs	r1, #36	; 0x24
 800173c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2101      	movs	r1, #1
 800174a:	438a      	bics	r2, r1
 800174c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <HAL_I2C_Init+0x120>)
 8001758:	400a      	ands	r2, r1
 800175a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4931      	ldr	r1, [pc, #196]	; (800182c <HAL_I2C_Init+0x124>)
 8001768:	400a      	ands	r2, r1
 800176a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0209      	lsls	r1, r1, #8
 8001780:	430a      	orrs	r2, r1
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	e007      	b.n	8001796 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2184      	movs	r1, #132	; 0x84
 8001790:	0209      	lsls	r1, r1, #8
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d104      	bne.n	80017a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2280      	movs	r2, #128	; 0x80
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	491f      	ldr	r1, [pc, #124]	; (8001830 <HAL_I2C_Init+0x128>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	491a      	ldr	r1, [pc, #104]	; (800182c <HAL_I2C_Init+0x124>)
 80017c4:	400a      	ands	r2, r1
 80017c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69d9      	ldr	r1, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1a      	ldr	r2, [r3, #32]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2241      	movs	r2, #65	; 0x41
 800180c:	2120      	movs	r1, #32
 800180e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2242      	movs	r2, #66	; 0x42
 800181a:	2100      	movs	r1, #0
 800181c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800181e:	2300      	movs	r3, #0
}
 8001820:	0018      	movs	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	b002      	add	sp, #8
 8001826:	bd80      	pop	{r7, pc}
 8001828:	f0ffffff 	.word	0xf0ffffff
 800182c:	ffff7fff 	.word	0xffff7fff
 8001830:	02008000 	.word	0x02008000

08001834 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001834:	b590      	push	{r4, r7, lr}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af02      	add	r7, sp, #8
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	0008      	movs	r0, r1
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	0019      	movs	r1, r3
 8001842:	230a      	movs	r3, #10
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	1c02      	adds	r2, r0, #0
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	2308      	movs	r3, #8
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	1c0a      	adds	r2, r1, #0
 8001850:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2241      	movs	r2, #65	; 0x41
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	d000      	beq.n	8001860 <HAL_I2C_Master_Transmit+0x2c>
 800185e:	e0e7      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	5c9b      	ldrb	r3, [r3, r2]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_I2C_Master_Transmit+0x3a>
 800186a:	2302      	movs	r3, #2
 800186c:	e0e1      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2240      	movs	r2, #64	; 0x40
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001876:	f7ff fce9 	bl	800124c <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	0219      	lsls	r1, r3, #8
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2319      	movs	r3, #25
 800188a:	2201      	movs	r2, #1
 800188c:	f000 fa16 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0cc      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2241      	movs	r2, #65	; 0x41
 800189c:	2121      	movs	r1, #33	; 0x21
 800189e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2242      	movs	r2, #66	; 0x42
 80018a4:	2110      	movs	r1, #16
 80018a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2208      	movs	r2, #8
 80018b8:	18ba      	adds	r2, r7, r2
 80018ba:	8812      	ldrh	r2, [r2, #0]
 80018bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2bff      	cmp	r3, #255	; 0xff
 80018cc:	d911      	bls.n	80018f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	22ff      	movs	r2, #255	; 0xff
 80018d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	2380      	movs	r3, #128	; 0x80
 80018dc:	045c      	lsls	r4, r3, #17
 80018de:	230a      	movs	r3, #10
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	8819      	ldrh	r1, [r3, #0]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <HAL_I2C_Master_Transmit+0x208>)
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	0023      	movs	r3, r4
 80018ec:	f000 fba0 	bl	8002030 <I2C_TransferConfig>
 80018f0:	e075      	b.n	80019de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001900:	b2da      	uxtb	r2, r3
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	049c      	lsls	r4, r3, #18
 8001906:	230a      	movs	r3, #10
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <HAL_I2C_Master_Transmit+0x208>)
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	0023      	movs	r3, r4
 8001914:	f000 fb8c 	bl	8002030 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001918:	e061      	b.n	80019de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	0018      	movs	r0, r3
 8001922:	f000 fa0a 	bl	8001d3a <I2C_WaitOnTXISFlagUntilTimeout>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e081      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29b      	uxth	r3, r3
 800194a:	3b01      	subs	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001956:	3b01      	subs	r3, #1
 8001958:	b29a      	uxth	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03a      	beq.n	80019de <HAL_I2C_Master_Transmit+0x1aa>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800196c:	2b00      	cmp	r3, #0
 800196e:	d136      	bne.n	80019de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	0013      	movs	r3, r2
 800197a:	2200      	movs	r2, #0
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	f000 f99d 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001982:	1e03      	subs	r3, r0, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e053      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	b29b      	uxth	r3, r3
 8001990:	2bff      	cmp	r3, #255	; 0xff
 8001992:	d911      	bls.n	80019b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	22ff      	movs	r2, #255	; 0xff
 8001998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	045c      	lsls	r4, r3, #17
 80019a4:	230a      	movs	r3, #10
 80019a6:	18fb      	adds	r3, r7, r3
 80019a8:	8819      	ldrh	r1, [r3, #0]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	0023      	movs	r3, r4
 80019b2:	f000 fb3d 	bl	8002030 <I2C_TransferConfig>
 80019b6:	e012      	b.n	80019de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	049c      	lsls	r4, r3, #18
 80019cc:	230a      	movs	r3, #10
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	8819      	ldrh	r1, [r3, #0]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	0023      	movs	r3, r4
 80019da:	f000 fb29 	bl	8002030 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d198      	bne.n	800191a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 f9e2 	bl	8001db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01a      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2220      	movs	r2, #32
 8001a02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	490c      	ldr	r1, [pc, #48]	; (8001a40 <HAL_I2C_Master_Transmit+0x20c>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2241      	movs	r2, #65	; 0x41
 8001a18:	2120      	movs	r1, #32
 8001a1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2242      	movs	r2, #66	; 0x42
 8001a20:	2100      	movs	r1, #0
 8001a22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	2100      	movs	r1, #0
 8001a2a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b007      	add	sp, #28
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	80002000 	.word	0x80002000
 8001a40:	fe00e800 	.word	0xfe00e800

08001a44 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	230a      	movs	r3, #10
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	1c0a      	adds	r2, r1, #0
 8001a56:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2241      	movs	r2, #65	; 0x41
 8001a60:	5c9b      	ldrb	r3, [r3, r2]
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d000      	beq.n	8001a6a <HAL_I2C_IsDeviceReady+0x26>
 8001a68:	e0fe      	b.n	8001c68 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	401a      	ands	r2, r3
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e0f3      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	5c9b      	ldrb	r3, [r3, r2]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_IsDeviceReady+0x4c>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0ec      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2101      	movs	r1, #1
 8001a96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2241      	movs	r2, #65	; 0x41
 8001a9c:	2124      	movs	r1, #36	; 0x24
 8001a9e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_I2C_IsDeviceReady+0x7a>
 8001aae:	230a      	movs	r3, #10
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	059b      	lsls	r3, r3, #22
 8001ab6:	0d9b      	lsrs	r3, r3, #22
 8001ab8:	4a6e      	ldr	r2, [pc, #440]	; (8001c74 <HAL_I2C_IsDeviceReady+0x230>)
 8001aba:	431a      	orrs	r2, r3
 8001abc:	e007      	b.n	8001ace <HAL_I2C_IsDeviceReady+0x8a>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	059b      	lsls	r3, r3, #22
 8001ac6:	0d9b      	lsrs	r3, r3, #22
 8001ac8:	22a0      	movs	r2, #160	; 0xa0
 8001aca:	0192      	lsls	r2, r2, #6
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001ad4:	f7ff fbba 	bl	800124c <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	3b20      	subs	r3, #32
 8001ae8:	425a      	negs	r2, r3
 8001aea:	4153      	adcs	r3, r2
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	231f      	movs	r3, #31
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	2210      	movs	r2, #16
 8001afc:	4013      	ands	r3, r2
 8001afe:	3b10      	subs	r3, #16
 8001b00:	425a      	negs	r2, r3
 8001b02:	4153      	adcs	r3, r2
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	231e      	movs	r3, #30
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b0c:	e035      	b.n	8001b7a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	d01a      	beq.n	8001b4a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b14:	f7ff fb9a 	bl	800124c <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d302      	bcc.n	8001b2a <HAL_I2C_IsDeviceReady+0xe6>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10f      	bne.n	8001b4a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2241      	movs	r2, #65	; 0x41
 8001b2e:	2120      	movs	r1, #32
 8001b30:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	2220      	movs	r2, #32
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	2100      	movs	r1, #0
 8001b44:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e08f      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2220      	movs	r2, #32
 8001b52:	4013      	ands	r3, r2
 8001b54:	3b20      	subs	r3, #32
 8001b56:	425a      	negs	r2, r3
 8001b58:	4153      	adcs	r3, r2
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	231f      	movs	r3, #31
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	3b10      	subs	r3, #16
 8001b6e:	425a      	negs	r2, r3
 8001b70:	4153      	adcs	r3, r2
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	231e      	movs	r3, #30
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b7a:	231f      	movs	r3, #31
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_I2C_IsDeviceReady+0x14a>
 8001b84:	231e      	movs	r3, #30
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0bf      	beq.n	8001b0e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2210      	movs	r2, #16
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d01a      	beq.n	8001bd2 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2120      	movs	r1, #32
 8001baa:	f000 f887 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e059      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2241      	movs	r2, #65	; 0x41
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e04b      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	0013      	movs	r3, r2
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2120      	movs	r1, #32
 8001be0:	f000 f86c 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e03e      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d119      	bne.n	8001c38 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2180      	movs	r1, #128	; 0x80
 8001c10:	01c9      	lsls	r1, r1, #7
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	0013      	movs	r3, r2
 8001c20:	2200      	movs	r2, #0
 8001c22:	2120      	movs	r1, #32
 8001c24:	f000 f84a 	bl	8001cbc <I2C_WaitOnFlagUntilTimeout>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e01c      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2220      	movs	r2, #32
 8001c36:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d900      	bls.n	8001c48 <HAL_I2C_IsDeviceReady+0x204>
 8001c46:	e72e      	b.n	8001aa6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2241      	movs	r2, #65	; 0x41
 8001c4c:	2120      	movs	r1, #32
 8001c4e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	2220      	movs	r2, #32
 8001c56:	431a      	orrs	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2240      	movs	r2, #64	; 0x40
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001c68:	2302      	movs	r3, #2
  }
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b008      	add	sp, #32
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	02002000 	.word	0x02002000

08001c78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d103      	bne.n	8001c96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d007      	beq.n	8001cb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2101      	movs	r1, #1
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	619a      	str	r2, [r3, #24]
  }
}
 8001cb4:	46c0      	nop			; (mov r8, r8)
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	1dfb      	adds	r3, r7, #7
 8001cca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ccc:	e021      	b.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	d01e      	beq.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7ff faba 	bl	800124c <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d302      	bcc.n	8001cea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d113      	bne.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	2220      	movs	r2, #32
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2241      	movs	r2, #65	; 0x41
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2242      	movs	r2, #66	; 0x42
 8001d02:	2100      	movs	r1, #0
 8001d04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	425a      	negs	r2, r3
 8001d22:	4153      	adcs	r3, r2
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	001a      	movs	r2, r3
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d0ce      	beq.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	0018      	movs	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	60f8      	str	r0, [r7, #12]
 8001d42:	60b9      	str	r1, [r7, #8]
 8001d44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d46:	e02b      	b.n	8001da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f000 f86e 	bl	8001e30 <I2C_IsErrorOccurred>
 8001d54:	1e03      	subs	r3, r0, #0
 8001d56:	d001      	beq.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e029      	b.n	8001db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	d01e      	beq.n	8001da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d62:	f7ff fa73 	bl	800124c <HAL_GetTick>
 8001d66:	0002      	movs	r2, r0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	68ba      	ldr	r2, [r7, #8]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d302      	bcc.n	8001d78 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d113      	bne.n	8001da0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	2220      	movs	r2, #32
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2241      	movs	r2, #65	; 0x41
 8001d88:	2120      	movs	r1, #32
 8001d8a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2242      	movs	r2, #66	; 0x42
 8001d90:	2100      	movs	r1, #0
 8001d92:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e007      	b.n	8001db0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d1cc      	bne.n	8001d48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dc4:	e028      	b.n	8001e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f82f 	bl	8001e30 <I2C_IsErrorOccurred>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e026      	b.n	8001e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7ff fa37 	bl	800124c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	2220      	movs	r2, #32
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2241      	movs	r2, #65	; 0x41
 8001e00:	2120      	movs	r1, #32
 8001e02:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2242      	movs	r2, #66	; 0x42
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	2100      	movs	r1, #0
 8001e12:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e007      	b.n	8001e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	4013      	ands	r3, r2
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d1cf      	bne.n	8001dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b004      	add	sp, #16
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	2327      	movs	r3, #39	; 0x27
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2210      	movs	r2, #16
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d100      	bne.n	8001e5e <I2C_IsErrorOccurred+0x2e>
 8001e5c:	e082      	b.n	8001f64 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2210      	movs	r2, #16
 8001e64:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e66:	e060      	b.n	8001f2a <I2C_IsErrorOccurred+0xfa>
 8001e68:	2427      	movs	r4, #39	; 0x27
 8001e6a:	193b      	adds	r3, r7, r4
 8001e6c:	193a      	adds	r2, r7, r4
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	3301      	adds	r3, #1
 8001e76:	d058      	beq.n	8001f2a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e78:	f7ff f9e8 	bl	800124c <HAL_GetTick>
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d306      	bcc.n	8001e96 <I2C_IsErrorOccurred+0x66>
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	193a      	adds	r2, r7, r4
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d149      	bne.n	8001f2a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	01db      	lsls	r3, r3, #7
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ea4:	2013      	movs	r0, #19
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	2142      	movs	r1, #66	; 0x42
 8001eac:	5c52      	ldrb	r2, [r2, r1]
 8001eae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	401a      	ands	r2, r3
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d126      	bne.n	8001f12 <I2C_IsErrorOccurred+0xe2>
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d021      	beq.n	8001f12 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001ece:	183b      	adds	r3, r7, r0
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b20      	cmp	r3, #32
 8001ed4:	d01d      	beq.n	8001f12 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	01c9      	lsls	r1, r1, #7
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ee8:	f7ff f9b0 	bl	800124c <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef0:	e00f      	b.n	8001f12 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ef2:	f7ff f9ab 	bl	800124c <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b19      	cmp	r3, #25
 8001efe:	d908      	bls.n	8001f12 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2220      	movs	r2, #32
 8001f04:	4313      	orrs	r3, r2
 8001f06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f08:	2327      	movs	r3, #39	; 0x27
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]

              break;
 8001f10:	e00b      	b.n	8001f2a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2127      	movs	r1, #39	; 0x27
 8001f1e:	187a      	adds	r2, r7, r1
 8001f20:	1879      	adds	r1, r7, r1
 8001f22:	7809      	ldrb	r1, [r1, #0]
 8001f24:	7011      	strb	r1, [r2, #0]
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d1e3      	bne.n	8001ef2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2220      	movs	r2, #32
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d004      	beq.n	8001f42 <I2C_IsErrorOccurred+0x112>
 8001f38:	2327      	movs	r3, #39	; 0x27
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d092      	beq.n	8001e68 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f42:	2327      	movs	r3, #39	; 0x27
 8001f44:	18fb      	adds	r3, r7, r3
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2220      	movs	r2, #32
 8001f52:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f5c:	2327      	movs	r3, #39	; 0x27
 8001f5e:	18fb      	adds	r3, r7, r3
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4013      	ands	r3, r2
 8001f74:	d00c      	beq.n	8001f90 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2280      	movs	r2, #128	; 0x80
 8001f84:	0052      	lsls	r2, r2, #1
 8001f86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f88:	2327      	movs	r3, #39	; 0x27
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00c      	beq.n	8001fb4 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	2208      	movs	r2, #8
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	00d2      	lsls	r2, r2, #3
 8001faa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fac:	2327      	movs	r3, #39	; 0x27
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d00c      	beq.n	8001fd8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2280      	movs	r2, #128	; 0x80
 8001fcc:	0092      	lsls	r2, r2, #2
 8001fce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fd0:	2327      	movs	r3, #39	; 0x27
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001fd8:	2327      	movs	r3, #39	; 0x27
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d01d      	beq.n	800201e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff fe47 	bl	8001c78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	490d      	ldr	r1, [pc, #52]	; (800202c <I2C_IsErrorOccurred+0x1fc>)
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	431a      	orrs	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2241      	movs	r2, #65	; 0x41
 800200a:	2120      	movs	r1, #32
 800200c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2242      	movs	r2, #66	; 0x42
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2240      	movs	r2, #64	; 0x40
 800201a:	2100      	movs	r1, #0
 800201c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800201e:	2327      	movs	r3, #39	; 0x27
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	781b      	ldrb	r3, [r3, #0]
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b00b      	add	sp, #44	; 0x2c
 800202a:	bd90      	pop	{r4, r7, pc}
 800202c:	fe00e800 	.word	0xfe00e800

08002030 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	0008      	movs	r0, r1
 800203a:	0011      	movs	r1, r2
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	240a      	movs	r4, #10
 8002040:	193b      	adds	r3, r7, r4
 8002042:	1c02      	adds	r2, r0, #0
 8002044:	801a      	strh	r2, [r3, #0]
 8002046:	2009      	movs	r0, #9
 8002048:	183b      	adds	r3, r7, r0
 800204a:	1c0a      	adds	r2, r1, #0
 800204c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800204e:	193b      	adds	r3, r7, r4
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	059b      	lsls	r3, r3, #22
 8002054:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002056:	183b      	adds	r3, r7, r0
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	0419      	lsls	r1, r3, #16
 800205c:	23ff      	movs	r3, #255	; 0xff
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002062:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800206a:	4313      	orrs	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207a:	0d51      	lsrs	r1, r2, #21
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	00d2      	lsls	r2, r2, #3
 8002080:	400a      	ands	r2, r1
 8002082:	4907      	ldr	r1, [pc, #28]	; (80020a0 <I2C_TransferConfig+0x70>)
 8002084:	430a      	orrs	r2, r1
 8002086:	43d2      	mvns	r2, r2
 8002088:	401a      	ands	r2, r3
 800208a:	0011      	movs	r1, r2
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b007      	add	sp, #28
 800209c:	bd90      	pop	{r4, r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	03ff63ff 	.word	0x03ff63ff

080020a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2241      	movs	r2, #65	; 0x41
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d138      	bne.n	800212c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e032      	b.n	800212e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2240      	movs	r2, #64	; 0x40
 80020cc:	2101      	movs	r1, #1
 80020ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2241      	movs	r2, #65	; 0x41
 80020d4:	2124      	movs	r1, #36	; 0x24
 80020d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2241      	movs	r2, #65	; 0x41
 800211c:	2120      	movs	r1, #32
 800211e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	2100      	movs	r1, #0
 8002126:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	0018      	movs	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	ffffefff 	.word	0xffffefff

0800213c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2241      	movs	r2, #65	; 0x41
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	d139      	bne.n	80021c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800215c:	2302      	movs	r3, #2
 800215e:	e033      	b.n	80021c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	2101      	movs	r1, #1
 8002166:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2241      	movs	r2, #65	; 0x41
 800216c:	2124      	movs	r1, #36	; 0x24
 800216e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	438a      	bics	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2101      	movs	r1, #1
 80021ae:	430a      	orrs	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2241      	movs	r2, #65	; 0x41
 80021b6:	2120      	movs	r1, #32
 80021b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2240      	movs	r2, #64	; 0x40
 80021be:	2100      	movs	r1, #0
 80021c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	e000      	b.n	80021c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
  }
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	fffff0ff 	.word	0xfffff0ff

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80021dc:	4b19      	ldr	r3, [pc, #100]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a19      	ldr	r2, [pc, #100]	; (8002248 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	4b17      	ldr	r3, [pc, #92]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d11f      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	0013      	movs	r3, r2
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	189b      	adds	r3, r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4912      	ldr	r1, [pc, #72]	; (8002250 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002206:	0018      	movs	r0, r3
 8002208:	f7fd ff7c 	bl	8000104 <__udivsi3>
 800220c:	0003      	movs	r3, r0
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002212:	e008      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	3b01      	subs	r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e001      	b.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e009      	b.n	800223a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	2380      	movs	r3, #128	; 0x80
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	401a      	ands	r2, r3
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	429a      	cmp	r2, r3
 8002236:	d0ed      	beq.n	8002214 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40007000 	.word	0x40007000
 8002248:	fffff9ff 	.word	0xfffff9ff
 800224c:	20000008 	.word	0x20000008
 8002250:	000f4240 	.word	0x000f4240

08002254 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <LL_RCC_GetAPB1Prescaler+0x14>)
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	23e0      	movs	r3, #224	; 0xe0
 800225e:	01db      	lsls	r3, r3, #7
 8002260:	4013      	ands	r3, r2
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 fb50 	bl	8002920 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	d100      	bne.n	800228c <HAL_RCC_OscConfig+0x20>
 800228a:	e07c      	b.n	8002386 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4bc3      	ldr	r3, [pc, #780]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	2238      	movs	r2, #56	; 0x38
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002296:	4bc1      	ldr	r3, [pc, #772]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2203      	movs	r2, #3
 800229c:	4013      	ands	r3, r2
 800229e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d102      	bne.n	80022ac <HAL_RCC_OscConfig+0x40>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d002      	beq.n	80022b2 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d10b      	bne.n	80022ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b2:	4bba      	ldr	r3, [pc, #744]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	d062      	beq.n	8002384 <HAL_RCC_OscConfig+0x118>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d15e      	bne.n	8002384 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e32a      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	025b      	lsls	r3, r3, #9
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_OscConfig+0x7a>
 80022d6:	4bb1      	ldr	r3, [pc, #708]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4bb0      	ldr	r3, [pc, #704]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0249      	lsls	r1, r1, #9
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	e020      	b.n	8002328 <HAL_RCC_OscConfig+0xbc>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	23a0      	movs	r3, #160	; 0xa0
 80022ec:	02db      	lsls	r3, r3, #11
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d10e      	bne.n	8002310 <HAL_RCC_OscConfig+0xa4>
 80022f2:	4baa      	ldr	r3, [pc, #680]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4ba9      	ldr	r3, [pc, #676]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80022f8:	2180      	movs	r1, #128	; 0x80
 80022fa:	02c9      	lsls	r1, r1, #11
 80022fc:	430a      	orrs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4ba6      	ldr	r3, [pc, #664]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4ba5      	ldr	r3, [pc, #660]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	0249      	lsls	r1, r1, #9
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0xbc>
 8002310:	4ba2      	ldr	r3, [pc, #648]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4ba1      	ldr	r3, [pc, #644]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002316:	49a2      	ldr	r1, [pc, #648]	; (80025a0 <HAL_RCC_OscConfig+0x334>)
 8002318:	400a      	ands	r2, r1
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	4b9f      	ldr	r3, [pc, #636]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	4b9e      	ldr	r3, [pc, #632]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002322:	49a0      	ldr	r1, [pc, #640]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002324:	400a      	ands	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d014      	beq.n	800235a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7fe ff8c 	bl	800124c <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800233a:	f7fe ff87 	bl	800124c <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	; 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e2e9      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234c:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	4013      	ands	r3, r2
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0xce>
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7fe ff77 	bl	800124c <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002364:	f7fe ff72 	bl	800124c <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	; 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e2d4      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002376:	4b89      	ldr	r3, [pc, #548]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	029b      	lsls	r3, r3, #10
 800237e:	4013      	ands	r3, r2
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0xf8>
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d100      	bne.n	8002392 <HAL_RCC_OscConfig+0x126>
 8002390:	e099      	b.n	80024c6 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2238      	movs	r2, #56	; 0x38
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b7f      	ldr	r3, [pc, #508]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2203      	movs	r2, #3
 80023a2:	4013      	ands	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d102      	bne.n	80023b2 <HAL_RCC_OscConfig+0x146>
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d002      	beq.n	80023b8 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d135      	bne.n	8002424 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	4b78      	ldr	r3, [pc, #480]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4013      	ands	r3, r2
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x164>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e2a7      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d0:	4b72      	ldr	r3, [pc, #456]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a74      	ldr	r2, [pc, #464]	; (80025a8 <HAL_RCC_OscConfig+0x33c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	021a      	lsls	r2, r3, #8
 80023e0:	4b6e      	ldr	r3, [pc, #440]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d112      	bne.n	8002412 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023ec:	4b6b      	ldr	r3, [pc, #428]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6e      	ldr	r2, [pc, #440]	; (80025ac <HAL_RCC_OscConfig+0x340>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691a      	ldr	r2, [r3, #16]
 80023fa:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0adb      	lsrs	r3, r3, #11
 8002406:	2207      	movs	r2, #7
 8002408:	4013      	ands	r3, r2
 800240a:	4a69      	ldr	r2, [pc, #420]	; (80025b0 <HAL_RCC_OscConfig+0x344>)
 800240c:	40da      	lsrs	r2, r3
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x348>)
 8002410:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002412:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x34c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	0018      	movs	r0, r3
 8002418:	f7fe febc 	bl	8001194 <HAL_InitTick>
 800241c:	1e03      	subs	r3, r0, #0
 800241e:	d051      	beq.n	80024c4 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e27d      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d030      	beq.n	800248e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800242c:	4b5b      	ldr	r3, [pc, #364]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5e      	ldr	r2, [pc, #376]	; (80025ac <HAL_RCC_OscConfig+0x340>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691a      	ldr	r2, [r3, #16]
 800243a:	4b58      	ldr	r3, [pc, #352]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800243c:	430a      	orrs	r2, r1
 800243e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002440:	4b56      	ldr	r3, [pc, #344]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0049      	lsls	r1, r1, #1
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fefd 	bl	800124c <HAL_GetTick>
 8002452:	0003      	movs	r3, r0
 8002454:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7fe fef8 	bl	800124c <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e25a      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246a:	4b4c      	ldr	r3, [pc, #304]	; (800259c <HAL_RCC_OscConfig+0x330>)
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4013      	ands	r3, r2
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a4b      	ldr	r2, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x33c>)
 800247c:	4013      	ands	r3, r2
 800247e:	0019      	movs	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	021a      	lsls	r2, r3, #8
 8002486:	4b45      	ldr	r3, [pc, #276]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800248e:	4b43      	ldr	r3, [pc, #268]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b42      	ldr	r3, [pc, #264]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002494:	4949      	ldr	r1, [pc, #292]	; (80025bc <HAL_RCC_OscConfig+0x350>)
 8002496:	400a      	ands	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fed7 	bl	800124c <HAL_GetTick>
 800249e:	0003      	movs	r3, r0
 80024a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fed2 	bl	800124c <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e234      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4013      	ands	r3, r2
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x238>
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2208      	movs	r2, #8
 80024cc:	4013      	ands	r3, r2
 80024ce:	d047      	beq.n	8002560 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2238      	movs	r2, #56	; 0x38
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b18      	cmp	r3, #24
 80024da:	d10a      	bne.n	80024f2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d03c      	beq.n	8002560 <HAL_RCC_OscConfig+0x2f4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d138      	bne.n	8002560 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e216      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d019      	beq.n	800252e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024fa:	4b28      	ldr	r3, [pc, #160]	; (800259c <HAL_RCC_OscConfig+0x330>)
 80024fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002500:	2101      	movs	r1, #1
 8002502:	430a      	orrs	r2, r1
 8002504:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe fea1 	bl	800124c <HAL_GetTick>
 800250a:	0003      	movs	r3, r0
 800250c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002510:	f7fe fe9c 	bl	800124c <HAL_GetTick>
 8002514:	0002      	movs	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e1fe      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d0f1      	beq.n	8002510 <HAL_RCC_OscConfig+0x2a4>
 800252c:	e018      	b.n	8002560 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	4b1a      	ldr	r3, [pc, #104]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fe87 	bl	800124c <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002544:	f7fe fe82 	bl	800124c <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e1e4      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d1f1      	bne.n	8002544 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d100      	bne.n	800256c <HAL_RCC_OscConfig+0x300>
 800256a:	e0c7      	b.n	80026fc <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2238      	movs	r2, #56	; 0x38
 800257a:	4013      	ands	r3, r2
 800257c:	2b20      	cmp	r3, #32
 800257e:	d11f      	bne.n	80025c0 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_RCC_OscConfig+0x330>)
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2202      	movs	r2, #2
 8002586:	4013      	ands	r3, r2
 8002588:	d100      	bne.n	800258c <HAL_RCC_OscConfig+0x320>
 800258a:	e0b7      	b.n	80026fc <HAL_RCC_OscConfig+0x490>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d000      	beq.n	8002596 <HAL_RCC_OscConfig+0x32a>
 8002594:	e0b2      	b.n	80026fc <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e1c2      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	fffeffff 	.word	0xfffeffff
 80025a4:	fffbffff 	.word	0xfffbffff
 80025a8:	ffff80ff 	.word	0xffff80ff
 80025ac:	ffffc7ff 	.word	0xffffc7ff
 80025b0:	00f42400 	.word	0x00f42400
 80025b4:	20000008 	.word	0x20000008
 80025b8:	2000000c 	.word	0x2000000c
 80025bc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025c0:	4bb5      	ldr	r3, [pc, #724]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80025c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	055b      	lsls	r3, r3, #21
 80025c8:	4013      	ands	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x364>
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x366>
 80025d0:	2300      	movs	r3, #0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d011      	beq.n	80025fa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	4bb0      	ldr	r3, [pc, #704]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80025d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025da:	4baf      	ldr	r3, [pc, #700]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80025dc:	2180      	movs	r1, #128	; 0x80
 80025de:	0549      	lsls	r1, r1, #21
 80025e0:	430a      	orrs	r2, r1
 80025e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80025e4:	4bac      	ldr	r3, [pc, #688]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80025e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	055b      	lsls	r3, r3, #21
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025f2:	231f      	movs	r3, #31
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	2201      	movs	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025fa:	4ba8      	ldr	r3, [pc, #672]	; (800289c <HAL_RCC_OscConfig+0x630>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4013      	ands	r3, r2
 8002604:	d11a      	bne.n	800263c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002606:	4ba5      	ldr	r3, [pc, #660]	; (800289c <HAL_RCC_OscConfig+0x630>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4ba4      	ldr	r3, [pc, #656]	; (800289c <HAL_RCC_OscConfig+0x630>)
 800260c:	2180      	movs	r1, #128	; 0x80
 800260e:	0049      	lsls	r1, r1, #1
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002614:	f7fe fe1a 	bl	800124c <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe fe15 	bl	800124c <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e177      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	4b9a      	ldr	r3, [pc, #616]	; (800289c <HAL_RCC_OscConfig+0x630>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4013      	ands	r3, r2
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x3e6>
 8002644:	4b94      	ldr	r3, [pc, #592]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002646:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002648:	4b93      	ldr	r3, [pc, #588]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x420>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x408>
 800265a:	4b8f      	ldr	r3, [pc, #572]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800265c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002660:	2104      	movs	r1, #4
 8002662:	430a      	orrs	r2, r1
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c
 8002666:	4b8c      	ldr	r3, [pc, #560]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800266a:	4b8b      	ldr	r3, [pc, #556]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x420>
 8002674:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002678:	4b87      	ldr	r3, [pc, #540]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800267a:	2101      	movs	r1, #1
 800267c:	438a      	bics	r2, r1
 800267e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002680:	4b85      	ldr	r3, [pc, #532]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002682:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002684:	4b84      	ldr	r3, [pc, #528]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002686:	2104      	movs	r1, #4
 8002688:	438a      	bics	r2, r1
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d014      	beq.n	80026be <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fdda 	bl	800124c <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269c:	e009      	b.n	80026b2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fdd5 	bl	800124c <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a7d      	ldr	r2, [pc, #500]	; (80028a0 <HAL_RCC_OscConfig+0x634>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e136      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b2:	4b79      	ldr	r3, [pc, #484]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80026b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b6:	2202      	movs	r2, #2
 80026b8:	4013      	ands	r3, r2
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x432>
 80026bc:	e013      	b.n	80026e6 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fdc5 	bl	800124c <HAL_GetTick>
 80026c2:	0003      	movs	r3, r0
 80026c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c6:	e009      	b.n	80026dc <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe fdc0 	bl	800124c <HAL_GetTick>
 80026cc:	0002      	movs	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	4a73      	ldr	r2, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x634>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e121      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026dc:	4b6e      	ldr	r3, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	2202      	movs	r2, #2
 80026e2:	4013      	ands	r3, r2
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80026e6:	231f      	movs	r3, #31
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b69      	ldr	r3, [pc, #420]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80026f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80026f6:	496b      	ldr	r1, [pc, #428]	; (80028a4 <HAL_RCC_OscConfig+0x638>)
 80026f8:	400a      	ands	r2, r1
 80026fa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2220      	movs	r2, #32
 8002702:	4013      	ands	r3, r2
 8002704:	d039      	beq.n	800277a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01b      	beq.n	8002746 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270e:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	03c9      	lsls	r1, r1, #15
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271c:	f7fe fd96 	bl	800124c <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002726:	f7fe fd91 	bl	800124c <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0f3      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002738:	4b57      	ldr	r3, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	4013      	ands	r3, r2
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0x4ba>
 8002744:	e019      	b.n	800277a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800274c:	4956      	ldr	r1, [pc, #344]	; (80028a8 <HAL_RCC_OscConfig+0x63c>)
 800274e:	400a      	ands	r2, r1
 8002750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002752:	f7fe fd7b 	bl	800124c <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800275c:	f7fe fd76 	bl	800124c <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0d8      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	4013      	ands	r3, r2
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d100      	bne.n	8002784 <HAL_RCC_OscConfig+0x518>
 8002782:	e0cc      	b.n	800291e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002784:	4b44      	ldr	r3, [pc, #272]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2238      	movs	r2, #56	; 0x38
 800278a:	4013      	ands	r3, r2
 800278c:	2b10      	cmp	r3, #16
 800278e:	d100      	bne.n	8002792 <HAL_RCC_OscConfig+0x526>
 8002790:	e07b      	b.n	800288a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d156      	bne.n	8002848 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b3e      	ldr	r3, [pc, #248]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80027a0:	4942      	ldr	r1, [pc, #264]	; (80028ac <HAL_RCC_OscConfig+0x640>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fd51 	bl	800124c <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7fe fd4c 	bl	800124c <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0ae      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c2:	4b35      	ldr	r3, [pc, #212]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	049b      	lsls	r3, r3, #18
 80027ca:	4013      	ands	r3, r2
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ce:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <HAL_RCC_OscConfig+0x644>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	431a      	orrs	r2, r3
 80027fc:	4b26      	ldr	r3, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 80027fe:	430a      	orrs	r2, r1
 8002800:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002808:	2180      	movs	r1, #128	; 0x80
 800280a:	0449      	lsls	r1, r1, #17
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002816:	2180      	movs	r1, #128	; 0x80
 8002818:	0549      	lsls	r1, r1, #21
 800281a:	430a      	orrs	r2, r1
 800281c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7fe fd15 	bl	800124c <HAL_GetTick>
 8002822:	0003      	movs	r3, r0
 8002824:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fd10 	bl	800124c <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e072      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	049b      	lsls	r3, r3, #18
 8002842:	4013      	ands	r3, r2
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0x5bc>
 8002846:	e06a      	b.n	800291e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800284e:	4917      	ldr	r1, [pc, #92]	; (80028ac <HAL_RCC_OscConfig+0x640>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fcfa 	bl	800124c <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285e:	f7fe fcf5 	bl	800124c <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e057      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	049b      	lsls	r3, r3, #18
 8002878:	4013      	ands	r3, r2
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_OscConfig+0x62c>)
 8002882:	490c      	ldr	r1, [pc, #48]	; (80028b4 <HAL_RCC_OscConfig+0x648>)
 8002884:	400a      	ands	r2, r1
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	e049      	b.n	800291e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d112      	bne.n	80028b8 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e044      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
 80028a0:	00001388 	.word	0x00001388
 80028a4:	efffffff 	.word	0xefffffff
 80028a8:	ffbfffff 	.word	0xffbfffff
 80028ac:	feffffff 	.word	0xfeffffff
 80028b0:	11c1808c 	.word	0x11c1808c
 80028b4:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x6bc>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2203      	movs	r2, #3
 80028c2:	401a      	ands	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d126      	bne.n	800291a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2270      	movs	r2, #112	; 0x70
 80028d0:	401a      	ands	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d11f      	bne.n	800291a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	23fe      	movs	r3, #254	; 0xfe
 80028de:	01db      	lsls	r3, r3, #7
 80028e0:	401a      	ands	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d116      	bne.n	800291a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	23f8      	movs	r3, #248	; 0xf8
 80028f0:	039b      	lsls	r3, r3, #14
 80028f2:	401a      	ands	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d10e      	bne.n	800291a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	23e0      	movs	r3, #224	; 0xe0
 8002900:	051b      	lsls	r3, r3, #20
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	0f5b      	lsrs	r3, r3, #29
 8002910:	075a      	lsls	r2, r3, #29
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d001      	beq.n	800291e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b008      	add	sp, #32
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0e9      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2207      	movs	r2, #7
 8002946:	4013      	ands	r3, r2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d91e      	bls.n	800298c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b73      	ldr	r3, [pc, #460]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2207      	movs	r2, #7
 8002954:	4393      	bics	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	4b70      	ldr	r3, [pc, #448]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002960:	f7fe fc74 	bl	800124c <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002968:	e009      	b.n	800297e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296a:	f7fe fc6f 	bl	800124c <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a6a      	ldr	r2, [pc, #424]	; (8002b20 <HAL_RCC_ClockConfig+0x1f4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e0ca      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800297e:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d015      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2204      	movs	r2, #4
 800299c:	4013      	ands	r3, r2
 800299e:	d006      	beq.n	80029ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80029a0:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029a6:	21e0      	movs	r1, #224	; 0xe0
 80029a8:	01c9      	lsls	r1, r1, #7
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ae:	4b5d      	ldr	r3, [pc, #372]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a5d      	ldr	r2, [pc, #372]	; (8002b28 <HAL_RCC_ClockConfig+0x1fc>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b59      	ldr	r3, [pc, #356]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2201      	movs	r2, #1
 80029c8:	4013      	ands	r3, r2
 80029ca:	d057      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d4:	4b53      	ldr	r3, [pc, #332]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	4013      	ands	r3, r2
 80029de:	d12b      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e097      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ec:	4b4d      	ldr	r3, [pc, #308]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	049b      	lsls	r3, r3, #18
 80029f4:	4013      	ands	r3, r2
 80029f6:	d11f      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e08b      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a04:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d113      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e07f      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a1c:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e074      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e06d      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a38:	4b3a      	ldr	r3, [pc, #232]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	4393      	bics	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4b37      	ldr	r3, [pc, #220]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fbfe 	bl	800124c <HAL_GetTick>
 8002a50:	0003      	movs	r3, r0
 8002a52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a54:	e009      	b.n	8002a6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a56:	f7fe fbf9 	bl	800124c <HAL_GetTick>
 8002a5a:	0002      	movs	r2, r0
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	4a2f      	ldr	r2, [pc, #188]	; (8002b20 <HAL_RCC_ClockConfig+0x1f4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e054      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2238      	movs	r2, #56	; 0x38
 8002a70:	401a      	ands	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1ec      	bne.n	8002a56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b27      	ldr	r3, [pc, #156]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2207      	movs	r2, #7
 8002a82:	4013      	ands	r3, r2
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d21e      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2207      	movs	r2, #7
 8002a90:	4393      	bics	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fbd6 	bl	800124c <HAL_GetTick>
 8002aa0:	0003      	movs	r3, r0
 8002aa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aa4:	e009      	b.n	8002aba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa6:	f7fe fbd1 	bl	800124c <HAL_GetTick>
 8002aaa:	0002      	movs	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	; (8002b20 <HAL_RCC_ClockConfig+0x1f4>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e02c      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCC_ClockConfig+0x1f0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2207      	movs	r2, #7
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2204      	movs	r2, #4
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d009      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_RCC_ClockConfig+0x200>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b10      	ldr	r3, [pc, #64]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002ae6:	f000 f829 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002aea:	0001      	movs	r1, r0
 8002aec:	4b0d      	ldr	r3, [pc, #52]	; (8002b24 <HAL_RCC_ClockConfig+0x1f8>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	220f      	movs	r2, #15
 8002af4:	401a      	ands	r2, r3
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x204>)
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	58d3      	ldr	r3, [r2, r3]
 8002afc:	221f      	movs	r2, #31
 8002afe:	4013      	ands	r3, r2
 8002b00:	000a      	movs	r2, r1
 8002b02:	40da      	lsrs	r2, r3
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_ClockConfig+0x208>)
 8002b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x20c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fe fb41 	bl	8001194 <HAL_InitTick>
 8002b12:	0003      	movs	r3, r0
}
 8002b14:	0018      	movs	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b004      	add	sp, #16
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	40022000 	.word	0x40022000
 8002b20:	00001388 	.word	0x00001388
 8002b24:	40021000 	.word	0x40021000
 8002b28:	fffff0ff 	.word	0xfffff0ff
 8002b2c:	ffff8fff 	.word	0xffff8fff
 8002b30:	08004bf8 	.word	0x08004bf8
 8002b34:	20000008 	.word	0x20000008
 8002b38:	2000000c 	.word	0x2000000c

08002b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b42:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2238      	movs	r2, #56	; 0x38
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d10f      	bne.n	8002b6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0adb      	lsrs	r3, r3, #11
 8002b52:	2207      	movs	r2, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	2201      	movs	r2, #1
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002b5e:	6839      	ldr	r1, [r7, #0]
 8002b60:	4835      	ldr	r0, [pc, #212]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b62:	f7fd facf 	bl	8000104 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e05d      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2238      	movs	r2, #56	; 0x38
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d102      	bne.n	8002b7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	e054      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b7e:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2238      	movs	r2, #56	; 0x38
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d138      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002b8a:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d10d      	bne.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba8:	68b9      	ldr	r1, [r7, #8]
 8002baa:	4824      	ldr	r0, [pc, #144]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8002bac:	f7fd faaa 	bl	8000104 <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	227f      	movs	r2, #127	; 0x7f
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	434b      	muls	r3, r1
 8002bc0:	617b      	str	r3, [r7, #20]
        break;
 8002bc2:	e00d      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	481c      	ldr	r0, [pc, #112]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bc8:	f7fd fa9c 	bl	8000104 <__udivsi3>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	0019      	movs	r1, r3
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	227f      	movs	r2, #127	; 0x7f
 8002bd8:	4013      	ands	r3, r2
 8002bda:	434b      	muls	r3, r1
 8002bdc:	617b      	str	r3, [r7, #20]
        break;
 8002bde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0f5b      	lsrs	r3, r3, #29
 8002be6:	2207      	movs	r2, #7
 8002be8:	4013      	ands	r3, r2
 8002bea:	3301      	adds	r3, #1
 8002bec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	6978      	ldr	r0, [r7, #20]
 8002bf2:	f7fd fa87 	bl	8000104 <__udivsi3>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e015      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2238      	movs	r2, #56	; 0x38
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d103      	bne.n	8002c10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2238      	movs	r2, #56	; 0x38
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d103      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002c1c:	23fa      	movs	r3, #250	; 0xfa
 8002c1e:	01db      	lsls	r3, r3, #7
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	e001      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c28:	693b      	ldr	r3, [r7, #16]
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b006      	add	sp, #24
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	40021000 	.word	0x40021000
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c44:	4b02      	ldr	r3, [pc, #8]	; (8002c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c46:	681b      	ldr	r3, [r3, #0]
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	20000008 	.word	0x20000008

08002c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c54:	b5b0      	push	{r4, r5, r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002c58:	f7ff fff2 	bl	8002c40 <HAL_RCC_GetHCLKFreq>
 8002c5c:	0004      	movs	r4, r0
 8002c5e:	f7ff faf9 	bl	8002254 <LL_RCC_GetAPB1Prescaler>
 8002c62:	0003      	movs	r3, r0
 8002c64:	0b1a      	lsrs	r2, r3, #12
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	58d3      	ldr	r3, [r2, r3]
 8002c6c:	221f      	movs	r2, #31
 8002c6e:	4013      	ands	r3, r2
 8002c70:	40dc      	lsrs	r4, r3
 8002c72:	0023      	movs	r3, r4
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	08004c38 	.word	0x08004c38

08002c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002c88:	2313      	movs	r3, #19
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c90:	2312      	movs	r3, #18
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	029b      	lsls	r3, r3, #10
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ca4:	e0ad      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2011      	movs	r0, #17
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cae:	4b47      	ldr	r3, [pc, #284]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	055b      	lsls	r3, r3, #21
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d110      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	4b44      	ldr	r3, [pc, #272]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbe:	4b43      	ldr	r3, [pc, #268]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0549      	lsls	r1, r1, #21
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cc8:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	055b      	lsls	r3, r3, #21
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cdc:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b3b      	ldr	r3, [pc, #236]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002ce2:	2180      	movs	r1, #128	; 0x80
 8002ce4:	0049      	lsls	r1, r1, #1
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cea:	f7fe faaf 	bl	800124c <HAL_GetTick>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf4:	f7fe faaa 	bl	800124c <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d904      	bls.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002d02:	2313      	movs	r3, #19
 8002d04:	18fb      	adds	r3, r7, r3
 8002d06:	2203      	movs	r2, #3
 8002d08:	701a      	strb	r2, [r3, #0]
        break;
 8002d0a:	e005      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d0c:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0ed      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002d18:	2313      	movs	r3, #19
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d15e      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d22:	4b2a      	ldr	r3, [pc, #168]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d26:	23c0      	movs	r3, #192	; 0xc0
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d019      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	697a      	ldr	r2, [r7, #20]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d014      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	4a24      	ldr	r2, [pc, #144]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d4c:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d4e:	2180      	movs	r1, #128	; 0x80
 8002d50:	0249      	lsls	r1, r1, #9
 8002d52:	430a      	orrs	r2, r1
 8002d54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d56:	4b1d      	ldr	r3, [pc, #116]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d5c:	491e      	ldr	r1, [pc, #120]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d016      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe fa6c 	bl	800124c <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d78:	e00c      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7fe fa67 	bl	800124c <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d904      	bls.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002d8a:	2313      	movs	r3, #19
 8002d8c:	18fb      	adds	r3, r7, r3
 8002d8e:	2203      	movs	r2, #3
 8002d90:	701a      	strb	r2, [r3, #0]
            break;
 8002d92:	e004      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d0ed      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d9e:	2313      	movs	r3, #19
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10a      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	0019      	movs	r1, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002db8:	430a      	orrs	r2, r1
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dbc:	e016      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	2213      	movs	r2, #19
 8002dc4:	18ba      	adds	r2, r7, r2
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e00f      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	fffffcff 	.word	0xfffffcff
 8002dd8:	fffeffff 	.word	0xfffeffff
 8002ddc:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de0:	2312      	movs	r3, #18
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2213      	movs	r2, #19
 8002de6:	18ba      	adds	r2, r7, r2
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dec:	2311      	movs	r3, #17
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4bb6      	ldr	r3, [pc, #728]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dfa:	4bb5      	ldr	r3, [pc, #724]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002dfc:	49b5      	ldr	r1, [pc, #724]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0c:	4bb0      	ldr	r3, [pc, #704]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	2203      	movs	r2, #3
 8002e12:	4393      	bics	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2202      	movs	r2, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2a:	4ba9      	ldr	r3, [pc, #676]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	220c      	movs	r2, #12
 8002e30:	4393      	bics	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	4ba5      	ldr	r3, [pc, #660]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2204      	movs	r2, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	d009      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e48:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	2230      	movs	r2, #48	; 0x30
 8002e4e:	4393      	bics	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2210      	movs	r2, #16
 8002e62:	4013      	ands	r3, r2
 8002e64:	d009      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e66:	4b9a      	ldr	r3, [pc, #616]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	4a9b      	ldr	r2, [pc, #620]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	0019      	movs	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e76:	430a      	orrs	r2, r1
 8002e78:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	015b      	lsls	r3, r3, #5
 8002e82:	4013      	ands	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002e86:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8a:	4a94      	ldr	r2, [pc, #592]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002e96:	430a      	orrs	r2, r1
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	; 0x80
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d009      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea6:	4b8a      	ldr	r3, [pc, #552]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eaa:	4a8d      	ldr	r2, [pc, #564]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb4:	4b86      	ldr	r3, [pc, #536]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec6:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	4a86      	ldr	r2, [pc, #536]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	0019      	movs	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4b7e      	ldr	r3, [pc, #504]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee4:	4b7a      	ldr	r3, [pc, #488]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee8:	4a7f      	ldr	r2, [pc, #508]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	0019      	movs	r1, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	4b77      	ldr	r3, [pc, #476]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2240      	movs	r2, #64	; 0x40
 8002efe:	4013      	ands	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f02:	4b73      	ldr	r3, [pc, #460]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f06:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69da      	ldr	r2, [r3, #28]
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f12:	430a      	orrs	r2, r1
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	01db      	lsls	r3, r3, #7
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d015      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f22:	4b6b      	ldr	r3, [pc, #428]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	0899      	lsrs	r1, r3, #2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f2e:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	05db      	lsls	r3, r3, #23
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f40:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	4b62      	ldr	r3, [pc, #392]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f46:	2180      	movs	r1, #128	; 0x80
 8002f48:	0249      	lsls	r1, r1, #9
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	031b      	lsls	r3, r3, #12
 8002f56:	4013      	ands	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f5a:	4b5d      	ldr	r3, [pc, #372]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	4393      	bics	r3, r2
 8002f62:	0019      	movs	r1, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	039b      	lsls	r3, r3, #14
 8002f76:	4013      	ands	r3, r2
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f7a:	4b55      	ldr	r3, [pc, #340]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	4a5c      	ldr	r2, [pc, #368]	; (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f88:	4b51      	ldr	r3, [pc, #324]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	03db      	lsls	r3, r3, #15
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d106      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002f9a:	4b4d      	ldr	r3, [pc, #308]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	0449      	lsls	r1, r1, #17
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	2380      	movs	r3, #128	; 0x80
 8002fae:	03db      	lsls	r3, r3, #15
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d016      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	4a4e      	ldr	r2, [pc, #312]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc2:	4b43      	ldr	r3, [pc, #268]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	045b      	lsls	r3, r3, #17
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002fd4:	4b3e      	ldr	r3, [pc, #248]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	0449      	lsls	r1, r1, #17
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	4013      	ands	r3, r2
 8002fec:	d014      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002fee:	4b38      	ldr	r3, [pc, #224]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1a      	ldr	r2, [r3, #32]
 8002ffc:	4b34      	ldr	r3, [pc, #208]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ffe:	430a      	orrs	r2, r1
 8003000:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d106      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800300a:	4b31      	ldr	r3, [pc, #196]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800300c:	68da      	ldr	r2, [r3, #12]
 800300e:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003010:	2180      	movs	r1, #128	; 0x80
 8003012:	0249      	lsls	r1, r1, #9
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	4013      	ands	r3, r2
 8003022:	d014      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003024:	4b2a      	ldr	r3, [pc, #168]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003028:	220c      	movs	r2, #12
 800302a:	4393      	bics	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003032:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003034:	430a      	orrs	r2, r1
 8003036:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	2b04      	cmp	r3, #4
 800303e:	d106      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003040:	4b23      	ldr	r3, [pc, #140]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003046:	2180      	movs	r1, #128	; 0x80
 8003048:	0249      	lsls	r1, r1, #9
 800304a:	430a      	orrs	r2, r1
 800304c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	045b      	lsls	r3, r3, #17
 8003056:	4013      	ands	r3, r2
 8003058:	d016      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305e:	4a22      	ldr	r2, [pc, #136]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306a:	430a      	orrs	r2, r1
 800306c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0449      	lsls	r1, r1, #17
 8003084:	430a      	orrs	r2, r1
 8003086:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	049b      	lsls	r3, r3, #18
 8003090:	4013      	ands	r3, r2
 8003092:	d016      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800309a:	4013      	ands	r3, r2
 800309c:	0019      	movs	r1, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030a4:	430a      	orrs	r2, r1
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d106      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030ba:	2180      	movs	r1, #128	; 0x80
 80030bc:	0449      	lsls	r1, r1, #17
 80030be:	430a      	orrs	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030c2:	2312      	movs	r3, #18
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	781b      	ldrb	r3, [r3, #0]
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b006      	add	sp, #24
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40021000 	.word	0x40021000
 80030d4:	efffffff 	.word	0xefffffff
 80030d8:	fffff3ff 	.word	0xfffff3ff
 80030dc:	fffffcff 	.word	0xfffffcff
 80030e0:	fff3ffff 	.word	0xfff3ffff
 80030e4:	ffcfffff 	.word	0xffcfffff
 80030e8:	ffffcfff 	.word	0xffffcfff
 80030ec:	ffff3fff 	.word	0xffff3fff
 80030f0:	ffbfffff 	.word	0xffbfffff
 80030f4:	feffffff 	.word	0xfeffffff

080030f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e046      	b.n	8003198 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2288      	movs	r2, #136	; 0x88
 800310e:	589b      	ldr	r3, [r3, r2]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d107      	bne.n	8003124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2284      	movs	r2, #132	; 0x84
 8003118:	2100      	movs	r1, #0
 800311a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f7fd ff72 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2288      	movs	r2, #136	; 0x88
 8003128:	2124      	movs	r1, #36	; 0x24
 800312a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2101      	movs	r1, #1
 8003138:	438a      	bics	r2, r1
 800313a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0018      	movs	r0, r3
 8003140:	f000 f830 	bl	80031a4 <UART_SetConfig>
 8003144:	0003      	movs	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e024      	b.n	8003198 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	0018      	movs	r0, r3
 800315a:	f000 fb79 	bl	8003850 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	490d      	ldr	r1, [pc, #52]	; (80031a0 <HAL_UART_Init+0xa8>)
 800316a:	400a      	ands	r2, r1
 800316c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	212a      	movs	r1, #42	; 0x2a
 800317a:	438a      	bics	r2, r1
 800317c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2101      	movs	r1, #1
 800318a:	430a      	orrs	r2, r1
 800318c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 fc11 	bl	80039b8 <UART_CheckIdleState>
 8003196:	0003      	movs	r3, r0
}
 8003198:	0018      	movs	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	ffffb7ff 	.word	0xffffb7ff

080031a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031a4:	b5b0      	push	{r4, r5, r7, lr}
 80031a6:	b090      	sub	sp, #64	; 0x40
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ac:	231a      	movs	r3, #26
 80031ae:	2220      	movs	r2, #32
 80031b0:	189b      	adds	r3, r3, r2
 80031b2:	19db      	adds	r3, r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	431a      	orrs	r2, r3
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4ac1      	ldr	r2, [pc, #772]	; (80034dc <UART_SetConfig+0x338>)
 80031d8:	4013      	ands	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e2:	430b      	orrs	r3, r1
 80031e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4abc      	ldr	r2, [pc, #752]	; (80034e0 <UART_SetConfig+0x33c>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	0018      	movs	r0, r3
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	68d9      	ldr	r1, [r3, #12]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	0003      	movs	r3, r0
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4ab6      	ldr	r2, [pc, #728]	; (80034e4 <UART_SetConfig+0x340>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d009      	beq.n	8003224 <UART_SetConfig+0x80>
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4ab4      	ldr	r2, [pc, #720]	; (80034e8 <UART_SetConfig+0x344>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003220:	4313      	orrs	r3, r2
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	4ab0      	ldr	r2, [pc, #704]	; (80034ec <UART_SetConfig+0x348>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003236:	430b      	orrs	r3, r1
 8003238:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003240:	220f      	movs	r2, #15
 8003242:	4393      	bics	r3, r2
 8003244:	0018      	movs	r0, r3
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	0003      	movs	r3, r0
 8003250:	430b      	orrs	r3, r1
 8003252:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4aa5      	ldr	r2, [pc, #660]	; (80034f0 <UART_SetConfig+0x34c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d131      	bne.n	80032c2 <UART_SetConfig+0x11e>
 800325e:	4ba5      	ldr	r3, [pc, #660]	; (80034f4 <UART_SetConfig+0x350>)
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2203      	movs	r2, #3
 8003264:	4013      	ands	r3, r2
 8003266:	2b03      	cmp	r3, #3
 8003268:	d01d      	beq.n	80032a6 <UART_SetConfig+0x102>
 800326a:	d823      	bhi.n	80032b4 <UART_SetConfig+0x110>
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00c      	beq.n	800328a <UART_SetConfig+0xe6>
 8003270:	d820      	bhi.n	80032b4 <UART_SetConfig+0x110>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <UART_SetConfig+0xd8>
 8003276:	2b01      	cmp	r3, #1
 8003278:	d00e      	beq.n	8003298 <UART_SetConfig+0xf4>
 800327a:	e01b      	b.n	80032b4 <UART_SetConfig+0x110>
 800327c:	231b      	movs	r3, #27
 800327e:	2220      	movs	r2, #32
 8003280:	189b      	adds	r3, r3, r2
 8003282:	19db      	adds	r3, r3, r7
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
 8003288:	e154      	b.n	8003534 <UART_SetConfig+0x390>
 800328a:	231b      	movs	r3, #27
 800328c:	2220      	movs	r2, #32
 800328e:	189b      	adds	r3, r3, r2
 8003290:	19db      	adds	r3, r3, r7
 8003292:	2202      	movs	r2, #2
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e14d      	b.n	8003534 <UART_SetConfig+0x390>
 8003298:	231b      	movs	r3, #27
 800329a:	2220      	movs	r2, #32
 800329c:	189b      	adds	r3, r3, r2
 800329e:	19db      	adds	r3, r3, r7
 80032a0:	2204      	movs	r2, #4
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e146      	b.n	8003534 <UART_SetConfig+0x390>
 80032a6:	231b      	movs	r3, #27
 80032a8:	2220      	movs	r2, #32
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	19db      	adds	r3, r3, r7
 80032ae:	2208      	movs	r2, #8
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e13f      	b.n	8003534 <UART_SetConfig+0x390>
 80032b4:	231b      	movs	r3, #27
 80032b6:	2220      	movs	r2, #32
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	19db      	adds	r3, r3, r7
 80032bc:	2210      	movs	r2, #16
 80032be:	701a      	strb	r2, [r3, #0]
 80032c0:	e138      	b.n	8003534 <UART_SetConfig+0x390>
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a8c      	ldr	r2, [pc, #560]	; (80034f8 <UART_SetConfig+0x354>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d131      	bne.n	8003330 <UART_SetConfig+0x18c>
 80032cc:	4b89      	ldr	r3, [pc, #548]	; (80034f4 <UART_SetConfig+0x350>)
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	220c      	movs	r2, #12
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	d01d      	beq.n	8003314 <UART_SetConfig+0x170>
 80032d8:	d823      	bhi.n	8003322 <UART_SetConfig+0x17e>
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d00c      	beq.n	80032f8 <UART_SetConfig+0x154>
 80032de:	d820      	bhi.n	8003322 <UART_SetConfig+0x17e>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <UART_SetConfig+0x146>
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d00e      	beq.n	8003306 <UART_SetConfig+0x162>
 80032e8:	e01b      	b.n	8003322 <UART_SetConfig+0x17e>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2220      	movs	r2, #32
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e11d      	b.n	8003534 <UART_SetConfig+0x390>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e116      	b.n	8003534 <UART_SetConfig+0x390>
 8003306:	231b      	movs	r3, #27
 8003308:	2220      	movs	r2, #32
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	2204      	movs	r2, #4
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e10f      	b.n	8003534 <UART_SetConfig+0x390>
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2208      	movs	r2, #8
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e108      	b.n	8003534 <UART_SetConfig+0x390>
 8003322:	231b      	movs	r3, #27
 8003324:	2220      	movs	r2, #32
 8003326:	189b      	adds	r3, r3, r2
 8003328:	19db      	adds	r3, r3, r7
 800332a:	2210      	movs	r2, #16
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e101      	b.n	8003534 <UART_SetConfig+0x390>
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a71      	ldr	r2, [pc, #452]	; (80034fc <UART_SetConfig+0x358>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d131      	bne.n	800339e <UART_SetConfig+0x1fa>
 800333a:	4b6e      	ldr	r3, [pc, #440]	; (80034f4 <UART_SetConfig+0x350>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	2230      	movs	r2, #48	; 0x30
 8003340:	4013      	ands	r3, r2
 8003342:	2b30      	cmp	r3, #48	; 0x30
 8003344:	d01d      	beq.n	8003382 <UART_SetConfig+0x1de>
 8003346:	d823      	bhi.n	8003390 <UART_SetConfig+0x1ec>
 8003348:	2b20      	cmp	r3, #32
 800334a:	d00c      	beq.n	8003366 <UART_SetConfig+0x1c2>
 800334c:	d820      	bhi.n	8003390 <UART_SetConfig+0x1ec>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <UART_SetConfig+0x1b4>
 8003352:	2b10      	cmp	r3, #16
 8003354:	d00e      	beq.n	8003374 <UART_SetConfig+0x1d0>
 8003356:	e01b      	b.n	8003390 <UART_SetConfig+0x1ec>
 8003358:	231b      	movs	r3, #27
 800335a:	2220      	movs	r2, #32
 800335c:	189b      	adds	r3, r3, r2
 800335e:	19db      	adds	r3, r3, r7
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e0e6      	b.n	8003534 <UART_SetConfig+0x390>
 8003366:	231b      	movs	r3, #27
 8003368:	2220      	movs	r2, #32
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e0df      	b.n	8003534 <UART_SetConfig+0x390>
 8003374:	231b      	movs	r3, #27
 8003376:	2220      	movs	r2, #32
 8003378:	189b      	adds	r3, r3, r2
 800337a:	19db      	adds	r3, r3, r7
 800337c:	2204      	movs	r2, #4
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e0d8      	b.n	8003534 <UART_SetConfig+0x390>
 8003382:	231b      	movs	r3, #27
 8003384:	2220      	movs	r2, #32
 8003386:	189b      	adds	r3, r3, r2
 8003388:	19db      	adds	r3, r3, r7
 800338a:	2208      	movs	r2, #8
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e0d1      	b.n	8003534 <UART_SetConfig+0x390>
 8003390:	231b      	movs	r3, #27
 8003392:	2220      	movs	r2, #32
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2210      	movs	r2, #16
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e0ca      	b.n	8003534 <UART_SetConfig+0x390>
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a57      	ldr	r2, [pc, #348]	; (8003500 <UART_SetConfig+0x35c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d106      	bne.n	80033b6 <UART_SetConfig+0x212>
 80033a8:	231b      	movs	r3, #27
 80033aa:	2220      	movs	r2, #32
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e0be      	b.n	8003534 <UART_SetConfig+0x390>
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a52      	ldr	r2, [pc, #328]	; (8003504 <UART_SetConfig+0x360>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <UART_SetConfig+0x22a>
 80033c0:	231b      	movs	r3, #27
 80033c2:	2220      	movs	r2, #32
 80033c4:	189b      	adds	r3, r3, r2
 80033c6:	19db      	adds	r3, r3, r7
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e0b2      	b.n	8003534 <UART_SetConfig+0x390>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a4d      	ldr	r2, [pc, #308]	; (8003508 <UART_SetConfig+0x364>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d106      	bne.n	80033e6 <UART_SetConfig+0x242>
 80033d8:	231b      	movs	r3, #27
 80033da:	2220      	movs	r2, #32
 80033dc:	189b      	adds	r3, r3, r2
 80033de:	19db      	adds	r3, r3, r7
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e0a6      	b.n	8003534 <UART_SetConfig+0x390>
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a3e      	ldr	r2, [pc, #248]	; (80034e4 <UART_SetConfig+0x340>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d13e      	bne.n	800346e <UART_SetConfig+0x2ca>
 80033f0:	4b40      	ldr	r3, [pc, #256]	; (80034f4 <UART_SetConfig+0x350>)
 80033f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033f4:	23c0      	movs	r3, #192	; 0xc0
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	22c0      	movs	r2, #192	; 0xc0
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <UART_SetConfig+0x2ae>
 8003402:	22c0      	movs	r2, #192	; 0xc0
 8003404:	0112      	lsls	r2, r2, #4
 8003406:	4293      	cmp	r3, r2
 8003408:	d82a      	bhi.n	8003460 <UART_SetConfig+0x2bc>
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	0112      	lsls	r2, r2, #4
 800340e:	4293      	cmp	r3, r2
 8003410:	d011      	beq.n	8003436 <UART_SetConfig+0x292>
 8003412:	2280      	movs	r2, #128	; 0x80
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	4293      	cmp	r3, r2
 8003418:	d822      	bhi.n	8003460 <UART_SetConfig+0x2bc>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d004      	beq.n	8003428 <UART_SetConfig+0x284>
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	00d2      	lsls	r2, r2, #3
 8003422:	4293      	cmp	r3, r2
 8003424:	d00e      	beq.n	8003444 <UART_SetConfig+0x2a0>
 8003426:	e01b      	b.n	8003460 <UART_SetConfig+0x2bc>
 8003428:	231b      	movs	r3, #27
 800342a:	2220      	movs	r2, #32
 800342c:	189b      	adds	r3, r3, r2
 800342e:	19db      	adds	r3, r3, r7
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e07e      	b.n	8003534 <UART_SetConfig+0x390>
 8003436:	231b      	movs	r3, #27
 8003438:	2220      	movs	r2, #32
 800343a:	189b      	adds	r3, r3, r2
 800343c:	19db      	adds	r3, r3, r7
 800343e:	2202      	movs	r2, #2
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e077      	b.n	8003534 <UART_SetConfig+0x390>
 8003444:	231b      	movs	r3, #27
 8003446:	2220      	movs	r2, #32
 8003448:	189b      	adds	r3, r3, r2
 800344a:	19db      	adds	r3, r3, r7
 800344c:	2204      	movs	r2, #4
 800344e:	701a      	strb	r2, [r3, #0]
 8003450:	e070      	b.n	8003534 <UART_SetConfig+0x390>
 8003452:	231b      	movs	r3, #27
 8003454:	2220      	movs	r2, #32
 8003456:	189b      	adds	r3, r3, r2
 8003458:	19db      	adds	r3, r3, r7
 800345a:	2208      	movs	r2, #8
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e069      	b.n	8003534 <UART_SetConfig+0x390>
 8003460:	231b      	movs	r3, #27
 8003462:	2220      	movs	r2, #32
 8003464:	189b      	adds	r3, r3, r2
 8003466:	19db      	adds	r3, r3, r7
 8003468:	2210      	movs	r2, #16
 800346a:	701a      	strb	r2, [r3, #0]
 800346c:	e062      	b.n	8003534 <UART_SetConfig+0x390>
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <UART_SetConfig+0x344>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d157      	bne.n	8003528 <UART_SetConfig+0x384>
 8003478:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <UART_SetConfig+0x350>)
 800347a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347c:	23c0      	movs	r3, #192	; 0xc0
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4013      	ands	r3, r2
 8003482:	22c0      	movs	r2, #192	; 0xc0
 8003484:	0092      	lsls	r2, r2, #2
 8003486:	4293      	cmp	r3, r2
 8003488:	d040      	beq.n	800350c <UART_SetConfig+0x368>
 800348a:	22c0      	movs	r2, #192	; 0xc0
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4293      	cmp	r3, r2
 8003490:	d843      	bhi.n	800351a <UART_SetConfig+0x376>
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	0092      	lsls	r2, r2, #2
 8003496:	4293      	cmp	r3, r2
 8003498:	d011      	beq.n	80034be <UART_SetConfig+0x31a>
 800349a:	2280      	movs	r2, #128	; 0x80
 800349c:	0092      	lsls	r2, r2, #2
 800349e:	4293      	cmp	r3, r2
 80034a0:	d83b      	bhi.n	800351a <UART_SetConfig+0x376>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <UART_SetConfig+0x30c>
 80034a6:	2280      	movs	r2, #128	; 0x80
 80034a8:	0052      	lsls	r2, r2, #1
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <UART_SetConfig+0x328>
 80034ae:	e034      	b.n	800351a <UART_SetConfig+0x376>
 80034b0:	231b      	movs	r3, #27
 80034b2:	2220      	movs	r2, #32
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	19db      	adds	r3, r3, r7
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e03a      	b.n	8003534 <UART_SetConfig+0x390>
 80034be:	231b      	movs	r3, #27
 80034c0:	2220      	movs	r2, #32
 80034c2:	189b      	adds	r3, r3, r2
 80034c4:	19db      	adds	r3, r3, r7
 80034c6:	2202      	movs	r2, #2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e033      	b.n	8003534 <UART_SetConfig+0x390>
 80034cc:	231b      	movs	r3, #27
 80034ce:	2220      	movs	r2, #32
 80034d0:	189b      	adds	r3, r3, r2
 80034d2:	19db      	adds	r3, r3, r7
 80034d4:	2204      	movs	r2, #4
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e02c      	b.n	8003534 <UART_SetConfig+0x390>
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	cfff69f3 	.word	0xcfff69f3
 80034e0:	ffffcfff 	.word	0xffffcfff
 80034e4:	40008000 	.word	0x40008000
 80034e8:	40008400 	.word	0x40008400
 80034ec:	11fff4ff 	.word	0x11fff4ff
 80034f0:	40013800 	.word	0x40013800
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40004400 	.word	0x40004400
 80034fc:	40004800 	.word	0x40004800
 8003500:	40004c00 	.word	0x40004c00
 8003504:	40005000 	.word	0x40005000
 8003508:	40013c00 	.word	0x40013c00
 800350c:	231b      	movs	r3, #27
 800350e:	2220      	movs	r2, #32
 8003510:	189b      	adds	r3, r3, r2
 8003512:	19db      	adds	r3, r3, r7
 8003514:	2208      	movs	r2, #8
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e00c      	b.n	8003534 <UART_SetConfig+0x390>
 800351a:	231b      	movs	r3, #27
 800351c:	2220      	movs	r2, #32
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	2210      	movs	r2, #16
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e005      	b.n	8003534 <UART_SetConfig+0x390>
 8003528:	231b      	movs	r3, #27
 800352a:	2220      	movs	r2, #32
 800352c:	189b      	adds	r3, r3, r2
 800352e:	19db      	adds	r3, r3, r7
 8003530:	2210      	movs	r2, #16
 8003532:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4ac1      	ldr	r2, [pc, #772]	; (8003840 <UART_SetConfig+0x69c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d005      	beq.n	800354a <UART_SetConfig+0x3a6>
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4ac0      	ldr	r2, [pc, #768]	; (8003844 <UART_SetConfig+0x6a0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d000      	beq.n	800354a <UART_SetConfig+0x3a6>
 8003548:	e093      	b.n	8003672 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800354a:	231b      	movs	r3, #27
 800354c:	2220      	movs	r2, #32
 800354e:	189b      	adds	r3, r3, r2
 8003550:	19db      	adds	r3, r3, r7
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d015      	beq.n	8003584 <UART_SetConfig+0x3e0>
 8003558:	dc18      	bgt.n	800358c <UART_SetConfig+0x3e8>
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00d      	beq.n	800357a <UART_SetConfig+0x3d6>
 800355e:	dc15      	bgt.n	800358c <UART_SetConfig+0x3e8>
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <UART_SetConfig+0x3c6>
 8003564:	2b02      	cmp	r3, #2
 8003566:	d005      	beq.n	8003574 <UART_SetConfig+0x3d0>
 8003568:	e010      	b.n	800358c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800356a:	f7ff fb73 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 800356e:	0003      	movs	r3, r0
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003572:	e014      	b.n	800359e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003574:	4bb4      	ldr	r3, [pc, #720]	; (8003848 <UART_SetConfig+0x6a4>)
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003578:	e011      	b.n	800359e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800357a:	f7ff fadf 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 800357e:	0003      	movs	r3, r0
 8003580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003582:	e00c      	b.n	800359e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800358a:	e008      	b.n	800359e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003590:	231a      	movs	r3, #26
 8003592:	2220      	movs	r2, #32
 8003594:	189b      	adds	r3, r3, r2
 8003596:	19db      	adds	r3, r3, r7
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
        break;
 800359c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d100      	bne.n	80035a6 <UART_SetConfig+0x402>
 80035a4:	e135      	b.n	8003812 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035aa:	4ba8      	ldr	r3, [pc, #672]	; (800384c <UART_SetConfig+0x6a8>)
 80035ac:	0052      	lsls	r2, r2, #1
 80035ae:	5ad3      	ldrh	r3, [r2, r3]
 80035b0:	0019      	movs	r1, r3
 80035b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80035b4:	f7fc fda6 	bl	8000104 <__udivsi3>
 80035b8:	0003      	movs	r3, r0
 80035ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	0013      	movs	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	189b      	adds	r3, r3, r2
 80035c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d305      	bcc.n	80035d8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d906      	bls.n	80035e6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80035d8:	231a      	movs	r3, #26
 80035da:	2220      	movs	r2, #32
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e044      	b.n	8003670 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f2:	4b96      	ldr	r3, [pc, #600]	; (800384c <UART_SetConfig+0x6a8>)
 80035f4:	0052      	lsls	r2, r2, #1
 80035f6:	5ad3      	ldrh	r3, [r2, r3]
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	69b8      	ldr	r0, [r7, #24]
 8003604:	69f9      	ldr	r1, [r7, #28]
 8003606:	f7fc fef3 	bl	80003f0 <__aeabi_uldivmod>
 800360a:	0002      	movs	r2, r0
 800360c:	000b      	movs	r3, r1
 800360e:	0e11      	lsrs	r1, r2, #24
 8003610:	021d      	lsls	r5, r3, #8
 8003612:	430d      	orrs	r5, r1
 8003614:	0214      	lsls	r4, r2, #8
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68b8      	ldr	r0, [r7, #8]
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	1900      	adds	r0, r0, r4
 8003628:	4169      	adcs	r1, r5
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	2300      	movs	r3, #0
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f7fc feda 	bl	80003f0 <__aeabi_uldivmod>
 800363c:	0002      	movs	r2, r0
 800363e:	000b      	movs	r3, r1
 8003640:	0013      	movs	r3, r2
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	23c0      	movs	r3, #192	; 0xc0
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	429a      	cmp	r2, r3
 800364c:	d309      	bcc.n	8003662 <UART_SetConfig+0x4be>
 800364e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	035b      	lsls	r3, r3, #13
 8003654:	429a      	cmp	r2, r3
 8003656:	d204      	bcs.n	8003662 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800365e:	60da      	str	r2, [r3, #12]
 8003660:	e006      	b.n	8003670 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003662:	231a      	movs	r3, #26
 8003664:	2220      	movs	r2, #32
 8003666:	189b      	adds	r3, r3, r2
 8003668:	19db      	adds	r3, r3, r7
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 800366e:	e0d0      	b.n	8003812 <UART_SetConfig+0x66e>
 8003670:	e0cf      	b.n	8003812 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	2380      	movs	r3, #128	; 0x80
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	429a      	cmp	r2, r3
 800367c:	d000      	beq.n	8003680 <UART_SetConfig+0x4dc>
 800367e:	e070      	b.n	8003762 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8003680:	231b      	movs	r3, #27
 8003682:	2220      	movs	r2, #32
 8003684:	189b      	adds	r3, r3, r2
 8003686:	19db      	adds	r3, r3, r7
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b08      	cmp	r3, #8
 800368c:	d015      	beq.n	80036ba <UART_SetConfig+0x516>
 800368e:	dc18      	bgt.n	80036c2 <UART_SetConfig+0x51e>
 8003690:	2b04      	cmp	r3, #4
 8003692:	d00d      	beq.n	80036b0 <UART_SetConfig+0x50c>
 8003694:	dc15      	bgt.n	80036c2 <UART_SetConfig+0x51e>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <UART_SetConfig+0x4fc>
 800369a:	2b02      	cmp	r3, #2
 800369c:	d005      	beq.n	80036aa <UART_SetConfig+0x506>
 800369e:	e010      	b.n	80036c2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036a0:	f7ff fad8 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 80036a4:	0003      	movs	r3, r0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036a8:	e014      	b.n	80036d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036aa:	4b67      	ldr	r3, [pc, #412]	; (8003848 <UART_SetConfig+0x6a4>)
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036ae:	e011      	b.n	80036d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036b0:	f7ff fa44 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 80036b4:	0003      	movs	r3, r0
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036b8:	e00c      	b.n	80036d4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ba:	2380      	movs	r3, #128	; 0x80
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036c0:	e008      	b.n	80036d4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036c6:	231a      	movs	r3, #26
 80036c8:	2220      	movs	r2, #32
 80036ca:	189b      	adds	r3, r3, r2
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
        break;
 80036d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d100      	bne.n	80036dc <UART_SetConfig+0x538>
 80036da:	e09a      	b.n	8003812 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e0:	4b5a      	ldr	r3, [pc, #360]	; (800384c <UART_SetConfig+0x6a8>)
 80036e2:	0052      	lsls	r2, r2, #1
 80036e4:	5ad3      	ldrh	r3, [r2, r3]
 80036e6:	0019      	movs	r1, r3
 80036e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036ea:	f7fc fd0b 	bl	8000104 <__udivsi3>
 80036ee:	0003      	movs	r3, r0
 80036f0:	005a      	lsls	r2, r3, #1
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	085b      	lsrs	r3, r3, #1
 80036f8:	18d2      	adds	r2, r2, r3
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0019      	movs	r1, r3
 8003700:	0010      	movs	r0, r2
 8003702:	f7fc fcff 	bl	8000104 <__udivsi3>
 8003706:	0003      	movs	r3, r0
 8003708:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d921      	bls.n	8003754 <UART_SetConfig+0x5b0>
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	025b      	lsls	r3, r3, #9
 8003716:	429a      	cmp	r2, r3
 8003718:	d21c      	bcs.n	8003754 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	b29a      	uxth	r2, r3
 800371e:	200e      	movs	r0, #14
 8003720:	2420      	movs	r4, #32
 8003722:	1903      	adds	r3, r0, r4
 8003724:	19db      	adds	r3, r3, r7
 8003726:	210f      	movs	r1, #15
 8003728:	438a      	bics	r2, r1
 800372a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	b29b      	uxth	r3, r3
 8003732:	2207      	movs	r2, #7
 8003734:	4013      	ands	r3, r2
 8003736:	b299      	uxth	r1, r3
 8003738:	1903      	adds	r3, r0, r4
 800373a:	19db      	adds	r3, r3, r7
 800373c:	1902      	adds	r2, r0, r4
 800373e:	19d2      	adds	r2, r2, r7
 8003740:	8812      	ldrh	r2, [r2, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1902      	adds	r2, r0, r4
 800374c:	19d2      	adds	r2, r2, r7
 800374e:	8812      	ldrh	r2, [r2, #0]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	e05e      	b.n	8003812 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003754:	231a      	movs	r3, #26
 8003756:	2220      	movs	r2, #32
 8003758:	189b      	adds	r3, r3, r2
 800375a:	19db      	adds	r3, r3, r7
 800375c:	2201      	movs	r2, #1
 800375e:	701a      	strb	r2, [r3, #0]
 8003760:	e057      	b.n	8003812 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003762:	231b      	movs	r3, #27
 8003764:	2220      	movs	r2, #32
 8003766:	189b      	adds	r3, r3, r2
 8003768:	19db      	adds	r3, r3, r7
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d015      	beq.n	800379c <UART_SetConfig+0x5f8>
 8003770:	dc18      	bgt.n	80037a4 <UART_SetConfig+0x600>
 8003772:	2b04      	cmp	r3, #4
 8003774:	d00d      	beq.n	8003792 <UART_SetConfig+0x5ee>
 8003776:	dc15      	bgt.n	80037a4 <UART_SetConfig+0x600>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <UART_SetConfig+0x5de>
 800377c:	2b02      	cmp	r3, #2
 800377e:	d005      	beq.n	800378c <UART_SetConfig+0x5e8>
 8003780:	e010      	b.n	80037a4 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003782:	f7ff fa67 	bl	8002c54 <HAL_RCC_GetPCLK1Freq>
 8003786:	0003      	movs	r3, r0
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800378a:	e014      	b.n	80037b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <UART_SetConfig+0x6a4>)
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003790:	e011      	b.n	80037b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003792:	f7ff f9d3 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8003796:	0003      	movs	r3, r0
 8003798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800379a:	e00c      	b.n	80037b6 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80037a2:	e008      	b.n	80037b6 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80037a8:	231a      	movs	r3, #26
 80037aa:	2220      	movs	r2, #32
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
        break;
 80037b4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02a      	beq.n	8003812 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c0:	4b22      	ldr	r3, [pc, #136]	; (800384c <UART_SetConfig+0x6a8>)
 80037c2:	0052      	lsls	r2, r2, #1
 80037c4:	5ad3      	ldrh	r3, [r2, r3]
 80037c6:	0019      	movs	r1, r3
 80037c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037ca:	f7fc fc9b 	bl	8000104 <__udivsi3>
 80037ce:	0003      	movs	r3, r0
 80037d0:	001a      	movs	r2, r3
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	18d2      	adds	r2, r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	0019      	movs	r1, r3
 80037e0:	0010      	movs	r0, r2
 80037e2:	f7fc fc8f 	bl	8000104 <__udivsi3>
 80037e6:	0003      	movs	r3, r0
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	2b0f      	cmp	r3, #15
 80037ee:	d90a      	bls.n	8003806 <UART_SetConfig+0x662>
 80037f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037f2:	2380      	movs	r3, #128	; 0x80
 80037f4:	025b      	lsls	r3, r3, #9
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d205      	bcs.n	8003806 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60da      	str	r2, [r3, #12]
 8003804:	e005      	b.n	8003812 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8003806:	231a      	movs	r3, #26
 8003808:	2220      	movs	r2, #32
 800380a:	189b      	adds	r3, r3, r2
 800380c:	19db      	adds	r3, r3, r7
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	226a      	movs	r2, #106	; 0x6a
 8003816:	2101      	movs	r1, #1
 8003818:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	2268      	movs	r2, #104	; 0x68
 800381e:	2101      	movs	r1, #1
 8003820:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	2200      	movs	r2, #0
 8003826:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2200      	movs	r2, #0
 800382c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800382e:	231a      	movs	r3, #26
 8003830:	2220      	movs	r2, #32
 8003832:	189b      	adds	r3, r3, r2
 8003834:	19db      	adds	r3, r3, r7
 8003836:	781b      	ldrb	r3, [r3, #0]
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b010      	add	sp, #64	; 0x40
 800383e:	bdb0      	pop	{r4, r5, r7, pc}
 8003840:	40008000 	.word	0x40008000
 8003844:	40008400 	.word	0x40008400
 8003848:	00f42400 	.word	0x00f42400
 800384c:	08004c58 	.word	0x08004c58

08003850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d00b      	beq.n	800387a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a4a      	ldr	r2, [pc, #296]	; (8003994 <UART_AdvFeatureConfig+0x144>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	2202      	movs	r2, #2
 8003880:	4013      	ands	r3, r2
 8003882:	d00b      	beq.n	800389c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	4a43      	ldr	r2, [pc, #268]	; (8003998 <UART_AdvFeatureConfig+0x148>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00b      	beq.n	80038be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <UART_AdvFeatureConfig+0x14c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c2:	2208      	movs	r2, #8
 80038c4:	4013      	ands	r3, r2
 80038c6:	d00b      	beq.n	80038e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <UART_AdvFeatureConfig+0x150>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	2210      	movs	r2, #16
 80038e6:	4013      	ands	r3, r2
 80038e8:	d00b      	beq.n	8003902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a2c      	ldr	r2, [pc, #176]	; (80039a4 <UART_AdvFeatureConfig+0x154>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	2220      	movs	r2, #32
 8003908:	4013      	ands	r3, r2
 800390a:	d00b      	beq.n	8003924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <UART_AdvFeatureConfig+0x158>)
 8003914:	4013      	ands	r3, r2
 8003916:	0019      	movs	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	4013      	ands	r3, r2
 800392c:	d01d      	beq.n	800396a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <UART_AdvFeatureConfig+0x15c>)
 8003936:	4013      	ands	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	035b      	lsls	r3, r3, #13
 800394e:	429a      	cmp	r2, r3
 8003950:	d10b      	bne.n	800396a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <UART_AdvFeatureConfig+0x160>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	2280      	movs	r2, #128	; 0x80
 8003970:	4013      	ands	r3, r2
 8003972:	d00b      	beq.n	800398c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a0e      	ldr	r2, [pc, #56]	; (80039b4 <UART_AdvFeatureConfig+0x164>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	605a      	str	r2, [r3, #4]
  }
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	46bd      	mov	sp, r7
 8003990:	b002      	add	sp, #8
 8003992:	bd80      	pop	{r7, pc}
 8003994:	fffdffff 	.word	0xfffdffff
 8003998:	fffeffff 	.word	0xfffeffff
 800399c:	fffbffff 	.word	0xfffbffff
 80039a0:	ffff7fff 	.word	0xffff7fff
 80039a4:	ffffefff 	.word	0xffffefff
 80039a8:	ffffdfff 	.word	0xffffdfff
 80039ac:	ffefffff 	.word	0xffefffff
 80039b0:	ff9fffff 	.word	0xff9fffff
 80039b4:	fff7ffff 	.word	0xfff7ffff

080039b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2290      	movs	r2, #144	; 0x90
 80039c4:	2100      	movs	r1, #0
 80039c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039c8:	f7fd fc40 	bl	800124c <HAL_GetTick>
 80039cc:	0003      	movs	r3, r0
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	4013      	ands	r3, r2
 80039da:	2b08      	cmp	r3, #8
 80039dc:	d10c      	bne.n	80039f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2280      	movs	r2, #128	; 0x80
 80039e2:	0391      	lsls	r1, r2, #14
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <UART_CheckIdleState+0x98>)
 80039e8:	9200      	str	r2, [sp, #0]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f000 f832 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d001      	beq.n	80039f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e026      	b.n	8003a46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2204      	movs	r2, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d10c      	bne.n	8003a20 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	03d1      	lsls	r1, r2, #15
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4a10      	ldr	r2, [pc, #64]	; (8003a50 <UART_CheckIdleState+0x98>)
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f000 f81e 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 8003a18:	1e03      	subs	r3, r0, #0
 8003a1a:	d001      	beq.n	8003a20 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e012      	b.n	8003a46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2288      	movs	r2, #136	; 0x88
 8003a24:	2120      	movs	r1, #32
 8003a26:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	228c      	movs	r2, #140	; 0x8c
 8003a2c:	2120      	movs	r1, #32
 8003a2e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	; 0x84
 8003a40:	2100      	movs	r1, #0
 8003a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b004      	add	sp, #16
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	01ffffff 	.word	0x01ffffff

08003a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b094      	sub	sp, #80	; 0x50
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	e0a7      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a68:	3301      	adds	r3, #1
 8003a6a:	d100      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a6c:	e0a3      	b.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6e:	f7fd fbed 	bl	800124c <HAL_GetTick>
 8003a72:	0002      	movs	r2, r0
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d302      	bcc.n	8003a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d13f      	bne.n	8003b04 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a84:	f3ef 8310 	mrs	r3, PRIMASK
 8003a88:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8e:	2301      	movs	r3, #1
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	f383 8810 	msr	PRIMASK, r3
}
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	494e      	ldr	r1, [pc, #312]	; (8003be0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	f383 8810 	msr	PRIMASK, r3
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ab6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003abe:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	f383 8810 	msr	PRIMASK, r3
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	438a      	bics	r2, r1
 8003ada:	609a      	str	r2, [r3, #8]
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	f383 8810 	msr	PRIMASK, r3
}
 8003ae6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2288      	movs	r2, #136	; 0x88
 8003aec:	2120      	movs	r1, #32
 8003aee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	228c      	movs	r2, #140	; 0x8c
 8003af4:	2120      	movs	r1, #32
 8003af6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2284      	movs	r2, #132	; 0x84
 8003afc:	2100      	movs	r1, #0
 8003afe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e069      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d052      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	401a      	ands	r2, r3
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d148      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	0112      	lsls	r2, r2, #4
 8003b2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b32:	613b      	str	r3, [r7, #16]
  return(result);
 8003b34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b38:	2301      	movs	r3, #1
 8003b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f383 8810 	msr	PRIMASK, r3
}
 8003b42:	46c0      	nop			; (mov r8, r8)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4924      	ldr	r1, [pc, #144]	; (8003be0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f383 8810 	msr	PRIMASK, r3
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b60:	f3ef 8310 	mrs	r3, PRIMASK
 8003b64:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b66:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f383 8810 	msr	PRIMASK, r3
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	438a      	bics	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2288      	movs	r2, #136	; 0x88
 8003b96:	2120      	movs	r1, #32
 8003b98:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	228c      	movs	r2, #140	; 0x8c
 8003b9e:	2120      	movs	r1, #32
 8003ba0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2290      	movs	r2, #144	; 0x90
 8003ba6:	2120      	movs	r1, #32
 8003ba8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2284      	movs	r2, #132	; 0x84
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e010      	b.n	8003bd8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	425a      	negs	r2, r3
 8003bc6:	4153      	adcs	r3, r2
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	001a      	movs	r2, r3
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d100      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003bd4:	e747      	b.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b014      	add	sp, #80	; 0x50
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	fffffe5f 	.word	0xfffffe5f

08003be4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2284      	movs	r2, #132	; 0x84
 8003bf0:	5c9b      	ldrb	r3, [r3, r2]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_UARTEx_DisableFifoMode+0x16>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e027      	b.n	8003c4a <HAL_UARTEx_DisableFifoMode+0x66>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2284      	movs	r2, #132	; 0x84
 8003bfe:	2101      	movs	r1, #1
 8003c00:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2288      	movs	r2, #136	; 0x88
 8003c06:	2124      	movs	r1, #36	; 0x24
 8003c08:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	438a      	bics	r2, r1
 8003c20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a0b      	ldr	r2, [pc, #44]	; (8003c54 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2288      	movs	r2, #136	; 0x88
 8003c3c:	2120      	movs	r1, #32
 8003c3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2284      	movs	r2, #132	; 0x84
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b004      	add	sp, #16
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	dfffffff 	.word	0xdfffffff

08003c58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2284      	movs	r2, #132	; 0x84
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e02e      	b.n	8003cce <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2284      	movs	r2, #132	; 0x84
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2288      	movs	r2, #136	; 0x88
 8003c7c:	2124      	movs	r1, #36	; 0x24
 8003c7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2101      	movs	r1, #1
 8003c94:	438a      	bics	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	08d9      	lsrs	r1, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f000 f854 	bl	8003d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2288      	movs	r2, #136	; 0x88
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2284      	movs	r2, #132	; 0x84
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	0018      	movs	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2284      	movs	r2, #132	; 0x84
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e02f      	b.n	8003d50 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2284      	movs	r2, #132	; 0x84
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2288      	movs	r2, #136	; 0x88
 8003cfc:	2124      	movs	r1, #36	; 0x24
 8003cfe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2101      	movs	r1, #1
 8003d14:	438a      	bics	r2, r1
 8003d16:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d20:	4013      	ands	r3, r2
 8003d22:	0019      	movs	r1, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 f813 	bl	8003d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2288      	movs	r2, #136	; 0x88
 8003d42:	2120      	movs	r1, #32
 8003d44:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2284      	movs	r2, #132	; 0x84
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b004      	add	sp, #16
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	f1ffffff 	.word	0xf1ffffff

08003d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	226a      	movs	r2, #106	; 0x6a
 8003d70:	2101      	movs	r1, #1
 8003d72:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2268      	movs	r2, #104	; 0x68
 8003d78:	2101      	movs	r1, #1
 8003d7a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d7c:	e043      	b.n	8003e06 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d7e:	260f      	movs	r6, #15
 8003d80:	19bb      	adds	r3, r7, r6
 8003d82:	2208      	movs	r2, #8
 8003d84:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d86:	200e      	movs	r0, #14
 8003d88:	183b      	adds	r3, r7, r0
 8003d8a:	2208      	movs	r2, #8
 8003d8c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	0e5b      	lsrs	r3, r3, #25
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	240d      	movs	r4, #13
 8003d9a:	193b      	adds	r3, r7, r4
 8003d9c:	2107      	movs	r1, #7
 8003d9e:	400a      	ands	r2, r1
 8003da0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	0f5b      	lsrs	r3, r3, #29
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	250c      	movs	r5, #12
 8003dae:	197b      	adds	r3, r7, r5
 8003db0:	2107      	movs	r1, #7
 8003db2:	400a      	ands	r2, r1
 8003db4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003db6:	183b      	adds	r3, r7, r0
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	197a      	adds	r2, r7, r5
 8003dbc:	7812      	ldrb	r2, [r2, #0]
 8003dbe:	4914      	ldr	r1, [pc, #80]	; (8003e10 <UARTEx_SetNbDataToProcess+0xb4>)
 8003dc0:	5c8a      	ldrb	r2, [r1, r2]
 8003dc2:	435a      	muls	r2, r3
 8003dc4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003dc6:	197b      	adds	r3, r7, r5
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <UARTEx_SetNbDataToProcess+0xb8>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dce:	0019      	movs	r1, r3
 8003dd0:	f7fc fa22 	bl	8000218 <__divsi3>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	226a      	movs	r2, #106	; 0x6a
 8003ddc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dde:	19bb      	adds	r3, r7, r6
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	193a      	adds	r2, r7, r4
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	490a      	ldr	r1, [pc, #40]	; (8003e10 <UARTEx_SetNbDataToProcess+0xb4>)
 8003de8:	5c8a      	ldrb	r2, [r1, r2]
 8003dea:	435a      	muls	r2, r3
 8003dec:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	4a08      	ldr	r2, [pc, #32]	; (8003e14 <UARTEx_SetNbDataToProcess+0xb8>)
 8003df4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003df6:	0019      	movs	r1, r3
 8003df8:	f7fc fa0e 	bl	8000218 <__divsi3>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	b299      	uxth	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2268      	movs	r2, #104	; 0x68
 8003e04:	5299      	strh	r1, [r3, r2]
}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b005      	add	sp, #20
 8003e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	08004c70 	.word	0x08004c70
 8003e14:	08004c78 	.word	0x08004c78

08003e18 <memset>:
 8003e18:	0003      	movs	r3, r0
 8003e1a:	1882      	adds	r2, r0, r2
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	7019      	strb	r1, [r3, #0]
 8003e24:	3301      	adds	r3, #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	4c0c      	ldr	r4, [pc, #48]	; (8003e60 <__libc_init_array+0x38>)
 8003e2e:	4d0d      	ldr	r5, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	2600      	movs	r6, #0
 8003e3a:	f000 f819 	bl	8003e70 <_init>
 8003e3e:	4c0a      	ldr	r4, [pc, #40]	; (8003e68 <__libc_init_array+0x40>)
 8003e40:	4d0a      	ldr	r5, [pc, #40]	; (8003e6c <__libc_init_array+0x44>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	00b3      	lsls	r3, r6, #2
 8003e4e:	58eb      	ldr	r3, [r5, r3]
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	00b3      	lsls	r3, r6, #2
 8003e58:	58eb      	ldr	r3, [r5, r3]
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08004c88 	.word	0x08004c88
 8003e64:	08004c88 	.word	0x08004c88
 8003e68:	08004c8c 	.word	0x08004c8c
 8003e6c:	08004c88 	.word	0x08004c88

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
