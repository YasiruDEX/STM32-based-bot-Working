
analog_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006384  08006384  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800638c  0800638c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  2000000c  080063a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  080063a0  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b61  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000226c  00000000  00000000  00031bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00033e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cd4  00000000  00000000  00034e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbbf  00000000  00000000  00035b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012819  00000000  00000000  00052723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c16cd  00000000  00000000  00064f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003db0  00000000  00000000  0012660c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0012a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006250 	.word	0x08006250

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006250 	.word	0x08006250

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 faaf 	bl	800199c <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 fa0f 	bl	8001868 <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fe86 	bl	8001164 <__aeabi_dsub>
 8000458:	f001 fa06 	bl	8001868 <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 faae 	bl	80019ec <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 faa9 	bl	80019ec <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	d434      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a2:	469b      	mov	fp, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	465a      	mov	r2, fp
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83b      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e079      	b.n	80005b2 <__udivmoddi4+0x146>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e076      	b.n	80005b8 <__udivmoddi4+0x14c>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e029      	b.n	8000538 <__udivmoddi4+0xcc>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	469b      	mov	fp, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	4652      	mov	r2, sl
 8000516:	40da      	lsrs	r2, r3
 8000518:	4641      	mov	r1, r8
 800051a:	0013      	movs	r3, r2
 800051c:	464a      	mov	r2, r9
 800051e:	408a      	lsls	r2, r1
 8000520:	0017      	movs	r7, r2
 8000522:	4642      	mov	r2, r8
 8000524:	431f      	orrs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d9c3      	bls.n	80004b8 <__udivmoddi4+0x4c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4643      	mov	r3, r8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0d8      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053e:	07fb      	lsls	r3, r7, #31
 8000540:	0872      	lsrs	r2, r6, #1
 8000542:	431a      	orrs	r2, r3
 8000544:	4646      	mov	r6, r8
 8000546:	087b      	lsrs	r3, r7, #1
 8000548:	e00e      	b.n	8000568 <__udivmoddi4+0xfc>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d101      	bne.n	8000552 <__udivmoddi4+0xe6>
 800054e:	42a2      	cmp	r2, r4
 8000550:	d80c      	bhi.n	800056c <__udivmoddi4+0x100>
 8000552:	1aa4      	subs	r4, r4, r2
 8000554:	419d      	sbcs	r5, r3
 8000556:	2001      	movs	r0, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2100      	movs	r1, #0
 800055e:	3e01      	subs	r6, #1
 8000560:	1824      	adds	r4, r4, r0
 8000562:	414d      	adcs	r5, r1
 8000564:	2e00      	cmp	r6, #0
 8000566:	d006      	beq.n	8000576 <__udivmoddi4+0x10a>
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9ee      	bls.n	800054a <__udivmoddi4+0xde>
 800056c:	3e01      	subs	r6, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1f8      	bne.n	8000568 <__udivmoddi4+0xfc>
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	465b      	mov	r3, fp
 800057c:	1900      	adds	r0, r0, r4
 800057e:	4169      	adcs	r1, r5
 8000580:	2b00      	cmp	r3, #0
 8000582:	db24      	blt.n	80005ce <__udivmoddi4+0x162>
 8000584:	002b      	movs	r3, r5
 8000586:	465a      	mov	r2, fp
 8000588:	4644      	mov	r4, r8
 800058a:	40d3      	lsrs	r3, r2
 800058c:	002a      	movs	r2, r5
 800058e:	40e2      	lsrs	r2, r4
 8000590:	001c      	movs	r4, r3
 8000592:	465b      	mov	r3, fp
 8000594:	0015      	movs	r5, r2
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2a      	blt.n	80005f0 <__udivmoddi4+0x184>
 800059a:	0026      	movs	r6, r4
 800059c:	409e      	lsls	r6, r3
 800059e:	0033      	movs	r3, r6
 80005a0:	0026      	movs	r6, r4
 80005a2:	4647      	mov	r7, r8
 80005a4:	40be      	lsls	r6, r7
 80005a6:	0032      	movs	r2, r6
 80005a8:	1a80      	subs	r0, r0, r2
 80005aa:	4199      	sbcs	r1, r3
 80005ac:	9000      	str	r0, [sp, #0]
 80005ae:	9101      	str	r1, [sp, #4]
 80005b0:	e79e      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d8bc      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x52>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e785      	b.n	80004da <__udivmoddi4+0x6e>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	4646      	mov	r6, r8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0023      	movs	r3, r4
 80005dc:	40f3      	lsrs	r3, r6
 80005de:	4644      	mov	r4, r8
 80005e0:	4313      	orrs	r3, r2
 80005e2:	002a      	movs	r2, r5
 80005e4:	40e2      	lsrs	r2, r4
 80005e6:	001c      	movs	r4, r3
 80005e8:	465b      	mov	r3, fp
 80005ea:	0015      	movs	r5, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dad4      	bge.n	800059a <__udivmoddi4+0x12e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	002f      	movs	r7, r5
 80005f4:	2320      	movs	r3, #32
 80005f6:	0026      	movs	r6, r4
 80005f8:	4097      	lsls	r7, r2
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	40de      	lsrs	r6, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	4333      	orrs	r3, r6
 8000602:	e7cd      	b.n	80005a0 <__udivmoddi4+0x134>

08000604 <__aeabi_ddiv>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	4657      	mov	r7, sl
 8000608:	464e      	mov	r6, r9
 800060a:	4645      	mov	r5, r8
 800060c:	46de      	mov	lr, fp
 800060e:	b5e0      	push	{r5, r6, r7, lr}
 8000610:	030c      	lsls	r4, r1, #12
 8000612:	001f      	movs	r7, r3
 8000614:	004b      	lsls	r3, r1, #1
 8000616:	4681      	mov	r9, r0
 8000618:	4692      	mov	sl, r2
 800061a:	0005      	movs	r5, r0
 800061c:	b085      	sub	sp, #20
 800061e:	0b24      	lsrs	r4, r4, #12
 8000620:	0d5b      	lsrs	r3, r3, #21
 8000622:	0fce      	lsrs	r6, r1, #31
 8000624:	2b00      	cmp	r3, #0
 8000626:	d100      	bne.n	800062a <__aeabi_ddiv+0x26>
 8000628:	e152      	b.n	80008d0 <__aeabi_ddiv+0x2cc>
 800062a:	4ad2      	ldr	r2, [pc, #840]	; (8000974 <__aeabi_ddiv+0x370>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x2e>
 8000630:	e16e      	b.n	8000910 <__aeabi_ddiv+0x30c>
 8000632:	0f42      	lsrs	r2, r0, #29
 8000634:	00e4      	lsls	r4, r4, #3
 8000636:	4314      	orrs	r4, r2
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	0412      	lsls	r2, r2, #16
 800063c:	4322      	orrs	r2, r4
 800063e:	4690      	mov	r8, r2
 8000640:	4acd      	ldr	r2, [pc, #820]	; (8000978 <__aeabi_ddiv+0x374>)
 8000642:	00c5      	lsls	r5, r0, #3
 8000644:	4693      	mov	fp, r2
 8000646:	449b      	add	fp, r3
 8000648:	2300      	movs	r3, #0
 800064a:	4699      	mov	r9, r3
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	033c      	lsls	r4, r7, #12
 8000650:	007b      	lsls	r3, r7, #1
 8000652:	4650      	mov	r0, sl
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	0d5b      	lsrs	r3, r3, #21
 8000658:	0fff      	lsrs	r7, r7, #31
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x5c>
 800065e:	e11a      	b.n	8000896 <__aeabi_ddiv+0x292>
 8000660:	4ac4      	ldr	r2, [pc, #784]	; (8000974 <__aeabi_ddiv+0x370>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d100      	bne.n	8000668 <__aeabi_ddiv+0x64>
 8000666:	e15e      	b.n	8000926 <__aeabi_ddiv+0x322>
 8000668:	0f42      	lsrs	r2, r0, #29
 800066a:	00e4      	lsls	r4, r4, #3
 800066c:	4322      	orrs	r2, r4
 800066e:	2480      	movs	r4, #128	; 0x80
 8000670:	0424      	lsls	r4, r4, #16
 8000672:	4314      	orrs	r4, r2
 8000674:	4ac0      	ldr	r2, [pc, #768]	; (8000978 <__aeabi_ddiv+0x374>)
 8000676:	00c1      	lsls	r1, r0, #3
 8000678:	4694      	mov	ip, r2
 800067a:	465a      	mov	r2, fp
 800067c:	4463      	add	r3, ip
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	469b      	mov	fp, r3
 8000682:	2000      	movs	r0, #0
 8000684:	0033      	movs	r3, r6
 8000686:	407b      	eors	r3, r7
 8000688:	469a      	mov	sl, r3
 800068a:	464b      	mov	r3, r9
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d827      	bhi.n	80006e0 <__aeabi_ddiv+0xdc>
 8000690:	4aba      	ldr	r2, [pc, #744]	; (800097c <__aeabi_ddiv+0x378>)
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	58d3      	ldr	r3, [r2, r3]
 8000696:	469f      	mov	pc, r3
 8000698:	46b2      	mov	sl, r6
 800069a:	9b00      	ldr	r3, [sp, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d016      	beq.n	80006ce <__aeabi_ddiv+0xca>
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0xa2>
 80006a4:	e287      	b.n	8000bb6 <__aeabi_ddiv+0x5b2>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d000      	beq.n	80006ac <__aeabi_ddiv+0xa8>
 80006aa:	e0d5      	b.n	8000858 <__aeabi_ddiv+0x254>
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	2500      	movs	r5, #0
 80006b2:	051b      	lsls	r3, r3, #20
 80006b4:	4313      	orrs	r3, r2
 80006b6:	4652      	mov	r2, sl
 80006b8:	07d2      	lsls	r2, r2, #31
 80006ba:	4313      	orrs	r3, r2
 80006bc:	0028      	movs	r0, r5
 80006be:	0019      	movs	r1, r3
 80006c0:	b005      	add	sp, #20
 80006c2:	bcf0      	pop	{r4, r5, r6, r7}
 80006c4:	46bb      	mov	fp, r7
 80006c6:	46b2      	mov	sl, r6
 80006c8:	46a9      	mov	r9, r5
 80006ca:	46a0      	mov	r8, r4
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	2200      	movs	r2, #0
 80006d0:	2500      	movs	r5, #0
 80006d2:	4ba8      	ldr	r3, [pc, #672]	; (8000974 <__aeabi_ddiv+0x370>)
 80006d4:	e7ed      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80006d6:	46ba      	mov	sl, r7
 80006d8:	46a0      	mov	r8, r4
 80006da:	000d      	movs	r5, r1
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	e7dc      	b.n	800069a <__aeabi_ddiv+0x96>
 80006e0:	4544      	cmp	r4, r8
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0xe2>
 80006e4:	e1c4      	b.n	8000a70 <__aeabi_ddiv+0x46c>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0xe6>
 80006e8:	e1bf      	b.n	8000a6a <__aeabi_ddiv+0x466>
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	469c      	mov	ip, r3
 80006f0:	002e      	movs	r6, r5
 80006f2:	4640      	mov	r0, r8
 80006f4:	2500      	movs	r5, #0
 80006f6:	44e3      	add	fp, ip
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	0e0c      	lsrs	r4, r1, #24
 80006fc:	431c      	orrs	r4, r3
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	4699      	mov	r9, r3
 8000702:	0423      	lsls	r3, r4, #16
 8000704:	020a      	lsls	r2, r1, #8
 8000706:	0c1f      	lsrs	r7, r3, #16
 8000708:	4649      	mov	r1, r9
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	9701      	str	r7, [sp, #4]
 800070e:	f7ff fd7f 	bl	8000210 <__aeabi_uidivmod>
 8000712:	0002      	movs	r2, r0
 8000714:	437a      	muls	r2, r7
 8000716:	040b      	lsls	r3, r1, #16
 8000718:	0c31      	lsrs	r1, r6, #16
 800071a:	4680      	mov	r8, r0
 800071c:	4319      	orrs	r1, r3
 800071e:	428a      	cmp	r2, r1
 8000720:	d907      	bls.n	8000732 <__aeabi_ddiv+0x12e>
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	469c      	mov	ip, r3
 8000728:	1909      	adds	r1, r1, r4
 800072a:	44e0      	add	r8, ip
 800072c:	428c      	cmp	r4, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x12e>
 8000730:	e201      	b.n	8000b36 <__aeabi_ddiv+0x532>
 8000732:	1a88      	subs	r0, r1, r2
 8000734:	4649      	mov	r1, r9
 8000736:	f7ff fd6b 	bl	8000210 <__aeabi_uidivmod>
 800073a:	9a01      	ldr	r2, [sp, #4]
 800073c:	0436      	lsls	r6, r6, #16
 800073e:	4342      	muls	r2, r0
 8000740:	0409      	lsls	r1, r1, #16
 8000742:	0c36      	lsrs	r6, r6, #16
 8000744:	0003      	movs	r3, r0
 8000746:	430e      	orrs	r6, r1
 8000748:	42b2      	cmp	r2, r6
 800074a:	d904      	bls.n	8000756 <__aeabi_ddiv+0x152>
 800074c:	1936      	adds	r6, r6, r4
 800074e:	3b01      	subs	r3, #1
 8000750:	42b4      	cmp	r4, r6
 8000752:	d800      	bhi.n	8000756 <__aeabi_ddiv+0x152>
 8000754:	e1e9      	b.n	8000b2a <__aeabi_ddiv+0x526>
 8000756:	1ab0      	subs	r0, r6, r2
 8000758:	4642      	mov	r2, r8
 800075a:	9e00      	ldr	r6, [sp, #0]
 800075c:	0412      	lsls	r2, r2, #16
 800075e:	431a      	orrs	r2, r3
 8000760:	0c33      	lsrs	r3, r6, #16
 8000762:	001f      	movs	r7, r3
 8000764:	0c11      	lsrs	r1, r2, #16
 8000766:	4690      	mov	r8, r2
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	0413      	lsls	r3, r2, #16
 800076c:	0432      	lsls	r2, r6, #16
 800076e:	0c16      	lsrs	r6, r2, #16
 8000770:	0032      	movs	r2, r6
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	435a      	muls	r2, r3
 8000776:	9603      	str	r6, [sp, #12]
 8000778:	437b      	muls	r3, r7
 800077a:	434e      	muls	r6, r1
 800077c:	4379      	muls	r1, r7
 800077e:	0c17      	lsrs	r7, r2, #16
 8000780:	46bc      	mov	ip, r7
 8000782:	199b      	adds	r3, r3, r6
 8000784:	4463      	add	r3, ip
 8000786:	429e      	cmp	r6, r3
 8000788:	d903      	bls.n	8000792 <__aeabi_ddiv+0x18e>
 800078a:	2680      	movs	r6, #128	; 0x80
 800078c:	0276      	lsls	r6, r6, #9
 800078e:	46b4      	mov	ip, r6
 8000790:	4461      	add	r1, ip
 8000792:	0c1e      	lsrs	r6, r3, #16
 8000794:	1871      	adds	r1, r6, r1
 8000796:	0416      	lsls	r6, r2, #16
 8000798:	041b      	lsls	r3, r3, #16
 800079a:	0c36      	lsrs	r6, r6, #16
 800079c:	199e      	adds	r6, r3, r6
 800079e:	4288      	cmp	r0, r1
 80007a0:	d302      	bcc.n	80007a8 <__aeabi_ddiv+0x1a4>
 80007a2:	d112      	bne.n	80007ca <__aeabi_ddiv+0x1c6>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d210      	bcs.n	80007ca <__aeabi_ddiv+0x1c6>
 80007a8:	4643      	mov	r3, r8
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	9b00      	ldr	r3, [sp, #0]
 80007ae:	469c      	mov	ip, r3
 80007b0:	4465      	add	r5, ip
 80007b2:	001f      	movs	r7, r3
 80007b4:	429d      	cmp	r5, r3
 80007b6:	419b      	sbcs	r3, r3
 80007b8:	425b      	negs	r3, r3
 80007ba:	191b      	adds	r3, r3, r4
 80007bc:	18c0      	adds	r0, r0, r3
 80007be:	4284      	cmp	r4, r0
 80007c0:	d200      	bcs.n	80007c4 <__aeabi_ddiv+0x1c0>
 80007c2:	e19e      	b.n	8000b02 <__aeabi_ddiv+0x4fe>
 80007c4:	d100      	bne.n	80007c8 <__aeabi_ddiv+0x1c4>
 80007c6:	e199      	b.n	8000afc <__aeabi_ddiv+0x4f8>
 80007c8:	4690      	mov	r8, r2
 80007ca:	1bae      	subs	r6, r5, r6
 80007cc:	42b5      	cmp	r5, r6
 80007ce:	41ad      	sbcs	r5, r5
 80007d0:	1a40      	subs	r0, r0, r1
 80007d2:	426d      	negs	r5, r5
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	4284      	cmp	r4, r0
 80007d8:	d100      	bne.n	80007dc <__aeabi_ddiv+0x1d8>
 80007da:	e1d2      	b.n	8000b82 <__aeabi_ddiv+0x57e>
 80007dc:	4649      	mov	r1, r9
 80007de:	f7ff fd17 	bl	8000210 <__aeabi_uidivmod>
 80007e2:	9a01      	ldr	r2, [sp, #4]
 80007e4:	040b      	lsls	r3, r1, #16
 80007e6:	4342      	muls	r2, r0
 80007e8:	0c31      	lsrs	r1, r6, #16
 80007ea:	0005      	movs	r5, r0
 80007ec:	4319      	orrs	r1, r3
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d900      	bls.n	80007f4 <__aeabi_ddiv+0x1f0>
 80007f2:	e16c      	b.n	8000ace <__aeabi_ddiv+0x4ca>
 80007f4:	1a88      	subs	r0, r1, r2
 80007f6:	4649      	mov	r1, r9
 80007f8:	f7ff fd0a 	bl	8000210 <__aeabi_uidivmod>
 80007fc:	9a01      	ldr	r2, [sp, #4]
 80007fe:	0436      	lsls	r6, r6, #16
 8000800:	4342      	muls	r2, r0
 8000802:	0409      	lsls	r1, r1, #16
 8000804:	0c36      	lsrs	r6, r6, #16
 8000806:	0003      	movs	r3, r0
 8000808:	430e      	orrs	r6, r1
 800080a:	42b2      	cmp	r2, r6
 800080c:	d900      	bls.n	8000810 <__aeabi_ddiv+0x20c>
 800080e:	e153      	b.n	8000ab8 <__aeabi_ddiv+0x4b4>
 8000810:	9803      	ldr	r0, [sp, #12]
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	0002      	movs	r2, r0
 8000816:	042d      	lsls	r5, r5, #16
 8000818:	431d      	orrs	r5, r3
 800081a:	9f02      	ldr	r7, [sp, #8]
 800081c:	042b      	lsls	r3, r5, #16
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	435a      	muls	r2, r3
 8000822:	437b      	muls	r3, r7
 8000824:	469c      	mov	ip, r3
 8000826:	0c29      	lsrs	r1, r5, #16
 8000828:	4348      	muls	r0, r1
 800082a:	0c13      	lsrs	r3, r2, #16
 800082c:	4484      	add	ip, r0
 800082e:	4463      	add	r3, ip
 8000830:	4379      	muls	r1, r7
 8000832:	4298      	cmp	r0, r3
 8000834:	d903      	bls.n	800083e <__aeabi_ddiv+0x23a>
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	0240      	lsls	r0, r0, #9
 800083a:	4684      	mov	ip, r0
 800083c:	4461      	add	r1, ip
 800083e:	0c18      	lsrs	r0, r3, #16
 8000840:	0412      	lsls	r2, r2, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c12      	lsrs	r2, r2, #16
 8000846:	1840      	adds	r0, r0, r1
 8000848:	189b      	adds	r3, r3, r2
 800084a:	4286      	cmp	r6, r0
 800084c:	d200      	bcs.n	8000850 <__aeabi_ddiv+0x24c>
 800084e:	e100      	b.n	8000a52 <__aeabi_ddiv+0x44e>
 8000850:	d100      	bne.n	8000854 <__aeabi_ddiv+0x250>
 8000852:	e0fb      	b.n	8000a4c <__aeabi_ddiv+0x448>
 8000854:	2301      	movs	r3, #1
 8000856:	431d      	orrs	r5, r3
 8000858:	4b49      	ldr	r3, [pc, #292]	; (8000980 <__aeabi_ddiv+0x37c>)
 800085a:	445b      	add	r3, fp
 800085c:	2b00      	cmp	r3, #0
 800085e:	dc00      	bgt.n	8000862 <__aeabi_ddiv+0x25e>
 8000860:	e0aa      	b.n	80009b8 <__aeabi_ddiv+0x3b4>
 8000862:	076a      	lsls	r2, r5, #29
 8000864:	d000      	beq.n	8000868 <__aeabi_ddiv+0x264>
 8000866:	e13d      	b.n	8000ae4 <__aeabi_ddiv+0x4e0>
 8000868:	08e9      	lsrs	r1, r5, #3
 800086a:	4642      	mov	r2, r8
 800086c:	01d2      	lsls	r2, r2, #7
 800086e:	d506      	bpl.n	800087e <__aeabi_ddiv+0x27a>
 8000870:	4642      	mov	r2, r8
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <__aeabi_ddiv+0x380>)
 8000874:	401a      	ands	r2, r3
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	4690      	mov	r8, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	445b      	add	r3, fp
 800087e:	4a42      	ldr	r2, [pc, #264]	; (8000988 <__aeabi_ddiv+0x384>)
 8000880:	4293      	cmp	r3, r2
 8000882:	dd00      	ble.n	8000886 <__aeabi_ddiv+0x282>
 8000884:	e723      	b.n	80006ce <__aeabi_ddiv+0xca>
 8000886:	4642      	mov	r2, r8
 8000888:	055b      	lsls	r3, r3, #21
 800088a:	0755      	lsls	r5, r2, #29
 800088c:	0252      	lsls	r2, r2, #9
 800088e:	430d      	orrs	r5, r1
 8000890:	0b12      	lsrs	r2, r2, #12
 8000892:	0d5b      	lsrs	r3, r3, #21
 8000894:	e70d      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000896:	4651      	mov	r1, sl
 8000898:	4321      	orrs	r1, r4
 800089a:	d100      	bne.n	800089e <__aeabi_ddiv+0x29a>
 800089c:	e07c      	b.n	8000998 <__aeabi_ddiv+0x394>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_ddiv+0x2a0>
 80008a2:	e0fb      	b.n	8000a9c <__aeabi_ddiv+0x498>
 80008a4:	0020      	movs	r0, r4
 80008a6:	f001 f883 	bl	80019b0 <__clzsi2>
 80008aa:	0002      	movs	r2, r0
 80008ac:	3a0b      	subs	r2, #11
 80008ae:	231d      	movs	r3, #29
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	4652      	mov	r2, sl
 80008b4:	0001      	movs	r1, r0
 80008b6:	40da      	lsrs	r2, r3
 80008b8:	4653      	mov	r3, sl
 80008ba:	3908      	subs	r1, #8
 80008bc:	408b      	lsls	r3, r1
 80008be:	408c      	lsls	r4, r1
 80008c0:	0019      	movs	r1, r3
 80008c2:	4314      	orrs	r4, r2
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <__aeabi_ddiv+0x388>)
 80008c6:	4458      	add	r0, fp
 80008c8:	469b      	mov	fp, r3
 80008ca:	4483      	add	fp, r0
 80008cc:	2000      	movs	r0, #0
 80008ce:	e6d9      	b.n	8000684 <__aeabi_ddiv+0x80>
 80008d0:	0003      	movs	r3, r0
 80008d2:	4323      	orrs	r3, r4
 80008d4:	4698      	mov	r8, r3
 80008d6:	d044      	beq.n	8000962 <__aeabi_ddiv+0x35e>
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x2da>
 80008dc:	e0cf      	b.n	8000a7e <__aeabi_ddiv+0x47a>
 80008de:	0020      	movs	r0, r4
 80008e0:	f001 f866 	bl	80019b0 <__clzsi2>
 80008e4:	0001      	movs	r1, r0
 80008e6:	0002      	movs	r2, r0
 80008e8:	390b      	subs	r1, #11
 80008ea:	231d      	movs	r3, #29
 80008ec:	1a5b      	subs	r3, r3, r1
 80008ee:	4649      	mov	r1, r9
 80008f0:	0010      	movs	r0, r2
 80008f2:	40d9      	lsrs	r1, r3
 80008f4:	3808      	subs	r0, #8
 80008f6:	4084      	lsls	r4, r0
 80008f8:	000b      	movs	r3, r1
 80008fa:	464d      	mov	r5, r9
 80008fc:	4323      	orrs	r3, r4
 80008fe:	4698      	mov	r8, r3
 8000900:	4085      	lsls	r5, r0
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <__aeabi_ddiv+0x38c>)
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	469b      	mov	fp, r3
 8000908:	2300      	movs	r3, #0
 800090a:	4699      	mov	r9, r3
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	e69e      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000910:	0002      	movs	r2, r0
 8000912:	4322      	orrs	r2, r4
 8000914:	4690      	mov	r8, r2
 8000916:	d11d      	bne.n	8000954 <__aeabi_ddiv+0x350>
 8000918:	2208      	movs	r2, #8
 800091a:	469b      	mov	fp, r3
 800091c:	2302      	movs	r3, #2
 800091e:	2500      	movs	r5, #0
 8000920:	4691      	mov	r9, r2
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	e693      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000926:	4651      	mov	r1, sl
 8000928:	4321      	orrs	r1, r4
 800092a:	d109      	bne.n	8000940 <__aeabi_ddiv+0x33c>
 800092c:	2302      	movs	r3, #2
 800092e:	464a      	mov	r2, r9
 8000930:	431a      	orrs	r2, r3
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <__aeabi_ddiv+0x390>)
 8000934:	4691      	mov	r9, r2
 8000936:	469c      	mov	ip, r3
 8000938:	2400      	movs	r4, #0
 800093a:	2002      	movs	r0, #2
 800093c:	44e3      	add	fp, ip
 800093e:	e6a1      	b.n	8000684 <__aeabi_ddiv+0x80>
 8000940:	2303      	movs	r3, #3
 8000942:	464a      	mov	r2, r9
 8000944:	431a      	orrs	r2, r3
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <__aeabi_ddiv+0x390>)
 8000948:	4691      	mov	r9, r2
 800094a:	469c      	mov	ip, r3
 800094c:	4651      	mov	r1, sl
 800094e:	2003      	movs	r0, #3
 8000950:	44e3      	add	fp, ip
 8000952:	e697      	b.n	8000684 <__aeabi_ddiv+0x80>
 8000954:	220c      	movs	r2, #12
 8000956:	469b      	mov	fp, r3
 8000958:	2303      	movs	r3, #3
 800095a:	46a0      	mov	r8, r4
 800095c:	4691      	mov	r9, r2
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	e675      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000962:	2304      	movs	r3, #4
 8000964:	4699      	mov	r9, r3
 8000966:	2300      	movs	r3, #0
 8000968:	469b      	mov	fp, r3
 800096a:	3301      	adds	r3, #1
 800096c:	2500      	movs	r5, #0
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	e66d      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	000007ff 	.word	0x000007ff
 8000978:	fffffc01 	.word	0xfffffc01
 800097c:	08006268 	.word	0x08006268
 8000980:	000003ff 	.word	0x000003ff
 8000984:	feffffff 	.word	0xfeffffff
 8000988:	000007fe 	.word	0x000007fe
 800098c:	000003f3 	.word	0x000003f3
 8000990:	fffffc0d 	.word	0xfffffc0d
 8000994:	fffff801 	.word	0xfffff801
 8000998:	464a      	mov	r2, r9
 800099a:	2301      	movs	r3, #1
 800099c:	431a      	orrs	r2, r3
 800099e:	4691      	mov	r9, r2
 80009a0:	2400      	movs	r4, #0
 80009a2:	2001      	movs	r0, #1
 80009a4:	e66e      	b.n	8000684 <__aeabi_ddiv+0x80>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	469a      	mov	sl, r3
 80009ac:	2500      	movs	r5, #0
 80009ae:	4b88      	ldr	r3, [pc, #544]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 80009b0:	0312      	lsls	r2, r2, #12
 80009b2:	e67e      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80009b4:	2501      	movs	r5, #1
 80009b6:	426d      	negs	r5, r5
 80009b8:	2201      	movs	r2, #1
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	2a38      	cmp	r2, #56	; 0x38
 80009be:	dd00      	ble.n	80009c2 <__aeabi_ddiv+0x3be>
 80009c0:	e674      	b.n	80006ac <__aeabi_ddiv+0xa8>
 80009c2:	2a1f      	cmp	r2, #31
 80009c4:	dc00      	bgt.n	80009c8 <__aeabi_ddiv+0x3c4>
 80009c6:	e0bd      	b.n	8000b44 <__aeabi_ddiv+0x540>
 80009c8:	211f      	movs	r1, #31
 80009ca:	4249      	negs	r1, r1
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	4641      	mov	r1, r8
 80009d0:	40d9      	lsrs	r1, r3
 80009d2:	000b      	movs	r3, r1
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_ddiv+0x3de>
 80009d8:	4641      	mov	r1, r8
 80009da:	4a7e      	ldr	r2, [pc, #504]	; (8000bd4 <__aeabi_ddiv+0x5d0>)
 80009dc:	445a      	add	r2, fp
 80009de:	4091      	lsls	r1, r2
 80009e0:	430d      	orrs	r5, r1
 80009e2:	0029      	movs	r1, r5
 80009e4:	1e4a      	subs	r2, r1, #1
 80009e6:	4191      	sbcs	r1, r2
 80009e8:	4319      	orrs	r1, r3
 80009ea:	2307      	movs	r3, #7
 80009ec:	001d      	movs	r5, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	400d      	ands	r5, r1
 80009f2:	420b      	tst	r3, r1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_ddiv+0x3f4>
 80009f6:	e0d0      	b.n	8000b9a <__aeabi_ddiv+0x596>
 80009f8:	220f      	movs	r2, #15
 80009fa:	2300      	movs	r3, #0
 80009fc:	400a      	ands	r2, r1
 80009fe:	2a04      	cmp	r2, #4
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x400>
 8000a02:	e0c7      	b.n	8000b94 <__aeabi_ddiv+0x590>
 8000a04:	1d0a      	adds	r2, r1, #4
 8000a06:	428a      	cmp	r2, r1
 8000a08:	4189      	sbcs	r1, r1
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	185b      	adds	r3, r3, r1
 8000a0e:	0011      	movs	r1, r2
 8000a10:	021a      	lsls	r2, r3, #8
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_ddiv+0x412>
 8000a14:	e0be      	b.n	8000b94 <__aeabi_ddiv+0x590>
 8000a16:	2301      	movs	r3, #1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e649      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4643      	mov	r3, r8
 8000a22:	0312      	lsls	r2, r2, #12
 8000a24:	4213      	tst	r3, r2
 8000a26:	d008      	beq.n	8000a3a <__aeabi_ddiv+0x436>
 8000a28:	4214      	tst	r4, r2
 8000a2a:	d106      	bne.n	8000a3a <__aeabi_ddiv+0x436>
 8000a2c:	4322      	orrs	r2, r4
 8000a2e:	0312      	lsls	r2, r2, #12
 8000a30:	46ba      	mov	sl, r7
 8000a32:	000d      	movs	r5, r1
 8000a34:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000a36:	0b12      	lsrs	r2, r2, #12
 8000a38:	e63b      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0312      	lsls	r2, r2, #12
 8000a40:	431a      	orrs	r2, r3
 8000a42:	0312      	lsls	r2, r2, #12
 8000a44:	46b2      	mov	sl, r6
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000a48:	0b12      	lsrs	r2, r2, #12
 8000a4a:	e632      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_ddiv+0x44e>
 8000a50:	e702      	b.n	8000858 <__aeabi_ddiv+0x254>
 8000a52:	19a6      	adds	r6, r4, r6
 8000a54:	1e6a      	subs	r2, r5, #1
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d200      	bcs.n	8000a5c <__aeabi_ddiv+0x458>
 8000a5a:	e089      	b.n	8000b70 <__aeabi_ddiv+0x56c>
 8000a5c:	4286      	cmp	r6, r0
 8000a5e:	d200      	bcs.n	8000a62 <__aeabi_ddiv+0x45e>
 8000a60:	e09f      	b.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000a62:	d100      	bne.n	8000a66 <__aeabi_ddiv+0x462>
 8000a64:	e0af      	b.n	8000bc6 <__aeabi_ddiv+0x5c2>
 8000a66:	0015      	movs	r5, r2
 8000a68:	e6f4      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000a6a:	42a9      	cmp	r1, r5
 8000a6c:	d900      	bls.n	8000a70 <__aeabi_ddiv+0x46c>
 8000a6e:	e63c      	b.n	80006ea <__aeabi_ddiv+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	07de      	lsls	r6, r3, #31
 8000a74:	0858      	lsrs	r0, r3, #1
 8000a76:	086b      	lsrs	r3, r5, #1
 8000a78:	431e      	orrs	r6, r3
 8000a7a:	07ed      	lsls	r5, r5, #31
 8000a7c:	e63c      	b.n	80006f8 <__aeabi_ddiv+0xf4>
 8000a7e:	f000 ff97 	bl	80019b0 <__clzsi2>
 8000a82:	0001      	movs	r1, r0
 8000a84:	0002      	movs	r2, r0
 8000a86:	3115      	adds	r1, #21
 8000a88:	3220      	adds	r2, #32
 8000a8a:	291c      	cmp	r1, #28
 8000a8c:	dc00      	bgt.n	8000a90 <__aeabi_ddiv+0x48c>
 8000a8e:	e72c      	b.n	80008ea <__aeabi_ddiv+0x2e6>
 8000a90:	464b      	mov	r3, r9
 8000a92:	3808      	subs	r0, #8
 8000a94:	4083      	lsls	r3, r0
 8000a96:	2500      	movs	r5, #0
 8000a98:	4698      	mov	r8, r3
 8000a9a:	e732      	b.n	8000902 <__aeabi_ddiv+0x2fe>
 8000a9c:	f000 ff88 	bl	80019b0 <__clzsi2>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	3215      	adds	r2, #21
 8000aa6:	3020      	adds	r0, #32
 8000aa8:	2a1c      	cmp	r2, #28
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_ddiv+0x4aa>
 8000aac:	e6ff      	b.n	80008ae <__aeabi_ddiv+0x2aa>
 8000aae:	4654      	mov	r4, sl
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	409c      	lsls	r4, r3
 8000ab6:	e705      	b.n	80008c4 <__aeabi_ddiv+0x2c0>
 8000ab8:	1936      	adds	r6, r6, r4
 8000aba:	3b01      	subs	r3, #1
 8000abc:	42b4      	cmp	r4, r6
 8000abe:	d900      	bls.n	8000ac2 <__aeabi_ddiv+0x4be>
 8000ac0:	e6a6      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ac2:	42b2      	cmp	r2, r6
 8000ac4:	d800      	bhi.n	8000ac8 <__aeabi_ddiv+0x4c4>
 8000ac6:	e6a3      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ac8:	1e83      	subs	r3, r0, #2
 8000aca:	1936      	adds	r6, r6, r4
 8000acc:	e6a0      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ace:	1909      	adds	r1, r1, r4
 8000ad0:	3d01      	subs	r5, #1
 8000ad2:	428c      	cmp	r4, r1
 8000ad4:	d900      	bls.n	8000ad8 <__aeabi_ddiv+0x4d4>
 8000ad6:	e68d      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ad8:	428a      	cmp	r2, r1
 8000ada:	d800      	bhi.n	8000ade <__aeabi_ddiv+0x4da>
 8000adc:	e68a      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ade:	1e85      	subs	r5, r0, #2
 8000ae0:	1909      	adds	r1, r1, r4
 8000ae2:	e687      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	402a      	ands	r2, r5
 8000ae8:	2a04      	cmp	r2, #4
 8000aea:	d100      	bne.n	8000aee <__aeabi_ddiv+0x4ea>
 8000aec:	e6bc      	b.n	8000868 <__aeabi_ddiv+0x264>
 8000aee:	1d29      	adds	r1, r5, #4
 8000af0:	42a9      	cmp	r1, r5
 8000af2:	41ad      	sbcs	r5, r5
 8000af4:	426d      	negs	r5, r5
 8000af6:	08c9      	lsrs	r1, r1, #3
 8000af8:	44a8      	add	r8, r5
 8000afa:	e6b6      	b.n	800086a <__aeabi_ddiv+0x266>
 8000afc:	42af      	cmp	r7, r5
 8000afe:	d900      	bls.n	8000b02 <__aeabi_ddiv+0x4fe>
 8000b00:	e662      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b02:	4281      	cmp	r1, r0
 8000b04:	d804      	bhi.n	8000b10 <__aeabi_ddiv+0x50c>
 8000b06:	d000      	beq.n	8000b0a <__aeabi_ddiv+0x506>
 8000b08:	e65e      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b0a:	42ae      	cmp	r6, r5
 8000b0c:	d800      	bhi.n	8000b10 <__aeabi_ddiv+0x50c>
 8000b0e:	e65b      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b10:	2302      	movs	r3, #2
 8000b12:	425b      	negs	r3, r3
 8000b14:	469c      	mov	ip, r3
 8000b16:	9b00      	ldr	r3, [sp, #0]
 8000b18:	44e0      	add	r8, ip
 8000b1a:	469c      	mov	ip, r3
 8000b1c:	4465      	add	r5, ip
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	419b      	sbcs	r3, r3
 8000b22:	425b      	negs	r3, r3
 8000b24:	191b      	adds	r3, r3, r4
 8000b26:	18c0      	adds	r0, r0, r3
 8000b28:	e64f      	b.n	80007ca <__aeabi_ddiv+0x1c6>
 8000b2a:	42b2      	cmp	r2, r6
 8000b2c:	d800      	bhi.n	8000b30 <__aeabi_ddiv+0x52c>
 8000b2e:	e612      	b.n	8000756 <__aeabi_ddiv+0x152>
 8000b30:	1e83      	subs	r3, r0, #2
 8000b32:	1936      	adds	r6, r6, r4
 8000b34:	e60f      	b.n	8000756 <__aeabi_ddiv+0x152>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	d800      	bhi.n	8000b3c <__aeabi_ddiv+0x538>
 8000b3a:	e5fa      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b3c:	1e83      	subs	r3, r0, #2
 8000b3e:	4698      	mov	r8, r3
 8000b40:	1909      	adds	r1, r1, r4
 8000b42:	e5f6      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <__aeabi_ddiv+0x5d4>)
 8000b46:	0028      	movs	r0, r5
 8000b48:	445b      	add	r3, fp
 8000b4a:	4641      	mov	r1, r8
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	4099      	lsls	r1, r3
 8000b50:	40d0      	lsrs	r0, r2
 8000b52:	1e6b      	subs	r3, r5, #1
 8000b54:	419d      	sbcs	r5, r3
 8000b56:	4643      	mov	r3, r8
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	4329      	orrs	r1, r5
 8000b5c:	40d3      	lsrs	r3, r2
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x560>
 8000b62:	e755      	b.n	8000a10 <__aeabi_ddiv+0x40c>
 8000b64:	220f      	movs	r2, #15
 8000b66:	400a      	ands	r2, r1
 8000b68:	2a04      	cmp	r2, #4
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_ddiv+0x56a>
 8000b6c:	e74a      	b.n	8000a04 <__aeabi_ddiv+0x400>
 8000b6e:	e74f      	b.n	8000a10 <__aeabi_ddiv+0x40c>
 8000b70:	0015      	movs	r5, r2
 8000b72:	4286      	cmp	r6, r0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_ddiv+0x574>
 8000b76:	e66d      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000b78:	9a00      	ldr	r2, [sp, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_ddiv+0x57c>
 8000b7e:	e669      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000b80:	e66a      	b.n	8000858 <__aeabi_ddiv+0x254>
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <__aeabi_ddiv+0x5d8>)
 8000b84:	445b      	add	r3, fp
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dc00      	bgt.n	8000b8c <__aeabi_ddiv+0x588>
 8000b8a:	e713      	b.n	80009b4 <__aeabi_ddiv+0x3b0>
 8000b8c:	2501      	movs	r5, #1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	44a8      	add	r8, r5
 8000b92:	e66a      	b.n	800086a <__aeabi_ddiv+0x266>
 8000b94:	075d      	lsls	r5, r3, #29
 8000b96:	025b      	lsls	r3, r3, #9
 8000b98:	0b1a      	lsrs	r2, r3, #12
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	430d      	orrs	r5, r1
 8000ba0:	e587      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000ba2:	9900      	ldr	r1, [sp, #0]
 8000ba4:	3d02      	subs	r5, #2
 8000ba6:	004a      	lsls	r2, r1, #1
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	41bf      	sbcs	r7, r7
 8000bac:	427f      	negs	r7, r7
 8000bae:	193f      	adds	r7, r7, r4
 8000bb0:	19f6      	adds	r6, r6, r7
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	e7dd      	b.n	8000b72 <__aeabi_ddiv+0x56e>
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	4643      	mov	r3, r8
 8000bba:	0312      	lsls	r2, r2, #12
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	0312      	lsls	r2, r2, #12
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000bc2:	0b12      	lsrs	r2, r2, #12
 8000bc4:	e575      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000bc6:	9900      	ldr	r1, [sp, #0]
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d3ea      	bcc.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000bcc:	0015      	movs	r5, r2
 8000bce:	e7d3      	b.n	8000b78 <__aeabi_ddiv+0x574>
 8000bd0:	000007ff 	.word	0x000007ff
 8000bd4:	0000043e 	.word	0x0000043e
 8000bd8:	0000041e 	.word	0x0000041e
 8000bdc:	000003ff 	.word	0x000003ff

08000be0 <__aeabi_dmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	4645      	mov	r5, r8
 8000be4:	46de      	mov	lr, fp
 8000be6:	4657      	mov	r7, sl
 8000be8:	464e      	mov	r6, r9
 8000bea:	b5e0      	push	{r5, r6, r7, lr}
 8000bec:	001f      	movs	r7, r3
 8000bee:	030b      	lsls	r3, r1, #12
 8000bf0:	0b1b      	lsrs	r3, r3, #12
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	004d      	lsls	r5, r1, #1
 8000bf6:	0fcb      	lsrs	r3, r1, #31
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4691      	mov	r9, r2
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	b087      	sub	sp, #28
 8000c00:	0d6d      	lsrs	r5, r5, #21
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dmul+0x26>
 8000c04:	e1cd      	b.n	8000fa2 <__aeabi_dmul+0x3c2>
 8000c06:	4bce      	ldr	r3, [pc, #824]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c08:	429d      	cmp	r5, r3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dmul+0x2e>
 8000c0c:	e1e9      	b.n	8000fe2 <__aeabi_dmul+0x402>
 8000c0e:	465a      	mov	r2, fp
 8000c10:	0f43      	lsrs	r3, r0, #29
 8000c12:	00d2      	lsls	r2, r2, #3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0412      	lsls	r2, r2, #16
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	00c3      	lsls	r3, r0, #3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	4bc8      	ldr	r3, [pc, #800]	; (8000f44 <__aeabi_dmul+0x364>)
 8000c22:	4693      	mov	fp, r2
 8000c24:	469c      	mov	ip, r3
 8000c26:	2300      	movs	r3, #0
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4465      	add	r5, ip
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	033c      	lsls	r4, r7, #12
 8000c30:	007b      	lsls	r3, r7, #1
 8000c32:	4648      	mov	r0, r9
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	0fff      	lsrs	r7, r7, #31
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dmul+0x60>
 8000c3e:	e189      	b.n	8000f54 <__aeabi_dmul+0x374>
 8000c40:	4abf      	ldr	r2, [pc, #764]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d019      	beq.n	8000c7a <__aeabi_dmul+0x9a>
 8000c46:	0f42      	lsrs	r2, r0, #29
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	4322      	orrs	r2, r4
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	0424      	lsls	r4, r4, #16
 8000c50:	4314      	orrs	r4, r2
 8000c52:	4abc      	ldr	r2, [pc, #752]	; (8000f44 <__aeabi_dmul+0x364>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4694      	mov	ip, r2
 8000c58:	4642      	mov	r2, r8
 8000c5a:	4463      	add	r3, ip
 8000c5c:	195b      	adds	r3, r3, r5
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	9b01      	ldr	r3, [sp, #4]
 8000c62:	407a      	eors	r2, r7
 8000c64:	3301      	adds	r3, #1
 8000c66:	00c0      	lsls	r0, r0, #3
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2e0a      	cmp	r6, #10
 8000c6e:	dd1c      	ble.n	8000caa <__aeabi_dmul+0xca>
 8000c70:	003a      	movs	r2, r7
 8000c72:	2e0b      	cmp	r6, #11
 8000c74:	d05e      	beq.n	8000d34 <__aeabi_dmul+0x154>
 8000c76:	4647      	mov	r7, r8
 8000c78:	e056      	b.n	8000d28 <__aeabi_dmul+0x148>
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c7e:	4321      	orrs	r1, r4
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d12a      	bne.n	8000cde <__aeabi_dmul+0xfe>
 8000c88:	2080      	movs	r0, #128	; 0x80
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	0100      	lsls	r0, r0, #4
 8000c8e:	002b      	movs	r3, r5
 8000c90:	4684      	mov	ip, r0
 8000c92:	4316      	orrs	r6, r2
 8000c94:	4642      	mov	r2, r8
 8000c96:	4463      	add	r3, ip
 8000c98:	407a      	eors	r2, r7
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	2e0a      	cmp	r6, #10
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dmul+0xc4>
 8000ca2:	e231      	b.n	8001108 <__aeabi_dmul+0x528>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	2e02      	cmp	r6, #2
 8000cac:	dc26      	bgt.n	8000cfc <__aeabi_dmul+0x11c>
 8000cae:	3e01      	subs	r6, #1
 8000cb0:	2e01      	cmp	r6, #1
 8000cb2:	d852      	bhi.n	8000d5a <__aeabi_dmul+0x17a>
 8000cb4:	2902      	cmp	r1, #2
 8000cb6:	d04c      	beq.n	8000d52 <__aeabi_dmul+0x172>
 8000cb8:	2901      	cmp	r1, #1
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dmul+0xde>
 8000cbc:	e118      	b.n	8000ef0 <__aeabi_dmul+0x310>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	07d2      	lsls	r2, r2, #31
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	0028      	movs	r0, r5
 8000cce:	0019      	movs	r1, r3
 8000cd0:	b007      	add	sp, #28
 8000cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd4:	46bb      	mov	fp, r7
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	46a9      	mov	r9, r5
 8000cda:	46a0      	mov	r8, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	0109      	lsls	r1, r1, #4
 8000ce4:	002b      	movs	r3, r5
 8000ce6:	468c      	mov	ip, r1
 8000ce8:	4316      	orrs	r6, r2
 8000cea:	4642      	mov	r2, r8
 8000cec:	4463      	add	r3, ip
 8000cee:	407a      	eors	r2, r7
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2e0a      	cmp	r6, #10
 8000cf6:	dd00      	ble.n	8000cfa <__aeabi_dmul+0x11a>
 8000cf8:	e228      	b.n	800114c <__aeabi_dmul+0x56c>
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	40b5      	lsls	r5, r6
 8000d00:	46ac      	mov	ip, r5
 8000d02:	26a6      	movs	r6, #166	; 0xa6
 8000d04:	4663      	mov	r3, ip
 8000d06:	00f6      	lsls	r6, r6, #3
 8000d08:	4035      	ands	r5, r6
 8000d0a:	4233      	tst	r3, r6
 8000d0c:	d10b      	bne.n	8000d26 <__aeabi_dmul+0x146>
 8000d0e:	2690      	movs	r6, #144	; 0x90
 8000d10:	00b6      	lsls	r6, r6, #2
 8000d12:	4233      	tst	r3, r6
 8000d14:	d118      	bne.n	8000d48 <__aeabi_dmul+0x168>
 8000d16:	3eb9      	subs	r6, #185	; 0xb9
 8000d18:	3eff      	subs	r6, #255	; 0xff
 8000d1a:	421e      	tst	r6, r3
 8000d1c:	d01d      	beq.n	8000d5a <__aeabi_dmul+0x17a>
 8000d1e:	46a3      	mov	fp, r4
 8000d20:	4682      	mov	sl, r0
 8000d22:	9100      	str	r1, [sp, #0]
 8000d24:	e000      	b.n	8000d28 <__aeabi_dmul+0x148>
 8000d26:	0017      	movs	r7, r2
 8000d28:	9900      	ldr	r1, [sp, #0]
 8000d2a:	003a      	movs	r2, r7
 8000d2c:	2902      	cmp	r1, #2
 8000d2e:	d010      	beq.n	8000d52 <__aeabi_dmul+0x172>
 8000d30:	465c      	mov	r4, fp
 8000d32:	4650      	mov	r0, sl
 8000d34:	2903      	cmp	r1, #3
 8000d36:	d1bf      	bne.n	8000cb8 <__aeabi_dmul+0xd8>
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	431c      	orrs	r4, r3
 8000d3e:	0324      	lsls	r4, r4, #12
 8000d40:	0005      	movs	r5, r0
 8000d42:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	e7bd      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d48:	2480      	movs	r4, #128	; 0x80
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d4e:	0324      	lsls	r4, r4, #12
 8000d50:	e7b8      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d52:	2400      	movs	r4, #0
 8000d54:	2500      	movs	r5, #0
 8000d56:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d58:	e7b4      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	041e      	lsls	r6, r3, #16
 8000d5e:	0c36      	lsrs	r6, r6, #16
 8000d60:	0c1f      	lsrs	r7, r3, #16
 8000d62:	0033      	movs	r3, r6
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	0400      	lsls	r0, r0, #16
 8000d68:	0c00      	lsrs	r0, r0, #16
 8000d6a:	4343      	muls	r3, r0
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	0003      	movs	r3, r0
 8000d70:	437b      	muls	r3, r7
 8000d72:	4699      	mov	r9, r3
 8000d74:	0033      	movs	r3, r6
 8000d76:	434b      	muls	r3, r1
 8000d78:	469c      	mov	ip, r3
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	000d      	movs	r5, r1
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	469a      	mov	sl, r3
 8000d82:	437d      	muls	r5, r7
 8000d84:	44cc      	add	ip, r9
 8000d86:	44d4      	add	ip, sl
 8000d88:	9500      	str	r5, [sp, #0]
 8000d8a:	45e1      	cmp	r9, ip
 8000d8c:	d904      	bls.n	8000d98 <__aeabi_dmul+0x1b8>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	4699      	mov	r9, r3
 8000d94:	444d      	add	r5, r9
 8000d96:	9500      	str	r5, [sp, #0]
 8000d98:	4663      	mov	r3, ip
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	001d      	movs	r5, r3
 8000d9e:	4663      	mov	r3, ip
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	469c      	mov	ip, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	4698      	mov	r8, r3
 8000dac:	4663      	mov	r3, ip
 8000dae:	4443      	add	r3, r8
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	0c23      	lsrs	r3, r4, #16
 8000db4:	4698      	mov	r8, r3
 8000db6:	0033      	movs	r3, r6
 8000db8:	0424      	lsls	r4, r4, #16
 8000dba:	0c24      	lsrs	r4, r4, #16
 8000dbc:	4363      	muls	r3, r4
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	437b      	muls	r3, r7
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	435e      	muls	r6, r3
 8000dca:	435f      	muls	r7, r3
 8000dcc:	444e      	add	r6, r9
 8000dce:	4663      	mov	r3, ip
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	0c1e      	lsrs	r6, r3, #16
 8000dd4:	4456      	add	r6, sl
 8000dd6:	45b1      	cmp	r9, r6
 8000dd8:	d903      	bls.n	8000de2 <__aeabi_dmul+0x202>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	4699      	mov	r9, r3
 8000de0:	444f      	add	r7, r9
 8000de2:	0c33      	lsrs	r3, r6, #16
 8000de4:	4699      	mov	r9, r3
 8000de6:	003b      	movs	r3, r7
 8000de8:	444b      	add	r3, r9
 8000dea:	9305      	str	r3, [sp, #20]
 8000dec:	4663      	mov	r3, ip
 8000dee:	46ac      	mov	ip, r5
 8000df0:	041f      	lsls	r7, r3, #16
 8000df2:	0c3f      	lsrs	r7, r7, #16
 8000df4:	0436      	lsls	r6, r6, #16
 8000df6:	19f6      	adds	r6, r6, r7
 8000df8:	44b4      	add	ip, r6
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	465b      	mov	r3, fp
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	469c      	mov	ip, r3
 8000e04:	465b      	mov	r3, fp
 8000e06:	041f      	lsls	r7, r3, #16
 8000e08:	0c3f      	lsrs	r7, r7, #16
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	4343      	muls	r3, r0
 8000e0e:	4699      	mov	r9, r3
 8000e10:	4663      	mov	r3, ip
 8000e12:	4343      	muls	r3, r0
 8000e14:	469a      	mov	sl, r3
 8000e16:	464b      	mov	r3, r9
 8000e18:	4660      	mov	r0, ip
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	4348      	muls	r0, r1
 8000e20:	4379      	muls	r1, r7
 8000e22:	4451      	add	r1, sl
 8000e24:	4459      	add	r1, fp
 8000e26:	458a      	cmp	sl, r1
 8000e28:	d903      	bls.n	8000e32 <__aeabi_dmul+0x252>
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	469a      	mov	sl, r3
 8000e30:	4450      	add	r0, sl
 8000e32:	0c0b      	lsrs	r3, r1, #16
 8000e34:	469a      	mov	sl, r3
 8000e36:	464b      	mov	r3, r9
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	003b      	movs	r3, r7
 8000e40:	4363      	muls	r3, r4
 8000e42:	0409      	lsls	r1, r1, #16
 8000e44:	4645      	mov	r5, r8
 8000e46:	4449      	add	r1, r9
 8000e48:	4699      	mov	r9, r3
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	435c      	muls	r4, r3
 8000e4e:	436b      	muls	r3, r5
 8000e50:	469c      	mov	ip, r3
 8000e52:	464b      	mov	r3, r9
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	4698      	mov	r8, r3
 8000e58:	436f      	muls	r7, r5
 8000e5a:	193f      	adds	r7, r7, r4
 8000e5c:	4447      	add	r7, r8
 8000e5e:	4450      	add	r0, sl
 8000e60:	42bc      	cmp	r4, r7
 8000e62:	d903      	bls.n	8000e6c <__aeabi_dmul+0x28c>
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	4698      	mov	r8, r3
 8000e6a:	44c4      	add	ip, r8
 8000e6c:	9b04      	ldr	r3, [sp, #16]
 8000e6e:	9d00      	ldr	r5, [sp, #0]
 8000e70:	4698      	mov	r8, r3
 8000e72:	4445      	add	r5, r8
 8000e74:	42b5      	cmp	r5, r6
 8000e76:	41b6      	sbcs	r6, r6
 8000e78:	4273      	negs	r3, r6
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	041e      	lsls	r6, r3, #16
 8000e80:	9b05      	ldr	r3, [sp, #20]
 8000e82:	043c      	lsls	r4, r7, #16
 8000e84:	4699      	mov	r9, r3
 8000e86:	0c36      	lsrs	r6, r6, #16
 8000e88:	19a4      	adds	r4, r4, r6
 8000e8a:	444c      	add	r4, r9
 8000e8c:	46a1      	mov	r9, r4
 8000e8e:	4683      	mov	fp, r0
 8000e90:	186e      	adds	r6, r5, r1
 8000e92:	44c1      	add	r9, r8
 8000e94:	428e      	cmp	r6, r1
 8000e96:	4189      	sbcs	r1, r1
 8000e98:	44cb      	add	fp, r9
 8000e9a:	465d      	mov	r5, fp
 8000e9c:	4249      	negs	r1, r1
 8000e9e:	186d      	adds	r5, r5, r1
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	41a4      	sbcs	r4, r4
 8000ea4:	45c1      	cmp	r9, r8
 8000ea6:	419b      	sbcs	r3, r3
 8000ea8:	4583      	cmp	fp, r0
 8000eaa:	4180      	sbcs	r0, r0
 8000eac:	428d      	cmp	r5, r1
 8000eae:	4189      	sbcs	r1, r1
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	4264      	negs	r4, r4
 8000eb4:	431c      	orrs	r4, r3
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	9b03      	ldr	r3, [sp, #12]
 8000eba:	4249      	negs	r1, r1
 8000ebc:	4301      	orrs	r1, r0
 8000ebe:	0270      	lsls	r0, r6, #9
 8000ec0:	0c3f      	lsrs	r7, r7, #16
 8000ec2:	4318      	orrs	r0, r3
 8000ec4:	19e4      	adds	r4, r4, r7
 8000ec6:	1e47      	subs	r7, r0, #1
 8000ec8:	41b8      	sbcs	r0, r7
 8000eca:	1864      	adds	r4, r4, r1
 8000ecc:	4464      	add	r4, ip
 8000ece:	0df6      	lsrs	r6, r6, #23
 8000ed0:	0261      	lsls	r1, r4, #9
 8000ed2:	4330      	orrs	r0, r6
 8000ed4:	0dec      	lsrs	r4, r5, #23
 8000ed6:	026e      	lsls	r6, r5, #9
 8000ed8:	430c      	orrs	r4, r1
 8000eda:	4330      	orrs	r0, r6
 8000edc:	01c9      	lsls	r1, r1, #7
 8000ede:	d400      	bmi.n	8000ee2 <__aeabi_dmul+0x302>
 8000ee0:	e0f1      	b.n	80010c6 <__aeabi_dmul+0x4e6>
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	0843      	lsrs	r3, r0, #1
 8000ee6:	4001      	ands	r1, r0
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	07e0      	lsls	r0, r4, #31
 8000eec:	4318      	orrs	r0, r3
 8000eee:	0864      	lsrs	r4, r4, #1
 8000ef0:	4915      	ldr	r1, [pc, #84]	; (8000f48 <__aeabi_dmul+0x368>)
 8000ef2:	9b02      	ldr	r3, [sp, #8]
 8000ef4:	468c      	mov	ip, r1
 8000ef6:	4463      	add	r3, ip
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dmul+0x31e>
 8000efc:	e097      	b.n	800102e <__aeabi_dmul+0x44e>
 8000efe:	0741      	lsls	r1, r0, #29
 8000f00:	d009      	beq.n	8000f16 <__aeabi_dmul+0x336>
 8000f02:	210f      	movs	r1, #15
 8000f04:	4001      	ands	r1, r0
 8000f06:	2904      	cmp	r1, #4
 8000f08:	d005      	beq.n	8000f16 <__aeabi_dmul+0x336>
 8000f0a:	1d01      	adds	r1, r0, #4
 8000f0c:	4281      	cmp	r1, r0
 8000f0e:	4180      	sbcs	r0, r0
 8000f10:	4240      	negs	r0, r0
 8000f12:	1824      	adds	r4, r4, r0
 8000f14:	0008      	movs	r0, r1
 8000f16:	01e1      	lsls	r1, r4, #7
 8000f18:	d506      	bpl.n	8000f28 <__aeabi_dmul+0x348>
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	00c9      	lsls	r1, r1, #3
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <__aeabi_dmul+0x36c>)
 8000f22:	401c      	ands	r4, r3
 8000f24:	9b02      	ldr	r3, [sp, #8]
 8000f26:	4463      	add	r3, ip
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <__aeabi_dmul+0x370>)
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dmul+0x350>
 8000f2e:	e710      	b.n	8000d52 <__aeabi_dmul+0x172>
 8000f30:	0761      	lsls	r1, r4, #29
 8000f32:	08c5      	lsrs	r5, r0, #3
 8000f34:	0264      	lsls	r4, r4, #9
 8000f36:	055b      	lsls	r3, r3, #21
 8000f38:	430d      	orrs	r5, r1
 8000f3a:	0b24      	lsrs	r4, r4, #12
 8000f3c:	0d5b      	lsrs	r3, r3, #21
 8000f3e:	e6c1      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000f40:	000007ff 	.word	0x000007ff
 8000f44:	fffffc01 	.word	0xfffffc01
 8000f48:	000003ff 	.word	0x000003ff
 8000f4c:	feffffff 	.word	0xfeffffff
 8000f50:	000007fe 	.word	0x000007fe
 8000f54:	464b      	mov	r3, r9
 8000f56:	4323      	orrs	r3, r4
 8000f58:	d059      	beq.n	800100e <__aeabi_dmul+0x42e>
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dmul+0x380>
 8000f5e:	e0a3      	b.n	80010a8 <__aeabi_dmul+0x4c8>
 8000f60:	0020      	movs	r0, r4
 8000f62:	f000 fd25 	bl	80019b0 <__clzsi2>
 8000f66:	0001      	movs	r1, r0
 8000f68:	0003      	movs	r3, r0
 8000f6a:	390b      	subs	r1, #11
 8000f6c:	221d      	movs	r2, #29
 8000f6e:	1a52      	subs	r2, r2, r1
 8000f70:	4649      	mov	r1, r9
 8000f72:	0018      	movs	r0, r3
 8000f74:	40d1      	lsrs	r1, r2
 8000f76:	464a      	mov	r2, r9
 8000f78:	3808      	subs	r0, #8
 8000f7a:	4082      	lsls	r2, r0
 8000f7c:	4084      	lsls	r4, r0
 8000f7e:	0010      	movs	r0, r2
 8000f80:	430c      	orrs	r4, r1
 8000f82:	4a74      	ldr	r2, [pc, #464]	; (8001154 <__aeabi_dmul+0x574>)
 8000f84:	1aeb      	subs	r3, r5, r3
 8000f86:	4694      	mov	ip, r2
 8000f88:	4642      	mov	r2, r8
 8000f8a:	4463      	add	r3, ip
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	9b01      	ldr	r3, [sp, #4]
 8000f90:	407a      	eors	r2, r7
 8000f92:	3301      	adds	r3, #1
 8000f94:	2100      	movs	r1, #0
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2e0a      	cmp	r6, #10
 8000f9c:	dd00      	ble.n	8000fa0 <__aeabi_dmul+0x3c0>
 8000f9e:	e667      	b.n	8000c70 <__aeabi_dmul+0x90>
 8000fa0:	e683      	b.n	8000caa <__aeabi_dmul+0xca>
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	d02a      	beq.n	8001000 <__aeabi_dmul+0x420>
 8000faa:	465b      	mov	r3, fp
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d06d      	beq.n	800108c <__aeabi_dmul+0x4ac>
 8000fb0:	4658      	mov	r0, fp
 8000fb2:	f000 fcfd 	bl	80019b0 <__clzsi2>
 8000fb6:	0001      	movs	r1, r0
 8000fb8:	0003      	movs	r3, r0
 8000fba:	390b      	subs	r1, #11
 8000fbc:	221d      	movs	r2, #29
 8000fbe:	1a52      	subs	r2, r2, r1
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	465d      	mov	r5, fp
 8000fc6:	40d1      	lsrs	r1, r2
 8000fc8:	3808      	subs	r0, #8
 8000fca:	4085      	lsls	r5, r0
 8000fcc:	000a      	movs	r2, r1
 8000fce:	4084      	lsls	r4, r0
 8000fd0:	432a      	orrs	r2, r5
 8000fd2:	4693      	mov	fp, r2
 8000fd4:	46a2      	mov	sl, r4
 8000fd6:	4d5f      	ldr	r5, [pc, #380]	; (8001154 <__aeabi_dmul+0x574>)
 8000fd8:	2600      	movs	r6, #0
 8000fda:	1aed      	subs	r5, r5, r3
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	e625      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8000fe2:	465b      	mov	r3, fp
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	d105      	bne.n	8000ff6 <__aeabi_dmul+0x416>
 8000fea:	2300      	movs	r3, #0
 8000fec:	469b      	mov	fp, r3
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2608      	movs	r6, #8
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e61b      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	4682      	mov	sl, r0
 8000ffa:	260c      	movs	r6, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	e616      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8001000:	2300      	movs	r3, #0
 8001002:	469b      	mov	fp, r3
 8001004:	3301      	adds	r3, #1
 8001006:	2604      	movs	r6, #4
 8001008:	2500      	movs	r5, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	e60f      	b.n	8000c2e <__aeabi_dmul+0x4e>
 800100e:	4642      	mov	r2, r8
 8001010:	3301      	adds	r3, #1
 8001012:	9501      	str	r5, [sp, #4]
 8001014:	431e      	orrs	r6, r3
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	407a      	eors	r2, r7
 800101a:	3301      	adds	r3, #1
 800101c:	2400      	movs	r4, #0
 800101e:	2000      	movs	r0, #0
 8001020:	2101      	movs	r1, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2e0a      	cmp	r6, #10
 8001028:	dd00      	ble.n	800102c <__aeabi_dmul+0x44c>
 800102a:	e621      	b.n	8000c70 <__aeabi_dmul+0x90>
 800102c:	e63d      	b.n	8000caa <__aeabi_dmul+0xca>
 800102e:	2101      	movs	r1, #1
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	2938      	cmp	r1, #56	; 0x38
 8001034:	dd00      	ble.n	8001038 <__aeabi_dmul+0x458>
 8001036:	e642      	b.n	8000cbe <__aeabi_dmul+0xde>
 8001038:	291f      	cmp	r1, #31
 800103a:	dd47      	ble.n	80010cc <__aeabi_dmul+0x4ec>
 800103c:	261f      	movs	r6, #31
 800103e:	0025      	movs	r5, r4
 8001040:	4276      	negs	r6, r6
 8001042:	1af3      	subs	r3, r6, r3
 8001044:	40dd      	lsrs	r5, r3
 8001046:	002b      	movs	r3, r5
 8001048:	2920      	cmp	r1, #32
 800104a:	d005      	beq.n	8001058 <__aeabi_dmul+0x478>
 800104c:	4942      	ldr	r1, [pc, #264]	; (8001158 <__aeabi_dmul+0x578>)
 800104e:	9d02      	ldr	r5, [sp, #8]
 8001050:	468c      	mov	ip, r1
 8001052:	4465      	add	r5, ip
 8001054:	40ac      	lsls	r4, r5
 8001056:	4320      	orrs	r0, r4
 8001058:	1e41      	subs	r1, r0, #1
 800105a:	4188      	sbcs	r0, r1
 800105c:	4318      	orrs	r0, r3
 800105e:	2307      	movs	r3, #7
 8001060:	001d      	movs	r5, r3
 8001062:	2400      	movs	r4, #0
 8001064:	4005      	ands	r5, r0
 8001066:	4203      	tst	r3, r0
 8001068:	d04a      	beq.n	8001100 <__aeabi_dmul+0x520>
 800106a:	230f      	movs	r3, #15
 800106c:	2400      	movs	r4, #0
 800106e:	4003      	ands	r3, r0
 8001070:	2b04      	cmp	r3, #4
 8001072:	d042      	beq.n	80010fa <__aeabi_dmul+0x51a>
 8001074:	1d03      	adds	r3, r0, #4
 8001076:	4283      	cmp	r3, r0
 8001078:	4180      	sbcs	r0, r0
 800107a:	4240      	negs	r0, r0
 800107c:	1824      	adds	r4, r4, r0
 800107e:	0018      	movs	r0, r3
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	d53a      	bpl.n	80010fa <__aeabi_dmul+0x51a>
 8001084:	2301      	movs	r3, #1
 8001086:	2400      	movs	r4, #0
 8001088:	2500      	movs	r5, #0
 800108a:	e61b      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800108c:	f000 fc90 	bl	80019b0 <__clzsi2>
 8001090:	0001      	movs	r1, r0
 8001092:	0003      	movs	r3, r0
 8001094:	3115      	adds	r1, #21
 8001096:	3320      	adds	r3, #32
 8001098:	291c      	cmp	r1, #28
 800109a:	dd8f      	ble.n	8000fbc <__aeabi_dmul+0x3dc>
 800109c:	3808      	subs	r0, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	4084      	lsls	r4, r0
 80010a2:	4692      	mov	sl, r2
 80010a4:	46a3      	mov	fp, r4
 80010a6:	e796      	b.n	8000fd6 <__aeabi_dmul+0x3f6>
 80010a8:	f000 fc82 	bl	80019b0 <__clzsi2>
 80010ac:	0001      	movs	r1, r0
 80010ae:	0003      	movs	r3, r0
 80010b0:	3115      	adds	r1, #21
 80010b2:	3320      	adds	r3, #32
 80010b4:	291c      	cmp	r1, #28
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dmul+0x4da>
 80010b8:	e758      	b.n	8000f6c <__aeabi_dmul+0x38c>
 80010ba:	0002      	movs	r2, r0
 80010bc:	464c      	mov	r4, r9
 80010be:	3a08      	subs	r2, #8
 80010c0:	2000      	movs	r0, #0
 80010c2:	4094      	lsls	r4, r2
 80010c4:	e75d      	b.n	8000f82 <__aeabi_dmul+0x3a2>
 80010c6:	9b01      	ldr	r3, [sp, #4]
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	e711      	b.n	8000ef0 <__aeabi_dmul+0x310>
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <__aeabi_dmul+0x57c>)
 80010ce:	0026      	movs	r6, r4
 80010d0:	469c      	mov	ip, r3
 80010d2:	0003      	movs	r3, r0
 80010d4:	9d02      	ldr	r5, [sp, #8]
 80010d6:	40cb      	lsrs	r3, r1
 80010d8:	4465      	add	r5, ip
 80010da:	40ae      	lsls	r6, r5
 80010dc:	431e      	orrs	r6, r3
 80010de:	0003      	movs	r3, r0
 80010e0:	40ab      	lsls	r3, r5
 80010e2:	1e58      	subs	r0, r3, #1
 80010e4:	4183      	sbcs	r3, r0
 80010e6:	0030      	movs	r0, r6
 80010e8:	4318      	orrs	r0, r3
 80010ea:	40cc      	lsrs	r4, r1
 80010ec:	0743      	lsls	r3, r0, #29
 80010ee:	d0c7      	beq.n	8001080 <__aeabi_dmul+0x4a0>
 80010f0:	230f      	movs	r3, #15
 80010f2:	4003      	ands	r3, r0
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d1bd      	bne.n	8001074 <__aeabi_dmul+0x494>
 80010f8:	e7c2      	b.n	8001080 <__aeabi_dmul+0x4a0>
 80010fa:	0765      	lsls	r5, r4, #29
 80010fc:	0264      	lsls	r4, r4, #9
 80010fe:	0b24      	lsrs	r4, r4, #12
 8001100:	08c0      	lsrs	r0, r0, #3
 8001102:	2300      	movs	r3, #0
 8001104:	4305      	orrs	r5, r0
 8001106:	e5dd      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8001108:	2500      	movs	r5, #0
 800110a:	2302      	movs	r3, #2
 800110c:	2e0f      	cmp	r6, #15
 800110e:	d10c      	bne.n	800112a <__aeabi_dmul+0x54a>
 8001110:	2480      	movs	r4, #128	; 0x80
 8001112:	465b      	mov	r3, fp
 8001114:	0324      	lsls	r4, r4, #12
 8001116:	4223      	tst	r3, r4
 8001118:	d00e      	beq.n	8001138 <__aeabi_dmul+0x558>
 800111a:	4221      	tst	r1, r4
 800111c:	d10c      	bne.n	8001138 <__aeabi_dmul+0x558>
 800111e:	430c      	orrs	r4, r1
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	003a      	movs	r2, r7
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <__aeabi_dmul+0x580>)
 8001126:	0b24      	lsrs	r4, r4, #12
 8001128:	e5cc      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800112a:	2e0b      	cmp	r6, #11
 800112c:	d000      	beq.n	8001130 <__aeabi_dmul+0x550>
 800112e:	e5a2      	b.n	8000c76 <__aeabi_dmul+0x96>
 8001130:	468b      	mov	fp, r1
 8001132:	46aa      	mov	sl, r5
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	e5f7      	b.n	8000d28 <__aeabi_dmul+0x148>
 8001138:	2480      	movs	r4, #128	; 0x80
 800113a:	465b      	mov	r3, fp
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	431c      	orrs	r4, r3
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	4642      	mov	r2, r8
 8001144:	4655      	mov	r5, sl
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__aeabi_dmul+0x580>)
 8001148:	0b24      	lsrs	r4, r4, #12
 800114a:	e5bb      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800114c:	464d      	mov	r5, r9
 800114e:	0021      	movs	r1, r4
 8001150:	2303      	movs	r3, #3
 8001152:	e7db      	b.n	800110c <__aeabi_dmul+0x52c>
 8001154:	fffffc0d 	.word	0xfffffc0d
 8001158:	0000043e 	.word	0x0000043e
 800115c:	0000041e 	.word	0x0000041e
 8001160:	000007ff 	.word	0x000007ff

08001164 <__aeabi_dsub>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	4645      	mov	r5, r8
 800116c:	46de      	mov	lr, fp
 800116e:	b5e0      	push	{r5, r6, r7, lr}
 8001170:	000d      	movs	r5, r1
 8001172:	0004      	movs	r4, r0
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	032b      	lsls	r3, r5, #12
 800117a:	0a5b      	lsrs	r3, r3, #9
 800117c:	0f62      	lsrs	r2, r4, #29
 800117e:	431a      	orrs	r2, r3
 8001180:	00e3      	lsls	r3, r4, #3
 8001182:	030c      	lsls	r4, r1, #12
 8001184:	0a64      	lsrs	r4, r4, #9
 8001186:	0f47      	lsrs	r7, r0, #29
 8001188:	4327      	orrs	r7, r4
 800118a:	4cd0      	ldr	r4, [pc, #832]	; (80014cc <__aeabi_dsub+0x368>)
 800118c:	006e      	lsls	r6, r5, #1
 800118e:	4691      	mov	r9, r2
 8001190:	b083      	sub	sp, #12
 8001192:	004a      	lsls	r2, r1, #1
 8001194:	00c0      	lsls	r0, r0, #3
 8001196:	4698      	mov	r8, r3
 8001198:	46a2      	mov	sl, r4
 800119a:	0d76      	lsrs	r6, r6, #21
 800119c:	0fed      	lsrs	r5, r5, #31
 800119e:	0d52      	lsrs	r2, r2, #21
 80011a0:	0fc9      	lsrs	r1, r1, #31
 80011a2:	9001      	str	r0, [sp, #4]
 80011a4:	42a2      	cmp	r2, r4
 80011a6:	d100      	bne.n	80011aa <__aeabi_dsub+0x46>
 80011a8:	e0b9      	b.n	800131e <__aeabi_dsub+0x1ba>
 80011aa:	2401      	movs	r4, #1
 80011ac:	4061      	eors	r1, r4
 80011ae:	468b      	mov	fp, r1
 80011b0:	428d      	cmp	r5, r1
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dsub+0x52>
 80011b4:	e08d      	b.n	80012d2 <__aeabi_dsub+0x16e>
 80011b6:	1ab4      	subs	r4, r6, r2
 80011b8:	46a4      	mov	ip, r4
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	dc00      	bgt.n	80011c0 <__aeabi_dsub+0x5c>
 80011be:	e0b7      	b.n	8001330 <__aeabi_dsub+0x1cc>
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dsub+0x62>
 80011c4:	e0cb      	b.n	800135e <__aeabi_dsub+0x1fa>
 80011c6:	4ac1      	ldr	r2, [pc, #772]	; (80014cc <__aeabi_dsub+0x368>)
 80011c8:	4296      	cmp	r6, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dsub+0x6a>
 80011cc:	e186      	b.n	80014dc <__aeabi_dsub+0x378>
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	0412      	lsls	r2, r2, #16
 80011d2:	4317      	orrs	r7, r2
 80011d4:	4662      	mov	r2, ip
 80011d6:	2a38      	cmp	r2, #56	; 0x38
 80011d8:	dd00      	ble.n	80011dc <__aeabi_dsub+0x78>
 80011da:	e1a4      	b.n	8001526 <__aeabi_dsub+0x3c2>
 80011dc:	2a1f      	cmp	r2, #31
 80011de:	dd00      	ble.n	80011e2 <__aeabi_dsub+0x7e>
 80011e0:	e21d      	b.n	800161e <__aeabi_dsub+0x4ba>
 80011e2:	4661      	mov	r1, ip
 80011e4:	2220      	movs	r2, #32
 80011e6:	003c      	movs	r4, r7
 80011e8:	1a52      	subs	r2, r2, r1
 80011ea:	0001      	movs	r1, r0
 80011ec:	4090      	lsls	r0, r2
 80011ee:	4094      	lsls	r4, r2
 80011f0:	1e42      	subs	r2, r0, #1
 80011f2:	4190      	sbcs	r0, r2
 80011f4:	4662      	mov	r2, ip
 80011f6:	46a0      	mov	r8, r4
 80011f8:	4664      	mov	r4, ip
 80011fa:	40d7      	lsrs	r7, r2
 80011fc:	464a      	mov	r2, r9
 80011fe:	40e1      	lsrs	r1, r4
 8001200:	4644      	mov	r4, r8
 8001202:	1bd2      	subs	r2, r2, r7
 8001204:	4691      	mov	r9, r2
 8001206:	430c      	orrs	r4, r1
 8001208:	4304      	orrs	r4, r0
 800120a:	1b1c      	subs	r4, r3, r4
 800120c:	42a3      	cmp	r3, r4
 800120e:	4192      	sbcs	r2, r2
 8001210:	464b      	mov	r3, r9
 8001212:	4252      	negs	r2, r2
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	469a      	mov	sl, r3
 8001218:	4653      	mov	r3, sl
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	d400      	bmi.n	8001220 <__aeabi_dsub+0xbc>
 800121e:	e12b      	b.n	8001478 <__aeabi_dsub+0x314>
 8001220:	4653      	mov	r3, sl
 8001222:	025a      	lsls	r2, r3, #9
 8001224:	0a53      	lsrs	r3, r2, #9
 8001226:	469a      	mov	sl, r3
 8001228:	4653      	mov	r3, sl
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0xcc>
 800122e:	e166      	b.n	80014fe <__aeabi_dsub+0x39a>
 8001230:	4650      	mov	r0, sl
 8001232:	f000 fbbd 	bl	80019b0 <__clzsi2>
 8001236:	0003      	movs	r3, r0
 8001238:	3b08      	subs	r3, #8
 800123a:	2220      	movs	r2, #32
 800123c:	0020      	movs	r0, r4
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	4651      	mov	r1, sl
 8001242:	40d0      	lsrs	r0, r2
 8001244:	4099      	lsls	r1, r3
 8001246:	0002      	movs	r2, r0
 8001248:	409c      	lsls	r4, r3
 800124a:	430a      	orrs	r2, r1
 800124c:	429e      	cmp	r6, r3
 800124e:	dd00      	ble.n	8001252 <__aeabi_dsub+0xee>
 8001250:	e164      	b.n	800151c <__aeabi_dsub+0x3b8>
 8001252:	1b9b      	subs	r3, r3, r6
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	291f      	cmp	r1, #31
 8001258:	dd00      	ble.n	800125c <__aeabi_dsub+0xf8>
 800125a:	e0fe      	b.n	800145a <__aeabi_dsub+0x2f6>
 800125c:	2320      	movs	r3, #32
 800125e:	0010      	movs	r0, r2
 8001260:	0026      	movs	r6, r4
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	409c      	lsls	r4, r3
 8001266:	4098      	lsls	r0, r3
 8001268:	40ce      	lsrs	r6, r1
 800126a:	40ca      	lsrs	r2, r1
 800126c:	1e63      	subs	r3, r4, #1
 800126e:	419c      	sbcs	r4, r3
 8001270:	4330      	orrs	r0, r6
 8001272:	4692      	mov	sl, r2
 8001274:	2600      	movs	r6, #0
 8001276:	4304      	orrs	r4, r0
 8001278:	0763      	lsls	r3, r4, #29
 800127a:	d009      	beq.n	8001290 <__aeabi_dsub+0x12c>
 800127c:	230f      	movs	r3, #15
 800127e:	4023      	ands	r3, r4
 8001280:	2b04      	cmp	r3, #4
 8001282:	d005      	beq.n	8001290 <__aeabi_dsub+0x12c>
 8001284:	1d23      	adds	r3, r4, #4
 8001286:	42a3      	cmp	r3, r4
 8001288:	41a4      	sbcs	r4, r4
 800128a:	4264      	negs	r4, r4
 800128c:	44a2      	add	sl, r4
 800128e:	001c      	movs	r4, r3
 8001290:	4653      	mov	r3, sl
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	d400      	bmi.n	8001298 <__aeabi_dsub+0x134>
 8001296:	e0f2      	b.n	800147e <__aeabi_dsub+0x31a>
 8001298:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <__aeabi_dsub+0x368>)
 800129a:	3601      	adds	r6, #1
 800129c:	429e      	cmp	r6, r3
 800129e:	d100      	bne.n	80012a2 <__aeabi_dsub+0x13e>
 80012a0:	e10f      	b.n	80014c2 <__aeabi_dsub+0x35e>
 80012a2:	4653      	mov	r3, sl
 80012a4:	498a      	ldr	r1, [pc, #552]	; (80014d0 <__aeabi_dsub+0x36c>)
 80012a6:	08e4      	lsrs	r4, r4, #3
 80012a8:	400b      	ands	r3, r1
 80012aa:	0019      	movs	r1, r3
 80012ac:	075b      	lsls	r3, r3, #29
 80012ae:	4323      	orrs	r3, r4
 80012b0:	0572      	lsls	r2, r6, #21
 80012b2:	024c      	lsls	r4, r1, #9
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0512      	lsls	r2, r2, #20
 80012ba:	4322      	orrs	r2, r4
 80012bc:	07ed      	lsls	r5, r5, #31
 80012be:	432a      	orrs	r2, r5
 80012c0:	0018      	movs	r0, r3
 80012c2:	0011      	movs	r1, r2
 80012c4:	b003      	add	sp, #12
 80012c6:	bcf0      	pop	{r4, r5, r6, r7}
 80012c8:	46bb      	mov	fp, r7
 80012ca:	46b2      	mov	sl, r6
 80012cc:	46a9      	mov	r9, r5
 80012ce:	46a0      	mov	r8, r4
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	1ab4      	subs	r4, r6, r2
 80012d4:	46a4      	mov	ip, r4
 80012d6:	2c00      	cmp	r4, #0
 80012d8:	dd59      	ble.n	800138e <__aeabi_dsub+0x22a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dsub+0x17c>
 80012de:	e0b0      	b.n	8001442 <__aeabi_dsub+0x2de>
 80012e0:	4556      	cmp	r6, sl
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x182>
 80012e4:	e0fa      	b.n	80014dc <__aeabi_dsub+0x378>
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	0412      	lsls	r2, r2, #16
 80012ea:	4317      	orrs	r7, r2
 80012ec:	4662      	mov	r2, ip
 80012ee:	2a38      	cmp	r2, #56	; 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dsub+0x190>
 80012f2:	e0d4      	b.n	800149e <__aeabi_dsub+0x33a>
 80012f4:	2a1f      	cmp	r2, #31
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dsub+0x196>
 80012f8:	e1c0      	b.n	800167c <__aeabi_dsub+0x518>
 80012fa:	0039      	movs	r1, r7
 80012fc:	3a20      	subs	r2, #32
 80012fe:	40d1      	lsrs	r1, r2
 8001300:	4662      	mov	r2, ip
 8001302:	2a20      	cmp	r2, #32
 8001304:	d006      	beq.n	8001314 <__aeabi_dsub+0x1b0>
 8001306:	4664      	mov	r4, ip
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	1b12      	subs	r2, r2, r4
 800130c:	003c      	movs	r4, r7
 800130e:	4094      	lsls	r4, r2
 8001310:	4304      	orrs	r4, r0
 8001312:	9401      	str	r4, [sp, #4]
 8001314:	9c01      	ldr	r4, [sp, #4]
 8001316:	1e62      	subs	r2, r4, #1
 8001318:	4194      	sbcs	r4, r2
 800131a:	430c      	orrs	r4, r1
 800131c:	e0c3      	b.n	80014a6 <__aeabi_dsub+0x342>
 800131e:	003c      	movs	r4, r7
 8001320:	4304      	orrs	r4, r0
 8001322:	d02b      	beq.n	800137c <__aeabi_dsub+0x218>
 8001324:	468b      	mov	fp, r1
 8001326:	428d      	cmp	r5, r1
 8001328:	d02e      	beq.n	8001388 <__aeabi_dsub+0x224>
 800132a:	4c6a      	ldr	r4, [pc, #424]	; (80014d4 <__aeabi_dsub+0x370>)
 800132c:	46a4      	mov	ip, r4
 800132e:	44b4      	add	ip, r6
 8001330:	4664      	mov	r4, ip
 8001332:	2c00      	cmp	r4, #0
 8001334:	d05f      	beq.n	80013f6 <__aeabi_dsub+0x292>
 8001336:	1b94      	subs	r4, r2, r6
 8001338:	46a4      	mov	ip, r4
 800133a:	2e00      	cmp	r6, #0
 800133c:	d000      	beq.n	8001340 <__aeabi_dsub+0x1dc>
 800133e:	e120      	b.n	8001582 <__aeabi_dsub+0x41e>
 8001340:	464c      	mov	r4, r9
 8001342:	431c      	orrs	r4, r3
 8001344:	d100      	bne.n	8001348 <__aeabi_dsub+0x1e4>
 8001346:	e1c7      	b.n	80016d8 <__aeabi_dsub+0x574>
 8001348:	4661      	mov	r1, ip
 800134a:	1e4c      	subs	r4, r1, #1
 800134c:	2901      	cmp	r1, #1
 800134e:	d100      	bne.n	8001352 <__aeabi_dsub+0x1ee>
 8001350:	e223      	b.n	800179a <__aeabi_dsub+0x636>
 8001352:	4d5e      	ldr	r5, [pc, #376]	; (80014cc <__aeabi_dsub+0x368>)
 8001354:	45ac      	cmp	ip, r5
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x1f6>
 8001358:	e1d8      	b.n	800170c <__aeabi_dsub+0x5a8>
 800135a:	46a4      	mov	ip, r4
 800135c:	e11a      	b.n	8001594 <__aeabi_dsub+0x430>
 800135e:	003a      	movs	r2, r7
 8001360:	4302      	orrs	r2, r0
 8001362:	d100      	bne.n	8001366 <__aeabi_dsub+0x202>
 8001364:	e0e4      	b.n	8001530 <__aeabi_dsub+0x3cc>
 8001366:	0022      	movs	r2, r4
 8001368:	3a01      	subs	r2, #1
 800136a:	2c01      	cmp	r4, #1
 800136c:	d100      	bne.n	8001370 <__aeabi_dsub+0x20c>
 800136e:	e1c3      	b.n	80016f8 <__aeabi_dsub+0x594>
 8001370:	4956      	ldr	r1, [pc, #344]	; (80014cc <__aeabi_dsub+0x368>)
 8001372:	428c      	cmp	r4, r1
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x214>
 8001376:	e0b1      	b.n	80014dc <__aeabi_dsub+0x378>
 8001378:	4694      	mov	ip, r2
 800137a:	e72b      	b.n	80011d4 <__aeabi_dsub+0x70>
 800137c:	2401      	movs	r4, #1
 800137e:	4061      	eors	r1, r4
 8001380:	468b      	mov	fp, r1
 8001382:	428d      	cmp	r5, r1
 8001384:	d000      	beq.n	8001388 <__aeabi_dsub+0x224>
 8001386:	e716      	b.n	80011b6 <__aeabi_dsub+0x52>
 8001388:	4952      	ldr	r1, [pc, #328]	; (80014d4 <__aeabi_dsub+0x370>)
 800138a:	468c      	mov	ip, r1
 800138c:	44b4      	add	ip, r6
 800138e:	4664      	mov	r4, ip
 8001390:	2c00      	cmp	r4, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dsub+0x232>
 8001394:	e0d3      	b.n	800153e <__aeabi_dsub+0x3da>
 8001396:	1b91      	subs	r1, r2, r6
 8001398:	468c      	mov	ip, r1
 800139a:	2e00      	cmp	r6, #0
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x23c>
 800139e:	e15e      	b.n	800165e <__aeabi_dsub+0x4fa>
 80013a0:	494a      	ldr	r1, [pc, #296]	; (80014cc <__aeabi_dsub+0x368>)
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dsub+0x244>
 80013a6:	e1be      	b.n	8001726 <__aeabi_dsub+0x5c2>
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	464c      	mov	r4, r9
 80013ac:	0409      	lsls	r1, r1, #16
 80013ae:	430c      	orrs	r4, r1
 80013b0:	46a1      	mov	r9, r4
 80013b2:	4661      	mov	r1, ip
 80013b4:	2938      	cmp	r1, #56	; 0x38
 80013b6:	dd00      	ble.n	80013ba <__aeabi_dsub+0x256>
 80013b8:	e1ba      	b.n	8001730 <__aeabi_dsub+0x5cc>
 80013ba:	291f      	cmp	r1, #31
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dsub+0x25c>
 80013be:	e227      	b.n	8001810 <__aeabi_dsub+0x6ac>
 80013c0:	2420      	movs	r4, #32
 80013c2:	1a64      	subs	r4, r4, r1
 80013c4:	4649      	mov	r1, r9
 80013c6:	40a1      	lsls	r1, r4
 80013c8:	001e      	movs	r6, r3
 80013ca:	4688      	mov	r8, r1
 80013cc:	4661      	mov	r1, ip
 80013ce:	40a3      	lsls	r3, r4
 80013d0:	40ce      	lsrs	r6, r1
 80013d2:	4641      	mov	r1, r8
 80013d4:	1e5c      	subs	r4, r3, #1
 80013d6:	41a3      	sbcs	r3, r4
 80013d8:	4331      	orrs	r1, r6
 80013da:	4319      	orrs	r1, r3
 80013dc:	000c      	movs	r4, r1
 80013de:	4663      	mov	r3, ip
 80013e0:	4649      	mov	r1, r9
 80013e2:	40d9      	lsrs	r1, r3
 80013e4:	187f      	adds	r7, r7, r1
 80013e6:	1824      	adds	r4, r4, r0
 80013e8:	4284      	cmp	r4, r0
 80013ea:	419b      	sbcs	r3, r3
 80013ec:	425b      	negs	r3, r3
 80013ee:	469a      	mov	sl, r3
 80013f0:	0016      	movs	r6, r2
 80013f2:	44ba      	add	sl, r7
 80013f4:	e05d      	b.n	80014b2 <__aeabi_dsub+0x34e>
 80013f6:	4c38      	ldr	r4, [pc, #224]	; (80014d8 <__aeabi_dsub+0x374>)
 80013f8:	1c72      	adds	r2, r6, #1
 80013fa:	4222      	tst	r2, r4
 80013fc:	d000      	beq.n	8001400 <__aeabi_dsub+0x29c>
 80013fe:	e0df      	b.n	80015c0 <__aeabi_dsub+0x45c>
 8001400:	464a      	mov	r2, r9
 8001402:	431a      	orrs	r2, r3
 8001404:	2e00      	cmp	r6, #0
 8001406:	d000      	beq.n	800140a <__aeabi_dsub+0x2a6>
 8001408:	e15c      	b.n	80016c4 <__aeabi_dsub+0x560>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x2ac>
 800140e:	e1cf      	b.n	80017b0 <__aeabi_dsub+0x64c>
 8001410:	003a      	movs	r2, r7
 8001412:	4302      	orrs	r2, r0
 8001414:	d100      	bne.n	8001418 <__aeabi_dsub+0x2b4>
 8001416:	e17f      	b.n	8001718 <__aeabi_dsub+0x5b4>
 8001418:	1a1c      	subs	r4, r3, r0
 800141a:	464a      	mov	r2, r9
 800141c:	42a3      	cmp	r3, r4
 800141e:	4189      	sbcs	r1, r1
 8001420:	1bd2      	subs	r2, r2, r7
 8001422:	4249      	negs	r1, r1
 8001424:	1a52      	subs	r2, r2, r1
 8001426:	4692      	mov	sl, r2
 8001428:	0212      	lsls	r2, r2, #8
 800142a:	d400      	bmi.n	800142e <__aeabi_dsub+0x2ca>
 800142c:	e20a      	b.n	8001844 <__aeabi_dsub+0x6e0>
 800142e:	1ac4      	subs	r4, r0, r3
 8001430:	42a0      	cmp	r0, r4
 8001432:	4180      	sbcs	r0, r0
 8001434:	464b      	mov	r3, r9
 8001436:	4240      	negs	r0, r0
 8001438:	1aff      	subs	r7, r7, r3
 800143a:	1a3b      	subs	r3, r7, r0
 800143c:	469a      	mov	sl, r3
 800143e:	465d      	mov	r5, fp
 8001440:	e71a      	b.n	8001278 <__aeabi_dsub+0x114>
 8001442:	003a      	movs	r2, r7
 8001444:	4302      	orrs	r2, r0
 8001446:	d073      	beq.n	8001530 <__aeabi_dsub+0x3cc>
 8001448:	0022      	movs	r2, r4
 800144a:	3a01      	subs	r2, #1
 800144c:	2c01      	cmp	r4, #1
 800144e:	d100      	bne.n	8001452 <__aeabi_dsub+0x2ee>
 8001450:	e0cb      	b.n	80015ea <__aeabi_dsub+0x486>
 8001452:	4554      	cmp	r4, sl
 8001454:	d042      	beq.n	80014dc <__aeabi_dsub+0x378>
 8001456:	4694      	mov	ip, r2
 8001458:	e748      	b.n	80012ec <__aeabi_dsub+0x188>
 800145a:	0010      	movs	r0, r2
 800145c:	3b1f      	subs	r3, #31
 800145e:	40d8      	lsrs	r0, r3
 8001460:	2920      	cmp	r1, #32
 8001462:	d003      	beq.n	800146c <__aeabi_dsub+0x308>
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	1a5b      	subs	r3, r3, r1
 8001468:	409a      	lsls	r2, r3
 800146a:	4314      	orrs	r4, r2
 800146c:	1e63      	subs	r3, r4, #1
 800146e:	419c      	sbcs	r4, r3
 8001470:	2300      	movs	r3, #0
 8001472:	2600      	movs	r6, #0
 8001474:	469a      	mov	sl, r3
 8001476:	4304      	orrs	r4, r0
 8001478:	0763      	lsls	r3, r4, #29
 800147a:	d000      	beq.n	800147e <__aeabi_dsub+0x31a>
 800147c:	e6fe      	b.n	800127c <__aeabi_dsub+0x118>
 800147e:	4652      	mov	r2, sl
 8001480:	08e3      	lsrs	r3, r4, #3
 8001482:	0752      	lsls	r2, r2, #29
 8001484:	4313      	orrs	r3, r2
 8001486:	4652      	mov	r2, sl
 8001488:	46b4      	mov	ip, r6
 800148a:	08d2      	lsrs	r2, r2, #3
 800148c:	490f      	ldr	r1, [pc, #60]	; (80014cc <__aeabi_dsub+0x368>)
 800148e:	458c      	cmp	ip, r1
 8001490:	d02a      	beq.n	80014e8 <__aeabi_dsub+0x384>
 8001492:	0312      	lsls	r2, r2, #12
 8001494:	0b14      	lsrs	r4, r2, #12
 8001496:	4662      	mov	r2, ip
 8001498:	0552      	lsls	r2, r2, #21
 800149a:	0d52      	lsrs	r2, r2, #21
 800149c:	e70c      	b.n	80012b8 <__aeabi_dsub+0x154>
 800149e:	003c      	movs	r4, r7
 80014a0:	4304      	orrs	r4, r0
 80014a2:	1e62      	subs	r2, r4, #1
 80014a4:	4194      	sbcs	r4, r2
 80014a6:	18e4      	adds	r4, r4, r3
 80014a8:	429c      	cmp	r4, r3
 80014aa:	4192      	sbcs	r2, r2
 80014ac:	4252      	negs	r2, r2
 80014ae:	444a      	add	r2, r9
 80014b0:	4692      	mov	sl, r2
 80014b2:	4653      	mov	r3, sl
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	d5df      	bpl.n	8001478 <__aeabi_dsub+0x314>
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__aeabi_dsub+0x368>)
 80014ba:	3601      	adds	r6, #1
 80014bc:	429e      	cmp	r6, r3
 80014be:	d000      	beq.n	80014c2 <__aeabi_dsub+0x35e>
 80014c0:	e0a0      	b.n	8001604 <__aeabi_dsub+0x4a0>
 80014c2:	0032      	movs	r2, r6
 80014c4:	2400      	movs	r4, #0
 80014c6:	2300      	movs	r3, #0
 80014c8:	e6f6      	b.n	80012b8 <__aeabi_dsub+0x154>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	000007ff 	.word	0x000007ff
 80014d0:	ff7fffff 	.word	0xff7fffff
 80014d4:	fffff801 	.word	0xfffff801
 80014d8:	000007fe 	.word	0x000007fe
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	464a      	mov	r2, r9
 80014e0:	0752      	lsls	r2, r2, #29
 80014e2:	4313      	orrs	r3, r2
 80014e4:	464a      	mov	r2, r9
 80014e6:	08d2      	lsrs	r2, r2, #3
 80014e8:	0019      	movs	r1, r3
 80014ea:	4311      	orrs	r1, r2
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x38c>
 80014ee:	e1b5      	b.n	800185c <__aeabi_dsub+0x6f8>
 80014f0:	2480      	movs	r4, #128	; 0x80
 80014f2:	0324      	lsls	r4, r4, #12
 80014f4:	4314      	orrs	r4, r2
 80014f6:	0324      	lsls	r4, r4, #12
 80014f8:	4ad5      	ldr	r2, [pc, #852]	; (8001850 <__aeabi_dsub+0x6ec>)
 80014fa:	0b24      	lsrs	r4, r4, #12
 80014fc:	e6dc      	b.n	80012b8 <__aeabi_dsub+0x154>
 80014fe:	0020      	movs	r0, r4
 8001500:	f000 fa56 	bl	80019b0 <__clzsi2>
 8001504:	0003      	movs	r3, r0
 8001506:	3318      	adds	r3, #24
 8001508:	2b1f      	cmp	r3, #31
 800150a:	dc00      	bgt.n	800150e <__aeabi_dsub+0x3aa>
 800150c:	e695      	b.n	800123a <__aeabi_dsub+0xd6>
 800150e:	0022      	movs	r2, r4
 8001510:	3808      	subs	r0, #8
 8001512:	4082      	lsls	r2, r0
 8001514:	2400      	movs	r4, #0
 8001516:	429e      	cmp	r6, r3
 8001518:	dc00      	bgt.n	800151c <__aeabi_dsub+0x3b8>
 800151a:	e69a      	b.n	8001252 <__aeabi_dsub+0xee>
 800151c:	1af6      	subs	r6, r6, r3
 800151e:	4bcd      	ldr	r3, [pc, #820]	; (8001854 <__aeabi_dsub+0x6f0>)
 8001520:	401a      	ands	r2, r3
 8001522:	4692      	mov	sl, r2
 8001524:	e6a8      	b.n	8001278 <__aeabi_dsub+0x114>
 8001526:	003c      	movs	r4, r7
 8001528:	4304      	orrs	r4, r0
 800152a:	1e62      	subs	r2, r4, #1
 800152c:	4194      	sbcs	r4, r2
 800152e:	e66c      	b.n	800120a <__aeabi_dsub+0xa6>
 8001530:	464a      	mov	r2, r9
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	0752      	lsls	r2, r2, #29
 8001536:	4313      	orrs	r3, r2
 8001538:	464a      	mov	r2, r9
 800153a:	08d2      	lsrs	r2, r2, #3
 800153c:	e7a6      	b.n	800148c <__aeabi_dsub+0x328>
 800153e:	4cc6      	ldr	r4, [pc, #792]	; (8001858 <__aeabi_dsub+0x6f4>)
 8001540:	1c72      	adds	r2, r6, #1
 8001542:	4222      	tst	r2, r4
 8001544:	d000      	beq.n	8001548 <__aeabi_dsub+0x3e4>
 8001546:	e0ac      	b.n	80016a2 <__aeabi_dsub+0x53e>
 8001548:	464a      	mov	r2, r9
 800154a:	431a      	orrs	r2, r3
 800154c:	2e00      	cmp	r6, #0
 800154e:	d000      	beq.n	8001552 <__aeabi_dsub+0x3ee>
 8001550:	e105      	b.n	800175e <__aeabi_dsub+0x5fa>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d100      	bne.n	8001558 <__aeabi_dsub+0x3f4>
 8001556:	e156      	b.n	8001806 <__aeabi_dsub+0x6a2>
 8001558:	003a      	movs	r2, r7
 800155a:	4302      	orrs	r2, r0
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x3fc>
 800155e:	e0db      	b.n	8001718 <__aeabi_dsub+0x5b4>
 8001560:	181c      	adds	r4, r3, r0
 8001562:	429c      	cmp	r4, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	444f      	add	r7, r9
 8001568:	46ba      	mov	sl, r7
 800156a:	425b      	negs	r3, r3
 800156c:	449a      	add	sl, r3
 800156e:	4653      	mov	r3, sl
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	d400      	bmi.n	8001576 <__aeabi_dsub+0x412>
 8001574:	e780      	b.n	8001478 <__aeabi_dsub+0x314>
 8001576:	4652      	mov	r2, sl
 8001578:	4bb6      	ldr	r3, [pc, #728]	; (8001854 <__aeabi_dsub+0x6f0>)
 800157a:	2601      	movs	r6, #1
 800157c:	401a      	ands	r2, r3
 800157e:	4692      	mov	sl, r2
 8001580:	e77a      	b.n	8001478 <__aeabi_dsub+0x314>
 8001582:	4cb3      	ldr	r4, [pc, #716]	; (8001850 <__aeabi_dsub+0x6ec>)
 8001584:	42a2      	cmp	r2, r4
 8001586:	d100      	bne.n	800158a <__aeabi_dsub+0x426>
 8001588:	e0c0      	b.n	800170c <__aeabi_dsub+0x5a8>
 800158a:	2480      	movs	r4, #128	; 0x80
 800158c:	464d      	mov	r5, r9
 800158e:	0424      	lsls	r4, r4, #16
 8001590:	4325      	orrs	r5, r4
 8001592:	46a9      	mov	r9, r5
 8001594:	4664      	mov	r4, ip
 8001596:	2c38      	cmp	r4, #56	; 0x38
 8001598:	dc53      	bgt.n	8001642 <__aeabi_dsub+0x4de>
 800159a:	4661      	mov	r1, ip
 800159c:	2c1f      	cmp	r4, #31
 800159e:	dd00      	ble.n	80015a2 <__aeabi_dsub+0x43e>
 80015a0:	e0cd      	b.n	800173e <__aeabi_dsub+0x5da>
 80015a2:	2520      	movs	r5, #32
 80015a4:	001e      	movs	r6, r3
 80015a6:	1b2d      	subs	r5, r5, r4
 80015a8:	464c      	mov	r4, r9
 80015aa:	40ab      	lsls	r3, r5
 80015ac:	40ac      	lsls	r4, r5
 80015ae:	40ce      	lsrs	r6, r1
 80015b0:	1e5d      	subs	r5, r3, #1
 80015b2:	41ab      	sbcs	r3, r5
 80015b4:	4334      	orrs	r4, r6
 80015b6:	4323      	orrs	r3, r4
 80015b8:	464c      	mov	r4, r9
 80015ba:	40cc      	lsrs	r4, r1
 80015bc:	1b3f      	subs	r7, r7, r4
 80015be:	e045      	b.n	800164c <__aeabi_dsub+0x4e8>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1a1c      	subs	r4, r3, r0
 80015c4:	1bd1      	subs	r1, r2, r7
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	4192      	sbcs	r2, r2
 80015ca:	4252      	negs	r2, r2
 80015cc:	4692      	mov	sl, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	4651      	mov	r1, sl
 80015d2:	1a52      	subs	r2, r2, r1
 80015d4:	4692      	mov	sl, r2
 80015d6:	0212      	lsls	r2, r2, #8
 80015d8:	d500      	bpl.n	80015dc <__aeabi_dsub+0x478>
 80015da:	e083      	b.n	80016e4 <__aeabi_dsub+0x580>
 80015dc:	4653      	mov	r3, sl
 80015de:	4323      	orrs	r3, r4
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dsub+0x480>
 80015e2:	e621      	b.n	8001228 <__aeabi_dsub+0xc4>
 80015e4:	2200      	movs	r2, #0
 80015e6:	2500      	movs	r5, #0
 80015e8:	e753      	b.n	8001492 <__aeabi_dsub+0x32e>
 80015ea:	181c      	adds	r4, r3, r0
 80015ec:	429c      	cmp	r4, r3
 80015ee:	419b      	sbcs	r3, r3
 80015f0:	444f      	add	r7, r9
 80015f2:	46ba      	mov	sl, r7
 80015f4:	425b      	negs	r3, r3
 80015f6:	449a      	add	sl, r3
 80015f8:	4653      	mov	r3, sl
 80015fa:	2601      	movs	r6, #1
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	d400      	bmi.n	8001602 <__aeabi_dsub+0x49e>
 8001600:	e73a      	b.n	8001478 <__aeabi_dsub+0x314>
 8001602:	2602      	movs	r6, #2
 8001604:	4652      	mov	r2, sl
 8001606:	4b93      	ldr	r3, [pc, #588]	; (8001854 <__aeabi_dsub+0x6f0>)
 8001608:	2101      	movs	r1, #1
 800160a:	401a      	ands	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	4021      	ands	r1, r4
 8001610:	0862      	lsrs	r2, r4, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	07dc      	lsls	r4, r3, #31
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	469a      	mov	sl, r3
 800161a:	4314      	orrs	r4, r2
 800161c:	e62c      	b.n	8001278 <__aeabi_dsub+0x114>
 800161e:	0039      	movs	r1, r7
 8001620:	3a20      	subs	r2, #32
 8001622:	40d1      	lsrs	r1, r2
 8001624:	4662      	mov	r2, ip
 8001626:	2a20      	cmp	r2, #32
 8001628:	d006      	beq.n	8001638 <__aeabi_dsub+0x4d4>
 800162a:	4664      	mov	r4, ip
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	1b12      	subs	r2, r2, r4
 8001630:	003c      	movs	r4, r7
 8001632:	4094      	lsls	r4, r2
 8001634:	4304      	orrs	r4, r0
 8001636:	9401      	str	r4, [sp, #4]
 8001638:	9c01      	ldr	r4, [sp, #4]
 800163a:	1e62      	subs	r2, r4, #1
 800163c:	4194      	sbcs	r4, r2
 800163e:	430c      	orrs	r4, r1
 8001640:	e5e3      	b.n	800120a <__aeabi_dsub+0xa6>
 8001642:	4649      	mov	r1, r9
 8001644:	4319      	orrs	r1, r3
 8001646:	000b      	movs	r3, r1
 8001648:	1e5c      	subs	r4, r3, #1
 800164a:	41a3      	sbcs	r3, r4
 800164c:	1ac4      	subs	r4, r0, r3
 800164e:	42a0      	cmp	r0, r4
 8001650:	419b      	sbcs	r3, r3
 8001652:	425b      	negs	r3, r3
 8001654:	1afb      	subs	r3, r7, r3
 8001656:	469a      	mov	sl, r3
 8001658:	465d      	mov	r5, fp
 800165a:	0016      	movs	r6, r2
 800165c:	e5dc      	b.n	8001218 <__aeabi_dsub+0xb4>
 800165e:	4649      	mov	r1, r9
 8001660:	4319      	orrs	r1, r3
 8001662:	d100      	bne.n	8001666 <__aeabi_dsub+0x502>
 8001664:	e0ae      	b.n	80017c4 <__aeabi_dsub+0x660>
 8001666:	4661      	mov	r1, ip
 8001668:	4664      	mov	r4, ip
 800166a:	3901      	subs	r1, #1
 800166c:	2c01      	cmp	r4, #1
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x50e>
 8001670:	e0e0      	b.n	8001834 <__aeabi_dsub+0x6d0>
 8001672:	4c77      	ldr	r4, [pc, #476]	; (8001850 <__aeabi_dsub+0x6ec>)
 8001674:	45a4      	cmp	ip, r4
 8001676:	d056      	beq.n	8001726 <__aeabi_dsub+0x5c2>
 8001678:	468c      	mov	ip, r1
 800167a:	e69a      	b.n	80013b2 <__aeabi_dsub+0x24e>
 800167c:	4661      	mov	r1, ip
 800167e:	2220      	movs	r2, #32
 8001680:	003c      	movs	r4, r7
 8001682:	1a52      	subs	r2, r2, r1
 8001684:	4094      	lsls	r4, r2
 8001686:	0001      	movs	r1, r0
 8001688:	4090      	lsls	r0, r2
 800168a:	46a0      	mov	r8, r4
 800168c:	4664      	mov	r4, ip
 800168e:	1e42      	subs	r2, r0, #1
 8001690:	4190      	sbcs	r0, r2
 8001692:	4662      	mov	r2, ip
 8001694:	40e1      	lsrs	r1, r4
 8001696:	4644      	mov	r4, r8
 8001698:	40d7      	lsrs	r7, r2
 800169a:	430c      	orrs	r4, r1
 800169c:	4304      	orrs	r4, r0
 800169e:	44b9      	add	r9, r7
 80016a0:	e701      	b.n	80014a6 <__aeabi_dsub+0x342>
 80016a2:	496b      	ldr	r1, [pc, #428]	; (8001850 <__aeabi_dsub+0x6ec>)
 80016a4:	428a      	cmp	r2, r1
 80016a6:	d100      	bne.n	80016aa <__aeabi_dsub+0x546>
 80016a8:	e70c      	b.n	80014c4 <__aeabi_dsub+0x360>
 80016aa:	1818      	adds	r0, r3, r0
 80016ac:	4298      	cmp	r0, r3
 80016ae:	419b      	sbcs	r3, r3
 80016b0:	444f      	add	r7, r9
 80016b2:	425b      	negs	r3, r3
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	07dc      	lsls	r4, r3, #31
 80016b8:	0840      	lsrs	r0, r0, #1
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	469a      	mov	sl, r3
 80016be:	0016      	movs	r6, r2
 80016c0:	4304      	orrs	r4, r0
 80016c2:	e6d9      	b.n	8001478 <__aeabi_dsub+0x314>
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d000      	beq.n	80016ca <__aeabi_dsub+0x566>
 80016c8:	e081      	b.n	80017ce <__aeabi_dsub+0x66a>
 80016ca:	003b      	movs	r3, r7
 80016cc:	4303      	orrs	r3, r0
 80016ce:	d11d      	bne.n	800170c <__aeabi_dsub+0x5a8>
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	0312      	lsls	r2, r2, #12
 80016d6:	e70b      	b.n	80014f0 <__aeabi_dsub+0x38c>
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	077b      	lsls	r3, r7, #29
 80016dc:	465d      	mov	r5, fp
 80016de:	4303      	orrs	r3, r0
 80016e0:	08fa      	lsrs	r2, r7, #3
 80016e2:	e6d3      	b.n	800148c <__aeabi_dsub+0x328>
 80016e4:	1ac4      	subs	r4, r0, r3
 80016e6:	42a0      	cmp	r0, r4
 80016e8:	4180      	sbcs	r0, r0
 80016ea:	464b      	mov	r3, r9
 80016ec:	4240      	negs	r0, r0
 80016ee:	1aff      	subs	r7, r7, r3
 80016f0:	1a3b      	subs	r3, r7, r0
 80016f2:	469a      	mov	sl, r3
 80016f4:	465d      	mov	r5, fp
 80016f6:	e597      	b.n	8001228 <__aeabi_dsub+0xc4>
 80016f8:	1a1c      	subs	r4, r3, r0
 80016fa:	464a      	mov	r2, r9
 80016fc:	42a3      	cmp	r3, r4
 80016fe:	419b      	sbcs	r3, r3
 8001700:	1bd7      	subs	r7, r2, r7
 8001702:	425b      	negs	r3, r3
 8001704:	1afb      	subs	r3, r7, r3
 8001706:	469a      	mov	sl, r3
 8001708:	2601      	movs	r6, #1
 800170a:	e585      	b.n	8001218 <__aeabi_dsub+0xb4>
 800170c:	08c0      	lsrs	r0, r0, #3
 800170e:	077b      	lsls	r3, r7, #29
 8001710:	465d      	mov	r5, fp
 8001712:	4303      	orrs	r3, r0
 8001714:	08fa      	lsrs	r2, r7, #3
 8001716:	e6e7      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001718:	464a      	mov	r2, r9
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	0752      	lsls	r2, r2, #29
 800171e:	4313      	orrs	r3, r2
 8001720:	464a      	mov	r2, r9
 8001722:	08d2      	lsrs	r2, r2, #3
 8001724:	e6b5      	b.n	8001492 <__aeabi_dsub+0x32e>
 8001726:	08c0      	lsrs	r0, r0, #3
 8001728:	077b      	lsls	r3, r7, #29
 800172a:	4303      	orrs	r3, r0
 800172c:	08fa      	lsrs	r2, r7, #3
 800172e:	e6db      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001730:	4649      	mov	r1, r9
 8001732:	4319      	orrs	r1, r3
 8001734:	000b      	movs	r3, r1
 8001736:	1e59      	subs	r1, r3, #1
 8001738:	418b      	sbcs	r3, r1
 800173a:	001c      	movs	r4, r3
 800173c:	e653      	b.n	80013e6 <__aeabi_dsub+0x282>
 800173e:	464d      	mov	r5, r9
 8001740:	3c20      	subs	r4, #32
 8001742:	40e5      	lsrs	r5, r4
 8001744:	2920      	cmp	r1, #32
 8001746:	d005      	beq.n	8001754 <__aeabi_dsub+0x5f0>
 8001748:	2440      	movs	r4, #64	; 0x40
 800174a:	1a64      	subs	r4, r4, r1
 800174c:	4649      	mov	r1, r9
 800174e:	40a1      	lsls	r1, r4
 8001750:	430b      	orrs	r3, r1
 8001752:	4698      	mov	r8, r3
 8001754:	4643      	mov	r3, r8
 8001756:	1e5c      	subs	r4, r3, #1
 8001758:	41a3      	sbcs	r3, r4
 800175a:	432b      	orrs	r3, r5
 800175c:	e776      	b.n	800164c <__aeabi_dsub+0x4e8>
 800175e:	2a00      	cmp	r2, #0
 8001760:	d0e1      	beq.n	8001726 <__aeabi_dsub+0x5c2>
 8001762:	003a      	movs	r2, r7
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	4302      	orrs	r2, r0
 8001768:	d100      	bne.n	800176c <__aeabi_dsub+0x608>
 800176a:	e6b8      	b.n	80014de <__aeabi_dsub+0x37a>
 800176c:	464a      	mov	r2, r9
 800176e:	0752      	lsls	r2, r2, #29
 8001770:	2480      	movs	r4, #128	; 0x80
 8001772:	4313      	orrs	r3, r2
 8001774:	464a      	mov	r2, r9
 8001776:	0324      	lsls	r4, r4, #12
 8001778:	08d2      	lsrs	r2, r2, #3
 800177a:	4222      	tst	r2, r4
 800177c:	d007      	beq.n	800178e <__aeabi_dsub+0x62a>
 800177e:	08fe      	lsrs	r6, r7, #3
 8001780:	4226      	tst	r6, r4
 8001782:	d104      	bne.n	800178e <__aeabi_dsub+0x62a>
 8001784:	465d      	mov	r5, fp
 8001786:	0032      	movs	r2, r6
 8001788:	08c3      	lsrs	r3, r0, #3
 800178a:	077f      	lsls	r7, r7, #29
 800178c:	433b      	orrs	r3, r7
 800178e:	0f59      	lsrs	r1, r3, #29
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	0749      	lsls	r1, r1, #29
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	430b      	orrs	r3, r1
 8001798:	e6a6      	b.n	80014e8 <__aeabi_dsub+0x384>
 800179a:	1ac4      	subs	r4, r0, r3
 800179c:	42a0      	cmp	r0, r4
 800179e:	4180      	sbcs	r0, r0
 80017a0:	464b      	mov	r3, r9
 80017a2:	4240      	negs	r0, r0
 80017a4:	1aff      	subs	r7, r7, r3
 80017a6:	1a3b      	subs	r3, r7, r0
 80017a8:	469a      	mov	sl, r3
 80017aa:	465d      	mov	r5, fp
 80017ac:	2601      	movs	r6, #1
 80017ae:	e533      	b.n	8001218 <__aeabi_dsub+0xb4>
 80017b0:	003b      	movs	r3, r7
 80017b2:	4303      	orrs	r3, r0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dsub+0x654>
 80017b6:	e715      	b.n	80015e4 <__aeabi_dsub+0x480>
 80017b8:	08c0      	lsrs	r0, r0, #3
 80017ba:	077b      	lsls	r3, r7, #29
 80017bc:	465d      	mov	r5, fp
 80017be:	4303      	orrs	r3, r0
 80017c0:	08fa      	lsrs	r2, r7, #3
 80017c2:	e666      	b.n	8001492 <__aeabi_dsub+0x32e>
 80017c4:	08c0      	lsrs	r0, r0, #3
 80017c6:	077b      	lsls	r3, r7, #29
 80017c8:	4303      	orrs	r3, r0
 80017ca:	08fa      	lsrs	r2, r7, #3
 80017cc:	e65e      	b.n	800148c <__aeabi_dsub+0x328>
 80017ce:	003a      	movs	r2, r7
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	4302      	orrs	r2, r0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x674>
 80017d6:	e682      	b.n	80014de <__aeabi_dsub+0x37a>
 80017d8:	464a      	mov	r2, r9
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	2480      	movs	r4, #128	; 0x80
 80017de:	4313      	orrs	r3, r2
 80017e0:	464a      	mov	r2, r9
 80017e2:	0324      	lsls	r4, r4, #12
 80017e4:	08d2      	lsrs	r2, r2, #3
 80017e6:	4222      	tst	r2, r4
 80017e8:	d007      	beq.n	80017fa <__aeabi_dsub+0x696>
 80017ea:	08fe      	lsrs	r6, r7, #3
 80017ec:	4226      	tst	r6, r4
 80017ee:	d104      	bne.n	80017fa <__aeabi_dsub+0x696>
 80017f0:	465d      	mov	r5, fp
 80017f2:	0032      	movs	r2, r6
 80017f4:	08c3      	lsrs	r3, r0, #3
 80017f6:	077f      	lsls	r7, r7, #29
 80017f8:	433b      	orrs	r3, r7
 80017fa:	0f59      	lsrs	r1, r3, #29
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	0749      	lsls	r1, r1, #29
 8001802:	430b      	orrs	r3, r1
 8001804:	e670      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001806:	08c0      	lsrs	r0, r0, #3
 8001808:	077b      	lsls	r3, r7, #29
 800180a:	4303      	orrs	r3, r0
 800180c:	08fa      	lsrs	r2, r7, #3
 800180e:	e640      	b.n	8001492 <__aeabi_dsub+0x32e>
 8001810:	464c      	mov	r4, r9
 8001812:	3920      	subs	r1, #32
 8001814:	40cc      	lsrs	r4, r1
 8001816:	4661      	mov	r1, ip
 8001818:	2920      	cmp	r1, #32
 800181a:	d006      	beq.n	800182a <__aeabi_dsub+0x6c6>
 800181c:	4666      	mov	r6, ip
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	1b89      	subs	r1, r1, r6
 8001822:	464e      	mov	r6, r9
 8001824:	408e      	lsls	r6, r1
 8001826:	4333      	orrs	r3, r6
 8001828:	4698      	mov	r8, r3
 800182a:	4643      	mov	r3, r8
 800182c:	1e59      	subs	r1, r3, #1
 800182e:	418b      	sbcs	r3, r1
 8001830:	431c      	orrs	r4, r3
 8001832:	e5d8      	b.n	80013e6 <__aeabi_dsub+0x282>
 8001834:	181c      	adds	r4, r3, r0
 8001836:	4284      	cmp	r4, r0
 8001838:	4180      	sbcs	r0, r0
 800183a:	444f      	add	r7, r9
 800183c:	46ba      	mov	sl, r7
 800183e:	4240      	negs	r0, r0
 8001840:	4482      	add	sl, r0
 8001842:	e6d9      	b.n	80015f8 <__aeabi_dsub+0x494>
 8001844:	4653      	mov	r3, sl
 8001846:	4323      	orrs	r3, r4
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x6e8>
 800184a:	e6cb      	b.n	80015e4 <__aeabi_dsub+0x480>
 800184c:	e614      	b.n	8001478 <__aeabi_dsub+0x314>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	000007ff 	.word	0x000007ff
 8001854:	ff7fffff 	.word	0xff7fffff
 8001858:	000007fe 	.word	0x000007fe
 800185c:	2300      	movs	r3, #0
 800185e:	4a01      	ldr	r2, [pc, #4]	; (8001864 <__aeabi_dsub+0x700>)
 8001860:	001c      	movs	r4, r3
 8001862:	e529      	b.n	80012b8 <__aeabi_dsub+0x154>
 8001864:	000007ff 	.word	0x000007ff

08001868 <__aeabi_d2iz>:
 8001868:	000a      	movs	r2, r1
 800186a:	b530      	push	{r4, r5, lr}
 800186c:	4c13      	ldr	r4, [pc, #76]	; (80018bc <__aeabi_d2iz+0x54>)
 800186e:	0053      	lsls	r3, r2, #1
 8001870:	0309      	lsls	r1, r1, #12
 8001872:	0005      	movs	r5, r0
 8001874:	0b09      	lsrs	r1, r1, #12
 8001876:	2000      	movs	r0, #0
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	0fd2      	lsrs	r2, r2, #31
 800187c:	42a3      	cmp	r3, r4
 800187e:	dd04      	ble.n	800188a <__aeabi_d2iz+0x22>
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <__aeabi_d2iz+0x58>)
 8001882:	4283      	cmp	r3, r0
 8001884:	dd02      	ble.n	800188c <__aeabi_d2iz+0x24>
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <__aeabi_d2iz+0x5c>)
 8001888:	18d0      	adds	r0, r2, r3
 800188a:	bd30      	pop	{r4, r5, pc}
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	0340      	lsls	r0, r0, #13
 8001890:	4301      	orrs	r1, r0
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <__aeabi_d2iz+0x60>)
 8001894:	1ac0      	subs	r0, r0, r3
 8001896:	281f      	cmp	r0, #31
 8001898:	dd08      	ble.n	80018ac <__aeabi_d2iz+0x44>
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <__aeabi_d2iz+0x64>)
 800189c:	1ac3      	subs	r3, r0, r3
 800189e:	40d9      	lsrs	r1, r3
 80018a0:	000b      	movs	r3, r1
 80018a2:	4258      	negs	r0, r3
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d1f0      	bne.n	800188a <__aeabi_d2iz+0x22>
 80018a8:	0018      	movs	r0, r3
 80018aa:	e7ee      	b.n	800188a <__aeabi_d2iz+0x22>
 80018ac:	4c08      	ldr	r4, [pc, #32]	; (80018d0 <__aeabi_d2iz+0x68>)
 80018ae:	40c5      	lsrs	r5, r0
 80018b0:	46a4      	mov	ip, r4
 80018b2:	4463      	add	r3, ip
 80018b4:	4099      	lsls	r1, r3
 80018b6:	000b      	movs	r3, r1
 80018b8:	432b      	orrs	r3, r5
 80018ba:	e7f2      	b.n	80018a2 <__aeabi_d2iz+0x3a>
 80018bc:	000003fe 	.word	0x000003fe
 80018c0:	0000041d 	.word	0x0000041d
 80018c4:	7fffffff 	.word	0x7fffffff
 80018c8:	00000433 	.word	0x00000433
 80018cc:	00000413 	.word	0x00000413
 80018d0:	fffffbed 	.word	0xfffffbed

080018d4 <__aeabi_i2d>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	2800      	cmp	r0, #0
 80018d8:	d016      	beq.n	8001908 <__aeabi_i2d+0x34>
 80018da:	17c3      	asrs	r3, r0, #31
 80018dc:	18c5      	adds	r5, r0, r3
 80018de:	405d      	eors	r5, r3
 80018e0:	0fc4      	lsrs	r4, r0, #31
 80018e2:	0028      	movs	r0, r5
 80018e4:	f000 f864 	bl	80019b0 <__clzsi2>
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <__aeabi_i2d+0x5c>)
 80018ea:	1a1b      	subs	r3, r3, r0
 80018ec:	280a      	cmp	r0, #10
 80018ee:	dc16      	bgt.n	800191e <__aeabi_i2d+0x4a>
 80018f0:	0002      	movs	r2, r0
 80018f2:	002e      	movs	r6, r5
 80018f4:	3215      	adds	r2, #21
 80018f6:	4096      	lsls	r6, r2
 80018f8:	220b      	movs	r2, #11
 80018fa:	1a12      	subs	r2, r2, r0
 80018fc:	40d5      	lsrs	r5, r2
 80018fe:	055b      	lsls	r3, r3, #21
 8001900:	032d      	lsls	r5, r5, #12
 8001902:	0b2d      	lsrs	r5, r5, #12
 8001904:	0d5b      	lsrs	r3, r3, #21
 8001906:	e003      	b.n	8001910 <__aeabi_i2d+0x3c>
 8001908:	2400      	movs	r4, #0
 800190a:	2300      	movs	r3, #0
 800190c:	2500      	movs	r5, #0
 800190e:	2600      	movs	r6, #0
 8001910:	051b      	lsls	r3, r3, #20
 8001912:	432b      	orrs	r3, r5
 8001914:	07e4      	lsls	r4, r4, #31
 8001916:	4323      	orrs	r3, r4
 8001918:	0030      	movs	r0, r6
 800191a:	0019      	movs	r1, r3
 800191c:	bd70      	pop	{r4, r5, r6, pc}
 800191e:	380b      	subs	r0, #11
 8001920:	4085      	lsls	r5, r0
 8001922:	055b      	lsls	r3, r3, #21
 8001924:	032d      	lsls	r5, r5, #12
 8001926:	2600      	movs	r6, #0
 8001928:	0b2d      	lsrs	r5, r5, #12
 800192a:	0d5b      	lsrs	r3, r3, #21
 800192c:	e7f0      	b.n	8001910 <__aeabi_i2d+0x3c>
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	0000041e 	.word	0x0000041e

08001934 <__aeabi_cdrcmple>:
 8001934:	4684      	mov	ip, r0
 8001936:	0010      	movs	r0, r2
 8001938:	4662      	mov	r2, ip
 800193a:	468c      	mov	ip, r1
 800193c:	0019      	movs	r1, r3
 800193e:	4663      	mov	r3, ip
 8001940:	e000      	b.n	8001944 <__aeabi_cdcmpeq>
 8001942:	46c0      	nop			; (mov r8, r8)

08001944 <__aeabi_cdcmpeq>:
 8001944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001946:	f000 f905 	bl	8001b54 <__ledf2>
 800194a:	2800      	cmp	r0, #0
 800194c:	d401      	bmi.n	8001952 <__aeabi_cdcmpeq+0xe>
 800194e:	2100      	movs	r1, #0
 8001950:	42c8      	cmn	r0, r1
 8001952:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001954 <__aeabi_dcmpeq>:
 8001954:	b510      	push	{r4, lr}
 8001956:	f000 f855 	bl	8001a04 <__eqdf2>
 800195a:	4240      	negs	r0, r0
 800195c:	3001      	adds	r0, #1
 800195e:	bd10      	pop	{r4, pc}

08001960 <__aeabi_dcmplt>:
 8001960:	b510      	push	{r4, lr}
 8001962:	f000 f8f7 	bl	8001b54 <__ledf2>
 8001966:	2800      	cmp	r0, #0
 8001968:	db01      	blt.n	800196e <__aeabi_dcmplt+0xe>
 800196a:	2000      	movs	r0, #0
 800196c:	bd10      	pop	{r4, pc}
 800196e:	2001      	movs	r0, #1
 8001970:	bd10      	pop	{r4, pc}
 8001972:	46c0      	nop			; (mov r8, r8)

08001974 <__aeabi_dcmple>:
 8001974:	b510      	push	{r4, lr}
 8001976:	f000 f8ed 	bl	8001b54 <__ledf2>
 800197a:	2800      	cmp	r0, #0
 800197c:	dd01      	ble.n	8001982 <__aeabi_dcmple+0xe>
 800197e:	2000      	movs	r0, #0
 8001980:	bd10      	pop	{r4, pc}
 8001982:	2001      	movs	r0, #1
 8001984:	bd10      	pop	{r4, pc}
 8001986:	46c0      	nop			; (mov r8, r8)

08001988 <__aeabi_dcmpgt>:
 8001988:	b510      	push	{r4, lr}
 800198a:	f000 f87d 	bl	8001a88 <__gedf2>
 800198e:	2800      	cmp	r0, #0
 8001990:	dc01      	bgt.n	8001996 <__aeabi_dcmpgt+0xe>
 8001992:	2000      	movs	r0, #0
 8001994:	bd10      	pop	{r4, pc}
 8001996:	2001      	movs	r0, #1
 8001998:	bd10      	pop	{r4, pc}
 800199a:	46c0      	nop			; (mov r8, r8)

0800199c <__aeabi_dcmpge>:
 800199c:	b510      	push	{r4, lr}
 800199e:	f000 f873 	bl	8001a88 <__gedf2>
 80019a2:	2800      	cmp	r0, #0
 80019a4:	da01      	bge.n	80019aa <__aeabi_dcmpge+0xe>
 80019a6:	2000      	movs	r0, #0
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	2001      	movs	r0, #1
 80019ac:	bd10      	pop	{r4, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)

080019b0 <__clzsi2>:
 80019b0:	211c      	movs	r1, #28
 80019b2:	2301      	movs	r3, #1
 80019b4:	041b      	lsls	r3, r3, #16
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d301      	bcc.n	80019be <__clzsi2+0xe>
 80019ba:	0c00      	lsrs	r0, r0, #16
 80019bc:	3910      	subs	r1, #16
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	4298      	cmp	r0, r3
 80019c2:	d301      	bcc.n	80019c8 <__clzsi2+0x18>
 80019c4:	0a00      	lsrs	r0, r0, #8
 80019c6:	3908      	subs	r1, #8
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	4298      	cmp	r0, r3
 80019cc:	d301      	bcc.n	80019d2 <__clzsi2+0x22>
 80019ce:	0900      	lsrs	r0, r0, #4
 80019d0:	3904      	subs	r1, #4
 80019d2:	a202      	add	r2, pc, #8	; (adr r2, 80019dc <__clzsi2+0x2c>)
 80019d4:	5c10      	ldrb	r0, [r2, r0]
 80019d6:	1840      	adds	r0, r0, r1
 80019d8:	4770      	bx	lr
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	02020304 	.word	0x02020304
 80019e0:	01010101 	.word	0x01010101
	...

080019ec <__clzdi2>:
 80019ec:	b510      	push	{r4, lr}
 80019ee:	2900      	cmp	r1, #0
 80019f0:	d103      	bne.n	80019fa <__clzdi2+0xe>
 80019f2:	f7ff ffdd 	bl	80019b0 <__clzsi2>
 80019f6:	3020      	adds	r0, #32
 80019f8:	e002      	b.n	8001a00 <__clzdi2+0x14>
 80019fa:	0008      	movs	r0, r1
 80019fc:	f7ff ffd8 	bl	80019b0 <__clzsi2>
 8001a00:	bd10      	pop	{r4, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)

08001a04 <__eqdf2>:
 8001a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a06:	464e      	mov	r6, r9
 8001a08:	4645      	mov	r5, r8
 8001a0a:	46de      	mov	lr, fp
 8001a0c:	4657      	mov	r7, sl
 8001a0e:	4690      	mov	r8, r2
 8001a10:	b5e0      	push	{r5, r6, r7, lr}
 8001a12:	0017      	movs	r7, r2
 8001a14:	031a      	lsls	r2, r3, #12
 8001a16:	0b12      	lsrs	r2, r2, #12
 8001a18:	0005      	movs	r5, r0
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	4819      	ldr	r0, [pc, #100]	; (8001a84 <__eqdf2+0x80>)
 8001a1e:	030e      	lsls	r6, r1, #12
 8001a20:	004c      	lsls	r4, r1, #1
 8001a22:	4691      	mov	r9, r2
 8001a24:	005a      	lsls	r2, r3, #1
 8001a26:	0fdb      	lsrs	r3, r3, #31
 8001a28:	469b      	mov	fp, r3
 8001a2a:	0b36      	lsrs	r6, r6, #12
 8001a2c:	0d64      	lsrs	r4, r4, #21
 8001a2e:	0fc9      	lsrs	r1, r1, #31
 8001a30:	0d52      	lsrs	r2, r2, #21
 8001a32:	4284      	cmp	r4, r0
 8001a34:	d019      	beq.n	8001a6a <__eqdf2+0x66>
 8001a36:	4282      	cmp	r2, r0
 8001a38:	d010      	beq.n	8001a5c <__eqdf2+0x58>
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	4294      	cmp	r4, r2
 8001a3e:	d10e      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a40:	454e      	cmp	r6, r9
 8001a42:	d10c      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a44:	2001      	movs	r0, #1
 8001a46:	45c4      	cmp	ip, r8
 8001a48:	d109      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a4a:	4559      	cmp	r1, fp
 8001a4c:	d017      	beq.n	8001a7e <__eqdf2+0x7a>
 8001a4e:	2c00      	cmp	r4, #0
 8001a50:	d105      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a52:	0030      	movs	r0, r6
 8001a54:	4328      	orrs	r0, r5
 8001a56:	1e43      	subs	r3, r0, #1
 8001a58:	4198      	sbcs	r0, r3
 8001a5a:	e000      	b.n	8001a5e <__eqdf2+0x5a>
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a60:	46bb      	mov	fp, r7
 8001a62:	46b2      	mov	sl, r6
 8001a64:	46a9      	mov	r9, r5
 8001a66:	46a0      	mov	r8, r4
 8001a68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6a:	0033      	movs	r3, r6
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	432b      	orrs	r3, r5
 8001a70:	d1f5      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a72:	42a2      	cmp	r2, r4
 8001a74:	d1f3      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a76:	464b      	mov	r3, r9
 8001a78:	433b      	orrs	r3, r7
 8001a7a:	d1f0      	bne.n	8001a5e <__eqdf2+0x5a>
 8001a7c:	e7e2      	b.n	8001a44 <__eqdf2+0x40>
 8001a7e:	2000      	movs	r0, #0
 8001a80:	e7ed      	b.n	8001a5e <__eqdf2+0x5a>
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	000007ff 	.word	0x000007ff

08001a88 <__gedf2>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	4647      	mov	r7, r8
 8001a8c:	46ce      	mov	lr, r9
 8001a8e:	0004      	movs	r4, r0
 8001a90:	0018      	movs	r0, r3
 8001a92:	0016      	movs	r6, r2
 8001a94:	031b      	lsls	r3, r3, #12
 8001a96:	0b1b      	lsrs	r3, r3, #12
 8001a98:	4d2d      	ldr	r5, [pc, #180]	; (8001b50 <__gedf2+0xc8>)
 8001a9a:	004a      	lsls	r2, r1, #1
 8001a9c:	4699      	mov	r9, r3
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	0043      	lsls	r3, r0, #1
 8001aa2:	030f      	lsls	r7, r1, #12
 8001aa4:	46a4      	mov	ip, r4
 8001aa6:	46b0      	mov	r8, r6
 8001aa8:	0b3f      	lsrs	r7, r7, #12
 8001aaa:	0d52      	lsrs	r2, r2, #21
 8001aac:	0fc9      	lsrs	r1, r1, #31
 8001aae:	0d5b      	lsrs	r3, r3, #21
 8001ab0:	0fc0      	lsrs	r0, r0, #31
 8001ab2:	42aa      	cmp	r2, r5
 8001ab4:	d021      	beq.n	8001afa <__gedf2+0x72>
 8001ab6:	42ab      	cmp	r3, r5
 8001ab8:	d013      	beq.n	8001ae2 <__gedf2+0x5a>
 8001aba:	2a00      	cmp	r2, #0
 8001abc:	d122      	bne.n	8001b04 <__gedf2+0x7c>
 8001abe:	433c      	orrs	r4, r7
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <__gedf2+0x42>
 8001ac4:	464d      	mov	r5, r9
 8001ac6:	432e      	orrs	r6, r5
 8001ac8:	d022      	beq.n	8001b10 <__gedf2+0x88>
 8001aca:	2c00      	cmp	r4, #0
 8001acc:	d010      	beq.n	8001af0 <__gedf2+0x68>
 8001ace:	4281      	cmp	r1, r0
 8001ad0:	d022      	beq.n	8001b18 <__gedf2+0x90>
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	3901      	subs	r1, #1
 8001ad6:	4008      	ands	r0, r1
 8001ad8:	3801      	subs	r0, #1
 8001ada:	bcc0      	pop	{r6, r7}
 8001adc:	46b9      	mov	r9, r7
 8001ade:	46b0      	mov	r8, r6
 8001ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ae2:	464d      	mov	r5, r9
 8001ae4:	432e      	orrs	r6, r5
 8001ae6:	d129      	bne.n	8001b3c <__gedf2+0xb4>
 8001ae8:	2a00      	cmp	r2, #0
 8001aea:	d1f0      	bne.n	8001ace <__gedf2+0x46>
 8001aec:	433c      	orrs	r4, r7
 8001aee:	d1ee      	bne.n	8001ace <__gedf2+0x46>
 8001af0:	2800      	cmp	r0, #0
 8001af2:	d1f2      	bne.n	8001ada <__gedf2+0x52>
 8001af4:	2001      	movs	r0, #1
 8001af6:	4240      	negs	r0, r0
 8001af8:	e7ef      	b.n	8001ada <__gedf2+0x52>
 8001afa:	003d      	movs	r5, r7
 8001afc:	4325      	orrs	r5, r4
 8001afe:	d11d      	bne.n	8001b3c <__gedf2+0xb4>
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d0ee      	beq.n	8001ae2 <__gedf2+0x5a>
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e2      	bne.n	8001ace <__gedf2+0x46>
 8001b08:	464c      	mov	r4, r9
 8001b0a:	4326      	orrs	r6, r4
 8001b0c:	d1df      	bne.n	8001ace <__gedf2+0x46>
 8001b0e:	e7e0      	b.n	8001ad2 <__gedf2+0x4a>
 8001b10:	2000      	movs	r0, #0
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d0e1      	beq.n	8001ada <__gedf2+0x52>
 8001b16:	e7dc      	b.n	8001ad2 <__gedf2+0x4a>
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dc0a      	bgt.n	8001b32 <__gedf2+0xaa>
 8001b1c:	dbe8      	blt.n	8001af0 <__gedf2+0x68>
 8001b1e:	454f      	cmp	r7, r9
 8001b20:	d8d7      	bhi.n	8001ad2 <__gedf2+0x4a>
 8001b22:	d00e      	beq.n	8001b42 <__gedf2+0xba>
 8001b24:	2000      	movs	r0, #0
 8001b26:	454f      	cmp	r7, r9
 8001b28:	d2d7      	bcs.n	8001ada <__gedf2+0x52>
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d0e2      	beq.n	8001af4 <__gedf2+0x6c>
 8001b2e:	0008      	movs	r0, r1
 8001b30:	e7d3      	b.n	8001ada <__gedf2+0x52>
 8001b32:	4243      	negs	r3, r0
 8001b34:	4158      	adcs	r0, r3
 8001b36:	0040      	lsls	r0, r0, #1
 8001b38:	3801      	subs	r0, #1
 8001b3a:	e7ce      	b.n	8001ada <__gedf2+0x52>
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	4240      	negs	r0, r0
 8001b40:	e7cb      	b.n	8001ada <__gedf2+0x52>
 8001b42:	45c4      	cmp	ip, r8
 8001b44:	d8c5      	bhi.n	8001ad2 <__gedf2+0x4a>
 8001b46:	2000      	movs	r0, #0
 8001b48:	45c4      	cmp	ip, r8
 8001b4a:	d2c6      	bcs.n	8001ada <__gedf2+0x52>
 8001b4c:	e7ed      	b.n	8001b2a <__gedf2+0xa2>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff

08001b54 <__ledf2>:
 8001b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b56:	4647      	mov	r7, r8
 8001b58:	46ce      	mov	lr, r9
 8001b5a:	0004      	movs	r4, r0
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	0016      	movs	r6, r2
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	0b1b      	lsrs	r3, r3, #12
 8001b64:	4d2c      	ldr	r5, [pc, #176]	; (8001c18 <__ledf2+0xc4>)
 8001b66:	004a      	lsls	r2, r1, #1
 8001b68:	4699      	mov	r9, r3
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	0043      	lsls	r3, r0, #1
 8001b6e:	030f      	lsls	r7, r1, #12
 8001b70:	46a4      	mov	ip, r4
 8001b72:	46b0      	mov	r8, r6
 8001b74:	0b3f      	lsrs	r7, r7, #12
 8001b76:	0d52      	lsrs	r2, r2, #21
 8001b78:	0fc9      	lsrs	r1, r1, #31
 8001b7a:	0d5b      	lsrs	r3, r3, #21
 8001b7c:	0fc0      	lsrs	r0, r0, #31
 8001b7e:	42aa      	cmp	r2, r5
 8001b80:	d00d      	beq.n	8001b9e <__ledf2+0x4a>
 8001b82:	42ab      	cmp	r3, r5
 8001b84:	d010      	beq.n	8001ba8 <__ledf2+0x54>
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d127      	bne.n	8001bda <__ledf2+0x86>
 8001b8a:	433c      	orrs	r4, r7
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d111      	bne.n	8001bb4 <__ledf2+0x60>
 8001b90:	464d      	mov	r5, r9
 8001b92:	432e      	orrs	r6, r5
 8001b94:	d10e      	bne.n	8001bb4 <__ledf2+0x60>
 8001b96:	2000      	movs	r0, #0
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d015      	beq.n	8001bc8 <__ledf2+0x74>
 8001b9c:	e00e      	b.n	8001bbc <__ledf2+0x68>
 8001b9e:	003d      	movs	r5, r7
 8001ba0:	4325      	orrs	r5, r4
 8001ba2:	d110      	bne.n	8001bc6 <__ledf2+0x72>
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d118      	bne.n	8001bda <__ledf2+0x86>
 8001ba8:	464d      	mov	r5, r9
 8001baa:	432e      	orrs	r6, r5
 8001bac:	d10b      	bne.n	8001bc6 <__ledf2+0x72>
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d102      	bne.n	8001bb8 <__ledf2+0x64>
 8001bb2:	433c      	orrs	r4, r7
 8001bb4:	2c00      	cmp	r4, #0
 8001bb6:	d00b      	beq.n	8001bd0 <__ledf2+0x7c>
 8001bb8:	4281      	cmp	r1, r0
 8001bba:	d014      	beq.n	8001be6 <__ledf2+0x92>
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	3901      	subs	r1, #1
 8001bc0:	4008      	ands	r0, r1
 8001bc2:	3801      	subs	r0, #1
 8001bc4:	e000      	b.n	8001bc8 <__ledf2+0x74>
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	bcc0      	pop	{r6, r7}
 8001bca:	46b9      	mov	r9, r7
 8001bcc:	46b0      	mov	r8, r6
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <__ledf2+0x74>
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	4240      	negs	r0, r0
 8001bd8:	e7f6      	b.n	8001bc8 <__ledf2+0x74>
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1ec      	bne.n	8001bb8 <__ledf2+0x64>
 8001bde:	464c      	mov	r4, r9
 8001be0:	4326      	orrs	r6, r4
 8001be2:	d1e9      	bne.n	8001bb8 <__ledf2+0x64>
 8001be4:	e7ea      	b.n	8001bbc <__ledf2+0x68>
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dd04      	ble.n	8001bf4 <__ledf2+0xa0>
 8001bea:	4243      	negs	r3, r0
 8001bec:	4158      	adcs	r0, r3
 8001bee:	0040      	lsls	r0, r0, #1
 8001bf0:	3801      	subs	r0, #1
 8001bf2:	e7e9      	b.n	8001bc8 <__ledf2+0x74>
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	dbeb      	blt.n	8001bd0 <__ledf2+0x7c>
 8001bf8:	454f      	cmp	r7, r9
 8001bfa:	d8df      	bhi.n	8001bbc <__ledf2+0x68>
 8001bfc:	d006      	beq.n	8001c0c <__ledf2+0xb8>
 8001bfe:	2000      	movs	r0, #0
 8001c00:	454f      	cmp	r7, r9
 8001c02:	d2e1      	bcs.n	8001bc8 <__ledf2+0x74>
 8001c04:	2900      	cmp	r1, #0
 8001c06:	d0e5      	beq.n	8001bd4 <__ledf2+0x80>
 8001c08:	0008      	movs	r0, r1
 8001c0a:	e7dd      	b.n	8001bc8 <__ledf2+0x74>
 8001c0c:	45c4      	cmp	ip, r8
 8001c0e:	d8d5      	bhi.n	8001bbc <__ledf2+0x68>
 8001c10:	2000      	movs	r0, #0
 8001c12:	45c4      	cmp	ip, r8
 8001c14:	d2d8      	bcs.n	8001bc8 <__ledf2+0x74>
 8001c16:	e7f5      	b.n	8001c04 <__ledf2+0xb0>
 8001c18:	000007ff 	.word	0x000007ff

08001c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint16_t adc_value = 0;
 8001c22:	1dbb      	adds	r3, r7, #6
 8001c24:	2200      	movs	r2, #0
 8001c26:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c28:	f000 fb9a 	bl	8002360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c2c:	f000 f84a 	bl	8001cc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c30:	f000 f9ca 	bl	8001fc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c34:	f000 f97a 	bl	8001f2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001c38:	f000 f88c 	bl	8001d54 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001c3c:	f000 f8f6 	bl	8001e2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <main+0x98>)
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 ff2a 	bl	8002a9c <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <main+0x9c>)
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f002 fcf9 	bl	8004644 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c52:	2301      	movs	r3, #1
 8001c54:	425a      	negs	r2, r3
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <main+0x98>)
 8001c58:	0011      	movs	r1, r2
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f000 ff6c 	bl	8002b38 <HAL_ADC_PollForConversion>
      adc_value = HAL_ADC_GetValue(&hadc1);
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <main+0x98>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fffc 	bl	8002c60 <HAL_ADC_GetValue>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	1dbb      	adds	r3, r7, #6
 8001c6c:	801a      	strh	r2, [r3, #0]

      // Map ADC value to PPM range (adjust these values based on your needs)
      uint16_t ppm_value = (uint16_t)(adc_value / 4095.0 * 100);
 8001c6e:	1dbb      	adds	r3, r7, #6
 8001c70:	881b      	ldrh	r3, [r3, #0]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7ff fe2e 	bl	80018d4 <__aeabi_i2d>
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <main+0xa0>)
 8001c7c:	f7fe fcc2 	bl	8000604 <__aeabi_ddiv>
 8001c80:	0002      	movs	r2, r0
 8001c82:	000b      	movs	r3, r1
 8001c84:	0010      	movs	r0, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <main+0xa4>)
 8001c8c:	f7fe ffa8 	bl	8000be0 <__aeabi_dmul>
 8001c90:	0002      	movs	r2, r0
 8001c92:	000b      	movs	r3, r1
 8001c94:	1d3c      	adds	r4, r7, #4
 8001c96:	0010      	movs	r0, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	f7fe fbc9 	bl	8000430 <__aeabi_d2uiz>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	8023      	strh	r3, [r4, #0]

      __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ppm_value);
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <main+0x9c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1d3a      	adds	r2, r7, #4
 8001ca8:	8812      	ldrh	r2, [r2, #0]
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38

      HAL_Delay(20); // Adjust delay based on your requirements
 8001cac:	2014      	movs	r0, #20
 8001cae:	f000 fbdd 	bl	800246c <HAL_Delay>
  {
 8001cb2:	e7ce      	b.n	8001c52 <main+0x36>
 8001cb4:	20000028 	.word	0x20000028
 8001cb8:	2000008c 	.word	0x2000008c
 8001cbc:	40affe00 	.word	0x40affe00
 8001cc0:	40590000 	.word	0x40590000

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b590      	push	{r4, r7, lr}
 8001cc6:	b095      	sub	sp, #84	; 0x54
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	2414      	movs	r4, #20
 8001ccc:	193b      	adds	r3, r7, r4
 8001cce:	0018      	movs	r0, r3
 8001cd0:	233c      	movs	r3, #60	; 0x3c
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f004 fa8f 	bl	80061f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	0018      	movs	r0, r3
 8001cde:	2310      	movs	r3, #16
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f004 fa88 	bl	80061f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	0018      	movs	r0, r3
 8001cee:	f001 fc5f 	bl	80035b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0052      	lsls	r2, r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d00:	193b      	adds	r3, r7, r4
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	2240      	movs	r2, #64	; 0x40
 8001d0a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d0c:	193b      	adds	r3, r7, r4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	0018      	movs	r0, r3
 8001d16:	f001 fc97 	bl	8003648 <HAL_RCC_OscConfig>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001d1e:	f000 f9af 	bl	8002080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d28:	1d3b      	adds	r3, r7, #4
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f001 ffe2 	bl	8003d08 <HAL_RCC_ClockConfig>
 8001d44:	1e03      	subs	r3, r0, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001d48:	f000 f99a 	bl	8002080 <Error_Handler>
  }
}
 8001d4c:	46c0      	nop			; (mov r8, r8)
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b015      	add	sp, #84	; 0x54
 8001d52:	bd90      	pop	{r4, r7, pc}

08001d54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d5a:	1d3b      	adds	r3, r7, #4
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	230c      	movs	r3, #12
 8001d60:	001a      	movs	r2, r3
 8001d62:	2100      	movs	r1, #0
 8001d64:	f004 fa48 	bl	80061f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d6a:	4a2e      	ldr	r2, [pc, #184]	; (8001e24 <MX_ADC1_Init+0xd0>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d70:	2280      	movs	r2, #128	; 0x80
 8001d72:	05d2      	lsls	r2, r2, #23
 8001d74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d8e:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001d94:	4b22      	ldr	r3, [pc, #136]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001da0:	4b1f      	ldr	r3, [pc, #124]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001da8:	2220      	movs	r2, #32
 8001daa:	2100      	movs	r1, #0
 8001dac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001dae:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001db4:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dbc:	222c      	movs	r2, #44	; 0x2c
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dc2:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001dc8:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dd6:	223c      	movs	r2, #60	; 0x3c
 8001dd8:	2100      	movs	r1, #0
 8001dda:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001ddc:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 fcb1 	bl	800274c <HAL_ADC_Init>
 8001dea:	1e03      	subs	r3, r0, #0
 8001dec:	d001      	beq.n	8001df2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001dee:	f000 f947 	bl	8002080 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <MX_ADC1_Init+0xd4>)
 8001df6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e04:	1d3a      	adds	r2, r7, #4
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <MX_ADC1_Init+0xcc>)
 8001e08:	0011      	movs	r1, r2
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 ff34 	bl	8002c78 <HAL_ADC_ConfigChannel>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001e14:	f000 f934 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b004      	add	sp, #16
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000028 	.word	0x20000028
 8001e24:	40012400 	.word	0x40012400
 8001e28:	24000200 	.word	0x24000200

08001e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08e      	sub	sp, #56	; 0x38
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e32:	2328      	movs	r3, #40	; 0x28
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	0018      	movs	r0, r3
 8001e38:	2310      	movs	r3, #16
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	f004 f9db 	bl	80061f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e42:	231c      	movs	r3, #28
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	0018      	movs	r0, r3
 8001e48:	230c      	movs	r3, #12
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f004 f9d3 	bl	80061f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e52:	003b      	movs	r3, r7
 8001e54:	0018      	movs	r0, r3
 8001e56:	231c      	movs	r3, #28
 8001e58:	001a      	movs	r2, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f004 f9cc 	bl	80061f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e62:	2280      	movs	r2, #128	; 0x80
 8001e64:	05d2      	lsls	r2, r2, #23
 8001e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e6a:	227f      	movs	r2, #127	; 0x7f
 8001e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e76:	4a2c      	ldr	r2, [pc, #176]	; (8001f28 <MX_TIM2_Init+0xfc>)
 8001e78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f002 fb23 	bl	80044d4 <HAL_TIM_Base_Init>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001e92:	f000 f8f5 	bl	8002080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e96:	2128      	movs	r1, #40	; 0x28
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	0152      	lsls	r2, r2, #5
 8001e9e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ea0:	187a      	adds	r2, r7, r1
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f002 fdbc 	bl	8004a24 <HAL_TIM_ConfigClockSource>
 8001eac:	1e03      	subs	r3, r0, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001eb0:	f000 f8e6 	bl	8002080 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f002 fb64 	bl	8004584 <HAL_TIM_PWM_Init>
 8001ebc:	1e03      	subs	r3, r0, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001ec0:	f000 f8de 	bl	8002080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec4:	211c      	movs	r1, #28
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed2:	187a      	adds	r2, r7, r1
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f003 fa87 	bl	80053ec <HAL_TIMEx_MasterConfigSynchronization>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001ee2:	f000 f8cd 	bl	8002080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	2260      	movs	r2, #96	; 0x60
 8001eea:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001eec:	003b      	movs	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef2:	003b      	movs	r3, r7
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef8:	003b      	movs	r3, r7
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001efe:	0039      	movs	r1, r7
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001f02:	2204      	movs	r2, #4
 8001f04:	0018      	movs	r0, r3
 8001f06:	f002 fc8d 	bl	8004824 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	1e03      	subs	r3, r0, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001f0e:	f000 f8b7 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <MX_TIM2_Init+0xf8>)
 8001f14:	0018      	movs	r0, r3
 8001f16:	f000 f941 	bl	800219c <HAL_TIM_MspPostInit>

}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b00e      	add	sp, #56	; 0x38
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	2000008c 	.word	0x2000008c
 8001f28:	00000271 	.word	0x00000271

08001f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <MX_USART2_UART_Init+0x98>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f36:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f38:	22e1      	movs	r2, #225	; 0xe1
 8001f3a:	0252      	lsls	r2, r2, #9
 8001f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f50:	4b1b      	ldr	r3, [pc, #108]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f52:	220c      	movs	r2, #12
 8001f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6e:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f76:	0018      	movs	r0, r3
 8001f78:	f003 faae 	bl	80054d8 <HAL_UART_Init>
 8001f7c:	1e03      	subs	r3, r0, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f80:	f000 f87e 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f84:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f86:	2100      	movs	r1, #0
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f004 f855 	bl	8006038 <HAL_UARTEx_SetTxFifoThreshold>
 8001f8e:	1e03      	subs	r3, r0, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f92:	f000 f875 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001f98:	2100      	movs	r1, #0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f004 f88c 	bl	80060b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fa4:	f000 f86c 	bl	8002080 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <MX_USART2_UART_Init+0x94>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f004 f80a 	bl	8005fc4 <HAL_UARTEx_DisableFifoMode>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fb4:	f000 f864 	bl	8002080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	200000d8 	.word	0x200000d8
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	2414      	movs	r4, #20
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f004 f90d 	bl	80061f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	4b27      	ldr	r3, [pc, #156]	; (800207c <MX_GPIO_Init+0xb4>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <MX_GPIO_Init+0xb4>)
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <MX_GPIO_Init+0xb4>)
 8001fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <MX_GPIO_Init+0xb4>)
 8001ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <MX_GPIO_Init+0xb4>)
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	430a      	orrs	r2, r1
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <MX_GPIO_Init+0xb4>)
 8002004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <MX_GPIO_Init+0xb4>)
 8002010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_GPIO_Init+0xb4>)
 8002014:	2101      	movs	r1, #1
 8002016:	430a      	orrs	r2, r1
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <MX_GPIO_Init+0xb4>)
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	2201      	movs	r2, #1
 8002020:	4013      	ands	r3, r2
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <MX_GPIO_Init+0xb4>)
 8002028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202a:	4b14      	ldr	r3, [pc, #80]	; (800207c <MX_GPIO_Init+0xb4>)
 800202c:	2102      	movs	r1, #2
 800202e:	430a      	orrs	r2, r1
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <MX_GPIO_Init+0xb4>)
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2202      	movs	r2, #2
 8002038:	4013      	ands	r3, r2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800203e:	23a0      	movs	r3, #160	; 0xa0
 8002040:	05db      	lsls	r3, r3, #23
 8002042:	2200      	movs	r2, #0
 8002044:	2120      	movs	r1, #32
 8002046:	0018      	movs	r0, r3
 8002048:	f001 fa94 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800204c:	0021      	movs	r1, r4
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2220      	movs	r2, #32
 8002052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	187b      	adds	r3, r7, r1
 8002056:	2201      	movs	r2, #1
 8002058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	187b      	adds	r3, r7, r1
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2202      	movs	r2, #2
 8002064:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002066:	187a      	adds	r2, r7, r1
 8002068:	23a0      	movs	r3, #160	; 0xa0
 800206a:	05db      	lsls	r3, r3, #23
 800206c:	0011      	movs	r1, r2
 800206e:	0018      	movs	r0, r3
 8002070:	f001 f914 	bl	800329c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b00b      	add	sp, #44	; 0x2c
 800207a:	bd90      	pop	{r4, r7, pc}
 800207c:	40021000 	.word	0x40021000

08002080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002084:	b672      	cpsid	i
}
 8002086:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002088:	e7fe      	b.n	8002088 <Error_Handler+0x8>
	...

0800208c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_MspInit+0x4c>)
 8002094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_MspInit+0x4c>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_MspInit+0x4c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_MspInit+0x4c>)
 80020ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_MspInit+0x4c>)
 80020b0:	2180      	movs	r1, #128	; 0x80
 80020b2:	0549      	lsls	r1, r1, #21
 80020b4:	430a      	orrs	r2, r1
 80020b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <HAL_MspInit+0x4c>)
 80020ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	055b      	lsls	r3, r3, #21
 80020c0:	4013      	ands	r3, r2
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	0018      	movs	r0, r3
 80020cc:	f000 f9f2 	bl	80024b4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b08b      	sub	sp, #44	; 0x2c
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	2414      	movs	r4, #20
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	0018      	movs	r0, r3
 80020ea:	2314      	movs	r3, #20
 80020ec:	001a      	movs	r2, r3
 80020ee:	2100      	movs	r1, #0
 80020f0:	f004 f882 	bl	80061f8 <memset>
  if(hadc->Instance==ADC1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a17      	ldr	r2, [pc, #92]	; (8002158 <HAL_ADC_MspInit+0x7c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d128      	bne.n	8002150 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <HAL_ADC_MspInit+0x80>)
 8002100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_ADC_MspInit+0x80>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0349      	lsls	r1, r1, #13
 8002108:	430a      	orrs	r2, r1
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_ADC_MspInit+0x80>)
 800210e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	035b      	lsls	r3, r3, #13
 8002114:	4013      	ands	r3, r2
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_ADC_MspInit+0x80>)
 800211c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_ADC_MspInit+0x80>)
 8002120:	2102      	movs	r1, #2
 8002122:	430a      	orrs	r2, r1
 8002124:	635a      	str	r2, [r3, #52]	; 0x34
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_ADC_MspInit+0x80>)
 8002128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800212a:	2202      	movs	r2, #2
 800212c:	4013      	ands	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002132:	193b      	adds	r3, r7, r4
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002138:	193b      	adds	r3, r7, r4
 800213a:	2203      	movs	r2, #3
 800213c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	193b      	adds	r3, r7, r4
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002144:	193b      	adds	r3, r7, r4
 8002146:	4a06      	ldr	r2, [pc, #24]	; (8002160 <HAL_ADC_MspInit+0x84>)
 8002148:	0019      	movs	r1, r3
 800214a:	0010      	movs	r0, r2
 800214c:	f001 f8a6 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002150:	46c0      	nop			; (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b00b      	add	sp, #44	; 0x2c
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	40012400 	.word	0x40012400
 800215c:	40021000 	.word	0x40021000
 8002160:	50000400 	.word	0x50000400

08002164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	05db      	lsls	r3, r3, #23
 8002174:	429a      	cmp	r2, r3
 8002176:	d10b      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_TIM_Base_MspInit+0x34>)
 800217a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_TIM_Base_MspInit+0x34>)
 800217e:	2101      	movs	r1, #1
 8002180:	430a      	orrs	r2, r1
 8002182:	63da      	str	r2, [r3, #60]	; 0x3c
 8002184:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_TIM_Base_MspInit+0x34>)
 8002186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40021000 	.word	0x40021000

0800219c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	240c      	movs	r4, #12
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	0018      	movs	r0, r3
 80021aa:	2314      	movs	r3, #20
 80021ac:	001a      	movs	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	f004 f822 	bl	80061f8 <memset>
  if(htim->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	429a      	cmp	r2, r3
 80021be:	d122      	bne.n	8002206 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_TIM_MspPostInit+0x74>)
 80021c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_TIM_MspPostInit+0x74>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	635a      	str	r2, [r3, #52]	; 0x34
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_TIM_MspPostInit+0x74>)
 80021ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021d8:	0021      	movs	r1, r4
 80021da:	187b      	adds	r3, r7, r1
 80021dc:	2202      	movs	r2, #2
 80021de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2202      	movs	r2, #2
 80021e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2202      	movs	r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	187a      	adds	r2, r7, r1
 80021fa:	23a0      	movs	r3, #160	; 0xa0
 80021fc:	05db      	lsls	r3, r3, #23
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f001 f84b 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b009      	add	sp, #36	; 0x24
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b09d      	sub	sp, #116	; 0x74
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	235c      	movs	r3, #92	; 0x5c
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	0018      	movs	r0, r3
 8002222:	2314      	movs	r3, #20
 8002224:	001a      	movs	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	f003 ffe6 	bl	80061f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	2410      	movs	r4, #16
 800222e:	193b      	adds	r3, r7, r4
 8002230:	0018      	movs	r0, r3
 8002232:	234c      	movs	r3, #76	; 0x4c
 8002234:	001a      	movs	r2, r3
 8002236:	2100      	movs	r1, #0
 8002238:	f003 ffde 	bl	80061f8 <memset>
  if(huart->Instance==USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_UART_MspInit+0xb8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d13e      	bne.n	80022c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002246:	193b      	adds	r3, r7, r4
 8002248:	2202      	movs	r2, #2
 800224a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800224c:	193b      	adds	r3, r7, r4
 800224e:	2200      	movs	r2, #0
 8002250:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002252:	193b      	adds	r3, r7, r4
 8002254:	0018      	movs	r0, r3
 8002256:	f001 ff01 	bl	800405c <HAL_RCCEx_PeriphCLKConfig>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d001      	beq.n	8002262 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800225e:	f7ff ff0f 	bl	8002080 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 8002264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	0289      	lsls	r1, r1, #10
 800226c:	430a      	orrs	r2, r1
 800226e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 8002272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	029b      	lsls	r3, r3, #10
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 8002280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 8002284:	2101      	movs	r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_UART_MspInit+0xbc>)
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002296:	215c      	movs	r1, #92	; 0x5c
 8002298:	187b      	adds	r3, r7, r1
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	2202      	movs	r2, #2
 80022a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	187b      	adds	r3, r7, r1
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	2201      	movs	r2, #1
 80022b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b6:	187a      	adds	r2, r7, r1
 80022b8:	23a0      	movs	r3, #160	; 0xa0
 80022ba:	05db      	lsls	r3, r3, #23
 80022bc:	0011      	movs	r1, r2
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 ffec 	bl	800329c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b01d      	add	sp, #116	; 0x74
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	40004400 	.word	0x40004400
 80022d0:	40021000 	.word	0x40021000

080022d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022d8:	e7fe      	b.n	80022d8 <NMI_Handler+0x4>

080022da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <HardFault_Handler+0x4>

080022e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f000 f89c 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800230e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002310:	f7ff fff7 	bl	8002302 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	; (8002348 <LoopForever+0x6>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	; (800234c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	; (8002350 <LoopForever+0xe>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	; (8002358 <LoopForever+0x16>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800233a:	f003 ff65 	bl	8006208 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800233e:	f7ff fc6d 	bl	8001c1c <main>

08002342 <LoopForever>:

LoopForever:
  b LoopForever
 8002342:	e7fe      	b.n	8002342 <LoopForever>
  ldr   r0, =_estack
 8002344:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002350:	08006394 	.word	0x08006394
  ldr r2, =_sbss
 8002354:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002358:	20000170 	.word	0x20000170

0800235c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC1_COMP_IRQHandler>
	...

08002360 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800236c:	4b0b      	ldr	r3, [pc, #44]	; (800239c <HAL_Init+0x3c>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	4b0a      	ldr	r3, [pc, #40]	; (800239c <HAL_Init+0x3c>)
 8002372:	2180      	movs	r1, #128	; 0x80
 8002374:	0049      	lsls	r1, r1, #1
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800237a:	2000      	movs	r0, #0
 800237c:	f000 f810 	bl	80023a0 <HAL_InitTick>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d003      	beq.n	800238c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e001      	b.n	8002390 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff fe7e 	bl	800208c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	40022000 	.word	0x40022000

080023a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a8:	230f      	movs	r3, #15
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_InitTick+0x88>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d02b      	beq.n	8002410 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80023b8:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_InitTick+0x8c>)
 80023ba:	681c      	ldr	r4, [r3, #0]
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_InitTick+0x88>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	0019      	movs	r1, r3
 80023c2:	23fa      	movs	r3, #250	; 0xfa
 80023c4:	0098      	lsls	r0, r3, #2
 80023c6:	f7fd fe9d 	bl	8000104 <__udivsi3>
 80023ca:	0003      	movs	r3, r0
 80023cc:	0019      	movs	r1, r3
 80023ce:	0020      	movs	r0, r4
 80023d0:	f7fd fe98 	bl	8000104 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 ff53 	bl	8003282 <HAL_SYSTICK_Config>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d112      	bne.n	8002406 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d80a      	bhi.n	80023fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	2301      	movs	r3, #1
 80023ea:	425b      	negs	r3, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 ff32 	bl	8003258 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023f4:	4b0e      	ldr	r3, [pc, #56]	; (8002430 <HAL_InitTick+0x90>)
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e00d      	b.n	8002418 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80023fc:	230f      	movs	r3, #15
 80023fe:	18fb      	adds	r3, r7, r3
 8002400:	2201      	movs	r2, #1
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e008      	b.n	8002418 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002406:	230f      	movs	r3, #15
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
 800240e:	e003      	b.n	8002418 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002418:	230f      	movs	r3, #15
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b005      	add	sp, #20
 8002424:	bd90      	pop	{r4, r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	20000008 	.word	0x20000008
 800242c:	20000000 	.word	0x20000000
 8002430:	20000004 	.word	0x20000004

08002434 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_IncTick+0x1c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	001a      	movs	r2, r3
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_IncTick+0x20>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	18d2      	adds	r2, r2, r3
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_IncTick+0x20>)
 8002446:	601a      	str	r2, [r3, #0]
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	20000008 	.word	0x20000008
 8002454:	2000016c 	.word	0x2000016c

08002458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  return uwTick;
 800245c:	4b02      	ldr	r3, [pc, #8]	; (8002468 <HAL_GetTick+0x10>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			; (mov r8, r8)
 8002468:	2000016c 	.word	0x2000016c

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff fff0 	bl	8002458 <HAL_GetTick>
 8002478:	0003      	movs	r3, r0
 800247a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3301      	adds	r3, #1
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	001a      	movs	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	189b      	adds	r3, r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	f7ff ffe0 	bl	8002458 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b004      	add	sp, #16
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	20000008 	.word	0x20000008

080024b4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	0019      	movs	r1, r3
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b002      	add	sp, #8
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			; (mov r8, r8)
 80024d8:	40010000 	.word	0x40010000
 80024dc:	fffff9ff 	.word	0xfffff9ff

080024e0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80024f0:	401a      	ands	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b002      	add	sp, #8
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	fe3fffff 	.word	0xfe3fffff

08002508 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	23e0      	movs	r3, #224	; 0xe0
 8002516:	045b      	lsls	r3, r3, #17
 8002518:	4013      	ands	r3, r2
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}

08002522 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	2104      	movs	r1, #4
 8002536:	400a      	ands	r2, r1
 8002538:	2107      	movs	r1, #7
 800253a:	4091      	lsls	r1, r2
 800253c:	000a      	movs	r2, r1
 800253e:	43d2      	mvns	r2, r2
 8002540:	401a      	ands	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2104      	movs	r1, #4
 8002546:	400b      	ands	r3, r1
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4099      	lsls	r1, r3
 800254c:	000b      	movs	r3, r1
 800254e:	431a      	orrs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b004      	add	sp, #16
 800255a:	bd80      	pop	{r7, pc}

0800255c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	2104      	movs	r1, #4
 800256e:	400a      	ands	r2, r1
 8002570:	2107      	movs	r1, #7
 8002572:	4091      	lsls	r1, r2
 8002574:	000a      	movs	r2, r1
 8002576:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	2104      	movs	r1, #4
 800257c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800257e:	40da      	lsrs	r2, r3
 8002580:	0013      	movs	r3, r2
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}

0800258a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4013      	ands	r3, r2
 800259c:	d101      	bne.n	80025a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	211f      	movs	r1, #31
 80025c0:	400a      	ands	r2, r1
 80025c2:	210f      	movs	r1, #15
 80025c4:	4091      	lsls	r1, r2
 80025c6:	000a      	movs	r2, r1
 80025c8:	43d2      	mvns	r2, r2
 80025ca:	401a      	ands	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	0e9b      	lsrs	r3, r3, #26
 80025d0:	210f      	movs	r1, #15
 80025d2:	4019      	ands	r1, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	201f      	movs	r0, #31
 80025d8:	4003      	ands	r3, r0
 80025da:	4099      	lsls	r1, r3
 80025dc:	000b      	movs	r3, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b004      	add	sp, #16
 80025ea:	bd80      	pop	{r7, pc}

080025ec <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	035b      	lsls	r3, r3, #13
 80025fe:	0b5b      	lsrs	r3, r3, #13
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	46bd      	mov	sp, r7
 800260a:	b002      	add	sp, #8
 800260c:	bd80      	pop	{r7, pc}

0800260e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	0352      	lsls	r2, r2, #13
 8002620:	0b52      	lsrs	r2, r2, #13
 8002622:	43d2      	mvns	r2, r2
 8002624:	401a      	ands	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	629a      	str	r2, [r3, #40]	; 0x28
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	68ba      	ldr	r2, [r7, #8]
 8002646:	0212      	lsls	r2, r2, #8
 8002648:	43d2      	mvns	r2, r2
 800264a:	401a      	ands	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	021b      	lsls	r3, r3, #8
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	400b      	ands	r3, r1
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002656:	400b      	ands	r3, r1
 8002658:	431a      	orrs	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	07ffff00 	.word	0x07ffff00

0800266c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	4a05      	ldr	r2, [pc, #20]	; (8002690 <LL_ADC_EnableInternalRegulator+0x24>)
 800267a:	4013      	ands	r3, r2
 800267c:	2280      	movs	r2, #128	; 0x80
 800267e:	0552      	lsls	r2, r2, #21
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	b002      	add	sp, #8
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	6fffffe8 	.word	0x6fffffe8

08002694 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	055b      	lsls	r3, r3, #21
 80026a4:	401a      	ands	r2, r3
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	055b      	lsls	r3, r3, #21
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d101      	bne.n	80026b2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	0018      	movs	r0, r3
 80026b6:	46bd      	mov	sp, r7
 80026b8:	b002      	add	sp, #8
 80026ba:	bd80      	pop	{r7, pc}

080026bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a04      	ldr	r2, [pc, #16]	; (80026dc <LL_ADC_Enable+0x20>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	2201      	movs	r2, #1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b002      	add	sp, #8
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	7fffffe8 	.word	0x7fffffe8

080026e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2201      	movs	r2, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <LL_ADC_IsEnabled+0x18>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <LL_ADC_IsEnabled+0x1a>
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b002      	add	sp, #8
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	4a04      	ldr	r2, [pc, #16]	; (8002724 <LL_ADC_REG_StartConversion+0x20>)
 8002712:	4013      	ands	r3, r2
 8002714:	2204      	movs	r2, #4
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}
 8002724:	7fffffe8 	.word	0x7fffffe8

08002728 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2204      	movs	r2, #4
 8002736:	4013      	ands	r3, r2
 8002738:	2b04      	cmp	r3, #4
 800273a:	d101      	bne.n	8002740 <LL_ADC_REG_IsConversionOngoing+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b002      	add	sp, #8
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	231f      	movs	r3, #31
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e17f      	b.n	8002a72 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fcad 	bl	80020dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2254      	movs	r2, #84	; 0x54
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff ff7d 	bl	8002694 <LL_ADC_IsInternalRegulatorEnabled>
 800279a:	1e03      	subs	r3, r0, #0
 800279c:	d115      	bne.n	80027ca <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7ff ff62 	bl	800266c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4bb4      	ldr	r3, [pc, #720]	; (8002a7c <HAL_ADC_Init+0x330>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	49b4      	ldr	r1, [pc, #720]	; (8002a80 <HAL_ADC_Init+0x334>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f7fd fca8 	bl	8000104 <__udivsi3>
 80027b4:	0003      	movs	r3, r0
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff ff60 	bl	8002694 <LL_ADC_IsInternalRegulatorEnabled>
 80027d4:	1e03      	subs	r3, r0, #0
 80027d6:	d10f      	bne.n	80027f8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027dc:	2210      	movs	r2, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2201      	movs	r2, #1
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027f0:	231f      	movs	r3, #31
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ff93 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002802:	0003      	movs	r3, r0
 8002804:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280a:	2210      	movs	r2, #16
 800280c:	4013      	ands	r3, r2
 800280e:	d000      	beq.n	8002812 <HAL_ADC_Init+0xc6>
 8002810:	e122      	b.n	8002a58 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d000      	beq.n	800281a <HAL_ADC_Init+0xce>
 8002818:	e11e      	b.n	8002a58 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a99      	ldr	r2, [pc, #612]	; (8002a84 <HAL_ADC_Init+0x338>)
 8002820:	4013      	ands	r3, r2
 8002822:	2202      	movs	r2, #2
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0018      	movs	r0, r3
 8002830:	f7ff ff56 	bl	80026e0 <LL_ADC_IsEnabled>
 8002834:	1e03      	subs	r3, r0, #0
 8002836:	d000      	beq.n	800283a <HAL_ADC_Init+0xee>
 8002838:	e0ad      	b.n	8002996 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7e1b      	ldrb	r3, [r3, #24]
 8002842:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002844:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7e5b      	ldrb	r3, [r3, #25]
 800284a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800284c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	7e9b      	ldrb	r3, [r3, #26]
 8002852:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002854:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_ADC_Init+0x118>
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	015b      	lsls	r3, r3, #5
 8002862:	e000      	b.n	8002866 <HAL_ADC_Init+0x11a>
 8002864:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002866:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800286c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	da04      	bge.n	8002880 <HAL_ADC_Init+0x134>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	085b      	lsrs	r3, r3, #1
 800287e:	e001      	b.n	8002884 <HAL_ADC_Init+0x138>
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002884:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	212c      	movs	r1, #44	; 0x2c
 800288a:	5c5b      	ldrb	r3, [r3, r1]
 800288c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800288e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	5c9b      	ldrb	r3, [r3, r2]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d115      	bne.n	80028cc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e9b      	ldrb	r3, [r3, #26]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	0252      	lsls	r2, r2, #9
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	e00b      	b.n	80028cc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	2220      	movs	r2, #32
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	2201      	movs	r2, #1
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d8:	23e0      	movs	r3, #224	; 0xe0
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80028e2:	4313      	orrs	r3, r2
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a65      	ldr	r2, [pc, #404]	; (8002a88 <HAL_ADC_Init+0x33c>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	0019      	movs	r1, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0f9b      	lsrs	r3, r3, #30
 8002906:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800290c:	4313      	orrs	r3, r2
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4313      	orrs	r3, r2
 8002912:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	223c      	movs	r2, #60	; 0x3c
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d111      	bne.n	8002942 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0f9b      	lsrs	r3, r3, #30
 8002924:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800292a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002930:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002936:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	2201      	movs	r2, #1
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_ADC_Init+0x340>)
 800294a:	4013      	ands	r3, r2
 800294c:	0019      	movs	r1, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	430a      	orrs	r2, r1
 8002956:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	23c0      	movs	r3, #192	; 0xc0
 800295e:	061b      	lsls	r3, r3, #24
 8002960:	429a      	cmp	r2, r3
 8002962:	d018      	beq.n	8002996 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	05db      	lsls	r3, r3, #23
 800296c:	429a      	cmp	r2, r3
 800296e:	d012      	beq.n	8002996 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	061b      	lsls	r3, r3, #24
 8002978:	429a      	cmp	r2, r3
 800297a:	d00c      	beq.n	8002996 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800297c:	4b44      	ldr	r3, [pc, #272]	; (8002a90 <HAL_ADC_Init+0x344>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a44      	ldr	r2, [pc, #272]	; (8002a94 <HAL_ADC_Init+0x348>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	23f0      	movs	r3, #240	; 0xf0
 800298c:	039b      	lsls	r3, r3, #14
 800298e:	401a      	ands	r2, r3
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_ADC_Init+0x344>)
 8002992:	430a      	orrs	r2, r1
 8002994:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	001a      	movs	r2, r3
 80029a0:	2100      	movs	r1, #0
 80029a2:	f7ff fdbe 	bl	8002522 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	493a      	ldr	r1, [pc, #232]	; (8002a98 <HAL_ADC_Init+0x34c>)
 80029b0:	001a      	movs	r2, r3
 80029b2:	f7ff fdb6 	bl	8002522 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2110      	movs	r1, #16
 80029ca:	4249      	negs	r1, r1
 80029cc:	430a      	orrs	r2, r1
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28
 80029d0:	e018      	b.n	8002a04 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691a      	ldr	r2, [r3, #16]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	039b      	lsls	r3, r3, #14
 80029da:	429a      	cmp	r2, r3
 80029dc:	d112      	bne.n	8002a04 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	221c      	movs	r2, #28
 80029ee:	4013      	ands	r3, r2
 80029f0:	2210      	movs	r2, #16
 80029f2:	4252      	negs	r2, r2
 80029f4:	409a      	lsls	r2, r3
 80029f6:	0011      	movs	r1, r2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2100      	movs	r1, #0
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff fda6 	bl	800255c <LL_ADC_GetSamplingTimeCommonChannels>
 8002a10:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d10b      	bne.n	8002a32 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	2203      	movs	r2, #3
 8002a26:	4393      	bics	r3, r2
 8002a28:	2201      	movs	r2, #1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a30:	e01c      	b.n	8002a6c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	2212      	movs	r2, #18
 8002a38:	4393      	bics	r3, r2
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2201      	movs	r2, #1
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002a4e:	231f      	movs	r3, #31
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002a56:	e009      	b.n	8002a6c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	781b      	ldrb	r3, [r3, #0]
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b008      	add	sp, #32
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	00030d40 	.word	0x00030d40
 8002a84:	fffffefd 	.word	0xfffffefd
 8002a88:	fffe0201 	.word	0xfffe0201
 8002a8c:	1ffffc02 	.word	0x1ffffc02
 8002a90:	40012708 	.word	0x40012708
 8002a94:	ffc3ffff 	.word	0xffc3ffff
 8002a98:	07ffff04 	.word	0x07ffff04

08002a9c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b5b0      	push	{r4, r5, r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f7ff fe3d 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d135      	bne.n	8002b1e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2254      	movs	r2, #84	; 0x54
 8002ab6:	5c9b      	ldrb	r3, [r3, r2]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_Start+0x24>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e035      	b.n	8002b2c <HAL_ADC_Start+0x90>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2254      	movs	r2, #84	; 0x54
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ac8:	250f      	movs	r5, #15
 8002aca:	197c      	adds	r4, r7, r5
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 faaa 	bl	8003028 <ADC_Enable>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ad8:	197b      	adds	r3, r7, r5
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d119      	bne.n	8002b14 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_ADC_Start+0x98>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	0052      	lsls	r2, r2, #1
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	221c      	movs	r2, #28
 8002afe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2254      	movs	r2, #84	; 0x54
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff fdf9 	bl	8002704 <LL_ADC_REG_StartConversion>
 8002b12:	e008      	b.n	8002b26 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2254      	movs	r2, #84	; 0x54
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]
 8002b1c:	e003      	b.n	8002b26 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2202      	movs	r2, #2
 8002b24:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b26:	230f      	movs	r3, #15
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
}
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b004      	add	sp, #16
 8002b32:	bdb0      	pop	{r4, r5, r7, pc}
 8002b34:	fffff0fe 	.word	0xfffff0fe

08002b38 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d102      	bne.n	8002b50 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e00f      	b.n	8002b70 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	2220      	movs	r2, #32
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e072      	b.n	8002c52 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b70:	f7ff fc72 	bl	8002458 <HAL_GetTick>
 8002b74:	0003      	movs	r3, r0
 8002b76:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b78:	e01f      	b.n	8002bba <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	d01c      	beq.n	8002bba <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b80:	f7ff fc6a 	bl	8002458 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d302      	bcc.n	8002b96 <HAL_ADC_PollForConversion+0x5e>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d111      	bne.n	8002bba <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d10b      	bne.n	8002bba <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2254      	movs	r2, #84	; 0x54
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e04b      	b.n	8002c52 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d0d9      	beq.n	8002b7a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	0092      	lsls	r2, r2, #2
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fcd6 	bl	800258a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d02e      	beq.n	8002c40 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7e9b      	ldrb	r3, [r3, #26]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d12a      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d123      	bne.n	8002c40 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff fd93 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002c02:	1e03      	subs	r3, r0, #0
 8002c04:	d110      	bne.n	8002c28 <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	210c      	movs	r1, #12
 8002c12:	438a      	bics	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_ADC_PollForConversion+0x124>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2201      	movs	r2, #1
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	659a      	str	r2, [r3, #88]	; 0x58
 8002c26:	e00b      	b.n	8002c40 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7e1b      	ldrb	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d103      	bne.n	8002c50 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffefe 	.word	0xfffffefe

08002c60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b002      	add	sp, #8
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c82:	2317      	movs	r3, #23
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2254      	movs	r2, #84	; 0x54
 8002c92:	5c9b      	ldrb	r3, [r3, r2]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x24>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e1c0      	b.n	800301e <HAL_ADC_ConfigChannel+0x3a6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2254      	movs	r2, #84	; 0x54
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f7ff fd3d 	bl	8002728 <LL_ADC_REG_IsConversionOngoing>
 8002cae:	1e03      	subs	r3, r0, #0
 8002cb0:	d000      	beq.n	8002cb4 <HAL_ADC_ConfigChannel+0x3c>
 8002cb2:	e1a3      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d100      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x46>
 8002cbc:	e143      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	061b      	lsls	r3, r3, #24
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d004      	beq.n	8002cd4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002cce:	4ac1      	ldr	r2, [pc, #772]	; (8002fd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d108      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	0019      	movs	r1, r3
 8002cde:	0010      	movs	r0, r2
 8002ce0:	f7ff fc84 	bl	80025ec <LL_ADC_REG_SetSequencerChAdd>
 8002ce4:	e0c9      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	211f      	movs	r1, #31
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	4099      	lsls	r1, r3
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	035b      	lsls	r3, r3, #13
 8002d04:	0b5b      	lsrs	r3, r3, #13
 8002d06:	d105      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x9c>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	0e9b      	lsrs	r3, r3, #26
 8002d0e:	221f      	movs	r2, #31
 8002d10:	4013      	ands	r3, r2
 8002d12:	e098      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d000      	beq.n	8002d20 <HAL_ADC_ConfigChannel+0xa8>
 8002d1e:	e091      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x1cc>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d000      	beq.n	8002d2c <HAL_ADC_ConfigChannel+0xb4>
 8002d2a:	e089      	b.n	8002e40 <HAL_ADC_ConfigChannel+0x1c8>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2204      	movs	r2, #4
 8002d32:	4013      	ands	r3, r2
 8002d34:	d000      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0xc0>
 8002d36:	e081      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x1c4>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d000      	beq.n	8002d44 <HAL_ADC_ConfigChannel+0xcc>
 8002d42:	e079      	b.n	8002e38 <HAL_ADC_ConfigChannel+0x1c0>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2210      	movs	r2, #16
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d000      	beq.n	8002d50 <HAL_ADC_ConfigChannel+0xd8>
 8002d4e:	e071      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x1bc>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2220      	movs	r2, #32
 8002d56:	4013      	ands	r3, r2
 8002d58:	d000      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0xe4>
 8002d5a:	e069      	b.n	8002e30 <HAL_ADC_ConfigChannel+0x1b8>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2240      	movs	r2, #64	; 0x40
 8002d62:	4013      	ands	r3, r2
 8002d64:	d000      	beq.n	8002d68 <HAL_ADC_ConfigChannel+0xf0>
 8002d66:	e061      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x1b4>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2280      	movs	r2, #128	; 0x80
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d000      	beq.n	8002d74 <HAL_ADC_ConfigChannel+0xfc>
 8002d72:	e059      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x1b0>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d151      	bne.n	8002e24 <HAL_ADC_ConfigChannel+0x1ac>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d149      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x1a8>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	d141      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x1a4>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4013      	ands	r3, r2
 8002da2:	d139      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x1a0>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	015b      	lsls	r3, r3, #5
 8002dac:	4013      	ands	r3, r2
 8002dae:	d131      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x19c>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	019b      	lsls	r3, r3, #6
 8002db8:	4013      	ands	r3, r2
 8002dba:	d129      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x198>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d121      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x194>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	d119      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x190>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	025b      	lsls	r3, r3, #9
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x18c>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	029b      	lsls	r3, r3, #10
 8002de8:	4013      	ands	r3, r2
 8002dea:	d109      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x188>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	02db      	lsls	r3, r3, #11
 8002df4:	4013      	ands	r3, r2
 8002df6:	d001      	beq.n	8002dfc <HAL_ADC_ConfigChannel+0x184>
 8002df8:	2312      	movs	r3, #18
 8002dfa:	e024      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e022      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e00:	2311      	movs	r3, #17
 8002e02:	e020      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e04:	2310      	movs	r3, #16
 8002e06:	e01e      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e08:	230f      	movs	r3, #15
 8002e0a:	e01c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e0c:	230e      	movs	r3, #14
 8002e0e:	e01a      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e10:	230d      	movs	r3, #13
 8002e12:	e018      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e14:	230c      	movs	r3, #12
 8002e16:	e016      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e18:	230b      	movs	r3, #11
 8002e1a:	e014      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	e012      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e20:	2309      	movs	r3, #9
 8002e22:	e010      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e24:	2308      	movs	r3, #8
 8002e26:	e00e      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e28:	2307      	movs	r3, #7
 8002e2a:	e00c      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e2c:	2306      	movs	r3, #6
 8002e2e:	e00a      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e30:	2305      	movs	r3, #5
 8002e32:	e008      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e006      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e004      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x1ce>
 8002e44:	2300      	movs	r3, #0
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	6852      	ldr	r2, [r2, #4]
 8002e4a:	201f      	movs	r0, #31
 8002e4c:	4002      	ands	r2, r0
 8002e4e:	4093      	lsls	r3, r2
 8002e50:	000a      	movs	r2, r1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d808      	bhi.n	8002e7a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	001a      	movs	r2, r3
 8002e76:	f7ff fb99 	bl	80025ac <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6819      	ldr	r1, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	001a      	movs	r2, r3
 8002e88:	f7ff fbd4 	bl	8002634 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	db00      	blt.n	8002e96 <HAL_ADC_ConfigChannel+0x21e>
 8002e94:	e0bc      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e96:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7ff fb35 	bl	8002508 <LL_ADC_GetCommonPathInternalCh>
 8002e9e:	0003      	movs	r3, r0
 8002ea0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a4d      	ldr	r2, [pc, #308]	; (8002fdc <HAL_ADC_ConfigChannel+0x364>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d122      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	041b      	lsls	r3, r3, #16
 8002eb2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002eb4:	d11d      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	0412      	lsls	r2, r2, #16
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	0010      	movs	r0, r2
 8002ec4:	f7ff fb0c 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ec8:	4b45      	ldr	r3, [pc, #276]	; (8002fe0 <HAL_ADC_ConfigChannel+0x368>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4945      	ldr	r1, [pc, #276]	; (8002fe4 <HAL_ADC_ConfigChannel+0x36c>)
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7fd f918 	bl	8000104 <__udivsi3>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	0013      	movs	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	189b      	adds	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ee2:	e002      	b.n	8002eea <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1f9      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ef0:	e08e      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <HAL_ADC_ConfigChannel+0x370>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d10e      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	045b      	lsls	r3, r3, #17
 8002f02:	4013      	ands	r3, r2
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2280      	movs	r2, #128	; 0x80
 8002f0a:	0452      	lsls	r2, r2, #17
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	4a32      	ldr	r2, [pc, #200]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002f10:	0019      	movs	r1, r3
 8002f12:	0010      	movs	r0, r2
 8002f14:	f7ff fae4 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
 8002f18:	e07a      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a33      	ldr	r2, [pc, #204]	; (8002fec <HAL_ADC_ConfigChannel+0x374>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d000      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x2ae>
 8002f24:	e074      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	03db      	lsls	r3, r3, #15
 8002f2c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002f2e:	d000      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x2ba>
 8002f30:	e06e      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	03d2      	lsls	r2, r2, #15
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	4a27      	ldr	r2, [pc, #156]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f7ff face 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
 8002f44:	e064      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	061b      	lsls	r3, r3, #24
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d004      	beq.n	8002f5c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <HAL_ADC_ConfigChannel+0x35c>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d107      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	0019      	movs	r1, r3
 8002f66:	0010      	movs	r0, r2
 8002f68:	f7ff fb51 	bl	800260e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da4d      	bge.n	8003010 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f74:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002f76:	0018      	movs	r0, r3
 8002f78:	f7ff fac6 	bl	8002508 <LL_ADC_GetCommonPathInternalCh>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_ADC_ConfigChannel+0x364>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4a18      	ldr	r2, [pc, #96]	; (8002ff0 <HAL_ADC_ConfigChannel+0x378>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002f92:	0019      	movs	r1, r3
 8002f94:	0010      	movs	r0, r2
 8002f96:	f7ff faa3 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
 8002f9a:	e039      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <HAL_ADC_ConfigChannel+0x370>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <HAL_ADC_ConfigChannel+0x37c>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002fae:	0019      	movs	r1, r3
 8002fb0:	0010      	movs	r0, r2
 8002fb2:	f7ff fa95 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
 8002fb6:	e02b      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <HAL_ADC_ConfigChannel+0x374>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d126      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4a0c      	ldr	r2, [pc, #48]	; (8002ff8 <HAL_ADC_ConfigChannel+0x380>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	4a03      	ldr	r2, [pc, #12]	; (8002fd8 <HAL_ADC_ConfigChannel+0x360>)
 8002fca:	0019      	movs	r1, r3
 8002fcc:	0010      	movs	r0, r2
 8002fce:	f7ff fa87 	bl	80024e0 <LL_ADC_SetCommonPathInternalCh>
 8002fd2:	e01d      	b.n	8003010 <HAL_ADC_ConfigChannel+0x398>
 8002fd4:	80000004 	.word	0x80000004
 8002fd8:	40012708 	.word	0x40012708
 8002fdc:	b0001000 	.word	0xb0001000
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	00030d40 	.word	0x00030d40
 8002fe8:	b8004000 	.word	0xb8004000
 8002fec:	b4002000 	.word	0xb4002000
 8002ff0:	ff7fffff 	.word	0xff7fffff
 8002ff4:	feffffff 	.word	0xfeffffff
 8002ff8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003000:	2220      	movs	r2, #32
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003008:	2317      	movs	r3, #23
 800300a:	18fb      	adds	r3, r7, r3
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2254      	movs	r2, #84	; 0x54
 8003014:	2100      	movs	r1, #0
 8003016:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003018:	2317      	movs	r3, #23
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
}
 800301e:	0018      	movs	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	b006      	add	sp, #24
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			; (mov r8, r8)

08003028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff fb51 	bl	80026e0 <LL_ADC_IsEnabled>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d000      	beq.n	8003044 <ADC_Enable+0x1c>
 8003042:	e069      	b.n	8003118 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a36      	ldr	r2, [pc, #216]	; (8003124 <ADC_Enable+0xfc>)
 800304c:	4013      	ands	r3, r2
 800304e:	d00d      	beq.n	800306c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003054:	2210      	movs	r2, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003060:	2201      	movs	r2, #1
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e056      	b.n	800311a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff fb23 	bl	80026bc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003076:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <ADC_Enable+0x100>)
 8003078:	0018      	movs	r0, r3
 800307a:	f7ff fa45 	bl	8002508 <LL_ADC_GetCommonPathInternalCh>
 800307e:	0002      	movs	r2, r0
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	041b      	lsls	r3, r3, #16
 8003084:	4013      	ands	r3, r2
 8003086:	d00f      	beq.n	80030a8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <ADC_Enable+0x104>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4928      	ldr	r1, [pc, #160]	; (8003130 <ADC_Enable+0x108>)
 800308e:	0018      	movs	r0, r3
 8003090:	f7fd f838 	bl	8000104 <__udivsi3>
 8003094:	0003      	movs	r3, r0
 8003096:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003098:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7e5b      	ldrb	r3, [r3, #25]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d033      	beq.n	8003118 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80030b0:	f7ff f9d2 	bl	8002458 <HAL_GetTick>
 80030b4:	0003      	movs	r3, r0
 80030b6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030b8:	e027      	b.n	800310a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0018      	movs	r0, r3
 80030c0:	f7ff fb0e 	bl	80026e0 <LL_ADC_IsEnabled>
 80030c4:	1e03      	subs	r3, r0, #0
 80030c6:	d104      	bne.n	80030d2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff faf5 	bl	80026bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030d2:	f7ff f9c1 	bl	8002458 <HAL_GetTick>
 80030d6:	0002      	movs	r2, r0
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d914      	bls.n	800310a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d00d      	beq.n	800310a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	2210      	movs	r2, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	2201      	movs	r2, #1
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e007      	b.n	800311a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2201      	movs	r2, #1
 8003112:	4013      	ands	r3, r2
 8003114:	2b01      	cmp	r3, #1
 8003116:	d1d0      	bne.n	80030ba <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	80000017 	.word	0x80000017
 8003128:	40012708 	.word	0x40012708
 800312c:	20000000 	.word	0x20000000
 8003130:	00030d40 	.word	0x00030d40

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	0002      	movs	r2, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	1dfb      	adds	r3, r7, #7
 8003140:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b7f      	cmp	r3, #127	; 0x7f
 8003148:	d828      	bhi.n	800319c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800314a:	4a2f      	ldr	r2, [pc, #188]	; (8003208 <__NVIC_SetPriority+0xd4>)
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b25b      	sxtb	r3, r3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	33c0      	adds	r3, #192	; 0xc0
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	589b      	ldr	r3, [r3, r2]
 800315a:	1dfa      	adds	r2, r7, #7
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	0011      	movs	r1, r2
 8003160:	2203      	movs	r2, #3
 8003162:	400a      	ands	r2, r1
 8003164:	00d2      	lsls	r2, r2, #3
 8003166:	21ff      	movs	r1, #255	; 0xff
 8003168:	4091      	lsls	r1, r2
 800316a:	000a      	movs	r2, r1
 800316c:	43d2      	mvns	r2, r2
 800316e:	401a      	ands	r2, r3
 8003170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	22ff      	movs	r2, #255	; 0xff
 8003178:	401a      	ands	r2, r3
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	0018      	movs	r0, r3
 8003180:	2303      	movs	r3, #3
 8003182:	4003      	ands	r3, r0
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003188:	481f      	ldr	r0, [pc, #124]	; (8003208 <__NVIC_SetPriority+0xd4>)
 800318a:	1dfb      	adds	r3, r7, #7
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	b25b      	sxtb	r3, r3
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	430a      	orrs	r2, r1
 8003194:	33c0      	adds	r3, #192	; 0xc0
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800319a:	e031      	b.n	8003200 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <__NVIC_SetPriority+0xd8>)
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0019      	movs	r1, r3
 80031a4:	230f      	movs	r3, #15
 80031a6:	400b      	ands	r3, r1
 80031a8:	3b08      	subs	r3, #8
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3306      	adds	r3, #6
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	18d3      	adds	r3, r2, r3
 80031b2:	3304      	adds	r3, #4
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	1dfa      	adds	r2, r7, #7
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	0011      	movs	r1, r2
 80031bc:	2203      	movs	r2, #3
 80031be:	400a      	ands	r2, r1
 80031c0:	00d2      	lsls	r2, r2, #3
 80031c2:	21ff      	movs	r1, #255	; 0xff
 80031c4:	4091      	lsls	r1, r2
 80031c6:	000a      	movs	r2, r1
 80031c8:	43d2      	mvns	r2, r2
 80031ca:	401a      	ands	r2, r3
 80031cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	401a      	ands	r2, r3
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	0018      	movs	r0, r3
 80031dc:	2303      	movs	r3, #3
 80031de:	4003      	ands	r3, r0
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e4:	4809      	ldr	r0, [pc, #36]	; (800320c <__NVIC_SetPriority+0xd8>)
 80031e6:	1dfb      	adds	r3, r7, #7
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	001c      	movs	r4, r3
 80031ec:	230f      	movs	r3, #15
 80031ee:	4023      	ands	r3, r4
 80031f0:	3b08      	subs	r3, #8
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	430a      	orrs	r2, r1
 80031f6:	3306      	adds	r3, #6
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	18c3      	adds	r3, r0, r3
 80031fc:	3304      	adds	r3, #4
 80031fe:	601a      	str	r2, [r3, #0]
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b003      	add	sp, #12
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	1e5a      	subs	r2, r3, #1
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	045b      	lsls	r3, r3, #17
 8003220:	429a      	cmp	r2, r3
 8003222:	d301      	bcc.n	8003228 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003224:	2301      	movs	r3, #1
 8003226:	e010      	b.n	800324a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003228:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <SysTick_Config+0x44>)
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	3a01      	subs	r2, #1
 800322e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003230:	2301      	movs	r3, #1
 8003232:	425b      	negs	r3, r3
 8003234:	2103      	movs	r1, #3
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff ff7c 	bl	8003134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <SysTick_Config+0x44>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	; (8003254 <SysTick_Config+0x44>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	210f      	movs	r1, #15
 8003264:	187b      	adds	r3, r7, r1
 8003266:	1c02      	adds	r2, r0, #0
 8003268:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	187b      	adds	r3, r7, r1
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	b25b      	sxtb	r3, r3
 8003272:	0011      	movs	r1, r2
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ff5d 	bl	8003134 <__NVIC_SetPriority>
}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	b004      	add	sp, #16
 8003280:	bd80      	pop	{r7, pc}

08003282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003282:	b580      	push	{r7, lr}
 8003284:	b082      	sub	sp, #8
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff ffbf 	bl	8003210 <SysTick_Config>
 8003292:	0003      	movs	r3, r0
}
 8003294:	0018      	movs	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032aa:	e14d      	b.n	8003548 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2101      	movs	r1, #1
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	4091      	lsls	r1, r2
 80032b6:	000a      	movs	r2, r1
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d100      	bne.n	80032c4 <HAL_GPIO_Init+0x28>
 80032c2:	e13e      	b.n	8003542 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2203      	movs	r2, #3
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d005      	beq.n	80032dc <HAL_GPIO_Init+0x40>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2203      	movs	r2, #3
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d130      	bne.n	800333e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0013      	movs	r3, r2
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	409a      	lsls	r2, r3
 80032fe:	0013      	movs	r3, r2
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003312:	2201      	movs	r2, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
 8003318:	0013      	movs	r3, r2
 800331a:	43da      	mvns	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	2201      	movs	r2, #1
 800332a:	401a      	ands	r2, r3
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	409a      	lsls	r2, r3
 8003330:	0013      	movs	r3, r2
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	4313      	orrs	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	4013      	ands	r3, r2
 8003346:	2b03      	cmp	r3, #3
 8003348:	d017      	beq.n	800337a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	409a      	lsls	r2, r3
 800336c:	0013      	movs	r3, r2
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2203      	movs	r2, #3
 8003380:	4013      	ands	r3, r2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d123      	bne.n	80033ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	08da      	lsrs	r2, r3, #3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3208      	adds	r2, #8
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	58d3      	ldr	r3, [r2, r3]
 8003392:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2207      	movs	r2, #7
 8003398:	4013      	ands	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	220f      	movs	r2, #15
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	43da      	mvns	r2, r3
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4013      	ands	r3, r2
 80033a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2107      	movs	r1, #7
 80033b2:	400b      	ands	r3, r1
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	409a      	lsls	r2, r3
 80033b8:	0013      	movs	r3, r2
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	0092      	lsls	r2, r2, #2
 80033ca:	6939      	ldr	r1, [r7, #16]
 80033cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	409a      	lsls	r2, r3
 80033dc:	0013      	movs	r3, r2
 80033de:	43da      	mvns	r2, r3
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	2203      	movs	r2, #3
 80033ec:	401a      	ands	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	409a      	lsls	r2, r3
 80033f4:	0013      	movs	r3, r2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	029b      	lsls	r3, r3, #10
 800340a:	4013      	ands	r3, r2
 800340c:	d100      	bne.n	8003410 <HAL_GPIO_Init+0x174>
 800340e:	e098      	b.n	8003542 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003410:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3318      	adds	r3, #24
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	589b      	ldr	r3, [r3, r2]
 800341c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2203      	movs	r2, #3
 8003422:	4013      	ands	r3, r2
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	220f      	movs	r2, #15
 8003428:	409a      	lsls	r2, r3
 800342a:	0013      	movs	r3, r2
 800342c:	43da      	mvns	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	429a      	cmp	r2, r3
 800343c:	d019      	beq.n	8003472 <HAL_GPIO_Init+0x1d6>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a48      	ldr	r2, [pc, #288]	; (8003564 <HAL_GPIO_Init+0x2c8>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <HAL_GPIO_Init+0x1d2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a47      	ldr	r2, [pc, #284]	; (8003568 <HAL_GPIO_Init+0x2cc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00d      	beq.n	800346a <HAL_GPIO_Init+0x1ce>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a46      	ldr	r2, [pc, #280]	; (800356c <HAL_GPIO_Init+0x2d0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d007      	beq.n	8003466 <HAL_GPIO_Init+0x1ca>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a45      	ldr	r2, [pc, #276]	; (8003570 <HAL_GPIO_Init+0x2d4>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d101      	bne.n	8003462 <HAL_GPIO_Init+0x1c6>
 800345e:	2304      	movs	r3, #4
 8003460:	e008      	b.n	8003474 <HAL_GPIO_Init+0x1d8>
 8003462:	2305      	movs	r3, #5
 8003464:	e006      	b.n	8003474 <HAL_GPIO_Init+0x1d8>
 8003466:	2303      	movs	r3, #3
 8003468:	e004      	b.n	8003474 <HAL_GPIO_Init+0x1d8>
 800346a:	2302      	movs	r3, #2
 800346c:	e002      	b.n	8003474 <HAL_GPIO_Init+0x1d8>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_GPIO_Init+0x1d8>
 8003472:	2300      	movs	r3, #0
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	2103      	movs	r1, #3
 8003478:	400a      	ands	r2, r1
 800347a:	00d2      	lsls	r2, r2, #3
 800347c:	4093      	lsls	r3, r2
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003484:	4936      	ldr	r1, [pc, #216]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	089b      	lsrs	r3, r3, #2
 800348a:	3318      	adds	r3, #24
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003492:	4b33      	ldr	r3, [pc, #204]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	43da      	mvns	r2, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	035b      	lsls	r3, r3, #13
 80034aa:	4013      	ands	r3, r2
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b6:	4b2a      	ldr	r3, [pc, #168]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	43da      	mvns	r2, r3
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4013      	ands	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	039b      	lsls	r3, r3, #14
 80034d4:	4013      	ands	r3, r2
 80034d6:	d003      	beq.n	80034e0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e6:	4a1e      	ldr	r2, [pc, #120]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 80034e8:	2384      	movs	r3, #132	; 0x84
 80034ea:	58d3      	ldr	r3, [r2, r3]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	029b      	lsls	r3, r3, #10
 8003500:	4013      	ands	r3, r2
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800350c:	4914      	ldr	r1, [pc, #80]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 800350e:	2284      	movs	r2, #132	; 0x84
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003514:	4a12      	ldr	r2, [pc, #72]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	58d3      	ldr	r3, [r2, r3]
 800351a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	43da      	mvns	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	2380      	movs	r3, #128	; 0x80
 800352c:	025b      	lsls	r3, r3, #9
 800352e:	4013      	ands	r3, r2
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800353a:	4909      	ldr	r1, [pc, #36]	; (8003560 <HAL_GPIO_Init+0x2c4>)
 800353c:	2280      	movs	r2, #128	; 0x80
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	3301      	adds	r3, #1
 8003546:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	40da      	lsrs	r2, r3
 8003550:	1e13      	subs	r3, r2, #0
 8003552:	d000      	beq.n	8003556 <HAL_GPIO_Init+0x2ba>
 8003554:	e6aa      	b.n	80032ac <HAL_GPIO_Init+0x10>
  }
}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	46c0      	nop			; (mov r8, r8)
 800355a:	46bd      	mov	sp, r7
 800355c:	b006      	add	sp, #24
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021800 	.word	0x40021800
 8003564:	50000400 	.word	0x50000400
 8003568:	50000800 	.word	0x50000800
 800356c:	50000c00 	.word	0x50000c00
 8003570:	50001000 	.word	0x50001000

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	0008      	movs	r0, r1
 800357e:	0011      	movs	r1, r2
 8003580:	1cbb      	adds	r3, r7, #2
 8003582:	1c02      	adds	r2, r0, #0
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	1c7b      	adds	r3, r7, #1
 8003588:	1c0a      	adds	r2, r1, #0
 800358a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800358c:	1c7b      	adds	r3, r7, #1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d004      	beq.n	800359e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003594:	1cbb      	adds	r3, r7, #2
 8003596:	881a      	ldrh	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800359c:	e003      	b.n	80035a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800359e:	1cbb      	adds	r3, r7, #2
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b002      	add	sp, #8
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80035b8:	4b19      	ldr	r3, [pc, #100]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a19      	ldr	r2, [pc, #100]	; (8003624 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	4b17      	ldr	r3, [pc, #92]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d11f      	bne.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80035d4:	4b14      	ldr	r3, [pc, #80]	; (8003628 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	0013      	movs	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4912      	ldr	r1, [pc, #72]	; (800362c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fc fd8e 	bl	8000104 <__udivsi3>
 80035e8:	0003      	movs	r3, r0
 80035ea:	3301      	adds	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ee:	e008      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e001      	b.n	8003602 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e009      	b.n	8003616 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003602:	4b07      	ldr	r3, [pc, #28]	; (8003620 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003604:	695a      	ldr	r2, [r3, #20]
 8003606:	2380      	movs	r3, #128	; 0x80
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	401a      	ands	r2, r3
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	429a      	cmp	r2, r3
 8003612:	d0ed      	beq.n	80035f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	40007000 	.word	0x40007000
 8003624:	fffff9ff 	.word	0xfffff9ff
 8003628:	20000000 	.word	0x20000000
 800362c:	000f4240 	.word	0x000f4240

08003630 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	23e0      	movs	r3, #224	; 0xe0
 800363a:	01db      	lsls	r3, r3, #7
 800363c:	4013      	ands	r3, r2
}
 800363e:	0018      	movs	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40021000 	.word	0x40021000

08003648 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f000 fb50 	bl	8003cfc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2201      	movs	r2, #1
 8003662:	4013      	ands	r3, r2
 8003664:	d100      	bne.n	8003668 <HAL_RCC_OscConfig+0x20>
 8003666:	e07c      	b.n	8003762 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003668:	4bc3      	ldr	r3, [pc, #780]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2238      	movs	r2, #56	; 0x38
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003672:	4bc1      	ldr	r3, [pc, #772]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2203      	movs	r2, #3
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d102      	bne.n	8003688 <HAL_RCC_OscConfig+0x40>
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d002      	beq.n	800368e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b08      	cmp	r3, #8
 800368c:	d10b      	bne.n	80036a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	4bba      	ldr	r3, [pc, #744]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	029b      	lsls	r3, r3, #10
 8003696:	4013      	ands	r3, r2
 8003698:	d062      	beq.n	8003760 <HAL_RCC_OscConfig+0x118>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d15e      	bne.n	8003760 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e32a      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_OscConfig+0x7a>
 80036b2:	4bb1      	ldr	r3, [pc, #708]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	4bb0      	ldr	r3, [pc, #704]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	0249      	lsls	r1, r1, #9
 80036bc:	430a      	orrs	r2, r1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e020      	b.n	8003704 <HAL_RCC_OscConfig+0xbc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	23a0      	movs	r3, #160	; 0xa0
 80036c8:	02db      	lsls	r3, r3, #11
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d10e      	bne.n	80036ec <HAL_RCC_OscConfig+0xa4>
 80036ce:	4baa      	ldr	r3, [pc, #680]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4ba9      	ldr	r3, [pc, #676]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	02c9      	lsls	r1, r1, #11
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	4ba6      	ldr	r3, [pc, #664]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4ba5      	ldr	r3, [pc, #660]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036e2:	2180      	movs	r1, #128	; 0x80
 80036e4:	0249      	lsls	r1, r1, #9
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0xbc>
 80036ec:	4ba2      	ldr	r3, [pc, #648]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4ba1      	ldr	r3, [pc, #644]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036f2:	49a2      	ldr	r1, [pc, #648]	; (800397c <HAL_RCC_OscConfig+0x334>)
 80036f4:	400a      	ands	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	4b9f      	ldr	r3, [pc, #636]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b9e      	ldr	r3, [pc, #632]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80036fe:	49a0      	ldr	r1, [pc, #640]	; (8003980 <HAL_RCC_OscConfig+0x338>)
 8003700:	400a      	ands	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d014      	beq.n	8003736 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7fe fea4 	bl	8002458 <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003716:	f7fe fe9f 	bl	8002458 <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	; 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e2e9      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003728:	4b93      	ldr	r3, [pc, #588]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4013      	ands	r3, r2
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0xce>
 8003734:	e015      	b.n	8003762 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe fe8f 	bl	8002458 <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fe8a 	bl	8002458 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	; 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e2d4      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003752:	4b89      	ldr	r3, [pc, #548]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	2380      	movs	r3, #128	; 0x80
 8003758:	029b      	lsls	r3, r3, #10
 800375a:	4013      	ands	r3, r2
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0xf8>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d100      	bne.n	800376e <HAL_RCC_OscConfig+0x126>
 800376c:	e099      	b.n	80038a2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2238      	movs	r2, #56	; 0x38
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003778:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2203      	movs	r2, #3
 800377e:	4013      	ands	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b10      	cmp	r3, #16
 8003786:	d102      	bne.n	800378e <HAL_RCC_OscConfig+0x146>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d002      	beq.n	8003794 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d135      	bne.n	8003800 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003794:	4b78      	ldr	r3, [pc, #480]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4013      	ands	r3, r2
 800379e:	d005      	beq.n	80037ac <HAL_RCC_OscConfig+0x164>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e2a7      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b72      	ldr	r3, [pc, #456]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a74      	ldr	r2, [pc, #464]	; (8003984 <HAL_RCC_OscConfig+0x33c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	021a      	lsls	r2, r3, #8
 80037bc:	4b6e      	ldr	r3, [pc, #440]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d112      	bne.n	80037ee <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80037c8:	4b6b      	ldr	r3, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a6e      	ldr	r2, [pc, #440]	; (8003988 <HAL_RCC_OscConfig+0x340>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	0019      	movs	r1, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691a      	ldr	r2, [r3, #16]
 80037d6:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0adb      	lsrs	r3, r3, #11
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	4a69      	ldr	r2, [pc, #420]	; (800398c <HAL_RCC_OscConfig+0x344>)
 80037e8:	40da      	lsrs	r2, r3
 80037ea:	4b69      	ldr	r3, [pc, #420]	; (8003990 <HAL_RCC_OscConfig+0x348>)
 80037ec:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037ee:	4b69      	ldr	r3, [pc, #420]	; (8003994 <HAL_RCC_OscConfig+0x34c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7fe fdd4 	bl	80023a0 <HAL_InitTick>
 80037f8:	1e03      	subs	r3, r0, #0
 80037fa:	d051      	beq.n	80038a0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e27d      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d030      	beq.n	800386a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003808:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a5e      	ldr	r2, [pc, #376]	; (8003988 <HAL_RCC_OscConfig+0x340>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	4b58      	ldr	r3, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003818:	430a      	orrs	r2, r1
 800381a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800381c:	4b56      	ldr	r3, [pc, #344]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b55      	ldr	r3, [pc, #340]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	0049      	lsls	r1, r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382a:	f7fe fe15 	bl	8002458 <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003834:	f7fe fe10 	bl	8002458 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e25a      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003846:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4013      	ands	r3, r2
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003852:	4b49      	ldr	r3, [pc, #292]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a4b      	ldr	r2, [pc, #300]	; (8003984 <HAL_RCC_OscConfig+0x33c>)
 8003858:	4013      	ands	r3, r2
 800385a:	0019      	movs	r1, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	021a      	lsls	r2, r3, #8
 8003862:	4b45      	ldr	r3, [pc, #276]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	e01b      	b.n	80038a2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b43      	ldr	r3, [pc, #268]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003870:	4949      	ldr	r1, [pc, #292]	; (8003998 <HAL_RCC_OscConfig+0x350>)
 8003872:	400a      	ands	r2, r1
 8003874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fdef 	bl	8002458 <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe fdea 	bl	8002458 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e234      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003892:	4b39      	ldr	r3, [pc, #228]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4013      	ands	r3, r2
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x238>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2208      	movs	r2, #8
 80038a8:	4013      	ands	r3, r2
 80038aa:	d047      	beq.n	800393c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2238      	movs	r2, #56	; 0x38
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b18      	cmp	r3, #24
 80038b6:	d10a      	bne.n	80038ce <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80038b8:	4b2f      	ldr	r3, [pc, #188]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80038ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038bc:	2202      	movs	r2, #2
 80038be:	4013      	ands	r3, r2
 80038c0:	d03c      	beq.n	800393c <HAL_RCC_OscConfig+0x2f4>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d138      	bne.n	800393c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e216      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d019      	beq.n	800390a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80038d6:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80038d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038da:	4b27      	ldr	r3, [pc, #156]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 80038dc:	2101      	movs	r1, #1
 80038de:	430a      	orrs	r2, r1
 80038e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fe fdb9 	bl	8002458 <HAL_GetTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe fdb4 	bl	8002458 <HAL_GetTick>
 80038f0:	0002      	movs	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1fe      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038fe:	4b1e      	ldr	r3, [pc, #120]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003902:	2202      	movs	r2, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d0f1      	beq.n	80038ec <HAL_RCC_OscConfig+0x2a4>
 8003908:	e018      	b.n	800393c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800390c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800390e:	4b1a      	ldr	r3, [pc, #104]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003910:	2101      	movs	r1, #1
 8003912:	438a      	bics	r2, r1
 8003914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003916:	f7fe fd9f 	bl	8002458 <HAL_GetTick>
 800391a:	0003      	movs	r3, r0
 800391c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003920:	f7fe fd9a 	bl	8002458 <HAL_GetTick>
 8003924:	0002      	movs	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1e4      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	d1f1      	bne.n	8003920 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2204      	movs	r2, #4
 8003942:	4013      	ands	r3, r2
 8003944:	d100      	bne.n	8003948 <HAL_RCC_OscConfig+0x300>
 8003946:	e0c7      	b.n	8003ad8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003950:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2238      	movs	r2, #56	; 0x38
 8003956:	4013      	ands	r3, r2
 8003958:	2b20      	cmp	r3, #32
 800395a:	d11f      	bne.n	800399c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_OscConfig+0x330>)
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2202      	movs	r2, #2
 8003962:	4013      	ands	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_RCC_OscConfig+0x320>
 8003966:	e0b7      	b.n	8003ad8 <HAL_RCC_OscConfig+0x490>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d000      	beq.n	8003972 <HAL_RCC_OscConfig+0x32a>
 8003970:	e0b2      	b.n	8003ad8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1c2      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	40021000 	.word	0x40021000
 800397c:	fffeffff 	.word	0xfffeffff
 8003980:	fffbffff 	.word	0xfffbffff
 8003984:	ffff80ff 	.word	0xffff80ff
 8003988:	ffffc7ff 	.word	0xffffc7ff
 800398c:	00f42400 	.word	0x00f42400
 8003990:	20000000 	.word	0x20000000
 8003994:	20000004 	.word	0x20000004
 8003998:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800399c:	4bb5      	ldr	r3, [pc, #724]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 800399e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	055b      	lsls	r3, r3, #21
 80039a4:	4013      	ands	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_OscConfig+0x364>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <HAL_RCC_OscConfig+0x366>
 80039ac:	2300      	movs	r3, #0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d011      	beq.n	80039d6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	4bb0      	ldr	r3, [pc, #704]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 80039b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b6:	4baf      	ldr	r3, [pc, #700]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	0549      	lsls	r1, r1, #21
 80039bc:	430a      	orrs	r2, r1
 80039be:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c0:	4bac      	ldr	r3, [pc, #688]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 80039c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	055b      	lsls	r3, r3, #21
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039d6:	4ba8      	ldr	r3, [pc, #672]	; (8003c78 <HAL_RCC_OscConfig+0x630>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	4013      	ands	r3, r2
 80039e0:	d11a      	bne.n	8003a18 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039e2:	4ba5      	ldr	r3, [pc, #660]	; (8003c78 <HAL_RCC_OscConfig+0x630>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4ba4      	ldr	r3, [pc, #656]	; (8003c78 <HAL_RCC_OscConfig+0x630>)
 80039e8:	2180      	movs	r1, #128	; 0x80
 80039ea:	0049      	lsls	r1, r1, #1
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80039f0:	f7fe fd32 	bl	8002458 <HAL_GetTick>
 80039f4:	0003      	movs	r3, r0
 80039f6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039f8:	e008      	b.n	8003a0c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039fa:	f7fe fd2d 	bl	8002458 <HAL_GetTick>
 80039fe:	0002      	movs	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e177      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a0c:	4b9a      	ldr	r3, [pc, #616]	; (8003c78 <HAL_RCC_OscConfig+0x630>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	d0f0      	beq.n	80039fa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3e6>
 8003a20:	4b94      	ldr	r3, [pc, #592]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a24:	4b93      	ldr	r3, [pc, #588]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a2c:	e01c      	b.n	8003a68 <HAL_RCC_OscConfig+0x420>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d10c      	bne.n	8003a50 <HAL_RCC_OscConfig+0x408>
 8003a36:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a3a:	4b8e      	ldr	r3, [pc, #568]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a3c:	2104      	movs	r1, #4
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a42:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a46:	4b8b      	ldr	r3, [pc, #556]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a48:	2101      	movs	r1, #1
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a4e:	e00b      	b.n	8003a68 <HAL_RCC_OscConfig+0x420>
 8003a50:	4b88      	ldr	r3, [pc, #544]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a54:	4b87      	ldr	r3, [pc, #540]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	438a      	bics	r2, r1
 8003a5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a5c:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a60:	4b84      	ldr	r3, [pc, #528]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a62:	2104      	movs	r1, #4
 8003a64:	438a      	bics	r2, r1
 8003a66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d014      	beq.n	8003a9a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a70:	f7fe fcf2 	bl	8002458 <HAL_GetTick>
 8003a74:	0003      	movs	r3, r0
 8003a76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	e009      	b.n	8003a8e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe fced 	bl	8002458 <HAL_GetTick>
 8003a7e:	0002      	movs	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	4a7d      	ldr	r2, [pc, #500]	; (8003c7c <HAL_RCC_OscConfig+0x634>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e136      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8e:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a92:	2202      	movs	r2, #2
 8003a94:	4013      	ands	r3, r2
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x432>
 8003a98:	e013      	b.n	8003ac2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fcdd 	bl	8002458 <HAL_GetTick>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa2:	e009      	b.n	8003ab8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fcd8 	bl	8002458 <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	4a73      	ldr	r2, [pc, #460]	; (8003c7c <HAL_RCC_OscConfig+0x634>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e121      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab8:	4b6e      	ldr	r3, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	2202      	movs	r2, #2
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003ac2:	231f      	movs	r3, #31
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003acc:	4b69      	ldr	r3, [pc, #420]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003ad2:	496b      	ldr	r1, [pc, #428]	; (8003c80 <HAL_RCC_OscConfig+0x638>)
 8003ad4:	400a      	ands	r2, r1
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2220      	movs	r2, #32
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d039      	beq.n	8003b56 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01b      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aea:	4b62      	ldr	r3, [pc, #392]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b61      	ldr	r3, [pc, #388]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	03c9      	lsls	r1, r1, #15
 8003af4:	430a      	orrs	r2, r1
 8003af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af8:	f7fe fcae 	bl	8002458 <HAL_GetTick>
 8003afc:	0003      	movs	r3, r0
 8003afe:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b02:	f7fe fca9 	bl	8002458 <HAL_GetTick>
 8003b06:	0002      	movs	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0f3      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b14:	4b57      	ldr	r3, [pc, #348]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	2380      	movs	r3, #128	; 0x80
 8003b1a:	041b      	lsls	r3, r3, #16
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	d0f0      	beq.n	8003b02 <HAL_RCC_OscConfig+0x4ba>
 8003b20:	e019      	b.n	8003b56 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b22:	4b54      	ldr	r3, [pc, #336]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b28:	4956      	ldr	r1, [pc, #344]	; (8003c84 <HAL_RCC_OscConfig+0x63c>)
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fc93 	bl	8002458 <HAL_GetTick>
 8003b32:	0003      	movs	r3, r0
 8003b34:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b38:	f7fe fc8e 	bl	8002458 <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e0d8      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	041b      	lsls	r3, r3, #16
 8003b52:	4013      	ands	r3, r2
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d100      	bne.n	8003b60 <HAL_RCC_OscConfig+0x518>
 8003b5e:	e0cc      	b.n	8003cfa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b60:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2238      	movs	r2, #56	; 0x38
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d100      	bne.n	8003b6e <HAL_RCC_OscConfig+0x526>
 8003b6c:	e07b      	b.n	8003c66 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d156      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b3f      	ldr	r3, [pc, #252]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4b3e      	ldr	r3, [pc, #248]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003b7c:	4942      	ldr	r1, [pc, #264]	; (8003c88 <HAL_RCC_OscConfig+0x640>)
 8003b7e:	400a      	ands	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b82:	f7fe fc69 	bl	8002458 <HAL_GetTick>
 8003b86:	0003      	movs	r3, r0
 8003b88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe fc64 	bl	8002458 <HAL_GetTick>
 8003b90:	0002      	movs	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e0ae      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b9e:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	2380      	movs	r3, #128	; 0x80
 8003ba4:	049b      	lsls	r3, r3, #18
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <HAL_RCC_OscConfig+0x644>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bde:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003be4:	2180      	movs	r1, #128	; 0x80
 8003be6:	0449      	lsls	r1, r1, #17
 8003be8:	430a      	orrs	r2, r1
 8003bea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003bec:	4b21      	ldr	r3, [pc, #132]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	0549      	lsls	r1, r1, #21
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfa:	f7fe fc2d 	bl	8002458 <HAL_GetTick>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fe fc28 	bl	8002458 <HAL_GetTick>
 8003c08:	0002      	movs	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e072      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	4b17      	ldr	r3, [pc, #92]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	049b      	lsls	r3, r3, #18
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x5bc>
 8003c22:	e06a      	b.n	8003cfa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c24:	4b13      	ldr	r3, [pc, #76]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c2a:	4917      	ldr	r1, [pc, #92]	; (8003c88 <HAL_RCC_OscConfig+0x640>)
 8003c2c:	400a      	ands	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe fc12 	bl	8002458 <HAL_GetTick>
 8003c34:	0003      	movs	r3, r0
 8003c36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe fc0d 	bl	8002458 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e057      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c4c:	4b09      	ldr	r3, [pc, #36]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	049b      	lsls	r3, r3, #18
 8003c54:	4013      	ands	r3, r2
 8003c56:	d1f0      	bne.n	8003c3a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_OscConfig+0x62c>)
 8003c5e:	490c      	ldr	r1, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x648>)
 8003c60:	400a      	ands	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e049      	b.n	8003cfa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e044      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	00001388 	.word	0x00001388
 8003c80:	efffffff 	.word	0xefffffff
 8003c84:	ffbfffff 	.word	0xffbfffff
 8003c88:	feffffff 	.word	0xfeffffff
 8003c8c:	11c1808c 	.word	0x11c1808c
 8003c90:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x6bc>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d126      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2270      	movs	r2, #112	; 0x70
 8003cac:	401a      	ands	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d11f      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	23fe      	movs	r3, #254	; 0xfe
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d116      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	23f8      	movs	r3, #248	; 0xf8
 8003ccc:	039b      	lsls	r3, r3, #14
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d10e      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	23e0      	movs	r3, #224	; 0xe0
 8003cdc:	051b      	lsls	r3, r3, #20
 8003cde:	401a      	ands	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d106      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	0f5b      	lsrs	r3, r3, #29
 8003cec:	075a      	lsls	r2, r3, #29
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d001      	beq.n	8003cfa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	b008      	add	sp, #32
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000

08003d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0e9      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d1c:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2207      	movs	r2, #7
 8003d22:	4013      	ands	r3, r2
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d91e      	bls.n	8003d68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2a:	4b73      	ldr	r3, [pc, #460]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2207      	movs	r2, #7
 8003d30:	4393      	bics	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe fb8c 	bl	8002458 <HAL_GetTick>
 8003d40:	0003      	movs	r3, r0
 8003d42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d44:	e009      	b.n	8003d5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d46:	f7fe fb87 	bl	8002458 <HAL_GetTick>
 8003d4a:	0002      	movs	r2, r0
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	4a6a      	ldr	r2, [pc, #424]	; (8003efc <HAL_RCC_ClockConfig+0x1f4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e0ca      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003d5a:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2207      	movs	r2, #7
 8003d60:	4013      	ands	r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1ee      	bne.n	8003d46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d015      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d006      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d7c:	4b60      	ldr	r3, [pc, #384]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	4b5f      	ldr	r3, [pc, #380]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003d82:	21e0      	movs	r1, #224	; 0xe0
 8003d84:	01c9      	lsls	r1, r1, #7
 8003d86:	430a      	orrs	r2, r1
 8003d88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a5d      	ldr	r2, [pc, #372]	; (8003f04 <HAL_RCC_ClockConfig+0x1fc>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b59      	ldr	r3, [pc, #356]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d057      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	2380      	movs	r3, #128	; 0x80
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	4013      	ands	r3, r2
 8003dba:	d12b      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e097      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d107      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc8:	4b4d      	ldr	r3, [pc, #308]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	049b      	lsls	r3, r3, #18
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d11f      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e08b      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003de0:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4013      	ands	r3, r2
 8003dea:	d113      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e07f      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b03      	cmp	r3, #3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003df8:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	4013      	ands	r3, r2
 8003e00:	d108      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e074      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e06:	4b3e      	ldr	r3, [pc, #248]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d101      	bne.n	8003e14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e06d      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2207      	movs	r2, #7
 8003e1a:	4393      	bics	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4b37      	ldr	r3, [pc, #220]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fe fb16 	bl	8002458 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e30:	e009      	b.n	8003e46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e32:	f7fe fb11 	bl	8002458 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <HAL_RCC_ClockConfig+0x1f4>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e054      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2238      	movs	r2, #56	; 0x38
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d1ec      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e58:	4b27      	ldr	r3, [pc, #156]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2207      	movs	r2, #7
 8003e5e:	4013      	ands	r3, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d21e      	bcs.n	8003ea4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2207      	movs	r2, #7
 8003e6c:	4393      	bics	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e78:	f7fe faee 	bl	8002458 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e80:	e009      	b.n	8003e96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e82:	f7fe fae9 	bl	8002458 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <HAL_RCC_ClockConfig+0x1f4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e02c      	b.n	8003ef0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <HAL_RCC_ClockConfig+0x1f0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2207      	movs	r2, #7
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2204      	movs	r2, #4
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <HAL_RCC_ClockConfig+0x200>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003ec2:	f000 f829 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ec6:	0001      	movs	r1, r0
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <HAL_RCC_ClockConfig+0x1f8>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	220f      	movs	r2, #15
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <HAL_RCC_ClockConfig+0x204>)
 8003ed4:	0092      	lsls	r2, r2, #2
 8003ed6:	58d3      	ldr	r3, [r2, r3]
 8003ed8:	221f      	movs	r2, #31
 8003eda:	4013      	ands	r3, r2
 8003edc:	000a      	movs	r2, r1
 8003ede:	40da      	lsrs	r2, r3
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <HAL_RCC_ClockConfig+0x208>)
 8003ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x20c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fe fa59 	bl	80023a0 <HAL_InitTick>
 8003eee:	0003      	movs	r3, r0
}
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b004      	add	sp, #16
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	00001388 	.word	0x00001388
 8003f00:	40021000 	.word	0x40021000
 8003f04:	fffff0ff 	.word	0xfffff0ff
 8003f08:	ffff8fff 	.word	0xffff8fff
 8003f0c:	080062a8 	.word	0x080062a8
 8003f10:	20000000 	.word	0x20000000
 8003f14:	20000004 	.word	0x20000004

08003f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2238      	movs	r2, #56	; 0x38
 8003f24:	4013      	ands	r3, r2
 8003f26:	d10f      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	0adb      	lsrs	r3, r3, #11
 8003f2e:	2207      	movs	r2, #7
 8003f30:	4013      	ands	r3, r2
 8003f32:	2201      	movs	r2, #1
 8003f34:	409a      	lsls	r2, r3
 8003f36:	0013      	movs	r3, r2
 8003f38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003f3a:	6839      	ldr	r1, [r7, #0]
 8003f3c:	4835      	ldr	r0, [pc, #212]	; (8004014 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003f3e:	f7fc f8e1 	bl	8000104 <__udivsi3>
 8003f42:	0003      	movs	r3, r0
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e05d      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2238      	movs	r2, #56	; 0x38
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f54:	4b30      	ldr	r3, [pc, #192]	; (8004018 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	e054      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2238      	movs	r2, #56	; 0x38
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d138      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f70:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	2207      	movs	r2, #7
 8003f78:	4013      	ands	r3, r2
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d10d      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	4824      	ldr	r0, [pc, #144]	; (8004018 <HAL_RCC_GetSysClockFreq+0x100>)
 8003f88:	f7fc f8bc 	bl	8000104 <__udivsi3>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	0019      	movs	r1, r3
 8003f90:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	227f      	movs	r2, #127	; 0x7f
 8003f98:	4013      	ands	r3, r2
 8003f9a:	434b      	muls	r3, r1
 8003f9c:	617b      	str	r3, [r7, #20]
        break;
 8003f9e:	e00d      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	481c      	ldr	r0, [pc, #112]	; (8004014 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fa4:	f7fc f8ae 	bl	8000104 <__udivsi3>
 8003fa8:	0003      	movs	r3, r0
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	227f      	movs	r2, #127	; 0x7f
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	434b      	muls	r3, r1
 8003fb8:	617b      	str	r3, [r7, #20]
        break;
 8003fba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	0f5b      	lsrs	r3, r3, #29
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	6978      	ldr	r0, [r7, #20]
 8003fce:	f7fc f899 	bl	8000104 <__udivsi3>
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	e015      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2238      	movs	r2, #56	; 0x38
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d103      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003fe4:	2380      	movs	r3, #128	; 0x80
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003fec:	4b08      	ldr	r3, [pc, #32]	; (8004010 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2238      	movs	r2, #56	; 0x38
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b18      	cmp	r3, #24
 8003ff6:	d103      	bne.n	8004000 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003ff8:	23fa      	movs	r3, #250	; 0xfa
 8003ffa:	01db      	lsls	r3, r3, #7
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e001      	b.n	8004004 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004004:	693b      	ldr	r3, [r7, #16]
}
 8004006:	0018      	movs	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	b006      	add	sp, #24
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	40021000 	.word	0x40021000
 8004014:	00f42400 	.word	0x00f42400
 8004018:	007a1200 	.word	0x007a1200

0800401c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b02      	ldr	r3, [pc, #8]	; (800402c <HAL_RCC_GetHCLKFreq+0x10>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	20000000 	.word	0x20000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004034:	f7ff fff2 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004038:	0004      	movs	r4, r0
 800403a:	f7ff faf9 	bl	8003630 <LL_RCC_GetAPB1Prescaler>
 800403e:	0003      	movs	r3, r0
 8004040:	0b1a      	lsrs	r2, r3, #12
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004044:	0092      	lsls	r2, r2, #2
 8004046:	58d3      	ldr	r3, [r2, r3]
 8004048:	221f      	movs	r2, #31
 800404a:	4013      	ands	r3, r2
 800404c:	40dc      	lsrs	r4, r3
 800404e:	0023      	movs	r3, r4
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	bdb0      	pop	{r4, r5, r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	080062e8 	.word	0x080062e8

0800405c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004064:	2313      	movs	r3, #19
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	2200      	movs	r2, #0
 800406a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800406c:	2312      	movs	r3, #18
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2200      	movs	r2, #0
 8004072:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	029b      	lsls	r3, r3, #10
 800407c:	4013      	ands	r3, r2
 800407e:	d100      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004080:	e0ad      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2011      	movs	r0, #17
 8004084:	183b      	adds	r3, r7, r0
 8004086:	2200      	movs	r2, #0
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800408c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	055b      	lsls	r3, r3, #21
 8004092:	4013      	ands	r3, r2
 8004094:	d110      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800409a:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800409c:	2180      	movs	r1, #128	; 0x80
 800409e:	0549      	lsls	r1, r1, #21
 80040a0:	430a      	orrs	r2, r1
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80040a4:	4b40      	ldr	r3, [pc, #256]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80040a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	055b      	lsls	r3, r3, #21
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b2:	183b      	adds	r3, r7, r0
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b8:	4b3c      	ldr	r3, [pc, #240]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	0049      	lsls	r1, r1, #1
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040c6:	f7fe f9c7 	bl	8002458 <HAL_GetTick>
 80040ca:	0003      	movs	r3, r0
 80040cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040ce:	e00b      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fe f9c2 	bl	8002458 <HAL_GetTick>
 80040d4:	0002      	movs	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d904      	bls.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80040de:	2313      	movs	r3, #19
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	2203      	movs	r2, #3
 80040e4:	701a      	strb	r2, [r3, #0]
        break;
 80040e6:	e005      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4013      	ands	r3, r2
 80040f2:	d0ed      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80040f4:	2313      	movs	r3, #19
 80040f6:	18fb      	adds	r3, r7, r3
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d15e      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040fe:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004100:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004102:	23c0      	movs	r3, #192	; 0xc0
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4013      	ands	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d019      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	429a      	cmp	r2, r3
 8004118:	d014      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800411a:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800411c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411e:	4a24      	ldr	r2, [pc, #144]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004124:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004126:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004128:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800412a:	2180      	movs	r1, #128	; 0x80
 800412c:	0249      	lsls	r1, r1, #9
 800412e:	430a      	orrs	r2, r1
 8004130:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004132:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004134:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004136:	4b1c      	ldr	r3, [pc, #112]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004138:	491e      	ldr	r1, [pc, #120]	; (80041b4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800413a:	400a      	ands	r2, r1
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2201      	movs	r2, #1
 8004148:	4013      	ands	r3, r2
 800414a:	d016      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fe f984 	bl	8002458 <HAL_GetTick>
 8004150:	0003      	movs	r3, r0
 8004152:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004154:	e00c      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004156:	f7fe f97f 	bl	8002458 <HAL_GetTick>
 800415a:	0002      	movs	r2, r0
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d904      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004166:	2313      	movs	r3, #19
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
            break;
 800416e:	e004      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d0ed      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800417a:	2313      	movs	r3, #19
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004188:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004194:	430a      	orrs	r2, r1
 8004196:	65da      	str	r2, [r3, #92]	; 0x5c
 8004198:	e016      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800419a:	2312      	movs	r3, #18
 800419c:	18fb      	adds	r3, r7, r3
 800419e:	2213      	movs	r2, #19
 80041a0:	18ba      	adds	r2, r7, r2
 80041a2:	7812      	ldrb	r2, [r2, #0]
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e00f      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40007000 	.word	0x40007000
 80041b0:	fffffcff 	.word	0xfffffcff
 80041b4:	fffeffff 	.word	0xfffeffff
 80041b8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041bc:	2312      	movs	r3, #18
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2213      	movs	r2, #19
 80041c2:	18ba      	adds	r2, r7, r2
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041c8:	2311      	movs	r3, #17
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4bb6      	ldr	r3, [pc, #728]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041d6:	4bb5      	ldr	r3, [pc, #724]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041d8:	49b5      	ldr	r1, [pc, #724]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80041da:	400a      	ands	r2, r1
 80041dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	4013      	ands	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041e8:	4bb0      	ldr	r3, [pc, #704]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	2203      	movs	r2, #3
 80041ee:	4393      	bics	r3, r2
 80041f0:	0019      	movs	r1, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	4bad      	ldr	r3, [pc, #692]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80041f8:	430a      	orrs	r2, r1
 80041fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2202      	movs	r2, #2
 8004202:	4013      	ands	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004206:	4ba9      	ldr	r3, [pc, #676]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	220c      	movs	r2, #12
 800420c:	4393      	bics	r3, r2
 800420e:	0019      	movs	r1, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	4ba5      	ldr	r3, [pc, #660]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004216:	430a      	orrs	r2, r1
 8004218:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2204      	movs	r2, #4
 8004220:	4013      	ands	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004224:	4ba1      	ldr	r3, [pc, #644]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	2230      	movs	r2, #48	; 0x30
 800422a:	4393      	bics	r3, r2
 800422c:	0019      	movs	r1, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004234:	430a      	orrs	r2, r1
 8004236:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2210      	movs	r2, #16
 800423e:	4013      	ands	r3, r2
 8004240:	d009      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004242:	4b9a      	ldr	r3, [pc, #616]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	4a9b      	ldr	r2, [pc, #620]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	4b96      	ldr	r3, [pc, #600]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004252:	430a      	orrs	r2, r1
 8004254:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	015b      	lsls	r3, r3, #5
 800425e:	4013      	ands	r3, r2
 8004260:	d009      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004262:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	4a94      	ldr	r2, [pc, #592]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	4b8e      	ldr	r3, [pc, #568]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004272:	430a      	orrs	r2, r1
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d009      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004282:	4b8a      	ldr	r3, [pc, #552]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	4a8d      	ldr	r2, [pc, #564]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004288:	4013      	ands	r3, r2
 800428a:	0019      	movs	r1, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004292:	430a      	orrs	r2, r1
 8004294:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4013      	ands	r3, r2
 80042a0:	d009      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a2:	4b82      	ldr	r3, [pc, #520]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	4a86      	ldr	r2, [pc, #536]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b7e      	ldr	r3, [pc, #504]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042b2:	430a      	orrs	r2, r1
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2220      	movs	r2, #32
 80042bc:	4013      	ands	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c0:	4b7a      	ldr	r3, [pc, #488]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c4:	4a7f      	ldr	r2, [pc, #508]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	0019      	movs	r1, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	4b77      	ldr	r3, [pc, #476]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042d0:	430a      	orrs	r2, r1
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2240      	movs	r2, #64	; 0x40
 80042da:	4013      	ands	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042de:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	0019      	movs	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	4b6f      	ldr	r3, [pc, #444]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80042ee:	430a      	orrs	r2, r1
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	01db      	lsls	r3, r3, #7
 80042fa:	4013      	ands	r3, r2
 80042fc:	d015      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042fe:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	0899      	lsrs	r1, r3, #2
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800430a:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800430c:	430a      	orrs	r2, r1
 800430e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	05db      	lsls	r3, r3, #23
 8004318:	429a      	cmp	r2, r3
 800431a:	d106      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800431c:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b62      	ldr	r3, [pc, #392]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004322:	2180      	movs	r1, #128	; 0x80
 8004324:	0249      	lsls	r1, r1, #9
 8004326:	430a      	orrs	r2, r1
 8004328:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	031b      	lsls	r3, r3, #12
 8004332:	4013      	ands	r3, r2
 8004334:	d009      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004336:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	2240      	movs	r2, #64	; 0x40
 800433c:	4393      	bics	r3, r2
 800433e:	0019      	movs	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004344:	4b59      	ldr	r3, [pc, #356]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004346:	430a      	orrs	r2, r1
 8004348:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	039b      	lsls	r3, r3, #14
 8004352:	4013      	ands	r3, r2
 8004354:	d016      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004356:	4b55      	ldr	r3, [pc, #340]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	4a5c      	ldr	r2, [pc, #368]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800435c:	4013      	ands	r3, r2
 800435e:	0019      	movs	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004364:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004366:	430a      	orrs	r2, r1
 8004368:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	03db      	lsls	r3, r3, #15
 8004372:	429a      	cmp	r2, r3
 8004374:	d106      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004376:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b4c      	ldr	r3, [pc, #304]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800437c:	2180      	movs	r1, #128	; 0x80
 800437e:	0449      	lsls	r1, r1, #17
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	; 0x80
 800438a:	03db      	lsls	r3, r3, #15
 800438c:	4013      	ands	r3, r2
 800438e:	d016      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004390:	4b46      	ldr	r3, [pc, #280]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	4a4e      	ldr	r2, [pc, #312]	; (80044d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	045b      	lsls	r3, r3, #17
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d106      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80043b0:	4b3e      	ldr	r3, [pc, #248]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	4b3d      	ldr	r3, [pc, #244]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0449      	lsls	r1, r1, #17
 80043ba:	430a      	orrs	r2, r1
 80043bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4013      	ands	r3, r2
 80043c8:	d014      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80043ca:	4b38      	ldr	r3, [pc, #224]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	2203      	movs	r2, #3
 80043d0:	4393      	bics	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a1a      	ldr	r2, [r3, #32]
 80043d8:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043da:	430a      	orrs	r2, r1
 80043dc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d106      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	4b30      	ldr	r3, [pc, #192]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80043ec:	2180      	movs	r1, #128	; 0x80
 80043ee:	0249      	lsls	r1, r1, #9
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	2380      	movs	r3, #128	; 0x80
 80043fa:	019b      	lsls	r3, r3, #6
 80043fc:	4013      	ands	r3, r2
 80043fe:	d014      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004400:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	220c      	movs	r2, #12
 8004406:	4393      	bics	r3, r2
 8004408:	0019      	movs	r1, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800440e:	4b27      	ldr	r3, [pc, #156]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004410:	430a      	orrs	r2, r1
 8004412:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2b04      	cmp	r3, #4
 800441a:	d106      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0249      	lsls	r1, r1, #9
 8004426:	430a      	orrs	r2, r1
 8004428:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	045b      	lsls	r3, r3, #17
 8004432:	4013      	ands	r3, r2
 8004434:	d016      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443a:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800443c:	4013      	ands	r3, r2
 800443e:	0019      	movs	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004446:	430a      	orrs	r2, r1
 8004448:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800444e:	2380      	movs	r3, #128	; 0x80
 8004450:	019b      	lsls	r3, r3, #6
 8004452:	429a      	cmp	r2, r3
 8004454:	d106      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	0449      	lsls	r1, r1, #17
 8004460:	430a      	orrs	r2, r1
 8004462:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	049b      	lsls	r3, r3, #18
 800446c:	4013      	ands	r3, r2
 800446e:	d016      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004470:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004474:	4a10      	ldr	r2, [pc, #64]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004476:	4013      	ands	r3, r2
 8004478:	0019      	movs	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800447e:	4b0b      	ldr	r3, [pc, #44]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004480:	430a      	orrs	r2, r1
 8004482:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	429a      	cmp	r2, r3
 800448e:	d106      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	0449      	lsls	r1, r1, #17
 800449a:	430a      	orrs	r2, r1
 800449c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800449e:	2312      	movs	r3, #18
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	781b      	ldrb	r3, [r3, #0]
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b006      	add	sp, #24
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	efffffff 	.word	0xefffffff
 80044b4:	fffff3ff 	.word	0xfffff3ff
 80044b8:	fffffcff 	.word	0xfffffcff
 80044bc:	fff3ffff 	.word	0xfff3ffff
 80044c0:	ffcfffff 	.word	0xffcfffff
 80044c4:	ffffcfff 	.word	0xffffcfff
 80044c8:	ffff3fff 	.word	0xffff3fff
 80044cc:	ffbfffff 	.word	0xffbfffff
 80044d0:	feffffff 	.word	0xfeffffff

080044d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e04a      	b.n	800457c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	223d      	movs	r2, #61	; 0x3d
 80044ea:	5c9b      	ldrb	r3, [r3, r2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223c      	movs	r2, #60	; 0x3c
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f7fd fe31 	bl	8002164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	223d      	movs	r2, #61	; 0x3d
 8004506:	2102      	movs	r1, #2
 8004508:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3304      	adds	r3, #4
 8004512:	0019      	movs	r1, r3
 8004514:	0010      	movs	r0, r2
 8004516:	f000 fb5b 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2248      	movs	r2, #72	; 0x48
 800451e:	2101      	movs	r1, #1
 8004520:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	223e      	movs	r2, #62	; 0x3e
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	223f      	movs	r2, #63	; 0x3f
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2240      	movs	r2, #64	; 0x40
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2241      	movs	r2, #65	; 0x41
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2242      	movs	r2, #66	; 0x42
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2243      	movs	r2, #67	; 0x43
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2244      	movs	r2, #68	; 0x44
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2245      	movs	r2, #69	; 0x45
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2246      	movs	r2, #70	; 0x46
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2247      	movs	r2, #71	; 0x47
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	223d      	movs	r2, #61	; 0x3d
 8004576:	2101      	movs	r1, #1
 8004578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	0018      	movs	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e04a      	b.n	800462c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	223d      	movs	r2, #61	; 0x3d
 800459a:	5c9b      	ldrb	r3, [r3, r2]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d107      	bne.n	80045b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	223c      	movs	r2, #60	; 0x3c
 80045a6:	2100      	movs	r1, #0
 80045a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 f841 	bl	8004634 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	223d      	movs	r2, #61	; 0x3d
 80045b6:	2102      	movs	r1, #2
 80045b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	0019      	movs	r1, r3
 80045c4:	0010      	movs	r0, r2
 80045c6:	f000 fb03 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2248      	movs	r2, #72	; 0x48
 80045ce:	2101      	movs	r1, #1
 80045d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	223e      	movs	r2, #62	; 0x3e
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	223f      	movs	r2, #63	; 0x3f
 80045de:	2101      	movs	r1, #1
 80045e0:	5499      	strb	r1, [r3, r2]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2240      	movs	r2, #64	; 0x40
 80045e6:	2101      	movs	r1, #1
 80045e8:	5499      	strb	r1, [r3, r2]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2241      	movs	r2, #65	; 0x41
 80045ee:	2101      	movs	r1, #1
 80045f0:	5499      	strb	r1, [r3, r2]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2242      	movs	r2, #66	; 0x42
 80045f6:	2101      	movs	r1, #1
 80045f8:	5499      	strb	r1, [r3, r2]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2243      	movs	r2, #67	; 0x43
 80045fe:	2101      	movs	r1, #1
 8004600:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2244      	movs	r2, #68	; 0x44
 8004606:	2101      	movs	r1, #1
 8004608:	5499      	strb	r1, [r3, r2]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2245      	movs	r2, #69	; 0x45
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2246      	movs	r2, #70	; 0x46
 8004616:	2101      	movs	r1, #1
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2247      	movs	r2, #71	; 0x47
 800461e:	2101      	movs	r1, #1
 8004620:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	223d      	movs	r2, #61	; 0x3d
 8004626:	2101      	movs	r1, #1
 8004628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b002      	add	sp, #8
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <HAL_TIM_PWM_Start+0x22>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	223e      	movs	r2, #62	; 0x3e
 8004658:	5c9b      	ldrb	r3, [r3, r2]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	1e5a      	subs	r2, r3, #1
 8004660:	4193      	sbcs	r3, r2
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e037      	b.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d108      	bne.n	800467e <HAL_TIM_PWM_Start+0x3a>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	223f      	movs	r2, #63	; 0x3f
 8004670:	5c9b      	ldrb	r3, [r3, r2]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	4193      	sbcs	r3, r2
 800467a:	b2db      	uxtb	r3, r3
 800467c:	e02b      	b.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b08      	cmp	r3, #8
 8004682:	d108      	bne.n	8004696 <HAL_TIM_PWM_Start+0x52>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2240      	movs	r2, #64	; 0x40
 8004688:	5c9b      	ldrb	r3, [r3, r2]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	1e5a      	subs	r2, r3, #1
 8004690:	4193      	sbcs	r3, r2
 8004692:	b2db      	uxtb	r3, r3
 8004694:	e01f      	b.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b0c      	cmp	r3, #12
 800469a:	d108      	bne.n	80046ae <HAL_TIM_PWM_Start+0x6a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2241      	movs	r2, #65	; 0x41
 80046a0:	5c9b      	ldrb	r3, [r3, r2]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	1e5a      	subs	r2, r3, #1
 80046a8:	4193      	sbcs	r3, r2
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	e013      	b.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d108      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x82>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2242      	movs	r2, #66	; 0x42
 80046b8:	5c9b      	ldrb	r3, [r3, r2]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	1e5a      	subs	r2, r3, #1
 80046c0:	4193      	sbcs	r3, r2
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e007      	b.n	80046d6 <HAL_TIM_PWM_Start+0x92>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2243      	movs	r2, #67	; 0x43
 80046ca:	5c9b      	ldrb	r3, [r3, r2]
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	3b01      	subs	r3, #1
 80046d0:	1e5a      	subs	r2, r3, #1
 80046d2:	4193      	sbcs	r3, r2
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e090      	b.n	8004800 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_PWM_Start+0xaa>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	223e      	movs	r2, #62	; 0x3e
 80046e8:	2102      	movs	r1, #2
 80046ea:	5499      	strb	r1, [r3, r2]
 80046ec:	e023      	b.n	8004736 <HAL_TIM_PWM_Start+0xf2>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_PWM_Start+0xba>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	223f      	movs	r2, #63	; 0x3f
 80046f8:	2102      	movs	r1, #2
 80046fa:	5499      	strb	r1, [r3, r2]
 80046fc:	e01b      	b.n	8004736 <HAL_TIM_PWM_Start+0xf2>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b08      	cmp	r3, #8
 8004702:	d104      	bne.n	800470e <HAL_TIM_PWM_Start+0xca>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	2102      	movs	r1, #2
 800470a:	5499      	strb	r1, [r3, r2]
 800470c:	e013      	b.n	8004736 <HAL_TIM_PWM_Start+0xf2>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d104      	bne.n	800471e <HAL_TIM_PWM_Start+0xda>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2241      	movs	r2, #65	; 0x41
 8004718:	2102      	movs	r1, #2
 800471a:	5499      	strb	r1, [r3, r2]
 800471c:	e00b      	b.n	8004736 <HAL_TIM_PWM_Start+0xf2>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b10      	cmp	r3, #16
 8004722:	d104      	bne.n	800472e <HAL_TIM_PWM_Start+0xea>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2242      	movs	r2, #66	; 0x42
 8004728:	2102      	movs	r1, #2
 800472a:	5499      	strb	r1, [r3, r2]
 800472c:	e003      	b.n	8004736 <HAL_TIM_PWM_Start+0xf2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2243      	movs	r2, #67	; 0x43
 8004732:	2102      	movs	r1, #2
 8004734:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fe30 	bl	80053a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <HAL_TIM_PWM_Start+0x1c4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_TIM_PWM_Start+0x128>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2e      	ldr	r2, [pc, #184]	; (800480c <HAL_TIM_PWM_Start+0x1c8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d009      	beq.n	800476c <HAL_TIM_PWM_Start+0x128>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a2c      	ldr	r2, [pc, #176]	; (8004810 <HAL_TIM_PWM_Start+0x1cc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d004      	beq.n	800476c <HAL_TIM_PWM_Start+0x128>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a2b      	ldr	r2, [pc, #172]	; (8004814 <HAL_TIM_PWM_Start+0x1d0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d101      	bne.n	8004770 <HAL_TIM_PWM_Start+0x12c>
 800476c:	2301      	movs	r3, #1
 800476e:	e000      	b.n	8004772 <HAL_TIM_PWM_Start+0x12e>
 8004770:	2300      	movs	r3, #0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d008      	beq.n	8004788 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2180      	movs	r1, #128	; 0x80
 8004782:	0209      	lsls	r1, r1, #8
 8004784:	430a      	orrs	r2, r1
 8004786:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_TIM_PWM_Start+0x1c4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d014      	beq.n	80047bc <HAL_TIM_PWM_Start+0x178>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	05db      	lsls	r3, r3, #23
 800479a:	429a      	cmp	r2, r3
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_PWM_Start+0x178>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_TIM_PWM_Start+0x1d4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_PWM_Start+0x178>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_TIM_PWM_Start+0x1d8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_PWM_Start+0x178>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_TIM_PWM_Start+0x1c8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d116      	bne.n	80047ea <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <HAL_TIM_PWM_Start+0x1dc>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d016      	beq.n	80047fc <HAL_TIM_PWM_Start+0x1b8>
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	025b      	lsls	r3, r3, #9
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d011      	beq.n	80047fc <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2101      	movs	r1, #1
 80047e4:	430a      	orrs	r2, r1
 80047e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	e008      	b.n	80047fc <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	430a      	orrs	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e000      	b.n	80047fe <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b004      	add	sp, #16
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40012c00 	.word	0x40012c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	00010007 	.word	0x00010007

08004824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2317      	movs	r3, #23
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2200      	movs	r2, #0
 8004836:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	223c      	movs	r2, #60	; 0x3c
 800483c:	5c9b      	ldrb	r3, [r3, r2]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d101      	bne.n	8004846 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004842:	2302      	movs	r3, #2
 8004844:	e0e5      	b.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	223c      	movs	r2, #60	; 0x3c
 800484a:	2101      	movs	r1, #1
 800484c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b14      	cmp	r3, #20
 8004852:	d900      	bls.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004854:	e0d1      	b.n	80049fa <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	009a      	lsls	r2, r3, #2
 800485a:	4b70      	ldr	r3, [pc, #448]	; (8004a1c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800485c:	18d3      	adds	r3, r2, r3
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68ba      	ldr	r2, [r7, #8]
 8004868:	0011      	movs	r1, r2
 800486a:	0018      	movs	r0, r3
 800486c:	f000 fa3a 	bl	8004ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2108      	movs	r1, #8
 800487c:	430a      	orrs	r2, r1
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2104      	movs	r1, #4
 800488c:	438a      	bics	r2, r1
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e0af      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	0011      	movs	r1, r2
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 faa3 	bl	8004df8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2180      	movs	r1, #128	; 0x80
 80048be:	0109      	lsls	r1, r1, #4
 80048c0:	430a      	orrs	r2, r1
 80048c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4954      	ldr	r1, [pc, #336]	; (8004a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80048d0:	400a      	ands	r2, r1
 80048d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6999      	ldr	r1, [r3, #24]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	021a      	lsls	r2, r3, #8
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	619a      	str	r2, [r3, #24]
      break;
 80048e8:	e08c      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	0011      	movs	r1, r2
 80048f2:	0018      	movs	r0, r3
 80048f4:	f000 fb04 	bl	8004f00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69da      	ldr	r2, [r3, #28]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2108      	movs	r1, #8
 8004904:	430a      	orrs	r2, r1
 8004906:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2104      	movs	r1, #4
 8004914:	438a      	bics	r2, r1
 8004916:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69d9      	ldr	r1, [r3, #28]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	61da      	str	r2, [r3, #28]
      break;
 800492a:	e06b      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	0011      	movs	r1, r2
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fb6b 	bl	8005010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69da      	ldr	r2, [r3, #28]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2180      	movs	r1, #128	; 0x80
 8004946:	0109      	lsls	r1, r1, #4
 8004948:	430a      	orrs	r2, r1
 800494a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	69da      	ldr	r2, [r3, #28]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4932      	ldr	r1, [pc, #200]	; (8004a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004958:	400a      	ands	r2, r1
 800495a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69d9      	ldr	r1, [r3, #28]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	61da      	str	r2, [r3, #28]
      break;
 8004970:	e048      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0011      	movs	r1, r2
 800497a:	0018      	movs	r0, r3
 800497c:	f000 fbb2 	bl	80050e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2108      	movs	r1, #8
 800498c:	430a      	orrs	r2, r1
 800498e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2104      	movs	r1, #4
 800499c:	438a      	bics	r2, r1
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049b2:	e027      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	0011      	movs	r1, r2
 80049bc:	0018      	movs	r0, r3
 80049be:	f000 fbf1 	bl	80051a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	0109      	lsls	r1, r1, #4
 80049d0:	430a      	orrs	r2, r1
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4910      	ldr	r1, [pc, #64]	; (8004a20 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80049e0:	400a      	ands	r2, r1
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80049f8:	e004      	b.n	8004a04 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80049fa:	2317      	movs	r3, #23
 80049fc:	18fb      	adds	r3, r7, r3
 80049fe:	2201      	movs	r2, #1
 8004a00:	701a      	strb	r2, [r3, #0]
      break;
 8004a02:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	223c      	movs	r2, #60	; 0x3c
 8004a08:	2100      	movs	r1, #0
 8004a0a:	5499      	strb	r1, [r3, r2]

  return status;
 8004a0c:	2317      	movs	r3, #23
 8004a0e:	18fb      	adds	r3, r7, r3
 8004a10:	781b      	ldrb	r3, [r3, #0]
}
 8004a12:	0018      	movs	r0, r3
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b006      	add	sp, #24
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	08006308 	.word	0x08006308
 8004a20:	fffffbff 	.word	0xfffffbff

08004a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2e:	230f      	movs	r3, #15
 8004a30:	18fb      	adds	r3, r7, r3
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	223c      	movs	r2, #60	; 0x3c
 8004a3a:	5c9b      	ldrb	r3, [r3, r2]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIM_ConfigClockSource+0x20>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e0bc      	b.n	8004bbe <HAL_TIM_ConfigClockSource+0x19a>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	223c      	movs	r2, #60	; 0x3c
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	223d      	movs	r2, #61	; 0x3d
 8004a50:	2102      	movs	r1, #2
 8004a52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	4a5a      	ldr	r2, [pc, #360]	; (8004bc8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	4a59      	ldr	r2, [pc, #356]	; (8004bcc <HAL_TIM_ConfigClockSource+0x1a8>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	0192      	lsls	r2, r2, #6
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d040      	beq.n	8004b02 <HAL_TIM_ConfigClockSource+0xde>
 8004a80:	2280      	movs	r2, #128	; 0x80
 8004a82:	0192      	lsls	r2, r2, #6
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d900      	bls.n	8004a8a <HAL_TIM_ConfigClockSource+0x66>
 8004a88:	e088      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004a8a:	2280      	movs	r2, #128	; 0x80
 8004a8c:	0152      	lsls	r2, r2, #5
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d100      	bne.n	8004a94 <HAL_TIM_ConfigClockSource+0x70>
 8004a92:	e088      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x182>
 8004a94:	2280      	movs	r2, #128	; 0x80
 8004a96:	0152      	lsls	r2, r2, #5
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d900      	bls.n	8004a9e <HAL_TIM_ConfigClockSource+0x7a>
 8004a9c:	e07e      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004a9e:	2b70      	cmp	r3, #112	; 0x70
 8004aa0:	d018      	beq.n	8004ad4 <HAL_TIM_ConfigClockSource+0xb0>
 8004aa2:	d900      	bls.n	8004aa6 <HAL_TIM_ConfigClockSource+0x82>
 8004aa4:	e07a      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004aa6:	2b60      	cmp	r3, #96	; 0x60
 8004aa8:	d04f      	beq.n	8004b4a <HAL_TIM_ConfigClockSource+0x126>
 8004aaa:	d900      	bls.n	8004aae <HAL_TIM_ConfigClockSource+0x8a>
 8004aac:	e076      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004aae:	2b50      	cmp	r3, #80	; 0x50
 8004ab0:	d03b      	beq.n	8004b2a <HAL_TIM_ConfigClockSource+0x106>
 8004ab2:	d900      	bls.n	8004ab6 <HAL_TIM_ConfigClockSource+0x92>
 8004ab4:	e072      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d057      	beq.n	8004b6a <HAL_TIM_ConfigClockSource+0x146>
 8004aba:	d900      	bls.n	8004abe <HAL_TIM_ConfigClockSource+0x9a>
 8004abc:	e06e      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004abe:	2b30      	cmp	r3, #48	; 0x30
 8004ac0:	d063      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x166>
 8004ac2:	d86b      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d060      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x166>
 8004ac8:	d868      	bhi.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d05d      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x166>
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d05b      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0x166>
 8004ad2:	e063      	b.n	8004b9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae4:	f000 fc3e 	bl	8005364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2277      	movs	r2, #119	; 0x77
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	609a      	str	r2, [r3, #8]
      break;
 8004b00:	e052      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b12:	f000 fc27 	bl	8005364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2180      	movs	r1, #128	; 0x80
 8004b22:	01c9      	lsls	r1, r1, #7
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
      break;
 8004b28:	e03e      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	001a      	movs	r2, r3
 8004b38:	f000 fb98 	bl	800526c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2150      	movs	r1, #80	; 0x50
 8004b42:	0018      	movs	r0, r3
 8004b44:	f000 fbf2 	bl	800532c <TIM_ITRx_SetConfig>
      break;
 8004b48:	e02e      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b56:	001a      	movs	r2, r3
 8004b58:	f000 fbb6 	bl	80052c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2160      	movs	r1, #96	; 0x60
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 fbe2 	bl	800532c <TIM_ITRx_SetConfig>
      break;
 8004b68:	e01e      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	001a      	movs	r2, r3
 8004b78:	f000 fb78 	bl	800526c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2140      	movs	r1, #64	; 0x40
 8004b82:	0018      	movs	r0, r3
 8004b84:	f000 fbd2 	bl	800532c <TIM_ITRx_SetConfig>
      break;
 8004b88:	e00e      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	0019      	movs	r1, r3
 8004b94:	0010      	movs	r0, r2
 8004b96:	f000 fbc9 	bl	800532c <TIM_ITRx_SetConfig>
      break;
 8004b9a:	e005      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004b9c:	230f      	movs	r3, #15
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
      break;
 8004ba4:	e000      	b.n	8004ba8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004ba6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	223d      	movs	r2, #61	; 0x3d
 8004bac:	2101      	movs	r1, #1
 8004bae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	223c      	movs	r2, #60	; 0x3c
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	5499      	strb	r1, [r3, r2]

  return status;
 8004bb8:	230f      	movs	r3, #15
 8004bba:	18fb      	adds	r3, r7, r3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
}
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	b004      	add	sp, #16
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	ffceff88 	.word	0xffceff88
 8004bcc:	ffff00ff 	.word	0xffff00ff

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a38      	ldr	r2, [pc, #224]	; (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00c      	beq.n	8004c02 <TIM_Base_SetConfig+0x32>
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	05db      	lsls	r3, r3, #23
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d007      	beq.n	8004c02 <TIM_Base_SetConfig+0x32>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a34      	ldr	r2, [pc, #208]	; (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <TIM_Base_SetConfig+0x32>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a33      	ldr	r2, [pc, #204]	; (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d108      	bne.n	8004c14 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2270      	movs	r2, #112	; 0x70
 8004c06:	4393      	bics	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d01c      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d017      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a27      	ldr	r2, [pc, #156]	; (8004cc8 <TIM_Base_SetConfig+0xf8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <TIM_Base_SetConfig+0xfc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00f      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <TIM_Base_SetConfig+0x100>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00b      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <TIM_Base_SetConfig+0x104>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d007      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a23      	ldr	r2, [pc, #140]	; (8004cd8 <TIM_Base_SetConfig+0x108>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <TIM_Base_SetConfig+0x86>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <TIM_Base_SetConfig+0x10c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d108      	bne.n	8004c68 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <TIM_Base_SetConfig+0x110>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	4393      	bics	r3, r2
 8004c6e:	001a      	movs	r2, r3
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a0c      	ldr	r2, [pc, #48]	; (8004cc4 <TIM_Base_SetConfig+0xf4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xde>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <TIM_Base_SetConfig+0x104>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xde>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <TIM_Base_SetConfig+0x108>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xde>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0c      	ldr	r2, [pc, #48]	; (8004cdc <TIM_Base_SetConfig+0x10c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d103      	bne.n	8004cb6 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	615a      	str	r2, [r3, #20]
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	b004      	add	sp, #16
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40002000 	.word	0x40002000
 8004cd4:	40014000 	.word	0x40014000
 8004cd8:	40014400 	.word	0x40014400
 8004cdc:	40014800 	.word	0x40014800
 8004ce0:	fffffcff 	.word	0xfffffcff

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4a32      	ldr	r2, [pc, #200]	; (8004ddc <TIM_OC1_SetConfig+0xf8>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2203      	movs	r2, #3
 8004d1a:	4393      	bics	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	4393      	bics	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a28      	ldr	r2, [pc, #160]	; (8004de0 <TIM_OC1_SetConfig+0xfc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00b      	beq.n	8004d5a <TIM_OC1_SetConfig+0x76>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <TIM_OC1_SetConfig+0x100>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d007      	beq.n	8004d5a <TIM_OC1_SetConfig+0x76>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a26      	ldr	r2, [pc, #152]	; (8004de8 <TIM_OC1_SetConfig+0x104>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d003      	beq.n	8004d5a <TIM_OC1_SetConfig+0x76>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a25      	ldr	r2, [pc, #148]	; (8004dec <TIM_OC1_SetConfig+0x108>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d10c      	bne.n	8004d74 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4393      	bics	r3, r2
 8004d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	4393      	bics	r3, r2
 8004d72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a1a      	ldr	r2, [pc, #104]	; (8004de0 <TIM_OC1_SetConfig+0xfc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_OC1_SetConfig+0xb0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <TIM_OC1_SetConfig+0x100>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_OC1_SetConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <TIM_OC1_SetConfig+0x104>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_OC1_SetConfig+0xb0>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a17      	ldr	r2, [pc, #92]	; (8004dec <TIM_OC1_SetConfig+0x108>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d111      	bne.n	8004db8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4a16      	ldr	r2, [pc, #88]	; (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	4a15      	ldr	r2, [pc, #84]	; (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b006      	add	sp, #24
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	fffeff8f 	.word	0xfffeff8f
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40014000 	.word	0x40014000
 8004de8:	40014400 	.word	0x40014400
 8004dec:	40014800 	.word	0x40014800
 8004df0:	fffffeff 	.word	0xfffffeff
 8004df4:	fffffdff 	.word	0xfffffdff

08004df8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	2210      	movs	r2, #16
 8004e08:	4393      	bics	r3, r2
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <TIM_OC2_SetConfig+0xe8>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <TIM_OC2_SetConfig+0xec>)
 8004e2e:	4013      	ands	r3, r2
 8004e30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2220      	movs	r2, #32
 8004e42:	4393      	bics	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <TIM_OC2_SetConfig+0xf0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d10d      	bne.n	8004e76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2280      	movs	r2, #128	; 0x80
 8004e5e:	4393      	bics	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2240      	movs	r2, #64	; 0x40
 8004e72:	4393      	bics	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <TIM_OC2_SetConfig+0xf0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d00b      	beq.n	8004e96 <TIM_OC2_SetConfig+0x9e>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <TIM_OC2_SetConfig+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d007      	beq.n	8004e96 <TIM_OC2_SetConfig+0x9e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <TIM_OC2_SetConfig+0xf8>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d003      	beq.n	8004e96 <TIM_OC2_SetConfig+0x9e>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <TIM_OC2_SetConfig+0xfc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d113      	bne.n	8004ebe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <TIM_OC2_SetConfig+0x100>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4a16      	ldr	r2, [pc, #88]	; (8004efc <TIM_OC2_SetConfig+0x104>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	621a      	str	r2, [r3, #32]
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b006      	add	sp, #24
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	feff8fff 	.word	0xfeff8fff
 8004ee4:	fffffcff 	.word	0xfffffcff
 8004ee8:	40012c00 	.word	0x40012c00
 8004eec:	40014000 	.word	0x40014000
 8004ef0:	40014400 	.word	0x40014400
 8004ef4:	40014800 	.word	0x40014800
 8004ef8:	fffffbff 	.word	0xfffffbff
 8004efc:	fffff7ff 	.word	0xfffff7ff

08004f00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	4a35      	ldr	r2, [pc, #212]	; (8004fe4 <TIM_OC3_SetConfig+0xe4>)
 8004f10:	401a      	ands	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4a2f      	ldr	r2, [pc, #188]	; (8004fe8 <TIM_OC3_SetConfig+0xe8>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2203      	movs	r2, #3
 8004f34:	4393      	bics	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4a29      	ldr	r2, [pc, #164]	; (8004fec <TIM_OC3_SetConfig+0xec>)
 8004f46:	4013      	ands	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	021b      	lsls	r3, r3, #8
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <TIM_OC3_SetConfig+0xf0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d10d      	bne.n	8004f7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a24      	ldr	r2, [pc, #144]	; (8004ff4 <TIM_OC3_SetConfig+0xf4>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4a20      	ldr	r2, [pc, #128]	; (8004ff8 <TIM_OC3_SetConfig+0xf8>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <TIM_OC3_SetConfig+0xf0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00b      	beq.n	8004f9a <TIM_OC3_SetConfig+0x9a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1d      	ldr	r2, [pc, #116]	; (8004ffc <TIM_OC3_SetConfig+0xfc>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <TIM_OC3_SetConfig+0x9a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <TIM_OC3_SetConfig+0x100>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC3_SetConfig+0x9a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a1b      	ldr	r2, [pc, #108]	; (8005004 <TIM_OC3_SetConfig+0x104>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d113      	bne.n	8004fc2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4a1a      	ldr	r2, [pc, #104]	; (8005008 <TIM_OC3_SetConfig+0x108>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <TIM_OC3_SetConfig+0x10c>)
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b006      	add	sp, #24
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	fffffeff 	.word	0xfffffeff
 8004fe8:	fffeff8f 	.word	0xfffeff8f
 8004fec:	fffffdff 	.word	0xfffffdff
 8004ff0:	40012c00 	.word	0x40012c00
 8004ff4:	fffff7ff 	.word	0xfffff7ff
 8004ff8:	fffffbff 	.word	0xfffffbff
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800
 8005008:	ffffefff 	.word	0xffffefff
 800500c:	ffffdfff 	.word	0xffffdfff

08005010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4a28      	ldr	r2, [pc, #160]	; (80050c0 <TIM_OC4_SetConfig+0xb0>)
 8005020:	401a      	ands	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <TIM_OC4_SetConfig+0xb4>)
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a21      	ldr	r2, [pc, #132]	; (80050c8 <TIM_OC4_SetConfig+0xb8>)
 8005044:	4013      	ands	r3, r2
 8005046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <TIM_OC4_SetConfig+0xbc>)
 8005058:	4013      	ands	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	031b      	lsls	r3, r3, #12
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <TIM_OC4_SetConfig+0xc0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d00b      	beq.n	8005088 <TIM_OC4_SetConfig+0x78>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <TIM_OC4_SetConfig+0xc4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d007      	beq.n	8005088 <TIM_OC4_SetConfig+0x78>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <TIM_OC4_SetConfig+0xc8>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <TIM_OC4_SetConfig+0x78>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a16      	ldr	r2, [pc, #88]	; (80050dc <TIM_OC4_SetConfig+0xcc>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d109      	bne.n	800509c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <TIM_OC4_SetConfig+0xd0>)
 800508c:	4013      	ands	r3, r2
 800508e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4313      	orrs	r3, r2
 800509a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	621a      	str	r2, [r3, #32]
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	46bd      	mov	sp, r7
 80050ba:	b006      	add	sp, #24
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	ffffefff 	.word	0xffffefff
 80050c4:	feff8fff 	.word	0xfeff8fff
 80050c8:	fffffcff 	.word	0xfffffcff
 80050cc:	ffffdfff 	.word	0xffffdfff
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800
 80050e0:	ffffbfff 	.word	0xffffbfff

080050e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	4a25      	ldr	r2, [pc, #148]	; (8005188 <TIM_OC5_SetConfig+0xa4>)
 80050f4:	401a      	ands	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <TIM_OC5_SetConfig+0xa8>)
 8005110:	4013      	ands	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <TIM_OC5_SetConfig+0xac>)
 8005122:	4013      	ands	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	041b      	lsls	r3, r3, #16
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a17      	ldr	r2, [pc, #92]	; (8005194 <TIM_OC5_SetConfig+0xb0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_OC5_SetConfig+0x6e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a16      	ldr	r2, [pc, #88]	; (8005198 <TIM_OC5_SetConfig+0xb4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_OC5_SetConfig+0x6e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a15      	ldr	r2, [pc, #84]	; (800519c <TIM_OC5_SetConfig+0xb8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_OC5_SetConfig+0x6e>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <TIM_OC5_SetConfig+0xbc>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d109      	bne.n	8005166 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	4a0c      	ldr	r2, [pc, #48]	; (8005188 <TIM_OC5_SetConfig+0xa4>)
 8005156:	4013      	ands	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b006      	add	sp, #24
 8005186:	bd80      	pop	{r7, pc}
 8005188:	fffeffff 	.word	0xfffeffff
 800518c:	fffeff8f 	.word	0xfffeff8f
 8005190:	fffdffff 	.word	0xfffdffff
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40014000 	.word	0x40014000
 800519c:	40014400 	.word	0x40014400
 80051a0:	40014800 	.word	0x40014800

080051a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <TIM_OC6_SetConfig+0xa8>)
 80051b4:	401a      	ands	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4a20      	ldr	r2, [pc, #128]	; (8005250 <TIM_OC6_SetConfig+0xac>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4313      	orrs	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <TIM_OC6_SetConfig+0xb0>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	051b      	lsls	r3, r3, #20
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <TIM_OC6_SetConfig+0xb4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_OC6_SetConfig+0x70>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	; (800525c <TIM_OC6_SetConfig+0xb8>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_OC6_SetConfig+0x70>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	; (8005260 <TIM_OC6_SetConfig+0xbc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_OC6_SetConfig+0x70>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <TIM_OC6_SetConfig+0xc0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d109      	bne.n	8005228 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4a14      	ldr	r2, [pc, #80]	; (8005268 <TIM_OC6_SetConfig+0xc4>)
 8005218:	4013      	ands	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	4313      	orrs	r3, r2
 8005226:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	46c0      	nop			; (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	b006      	add	sp, #24
 8005248:	bd80      	pop	{r7, pc}
 800524a:	46c0      	nop			; (mov r8, r8)
 800524c:	ffefffff 	.word	0xffefffff
 8005250:	feff8fff 	.word	0xfeff8fff
 8005254:	ffdfffff 	.word	0xffdfffff
 8005258:	40012c00 	.word	0x40012c00
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800
 8005268:	fffbffff 	.word	0xfffbffff

0800526c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	2201      	movs	r2, #1
 8005284:	4393      	bics	r3, r2
 8005286:	001a      	movs	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	22f0      	movs	r2, #240	; 0xf0
 8005296:	4393      	bics	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	220a      	movs	r2, #10
 80052a8:	4393      	bics	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b006      	add	sp, #24
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	2210      	movs	r2, #16
 80052da:	4393      	bics	r3, r2
 80052dc:	001a      	movs	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4a0d      	ldr	r2, [pc, #52]	; (8005328 <TIM_TI2_ConfigInputStage+0x60>)
 80052f2:	4013      	ands	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	031b      	lsls	r3, r3, #12
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	22a0      	movs	r2, #160	; 0xa0
 8005304:	4393      	bics	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	46bd      	mov	sp, r7
 8005322:	b006      	add	sp, #24
 8005324:	bd80      	pop	{r7, pc}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	ffff0fff 	.word	0xffff0fff

0800532c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a08      	ldr	r2, [pc, #32]	; (8005360 <TIM_ITRx_SetConfig+0x34>)
 8005340:	4013      	ands	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4313      	orrs	r3, r2
 800534a:	2207      	movs	r2, #7
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	609a      	str	r2, [r3, #8]
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b004      	add	sp, #16
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	ffcfff8f 	.word	0xffcfff8f

08005364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4a09      	ldr	r2, [pc, #36]	; (80053a0 <TIM_ETR_SetConfig+0x3c>)
 800537c:	4013      	ands	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	021a      	lsls	r2, r3, #8
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	431a      	orrs	r2, r3
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4313      	orrs	r3, r2
 800538c:	697a      	ldr	r2, [r7, #20]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	609a      	str	r2, [r3, #8]
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	46bd      	mov	sp, r7
 800539c:	b006      	add	sp, #24
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	ffff00ff 	.word	0xffff00ff

080053a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	221f      	movs	r2, #31
 80053b4:	4013      	ands	r3, r2
 80053b6:	2201      	movs	r2, #1
 80053b8:	409a      	lsls	r2, r3
 80053ba:	0013      	movs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	43d2      	mvns	r2, r2
 80053c6:	401a      	ands	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a1a      	ldr	r2, [r3, #32]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	211f      	movs	r1, #31
 80053d4:	400b      	ands	r3, r1
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4099      	lsls	r1, r3
 80053da:	000b      	movs	r3, r1
 80053dc:	431a      	orrs	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	46c0      	nop			; (mov r8, r8)
 80053e4:	46bd      	mov	sp, r7
 80053e6:	b006      	add	sp, #24
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	223c      	movs	r2, #60	; 0x3c
 80053fa:	5c9b      	ldrb	r3, [r3, r2]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e05a      	b.n	80054ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	223c      	movs	r2, #60	; 0x3c
 8005408:	2101      	movs	r1, #1
 800540a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	223d      	movs	r2, #61	; 0x3d
 8005410:	2102      	movs	r1, #2
 8005412:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4a25      	ldr	r2, [pc, #148]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005432:	4013      	ands	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2270      	movs	r2, #112	; 0x70
 8005444:	4393      	bics	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d014      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	2380      	movs	r3, #128	; 0x80
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	429a      	cmp	r2, r3
 800546e:	d00e      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a12      	ldr	r2, [pc, #72]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d10c      	bne.n	80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	4393      	bics	r3, r2
 8005494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	4313      	orrs	r3, r2
 800549e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	223d      	movs	r2, #61	; 0x3d
 80054ac:	2101      	movs	r1, #1
 80054ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	223c      	movs	r2, #60	; 0x3c
 80054b4:	2100      	movs	r1, #0
 80054b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b004      	add	sp, #16
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	ff0fffff 	.word	0xff0fffff
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40014000 	.word	0x40014000

080054d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e046      	b.n	8005578 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2288      	movs	r2, #136	; 0x88
 80054ee:	589b      	ldr	r3, [r3, r2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d107      	bne.n	8005504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2284      	movs	r2, #132	; 0x84
 80054f8:	2100      	movs	r1, #0
 80054fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	0018      	movs	r0, r3
 8005500:	f7fc fe88 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2288      	movs	r2, #136	; 0x88
 8005508:	2124      	movs	r1, #36	; 0x24
 800550a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2101      	movs	r1, #1
 8005518:	438a      	bics	r2, r1
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	0018      	movs	r0, r3
 8005520:	f000 f830 	bl	8005584 <UART_SetConfig>
 8005524:	0003      	movs	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e024      	b.n	8005578 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	0018      	movs	r0, r3
 800553a:	f000 fb79 	bl	8005c30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	490d      	ldr	r1, [pc, #52]	; (8005580 <HAL_UART_Init+0xa8>)
 800554a:	400a      	ands	r2, r1
 800554c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	212a      	movs	r1, #42	; 0x2a
 800555a:	438a      	bics	r2, r1
 800555c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2101      	movs	r1, #1
 800556a:	430a      	orrs	r2, r1
 800556c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f000 fc11 	bl	8005d98 <UART_CheckIdleState>
 8005576:	0003      	movs	r3, r0
}
 8005578:	0018      	movs	r0, r3
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}
 8005580:	ffffb7ff 	.word	0xffffb7ff

08005584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	b5b0      	push	{r4, r5, r7, lr}
 8005586:	b090      	sub	sp, #64	; 0x40
 8005588:	af00      	add	r7, sp, #0
 800558a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800558c:	231a      	movs	r3, #26
 800558e:	2220      	movs	r2, #32
 8005590:	189b      	adds	r3, r3, r2
 8005592:	19db      	adds	r3, r3, r7
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4ac1      	ldr	r2, [pc, #772]	; (80058bc <UART_SetConfig+0x338>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c2:	430b      	orrs	r3, r1
 80055c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4abc      	ldr	r2, [pc, #752]	; (80058c0 <UART_SetConfig+0x33c>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	0018      	movs	r0, r3
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	68d9      	ldr	r1, [r3, #12]
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	0003      	movs	r3, r0
 80055dc:	430b      	orrs	r3, r1
 80055de:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4ab6      	ldr	r2, [pc, #728]	; (80058c4 <UART_SetConfig+0x340>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <UART_SetConfig+0x80>
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4ab4      	ldr	r2, [pc, #720]	; (80058c8 <UART_SetConfig+0x344>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005600:	4313      	orrs	r3, r2
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	4ab0      	ldr	r2, [pc, #704]	; (80058cc <UART_SetConfig+0x348>)
 800560c:	4013      	ands	r3, r2
 800560e:	0019      	movs	r1, r3
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	430b      	orrs	r3, r1
 8005618:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005620:	220f      	movs	r2, #15
 8005622:	4393      	bics	r3, r2
 8005624:	0018      	movs	r0, r3
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	0003      	movs	r3, r0
 8005630:	430b      	orrs	r3, r1
 8005632:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4aa5      	ldr	r2, [pc, #660]	; (80058d0 <UART_SetConfig+0x34c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d131      	bne.n	80056a2 <UART_SetConfig+0x11e>
 800563e:	4ba5      	ldr	r3, [pc, #660]	; (80058d4 <UART_SetConfig+0x350>)
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	2203      	movs	r2, #3
 8005644:	4013      	ands	r3, r2
 8005646:	2b03      	cmp	r3, #3
 8005648:	d01d      	beq.n	8005686 <UART_SetConfig+0x102>
 800564a:	d823      	bhi.n	8005694 <UART_SetConfig+0x110>
 800564c:	2b02      	cmp	r3, #2
 800564e:	d00c      	beq.n	800566a <UART_SetConfig+0xe6>
 8005650:	d820      	bhi.n	8005694 <UART_SetConfig+0x110>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <UART_SetConfig+0xd8>
 8005656:	2b01      	cmp	r3, #1
 8005658:	d00e      	beq.n	8005678 <UART_SetConfig+0xf4>
 800565a:	e01b      	b.n	8005694 <UART_SetConfig+0x110>
 800565c:	231b      	movs	r3, #27
 800565e:	2220      	movs	r2, #32
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e154      	b.n	8005914 <UART_SetConfig+0x390>
 800566a:	231b      	movs	r3, #27
 800566c:	2220      	movs	r2, #32
 800566e:	189b      	adds	r3, r3, r2
 8005670:	19db      	adds	r3, r3, r7
 8005672:	2202      	movs	r2, #2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e14d      	b.n	8005914 <UART_SetConfig+0x390>
 8005678:	231b      	movs	r3, #27
 800567a:	2220      	movs	r2, #32
 800567c:	189b      	adds	r3, r3, r2
 800567e:	19db      	adds	r3, r3, r7
 8005680:	2204      	movs	r2, #4
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e146      	b.n	8005914 <UART_SetConfig+0x390>
 8005686:	231b      	movs	r3, #27
 8005688:	2220      	movs	r2, #32
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	2208      	movs	r2, #8
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e13f      	b.n	8005914 <UART_SetConfig+0x390>
 8005694:	231b      	movs	r3, #27
 8005696:	2220      	movs	r2, #32
 8005698:	189b      	adds	r3, r3, r2
 800569a:	19db      	adds	r3, r3, r7
 800569c:	2210      	movs	r2, #16
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e138      	b.n	8005914 <UART_SetConfig+0x390>
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a8c      	ldr	r2, [pc, #560]	; (80058d8 <UART_SetConfig+0x354>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d131      	bne.n	8005710 <UART_SetConfig+0x18c>
 80056ac:	4b89      	ldr	r3, [pc, #548]	; (80058d4 <UART_SetConfig+0x350>)
 80056ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056b0:	220c      	movs	r2, #12
 80056b2:	4013      	ands	r3, r2
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	d01d      	beq.n	80056f4 <UART_SetConfig+0x170>
 80056b8:	d823      	bhi.n	8005702 <UART_SetConfig+0x17e>
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d00c      	beq.n	80056d8 <UART_SetConfig+0x154>
 80056be:	d820      	bhi.n	8005702 <UART_SetConfig+0x17e>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <UART_SetConfig+0x146>
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d00e      	beq.n	80056e6 <UART_SetConfig+0x162>
 80056c8:	e01b      	b.n	8005702 <UART_SetConfig+0x17e>
 80056ca:	231b      	movs	r3, #27
 80056cc:	2220      	movs	r2, #32
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	19db      	adds	r3, r3, r7
 80056d2:	2200      	movs	r2, #0
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e11d      	b.n	8005914 <UART_SetConfig+0x390>
 80056d8:	231b      	movs	r3, #27
 80056da:	2220      	movs	r2, #32
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	19db      	adds	r3, r3, r7
 80056e0:	2202      	movs	r2, #2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e116      	b.n	8005914 <UART_SetConfig+0x390>
 80056e6:	231b      	movs	r3, #27
 80056e8:	2220      	movs	r2, #32
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	2204      	movs	r2, #4
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e10f      	b.n	8005914 <UART_SetConfig+0x390>
 80056f4:	231b      	movs	r3, #27
 80056f6:	2220      	movs	r2, #32
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	19db      	adds	r3, r3, r7
 80056fc:	2208      	movs	r2, #8
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e108      	b.n	8005914 <UART_SetConfig+0x390>
 8005702:	231b      	movs	r3, #27
 8005704:	2220      	movs	r2, #32
 8005706:	189b      	adds	r3, r3, r2
 8005708:	19db      	adds	r3, r3, r7
 800570a:	2210      	movs	r2, #16
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e101      	b.n	8005914 <UART_SetConfig+0x390>
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a71      	ldr	r2, [pc, #452]	; (80058dc <UART_SetConfig+0x358>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d131      	bne.n	800577e <UART_SetConfig+0x1fa>
 800571a:	4b6e      	ldr	r3, [pc, #440]	; (80058d4 <UART_SetConfig+0x350>)
 800571c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571e:	2230      	movs	r2, #48	; 0x30
 8005720:	4013      	ands	r3, r2
 8005722:	2b30      	cmp	r3, #48	; 0x30
 8005724:	d01d      	beq.n	8005762 <UART_SetConfig+0x1de>
 8005726:	d823      	bhi.n	8005770 <UART_SetConfig+0x1ec>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d00c      	beq.n	8005746 <UART_SetConfig+0x1c2>
 800572c:	d820      	bhi.n	8005770 <UART_SetConfig+0x1ec>
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <UART_SetConfig+0x1b4>
 8005732:	2b10      	cmp	r3, #16
 8005734:	d00e      	beq.n	8005754 <UART_SetConfig+0x1d0>
 8005736:	e01b      	b.n	8005770 <UART_SetConfig+0x1ec>
 8005738:	231b      	movs	r3, #27
 800573a:	2220      	movs	r2, #32
 800573c:	189b      	adds	r3, r3, r2
 800573e:	19db      	adds	r3, r3, r7
 8005740:	2200      	movs	r2, #0
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e0e6      	b.n	8005914 <UART_SetConfig+0x390>
 8005746:	231b      	movs	r3, #27
 8005748:	2220      	movs	r2, #32
 800574a:	189b      	adds	r3, r3, r2
 800574c:	19db      	adds	r3, r3, r7
 800574e:	2202      	movs	r2, #2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e0df      	b.n	8005914 <UART_SetConfig+0x390>
 8005754:	231b      	movs	r3, #27
 8005756:	2220      	movs	r2, #32
 8005758:	189b      	adds	r3, r3, r2
 800575a:	19db      	adds	r3, r3, r7
 800575c:	2204      	movs	r2, #4
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e0d8      	b.n	8005914 <UART_SetConfig+0x390>
 8005762:	231b      	movs	r3, #27
 8005764:	2220      	movs	r2, #32
 8005766:	189b      	adds	r3, r3, r2
 8005768:	19db      	adds	r3, r3, r7
 800576a:	2208      	movs	r2, #8
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e0d1      	b.n	8005914 <UART_SetConfig+0x390>
 8005770:	231b      	movs	r3, #27
 8005772:	2220      	movs	r2, #32
 8005774:	189b      	adds	r3, r3, r2
 8005776:	19db      	adds	r3, r3, r7
 8005778:	2210      	movs	r2, #16
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	e0ca      	b.n	8005914 <UART_SetConfig+0x390>
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a57      	ldr	r2, [pc, #348]	; (80058e0 <UART_SetConfig+0x35c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d106      	bne.n	8005796 <UART_SetConfig+0x212>
 8005788:	231b      	movs	r3, #27
 800578a:	2220      	movs	r2, #32
 800578c:	189b      	adds	r3, r3, r2
 800578e:	19db      	adds	r3, r3, r7
 8005790:	2200      	movs	r2, #0
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e0be      	b.n	8005914 <UART_SetConfig+0x390>
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <UART_SetConfig+0x360>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d106      	bne.n	80057ae <UART_SetConfig+0x22a>
 80057a0:	231b      	movs	r3, #27
 80057a2:	2220      	movs	r2, #32
 80057a4:	189b      	adds	r3, r3, r2
 80057a6:	19db      	adds	r3, r3, r7
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
 80057ac:	e0b2      	b.n	8005914 <UART_SetConfig+0x390>
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a4d      	ldr	r2, [pc, #308]	; (80058e8 <UART_SetConfig+0x364>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d106      	bne.n	80057c6 <UART_SetConfig+0x242>
 80057b8:	231b      	movs	r3, #27
 80057ba:	2220      	movs	r2, #32
 80057bc:	189b      	adds	r3, r3, r2
 80057be:	19db      	adds	r3, r3, r7
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e0a6      	b.n	8005914 <UART_SetConfig+0x390>
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a3e      	ldr	r2, [pc, #248]	; (80058c4 <UART_SetConfig+0x340>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d13e      	bne.n	800584e <UART_SetConfig+0x2ca>
 80057d0:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <UART_SetConfig+0x350>)
 80057d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d4:	23c0      	movs	r3, #192	; 0xc0
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	4013      	ands	r3, r2
 80057da:	22c0      	movs	r2, #192	; 0xc0
 80057dc:	0112      	lsls	r2, r2, #4
 80057de:	4293      	cmp	r3, r2
 80057e0:	d027      	beq.n	8005832 <UART_SetConfig+0x2ae>
 80057e2:	22c0      	movs	r2, #192	; 0xc0
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d82a      	bhi.n	8005840 <UART_SetConfig+0x2bc>
 80057ea:	2280      	movs	r2, #128	; 0x80
 80057ec:	0112      	lsls	r2, r2, #4
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d011      	beq.n	8005816 <UART_SetConfig+0x292>
 80057f2:	2280      	movs	r2, #128	; 0x80
 80057f4:	0112      	lsls	r2, r2, #4
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d822      	bhi.n	8005840 <UART_SetConfig+0x2bc>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <UART_SetConfig+0x284>
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	00d2      	lsls	r2, r2, #3
 8005802:	4293      	cmp	r3, r2
 8005804:	d00e      	beq.n	8005824 <UART_SetConfig+0x2a0>
 8005806:	e01b      	b.n	8005840 <UART_SetConfig+0x2bc>
 8005808:	231b      	movs	r3, #27
 800580a:	2220      	movs	r2, #32
 800580c:	189b      	adds	r3, r3, r2
 800580e:	19db      	adds	r3, r3, r7
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
 8005814:	e07e      	b.n	8005914 <UART_SetConfig+0x390>
 8005816:	231b      	movs	r3, #27
 8005818:	2220      	movs	r2, #32
 800581a:	189b      	adds	r3, r3, r2
 800581c:	19db      	adds	r3, r3, r7
 800581e:	2202      	movs	r2, #2
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e077      	b.n	8005914 <UART_SetConfig+0x390>
 8005824:	231b      	movs	r3, #27
 8005826:	2220      	movs	r2, #32
 8005828:	189b      	adds	r3, r3, r2
 800582a:	19db      	adds	r3, r3, r7
 800582c:	2204      	movs	r2, #4
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e070      	b.n	8005914 <UART_SetConfig+0x390>
 8005832:	231b      	movs	r3, #27
 8005834:	2220      	movs	r2, #32
 8005836:	189b      	adds	r3, r3, r2
 8005838:	19db      	adds	r3, r3, r7
 800583a:	2208      	movs	r2, #8
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	e069      	b.n	8005914 <UART_SetConfig+0x390>
 8005840:	231b      	movs	r3, #27
 8005842:	2220      	movs	r2, #32
 8005844:	189b      	adds	r3, r3, r2
 8005846:	19db      	adds	r3, r3, r7
 8005848:	2210      	movs	r2, #16
 800584a:	701a      	strb	r2, [r3, #0]
 800584c:	e062      	b.n	8005914 <UART_SetConfig+0x390>
 800584e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a1d      	ldr	r2, [pc, #116]	; (80058c8 <UART_SetConfig+0x344>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d157      	bne.n	8005908 <UART_SetConfig+0x384>
 8005858:	4b1e      	ldr	r3, [pc, #120]	; (80058d4 <UART_SetConfig+0x350>)
 800585a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800585c:	23c0      	movs	r3, #192	; 0xc0
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4013      	ands	r3, r2
 8005862:	22c0      	movs	r2, #192	; 0xc0
 8005864:	0092      	lsls	r2, r2, #2
 8005866:	4293      	cmp	r3, r2
 8005868:	d040      	beq.n	80058ec <UART_SetConfig+0x368>
 800586a:	22c0      	movs	r2, #192	; 0xc0
 800586c:	0092      	lsls	r2, r2, #2
 800586e:	4293      	cmp	r3, r2
 8005870:	d843      	bhi.n	80058fa <UART_SetConfig+0x376>
 8005872:	2280      	movs	r2, #128	; 0x80
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	4293      	cmp	r3, r2
 8005878:	d011      	beq.n	800589e <UART_SetConfig+0x31a>
 800587a:	2280      	movs	r2, #128	; 0x80
 800587c:	0092      	lsls	r2, r2, #2
 800587e:	4293      	cmp	r3, r2
 8005880:	d83b      	bhi.n	80058fa <UART_SetConfig+0x376>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <UART_SetConfig+0x30c>
 8005886:	2280      	movs	r2, #128	; 0x80
 8005888:	0052      	lsls	r2, r2, #1
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <UART_SetConfig+0x328>
 800588e:	e034      	b.n	80058fa <UART_SetConfig+0x376>
 8005890:	231b      	movs	r3, #27
 8005892:	2220      	movs	r2, #32
 8005894:	189b      	adds	r3, r3, r2
 8005896:	19db      	adds	r3, r3, r7
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e03a      	b.n	8005914 <UART_SetConfig+0x390>
 800589e:	231b      	movs	r3, #27
 80058a0:	2220      	movs	r2, #32
 80058a2:	189b      	adds	r3, r3, r2
 80058a4:	19db      	adds	r3, r3, r7
 80058a6:	2202      	movs	r2, #2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	e033      	b.n	8005914 <UART_SetConfig+0x390>
 80058ac:	231b      	movs	r3, #27
 80058ae:	2220      	movs	r2, #32
 80058b0:	189b      	adds	r3, r3, r2
 80058b2:	19db      	adds	r3, r3, r7
 80058b4:	2204      	movs	r2, #4
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e02c      	b.n	8005914 <UART_SetConfig+0x390>
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	cfff69f3 	.word	0xcfff69f3
 80058c0:	ffffcfff 	.word	0xffffcfff
 80058c4:	40008000 	.word	0x40008000
 80058c8:	40008400 	.word	0x40008400
 80058cc:	11fff4ff 	.word	0x11fff4ff
 80058d0:	40013800 	.word	0x40013800
 80058d4:	40021000 	.word	0x40021000
 80058d8:	40004400 	.word	0x40004400
 80058dc:	40004800 	.word	0x40004800
 80058e0:	40004c00 	.word	0x40004c00
 80058e4:	40005000 	.word	0x40005000
 80058e8:	40013c00 	.word	0x40013c00
 80058ec:	231b      	movs	r3, #27
 80058ee:	2220      	movs	r2, #32
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	19db      	adds	r3, r3, r7
 80058f4:	2208      	movs	r2, #8
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e00c      	b.n	8005914 <UART_SetConfig+0x390>
 80058fa:	231b      	movs	r3, #27
 80058fc:	2220      	movs	r2, #32
 80058fe:	189b      	adds	r3, r3, r2
 8005900:	19db      	adds	r3, r3, r7
 8005902:	2210      	movs	r2, #16
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e005      	b.n	8005914 <UART_SetConfig+0x390>
 8005908:	231b      	movs	r3, #27
 800590a:	2220      	movs	r2, #32
 800590c:	189b      	adds	r3, r3, r2
 800590e:	19db      	adds	r3, r3, r7
 8005910:	2210      	movs	r2, #16
 8005912:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4ac1      	ldr	r2, [pc, #772]	; (8005c20 <UART_SetConfig+0x69c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d005      	beq.n	800592a <UART_SetConfig+0x3a6>
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4ac0      	ldr	r2, [pc, #768]	; (8005c24 <UART_SetConfig+0x6a0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d000      	beq.n	800592a <UART_SetConfig+0x3a6>
 8005928:	e093      	b.n	8005a52 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800592a:	231b      	movs	r3, #27
 800592c:	2220      	movs	r2, #32
 800592e:	189b      	adds	r3, r3, r2
 8005930:	19db      	adds	r3, r3, r7
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b08      	cmp	r3, #8
 8005936:	d015      	beq.n	8005964 <UART_SetConfig+0x3e0>
 8005938:	dc18      	bgt.n	800596c <UART_SetConfig+0x3e8>
 800593a:	2b04      	cmp	r3, #4
 800593c:	d00d      	beq.n	800595a <UART_SetConfig+0x3d6>
 800593e:	dc15      	bgt.n	800596c <UART_SetConfig+0x3e8>
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <UART_SetConfig+0x3c6>
 8005944:	2b02      	cmp	r3, #2
 8005946:	d005      	beq.n	8005954 <UART_SetConfig+0x3d0>
 8005948:	e010      	b.n	800596c <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594a:	f7fe fb71 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 800594e:	0003      	movs	r3, r0
 8005950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005952:	e014      	b.n	800597e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005954:	4bb4      	ldr	r3, [pc, #720]	; (8005c28 <UART_SetConfig+0x6a4>)
 8005956:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005958:	e011      	b.n	800597e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595a:	f7fe fadd 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 800595e:	0003      	movs	r3, r0
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005962:	e00c      	b.n	800597e <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005964:	2380      	movs	r3, #128	; 0x80
 8005966:	021b      	lsls	r3, r3, #8
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800596a:	e008      	b.n	800597e <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005970:	231a      	movs	r3, #26
 8005972:	2220      	movs	r2, #32
 8005974:	189b      	adds	r3, r3, r2
 8005976:	19db      	adds	r3, r3, r7
 8005978:	2201      	movs	r2, #1
 800597a:	701a      	strb	r2, [r3, #0]
        break;
 800597c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800597e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005980:	2b00      	cmp	r3, #0
 8005982:	d100      	bne.n	8005986 <UART_SetConfig+0x402>
 8005984:	e135      	b.n	8005bf2 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800598a:	4ba8      	ldr	r3, [pc, #672]	; (8005c2c <UART_SetConfig+0x6a8>)
 800598c:	0052      	lsls	r2, r2, #1
 800598e:	5ad3      	ldrh	r3, [r2, r3]
 8005990:	0019      	movs	r1, r3
 8005992:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005994:	f7fa fbb6 	bl	8000104 <__udivsi3>
 8005998:	0003      	movs	r3, r0
 800599a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	0013      	movs	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	189b      	adds	r3, r3, r2
 80059a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d305      	bcc.n	80059b8 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d906      	bls.n	80059c6 <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80059b8:	231a      	movs	r3, #26
 80059ba:	2220      	movs	r2, #32
 80059bc:	189b      	adds	r3, r3, r2
 80059be:	19db      	adds	r3, r3, r7
 80059c0:	2201      	movs	r2, #1
 80059c2:	701a      	strb	r2, [r3, #0]
 80059c4:	e044      	b.n	8005a50 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c8:	61bb      	str	r3, [r7, #24]
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059d2:	4b96      	ldr	r3, [pc, #600]	; (8005c2c <UART_SetConfig+0x6a8>)
 80059d4:	0052      	lsls	r2, r2, #1
 80059d6:	5ad3      	ldrh	r3, [r2, r3]
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	69b8      	ldr	r0, [r7, #24]
 80059e4:	69f9      	ldr	r1, [r7, #28]
 80059e6:	f7fa fd03 	bl	80003f0 <__aeabi_uldivmod>
 80059ea:	0002      	movs	r2, r0
 80059ec:	000b      	movs	r3, r1
 80059ee:	0e11      	lsrs	r1, r2, #24
 80059f0:	021d      	lsls	r5, r3, #8
 80059f2:	430d      	orrs	r5, r1
 80059f4:	0214      	lsls	r4, r2, #8
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	085b      	lsrs	r3, r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	68b8      	ldr	r0, [r7, #8]
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	1900      	adds	r0, r0, r4
 8005a08:	4169      	adcs	r1, r5
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	2300      	movs	r3, #0
 8005a12:	607b      	str	r3, [r7, #4]
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f7fa fcea 	bl	80003f0 <__aeabi_uldivmod>
 8005a1c:	0002      	movs	r2, r0
 8005a1e:	000b      	movs	r3, r1
 8005a20:	0013      	movs	r3, r2
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a26:	23c0      	movs	r3, #192	; 0xc0
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d309      	bcc.n	8005a42 <UART_SetConfig+0x4be>
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	035b      	lsls	r3, r3, #13
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d204      	bcs.n	8005a42 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	e006      	b.n	8005a50 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a42:	231a      	movs	r3, #26
 8005a44:	2220      	movs	r2, #32
 8005a46:	189b      	adds	r3, r3, r2
 8005a48:	19db      	adds	r3, r3, r7
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8005a4e:	e0d0      	b.n	8005bf2 <UART_SetConfig+0x66e>
 8005a50:	e0cf      	b.n	8005bf2 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	021b      	lsls	r3, r3, #8
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d000      	beq.n	8005a60 <UART_SetConfig+0x4dc>
 8005a5e:	e070      	b.n	8005b42 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8005a60:	231b      	movs	r3, #27
 8005a62:	2220      	movs	r2, #32
 8005a64:	189b      	adds	r3, r3, r2
 8005a66:	19db      	adds	r3, r3, r7
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d015      	beq.n	8005a9a <UART_SetConfig+0x516>
 8005a6e:	dc18      	bgt.n	8005aa2 <UART_SetConfig+0x51e>
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	d00d      	beq.n	8005a90 <UART_SetConfig+0x50c>
 8005a74:	dc15      	bgt.n	8005aa2 <UART_SetConfig+0x51e>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <UART_SetConfig+0x4fc>
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d005      	beq.n	8005a8a <UART_SetConfig+0x506>
 8005a7e:	e010      	b.n	8005aa2 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a80:	f7fe fad6 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005a84:	0003      	movs	r3, r0
 8005a86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a88:	e014      	b.n	8005ab4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a8a:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <UART_SetConfig+0x6a4>)
 8005a8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a8e:	e011      	b.n	8005ab4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a90:	f7fe fa42 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8005a94:	0003      	movs	r3, r0
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a98:	e00c      	b.n	8005ab4 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a9a:	2380      	movs	r3, #128	; 0x80
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005aa0:	e008      	b.n	8005ab4 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005aa6:	231a      	movs	r3, #26
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	189b      	adds	r3, r3, r2
 8005aac:	19db      	adds	r3, r3, r7
 8005aae:	2201      	movs	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
        break;
 8005ab2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d100      	bne.n	8005abc <UART_SetConfig+0x538>
 8005aba:	e09a      	b.n	8005bf2 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ac0:	4b5a      	ldr	r3, [pc, #360]	; (8005c2c <UART_SetConfig+0x6a8>)
 8005ac2:	0052      	lsls	r2, r2, #1
 8005ac4:	5ad3      	ldrh	r3, [r2, r3]
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005aca:	f7fa fb1b 	bl	8000104 <__udivsi3>
 8005ace:	0003      	movs	r3, r0
 8005ad0:	005a      	lsls	r2, r3, #1
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	085b      	lsrs	r3, r3, #1
 8005ad8:	18d2      	adds	r2, r2, r3
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	0019      	movs	r1, r3
 8005ae0:	0010      	movs	r0, r2
 8005ae2:	f7fa fb0f 	bl	8000104 <__udivsi3>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b0f      	cmp	r3, #15
 8005aee:	d921      	bls.n	8005b34 <UART_SetConfig+0x5b0>
 8005af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	025b      	lsls	r3, r3, #9
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d21c      	bcs.n	8005b34 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	200e      	movs	r0, #14
 8005b00:	2420      	movs	r4, #32
 8005b02:	1903      	adds	r3, r0, r4
 8005b04:	19db      	adds	r3, r3, r7
 8005b06:	210f      	movs	r1, #15
 8005b08:	438a      	bics	r2, r1
 8005b0a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	085b      	lsrs	r3, r3, #1
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	2207      	movs	r2, #7
 8005b14:	4013      	ands	r3, r2
 8005b16:	b299      	uxth	r1, r3
 8005b18:	1903      	adds	r3, r0, r4
 8005b1a:	19db      	adds	r3, r3, r7
 8005b1c:	1902      	adds	r2, r0, r4
 8005b1e:	19d2      	adds	r2, r2, r7
 8005b20:	8812      	ldrh	r2, [r2, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	1902      	adds	r2, r0, r4
 8005b2c:	19d2      	adds	r2, r2, r7
 8005b2e:	8812      	ldrh	r2, [r2, #0]
 8005b30:	60da      	str	r2, [r3, #12]
 8005b32:	e05e      	b.n	8005bf2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005b34:	231a      	movs	r3, #26
 8005b36:	2220      	movs	r2, #32
 8005b38:	189b      	adds	r3, r3, r2
 8005b3a:	19db      	adds	r3, r3, r7
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e057      	b.n	8005bf2 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b42:	231b      	movs	r3, #27
 8005b44:	2220      	movs	r2, #32
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	19db      	adds	r3, r3, r7
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d015      	beq.n	8005b7c <UART_SetConfig+0x5f8>
 8005b50:	dc18      	bgt.n	8005b84 <UART_SetConfig+0x600>
 8005b52:	2b04      	cmp	r3, #4
 8005b54:	d00d      	beq.n	8005b72 <UART_SetConfig+0x5ee>
 8005b56:	dc15      	bgt.n	8005b84 <UART_SetConfig+0x600>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <UART_SetConfig+0x5de>
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d005      	beq.n	8005b6c <UART_SetConfig+0x5e8>
 8005b60:	e010      	b.n	8005b84 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b62:	f7fe fa65 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 8005b66:	0003      	movs	r3, r0
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b6a:	e014      	b.n	8005b96 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6c:	4b2e      	ldr	r3, [pc, #184]	; (8005c28 <UART_SetConfig+0x6a4>)
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b70:	e011      	b.n	8005b96 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b72:	f7fe f9d1 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8005b76:	0003      	movs	r3, r0
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b7a:	e00c      	b.n	8005b96 <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7c:	2380      	movs	r3, #128	; 0x80
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b82:	e008      	b.n	8005b96 <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005b88:	231a      	movs	r3, #26
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	189b      	adds	r3, r3, r2
 8005b8e:	19db      	adds	r3, r3, r7
 8005b90:	2201      	movs	r2, #1
 8005b92:	701a      	strb	r2, [r3, #0]
        break;
 8005b94:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02a      	beq.n	8005bf2 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ba0:	4b22      	ldr	r3, [pc, #136]	; (8005c2c <UART_SetConfig+0x6a8>)
 8005ba2:	0052      	lsls	r2, r2, #1
 8005ba4:	5ad3      	ldrh	r3, [r2, r3]
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005baa:	f7fa faab 	bl	8000104 <__udivsi3>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	18d2      	adds	r2, r2, r3
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	0010      	movs	r0, r2
 8005bc2:	f7fa fa9f 	bl	8000104 <__udivsi3>
 8005bc6:	0003      	movs	r3, r0
 8005bc8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	2b0f      	cmp	r3, #15
 8005bce:	d90a      	bls.n	8005be6 <UART_SetConfig+0x662>
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bd2:	2380      	movs	r3, #128	; 0x80
 8005bd4:	025b      	lsls	r3, r3, #9
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d205      	bcs.n	8005be6 <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60da      	str	r2, [r3, #12]
 8005be4:	e005      	b.n	8005bf2 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8005be6:	231a      	movs	r3, #26
 8005be8:	2220      	movs	r2, #32
 8005bea:	189b      	adds	r3, r3, r2
 8005bec:	19db      	adds	r3, r3, r7
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	226a      	movs	r2, #106	; 0x6a
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	2268      	movs	r2, #104	; 0x68
 8005bfe:	2101      	movs	r1, #1
 8005c00:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	2200      	movs	r2, #0
 8005c06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005c0e:	231a      	movs	r3, #26
 8005c10:	2220      	movs	r2, #32
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	19db      	adds	r3, r3, r7
 8005c16:	781b      	ldrb	r3, [r3, #0]
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b010      	add	sp, #64	; 0x40
 8005c1e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c20:	40008000 	.word	0x40008000
 8005c24:	40008400 	.word	0x40008400
 8005c28:	00f42400 	.word	0x00f42400
 8005c2c:	0800635c 	.word	0x0800635c

08005c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	d00b      	beq.n	8005c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	4a4a      	ldr	r2, [pc, #296]	; (8005d74 <UART_AdvFeatureConfig+0x144>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	0019      	movs	r1, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5e:	2202      	movs	r2, #2
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a43      	ldr	r2, [pc, #268]	; (8005d78 <UART_AdvFeatureConfig+0x148>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	2204      	movs	r2, #4
 8005c82:	4013      	ands	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <UART_AdvFeatureConfig+0x14c>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	0019      	movs	r1, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	2208      	movs	r2, #8
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d00b      	beq.n	8005cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4a34      	ldr	r2, [pc, #208]	; (8005d80 <UART_AdvFeatureConfig+0x150>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	2210      	movs	r2, #16
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	d00b      	beq.n	8005ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	; (8005d84 <UART_AdvFeatureConfig+0x154>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <UART_AdvFeatureConfig+0x158>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d08:	2240      	movs	r2, #64	; 0x40
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	d01d      	beq.n	8005d4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <UART_AdvFeatureConfig+0x15c>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	0019      	movs	r1, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2a:	2380      	movs	r3, #128	; 0x80
 8005d2c:	035b      	lsls	r3, r3, #13
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d10b      	bne.n	8005d4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <UART_AdvFeatureConfig+0x160>)
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	0019      	movs	r1, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	2280      	movs	r2, #128	; 0x80
 8005d50:	4013      	ands	r3, r2
 8005d52:	d00b      	beq.n	8005d6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <UART_AdvFeatureConfig+0x164>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	0019      	movs	r1, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b002      	add	sp, #8
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	fffdffff 	.word	0xfffdffff
 8005d78:	fffeffff 	.word	0xfffeffff
 8005d7c:	fffbffff 	.word	0xfffbffff
 8005d80:	ffff7fff 	.word	0xffff7fff
 8005d84:	ffffefff 	.word	0xffffefff
 8005d88:	ffffdfff 	.word	0xffffdfff
 8005d8c:	ffefffff 	.word	0xffefffff
 8005d90:	ff9fffff 	.word	0xff9fffff
 8005d94:	fff7ffff 	.word	0xfff7ffff

08005d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2290      	movs	r2, #144	; 0x90
 8005da4:	2100      	movs	r1, #0
 8005da6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da8:	f7fc fb56 	bl	8002458 <HAL_GetTick>
 8005dac:	0003      	movs	r3, r0
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2208      	movs	r2, #8
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d10c      	bne.n	8005dd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2280      	movs	r2, #128	; 0x80
 8005dc2:	0391      	lsls	r1, r2, #14
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4a1a      	ldr	r2, [pc, #104]	; (8005e30 <UART_CheckIdleState+0x98>)
 8005dc8:	9200      	str	r2, [sp, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f000 f832 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005dd0:	1e03      	subs	r3, r0, #0
 8005dd2:	d001      	beq.n	8005dd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e026      	b.n	8005e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2204      	movs	r2, #4
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d10c      	bne.n	8005e00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2280      	movs	r2, #128	; 0x80
 8005dea:	03d1      	lsls	r1, r2, #15
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	4a10      	ldr	r2, [pc, #64]	; (8005e30 <UART_CheckIdleState+0x98>)
 8005df0:	9200      	str	r2, [sp, #0]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f000 f81e 	bl	8005e34 <UART_WaitOnFlagUntilTimeout>
 8005df8:	1e03      	subs	r3, r0, #0
 8005dfa:	d001      	beq.n	8005e00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e012      	b.n	8005e26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2288      	movs	r2, #136	; 0x88
 8005e04:	2120      	movs	r1, #32
 8005e06:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	228c      	movs	r2, #140	; 0x8c
 8005e0c:	2120      	movs	r1, #32
 8005e0e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2284      	movs	r2, #132	; 0x84
 8005e20:	2100      	movs	r1, #0
 8005e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	0018      	movs	r0, r3
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	b004      	add	sp, #16
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	01ffffff 	.word	0x01ffffff

08005e34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b094      	sub	sp, #80	; 0x50
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	1dfb      	adds	r3, r7, #7
 8005e42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e44:	e0a7      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e48:	3301      	adds	r3, #1
 8005e4a:	d100      	bne.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005e4c:	e0a3      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e4e:	f7fc fb03 	bl	8002458 <HAL_GetTick>
 8005e52:	0002      	movs	r2, r0
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d302      	bcc.n	8005e64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d13f      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e64:	f3ef 8310 	mrs	r3, PRIMASK
 8005e68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6e:	2301      	movs	r3, #1
 8005e70:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	f383 8810 	msr	PRIMASK, r3
}
 8005e78:	46c0      	nop			; (mov r8, r8)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	494e      	ldr	r1, [pc, #312]	; (8005fc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	f383 8810 	msr	PRIMASK, r3
}
 8005e94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e96:	f3ef 8310 	mrs	r3, PRIMASK
 8005e9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea6:	f383 8810 	msr	PRIMASK, r3
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	438a      	bics	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	f383 8810 	msr	PRIMASK, r3
}
 8005ec6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2288      	movs	r2, #136	; 0x88
 8005ecc:	2120      	movs	r1, #32
 8005ece:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	228c      	movs	r2, #140	; 0x8c
 8005ed4:	2120      	movs	r1, #32
 8005ed6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2284      	movs	r2, #132	; 0x84
 8005edc:	2100      	movs	r1, #0
 8005ede:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e069      	b.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2204      	movs	r2, #4
 8005eec:	4013      	ands	r3, r2
 8005eee:	d052      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69da      	ldr	r2, [r3, #28]
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	401a      	ands	r2, r3
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d148      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2280      	movs	r2, #128	; 0x80
 8005f0a:	0112      	lsls	r2, r2, #4
 8005f0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f12:	613b      	str	r3, [r7, #16]
  return(result);
 8005f14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f18:	2301      	movs	r3, #1
 8005f1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f383 8810 	msr	PRIMASK, r3
}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4924      	ldr	r1, [pc, #144]	; (8005fc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005f30:	400a      	ands	r2, r1
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f383 8810 	msr	PRIMASK, r3
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f40:	f3ef 8310 	mrs	r3, PRIMASK
 8005f44:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f46:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f383 8810 	msr	PRIMASK, r3
}
 8005f54:	46c0      	nop			; (mov r8, r8)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2101      	movs	r1, #1
 8005f62:	438a      	bics	r2, r1
 8005f64:	609a      	str	r2, [r3, #8]
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	f383 8810 	msr	PRIMASK, r3
}
 8005f70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2288      	movs	r2, #136	; 0x88
 8005f76:	2120      	movs	r1, #32
 8005f78:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	228c      	movs	r2, #140	; 0x8c
 8005f7e:	2120      	movs	r1, #32
 8005f80:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2290      	movs	r2, #144	; 0x90
 8005f86:	2120      	movs	r1, #32
 8005f88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2284      	movs	r2, #132	; 0x84
 8005f8e:	2100      	movs	r1, #0
 8005f90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e010      	b.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	425a      	negs	r2, r3
 8005fa6:	4153      	adcs	r3, r2
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	001a      	movs	r2, r3
 8005fac:	1dfb      	adds	r3, r7, #7
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d100      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0x182>
 8005fb4:	e747      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b014      	add	sp, #80	; 0x50
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	fffffe5f 	.word	0xfffffe5f

08005fc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2284      	movs	r2, #132	; 0x84
 8005fd0:	5c9b      	ldrb	r3, [r3, r2]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_UARTEx_DisableFifoMode+0x16>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e027      	b.n	800602a <HAL_UARTEx_DisableFifoMode+0x66>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2284      	movs	r2, #132	; 0x84
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2288      	movs	r2, #136	; 0x88
 8005fe6:	2124      	movs	r1, #36	; 0x24
 8005fe8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	438a      	bics	r2, r1
 8006000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006006:	4013      	ands	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2288      	movs	r2, #136	; 0x88
 800601c:	2120      	movs	r1, #32
 800601e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2284      	movs	r2, #132	; 0x84
 8006024:	2100      	movs	r1, #0
 8006026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b004      	add	sp, #16
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	dfffffff 	.word	0xdfffffff

08006038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2284      	movs	r2, #132	; 0x84
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e02e      	b.n	80060ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2284      	movs	r2, #132	; 0x84
 8006054:	2101      	movs	r1, #1
 8006056:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2288      	movs	r2, #136	; 0x88
 800605c:	2124      	movs	r1, #36	; 0x24
 800605e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	438a      	bics	r2, r1
 8006076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	08d9      	lsrs	r1, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0018      	movs	r0, r3
 8006090:	f000 f854 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2288      	movs	r2, #136	; 0x88
 80060a0:	2120      	movs	r1, #32
 80060a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2284      	movs	r2, #132	; 0x84
 80060a8:	2100      	movs	r1, #0
 80060aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	0018      	movs	r0, r3
 80060b0:	46bd      	mov	sp, r7
 80060b2:	b004      	add	sp, #16
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2284      	movs	r2, #132	; 0x84
 80060c6:	5c9b      	ldrb	r3, [r3, r2]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e02f      	b.n	8006130 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2284      	movs	r2, #132	; 0x84
 80060d4:	2101      	movs	r1, #1
 80060d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2288      	movs	r2, #136	; 0x88
 80060dc:	2124      	movs	r1, #36	; 0x24
 80060de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2101      	movs	r1, #1
 80060f4:	438a      	bics	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	4a0e      	ldr	r2, [pc, #56]	; (8006138 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006100:	4013      	ands	r3, r2
 8006102:	0019      	movs	r1, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	0018      	movs	r0, r3
 8006112:	f000 f813 	bl	800613c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2288      	movs	r2, #136	; 0x88
 8006122:	2120      	movs	r1, #32
 8006124:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2284      	movs	r2, #132	; 0x84
 800612a:	2100      	movs	r1, #0
 800612c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	0018      	movs	r0, r3
 8006132:	46bd      	mov	sp, r7
 8006134:	b004      	add	sp, #16
 8006136:	bd80      	pop	{r7, pc}
 8006138:	f1ffffff 	.word	0xf1ffffff

0800613c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800613c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006148:	2b00      	cmp	r3, #0
 800614a:	d108      	bne.n	800615e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	226a      	movs	r2, #106	; 0x6a
 8006150:	2101      	movs	r1, #1
 8006152:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2268      	movs	r2, #104	; 0x68
 8006158:	2101      	movs	r1, #1
 800615a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800615c:	e043      	b.n	80061e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800615e:	260f      	movs	r6, #15
 8006160:	19bb      	adds	r3, r7, r6
 8006162:	2208      	movs	r2, #8
 8006164:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006166:	200e      	movs	r0, #14
 8006168:	183b      	adds	r3, r7, r0
 800616a:	2208      	movs	r2, #8
 800616c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	0e5b      	lsrs	r3, r3, #25
 8006176:	b2da      	uxtb	r2, r3
 8006178:	240d      	movs	r4, #13
 800617a:	193b      	adds	r3, r7, r4
 800617c:	2107      	movs	r1, #7
 800617e:	400a      	ands	r2, r1
 8006180:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	0f5b      	lsrs	r3, r3, #29
 800618a:	b2da      	uxtb	r2, r3
 800618c:	250c      	movs	r5, #12
 800618e:	197b      	adds	r3, r7, r5
 8006190:	2107      	movs	r1, #7
 8006192:	400a      	ands	r2, r1
 8006194:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006196:	183b      	adds	r3, r7, r0
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	197a      	adds	r2, r7, r5
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	4914      	ldr	r1, [pc, #80]	; (80061f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80061a0:	5c8a      	ldrb	r2, [r1, r2]
 80061a2:	435a      	muls	r2, r3
 80061a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80061a6:	197b      	adds	r3, r7, r5
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	4a12      	ldr	r2, [pc, #72]	; (80061f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80061ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ae:	0019      	movs	r1, r3
 80061b0:	f7fa f832 	bl	8000218 <__divsi3>
 80061b4:	0003      	movs	r3, r0
 80061b6:	b299      	uxth	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	226a      	movs	r2, #106	; 0x6a
 80061bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061be:	19bb      	adds	r3, r7, r6
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	193a      	adds	r2, r7, r4
 80061c4:	7812      	ldrb	r2, [r2, #0]
 80061c6:	490a      	ldr	r1, [pc, #40]	; (80061f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80061c8:	5c8a      	ldrb	r2, [r1, r2]
 80061ca:	435a      	muls	r2, r3
 80061cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	4a08      	ldr	r2, [pc, #32]	; (80061f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80061d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061d6:	0019      	movs	r1, r3
 80061d8:	f7fa f81e 	bl	8000218 <__divsi3>
 80061dc:	0003      	movs	r3, r0
 80061de:	b299      	uxth	r1, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2268      	movs	r2, #104	; 0x68
 80061e4:	5299      	strh	r1, [r3, r2]
}
 80061e6:	46c0      	nop			; (mov r8, r8)
 80061e8:	46bd      	mov	sp, r7
 80061ea:	b005      	add	sp, #20
 80061ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	08006374 	.word	0x08006374
 80061f4:	0800637c 	.word	0x0800637c

080061f8 <memset>:
 80061f8:	0003      	movs	r3, r0
 80061fa:	1882      	adds	r2, r0, r2
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	3301      	adds	r3, #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <__libc_init_array>:
 8006208:	b570      	push	{r4, r5, r6, lr}
 800620a:	2600      	movs	r6, #0
 800620c:	4c0c      	ldr	r4, [pc, #48]	; (8006240 <__libc_init_array+0x38>)
 800620e:	4d0d      	ldr	r5, [pc, #52]	; (8006244 <__libc_init_array+0x3c>)
 8006210:	1b64      	subs	r4, r4, r5
 8006212:	10a4      	asrs	r4, r4, #2
 8006214:	42a6      	cmp	r6, r4
 8006216:	d109      	bne.n	800622c <__libc_init_array+0x24>
 8006218:	2600      	movs	r6, #0
 800621a:	f000 f819 	bl	8006250 <_init>
 800621e:	4c0a      	ldr	r4, [pc, #40]	; (8006248 <__libc_init_array+0x40>)
 8006220:	4d0a      	ldr	r5, [pc, #40]	; (800624c <__libc_init_array+0x44>)
 8006222:	1b64      	subs	r4, r4, r5
 8006224:	10a4      	asrs	r4, r4, #2
 8006226:	42a6      	cmp	r6, r4
 8006228:	d105      	bne.n	8006236 <__libc_init_array+0x2e>
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	00b3      	lsls	r3, r6, #2
 800622e:	58eb      	ldr	r3, [r5, r3]
 8006230:	4798      	blx	r3
 8006232:	3601      	adds	r6, #1
 8006234:	e7ee      	b.n	8006214 <__libc_init_array+0xc>
 8006236:	00b3      	lsls	r3, r6, #2
 8006238:	58eb      	ldr	r3, [r5, r3]
 800623a:	4798      	blx	r3
 800623c:	3601      	adds	r6, #1
 800623e:	e7f2      	b.n	8006226 <__libc_init_array+0x1e>
 8006240:	0800638c 	.word	0x0800638c
 8006244:	0800638c 	.word	0x0800638c
 8006248:	08006390 	.word	0x08006390
 800624c:	0800638c 	.word	0x0800638c

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
