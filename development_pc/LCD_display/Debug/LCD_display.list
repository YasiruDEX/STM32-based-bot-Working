
LCD_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a20  08002a20  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a20  08002a20  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a20  08002a20  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a20  08002a20  00012a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a24  08002a24  00012a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000001c  08002a44  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002a44  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   000092b0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bc0  00000000  00000000  00029337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c0  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000763  00000000  00000000  0002b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af72  00000000  00000000  0002c01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000beab  00000000  00000000  00046f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aefde  00000000  00000000  00052e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000224c  00000000  00000000  00101e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00104064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002940 	.word	0x08002940

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002940 	.word	0x08002940

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dfb      	adds	r3, r7, #7
 8000226:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 8000228:	4b3a      	ldr	r3, [pc, #232]	; (8000314 <HD44780_Init+0xf8>)
 800022a:	1dfa      	adds	r2, r7, #7
 800022c:	7812      	ldrb	r2, [r2, #0]
 800022e:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000230:	4b39      	ldr	r3, [pc, #228]	; (8000318 <HD44780_Init+0xfc>)
 8000232:	2208      	movs	r2, #8
 8000234:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000236:	4b39      	ldr	r3, [pc, #228]	; (800031c <HD44780_Init+0x100>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800023c:	4b35      	ldr	r3, [pc, #212]	; (8000314 <HD44780_Init+0xf8>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d907      	bls.n	8000254 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8000244:	4b35      	ldr	r3, [pc, #212]	; (800031c <HD44780_Init+0x100>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2208      	movs	r2, #8
 800024a:	4313      	orrs	r3, r2
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4b33      	ldr	r3, [pc, #204]	; (800031c <HD44780_Init+0x100>)
 8000250:	701a      	strb	r2, [r3, #0]
 8000252:	e006      	b.n	8000262 <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000254:	4b31      	ldr	r3, [pc, #196]	; (800031c <HD44780_Init+0x100>)
 8000256:	781b      	ldrb	r3, [r3, #0]
 8000258:	2204      	movs	r2, #4
 800025a:	4313      	orrs	r3, r2
 800025c:	b2da      	uxtb	r2, r3
 800025e:	4b2f      	ldr	r3, [pc, #188]	; (800031c <HD44780_Init+0x100>)
 8000260:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000262:	f000 f9c1 	bl	80005e8 <DelayInit>
  HAL_Delay(50);
 8000266:	2032      	movs	r0, #50	; 0x32
 8000268:	f000 fcba 	bl	8000be0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800026c:	4b2a      	ldr	r3, [pc, #168]	; (8000318 <HD44780_Init+0xfc>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f979 	bl	8000568 <ExpanderWrite>
  HAL_Delay(1000);
 8000276:	23fa      	movs	r3, #250	; 0xfa
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	0018      	movs	r0, r3
 800027c:	f000 fcb0 	bl	8000be0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000280:	2030      	movs	r0, #48	; 0x30
 8000282:	f000 f95d 	bl	8000540 <Write4Bits>
  DelayUS(4500);
 8000286:	4b26      	ldr	r3, [pc, #152]	; (8000320 <HD44780_Init+0x104>)
 8000288:	0018      	movs	r0, r3
 800028a:	f000 f9b5 	bl	80005f8 <DelayUS>

  Write4Bits(0x03 << 4);
 800028e:	2030      	movs	r0, #48	; 0x30
 8000290:	f000 f956 	bl	8000540 <Write4Bits>
  DelayUS(4500);
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <HD44780_Init+0x104>)
 8000296:	0018      	movs	r0, r3
 8000298:	f000 f9ae 	bl	80005f8 <DelayUS>

  Write4Bits(0x03 << 4);
 800029c:	2030      	movs	r0, #48	; 0x30
 800029e:	f000 f94f 	bl	8000540 <Write4Bits>
  DelayUS(4500);
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <HD44780_Init+0x104>)
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 f9a7 	bl	80005f8 <DelayUS>

  Write4Bits(0x02 << 4);
 80002aa:	2020      	movs	r0, #32
 80002ac:	f000 f948 	bl	8000540 <Write4Bits>
  DelayUS(100);
 80002b0:	2064      	movs	r0, #100	; 0x64
 80002b2:	f000 f9a1 	bl	80005f8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <HD44780_Init+0x100>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	2220      	movs	r2, #32
 80002bc:	4313      	orrs	r3, r2
 80002be:	b2db      	uxtb	r3, r3
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 f8f1 	bl	80004a8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80002c6:	4b17      	ldr	r3, [pc, #92]	; (8000324 <HD44780_Init+0x108>)
 80002c8:	2204      	movs	r2, #4
 80002ca:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80002cc:	f000 f884 	bl	80003d8 <HD44780_Display>
  HD44780_Clear();
 80002d0:	f000 f830 	bl	8000334 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80002d4:	4b14      	ldr	r3, [pc, #80]	; (8000328 <HD44780_Init+0x10c>)
 80002d6:	2202      	movs	r2, #2
 80002d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <HD44780_Init+0x10c>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2204      	movs	r2, #4
 80002e0:	4313      	orrs	r3, r2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 f8df 	bl	80004a8 <SendCommand>
  DelayUS(4500);
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <HD44780_Init+0x104>)
 80002ec:	0018      	movs	r0, r3
 80002ee:	f000 f983 	bl	80005f8 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80002f2:	4b0e      	ldr	r3, [pc, #56]	; (800032c <HD44780_Init+0x110>)
 80002f4:	0019      	movs	r1, r3
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 f894 	bl	8000424 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <HD44780_Init+0x114>)
 80002fe:	0019      	movs	r1, r3
 8000300:	2001      	movs	r0, #1
 8000302:	f000 f88f 	bl	8000424 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000306:	f000 f822 	bl	800034e <HD44780_Home>
}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	46bd      	mov	sp, r7
 800030e:	b002      	add	sp, #8
 8000310:	bd80      	pop	{r7, pc}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	2000003b 	.word	0x2000003b
 8000318:	2000003c 	.word	0x2000003c
 800031c:	20000038 	.word	0x20000038
 8000320:	00001194 	.word	0x00001194
 8000324:	20000039 	.word	0x20000039
 8000328:	2000003a 	.word	0x2000003a
 800032c:	20000000 	.word	0x20000000
 8000330:	20000008 	.word	0x20000008

08000334 <HD44780_Clear>:

void HD44780_Clear()
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000338:	2001      	movs	r0, #1
 800033a:	f000 f8b5 	bl	80004a8 <SendCommand>
  DelayUS(2000);
 800033e:	23fa      	movs	r3, #250	; 0xfa
 8000340:	00db      	lsls	r3, r3, #3
 8000342:	0018      	movs	r0, r3
 8000344:	f000 f958 	bl	80005f8 <DelayUS>
}
 8000348:	46c0      	nop			; (mov r8, r8)
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}

0800034e <HD44780_Home>:

void HD44780_Home()
{
 800034e:	b580      	push	{r7, lr}
 8000350:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000352:	2002      	movs	r0, #2
 8000354:	f000 f8a8 	bl	80004a8 <SendCommand>
  DelayUS(2000);
 8000358:	23fa      	movs	r3, #250	; 0xfa
 800035a:	00db      	lsls	r3, r3, #3
 800035c:	0018      	movs	r0, r3
 800035e:	f000 f94b 	bl	80005f8 <DelayUS>
}
 8000362:	46c0      	nop			; (mov r8, r8)
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	0002      	movs	r2, r0
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	1dbb      	adds	r3, r7, #6
 8000376:	1c0a      	adds	r2, r1, #0
 8000378:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800037a:	2308      	movs	r3, #8
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	4a14      	ldr	r2, [pc, #80]	; (80003d0 <HD44780_SetCursor+0x68>)
 8000380:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000382:	c313      	stmia	r3!, {r0, r1, r4}
 8000384:	6812      	ldr	r2, [r2, #0]
 8000386:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 8000388:	4b12      	ldr	r3, [pc, #72]	; (80003d4 <HD44780_SetCursor+0x6c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	1dba      	adds	r2, r7, #6
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	429a      	cmp	r2, r3
 8000392:	d304      	bcc.n	800039e <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8000394:	4b0f      	ldr	r3, [pc, #60]	; (80003d4 <HD44780_SetCursor+0x6c>)
 8000396:	781a      	ldrb	r2, [r3, #0]
 8000398:	1dbb      	adds	r3, r7, #6
 800039a:	3a01      	subs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800039e:	1dbb      	adds	r3, r7, #6
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	2308      	movs	r3, #8
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	0092      	lsls	r2, r2, #2
 80003a8:	58d3      	ldr	r3, [r2, r3]
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	b25b      	sxtb	r3, r3
 80003b6:	2280      	movs	r2, #128	; 0x80
 80003b8:	4252      	negs	r2, r2
 80003ba:	4313      	orrs	r3, r2
 80003bc:	b25b      	sxtb	r3, r3
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 f871 	bl	80004a8 <SendCommand>
}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	46bd      	mov	sp, r7
 80003ca:	b007      	add	sp, #28
 80003cc:	bd90      	pop	{r4, r7, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	08002958 	.word	0x08002958
 80003d4:	2000003b 	.word	0x2000003b

080003d8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <HD44780_Display+0x28>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2204      	movs	r2, #4
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b2da      	uxtb	r2, r3
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <HD44780_Display+0x28>)
 80003e8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <HD44780_Display+0x28>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2208      	movs	r2, #8
 80003f0:	4313      	orrs	r3, r2
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	0018      	movs	r0, r3
 80003f6:	f000 f857 	bl	80004a8 <SendCommand>
}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20000039 	.word	0x20000039

08000404 <HD44780_ScrollDisplayLeft>:
  dpControl |= LCD_BLINKON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_ScrollDisplayLeft(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 8000408:	2018      	movs	r0, #24
 800040a:	f000 f84d 	bl	80004a8 <SendCommand>
}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <HD44780_ScrollDisplayRight>:

void HD44780_ScrollDisplayRight(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 8000418:	201c      	movs	r0, #28
 800041a:	f000 f845 	bl	80004a8 <SendCommand>
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	0002      	movs	r2, r0
 800042c:	6039      	str	r1, [r7, #0]
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 8000432:	1dfb      	adds	r3, r7, #7
 8000434:	1dfa      	adds	r2, r7, #7
 8000436:	7812      	ldrb	r2, [r2, #0]
 8000438:	2107      	movs	r1, #7
 800043a:	400a      	ands	r2, r1
 800043c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	b25b      	sxtb	r3, r3
 8000446:	2240      	movs	r2, #64	; 0x40
 8000448:	4313      	orrs	r3, r2
 800044a:	b25b      	sxtb	r3, r3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	0018      	movs	r0, r3
 8000450:	f000 f82a 	bl	80004a8 <SendCommand>
  for (int i=0; i<8; i++)
 8000454:	2300      	movs	r3, #0
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	e009      	b.n	800046e <HD44780_CreateSpecialChar+0x4a>
  {
    SendChar(charmap[i]);
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	0018      	movs	r0, r3
 8000464:	f000 f830 	bl	80004c8 <SendChar>
  for (int i=0; i<8; i++)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3301      	adds	r3, #1
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b07      	cmp	r3, #7
 8000472:	ddf2      	ble.n	800045a <HD44780_CreateSpecialChar+0x36>
  }
}
 8000474:	46c0      	nop			; (mov r8, r8)
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b004      	add	sp, #16
 800047c:	bd80      	pop	{r7, pc}

0800047e <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b082      	sub	sp, #8
 8000482:	af00      	add	r7, sp, #0
 8000484:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000486:	e006      	b.n	8000496 <HD44780_PrintStr+0x18>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	607a      	str	r2, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	0018      	movs	r0, r3
 8000492:	f000 f819 	bl	80004c8 <SendChar>
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1f4      	bne.n	8000488 <HD44780_PrintStr+0xa>
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46c0      	nop			; (mov r8, r8)
 80004a2:	46bd      	mov	sp, r7
 80004a4:	b002      	add	sp, #8
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	2100      	movs	r1, #0
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 f814 	bl	80004e8 <Send>
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	2101      	movs	r1, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f804 	bl	80004e8 <Send>
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b085      	sub	sp, #20
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	0002      	movs	r2, r0
 80004f0:	1dfb      	adds	r3, r7, #7
 80004f2:	701a      	strb	r2, [r3, #0]
 80004f4:	1dbb      	adds	r3, r7, #6
 80004f6:	1c0a      	adds	r2, r1, #0
 80004f8:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80004fa:	200f      	movs	r0, #15
 80004fc:	183b      	adds	r3, r7, r0
 80004fe:	1dfa      	adds	r2, r7, #7
 8000500:	7812      	ldrb	r2, [r2, #0]
 8000502:	210f      	movs	r1, #15
 8000504:	438a      	bics	r2, r1
 8000506:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	011a      	lsls	r2, r3, #4
 800050e:	240e      	movs	r4, #14
 8000510:	193b      	adds	r3, r7, r4
 8000512:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 8000514:	183a      	adds	r2, r7, r0
 8000516:	1dbb      	adds	r3, r7, #6
 8000518:	7812      	ldrb	r2, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4313      	orrs	r3, r2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	0018      	movs	r0, r3
 8000522:	f000 f80d 	bl	8000540 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000526:	193a      	adds	r2, r7, r4
 8000528:	1dbb      	adds	r3, r7, #6
 800052a:	7812      	ldrb	r2, [r2, #0]
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4313      	orrs	r3, r2
 8000530:	b2db      	uxtb	r3, r3
 8000532:	0018      	movs	r0, r3
 8000534:	f000 f804 	bl	8000540 <Write4Bits>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b005      	add	sp, #20
 800053e:	bd90      	pop	{r4, r7, pc}

08000540 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	0002      	movs	r2, r0
 8000548:	1dfb      	adds	r3, r7, #7
 800054a:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	0018      	movs	r0, r3
 8000552:	f000 f809 	bl	8000568 <ExpanderWrite>
  PulseEnable(value);
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f824 	bl	80005a8 <PulseEnable>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	b002      	add	sp, #8
 8000566:	bd80      	pop	{r7, pc}

08000568 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	0002      	movs	r2, r0
 8000570:	1dfb      	adds	r3, r7, #7
 8000572:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <ExpanderWrite+0x38>)
 8000576:	781a      	ldrb	r2, [r3, #0]
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4313      	orrs	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	210f      	movs	r1, #15
 8000582:	187b      	adds	r3, r7, r1
 8000584:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000586:	187a      	adds	r2, r7, r1
 8000588:	4806      	ldr	r0, [pc, #24]	; (80005a4 <ExpanderWrite+0x3c>)
 800058a:	230a      	movs	r3, #10
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	216a      	movs	r1, #106	; 0x6a
 8000592:	f000 fe33 	bl	80011fc <HAL_I2C_Master_Transmit>
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b004      	add	sp, #16
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	20000040 	.word	0x20000040

080005a8 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	0002      	movs	r2, r0
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2204      	movs	r2, #4
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ffd2 	bl	8000568 <ExpanderWrite>
  DelayUS(20);
 80005c4:	2014      	movs	r0, #20
 80005c6:	f000 f817 	bl	80005f8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2204      	movs	r2, #4
 80005d0:	4393      	bics	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffc7 	bl	8000568 <ExpanderWrite>
  DelayUS(20);
 80005da:	2014      	movs	r0, #20
 80005dc:	f000 f80c 	bl	80005f8 <DelayUS>
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b002      	add	sp, #8
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <DelayInit>:

static void DelayInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("NOP");
 80005ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("NOP");
 80005f0:	46c0      	nop			; (mov r8, r8)
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <DelayUS+0x30>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4909      	ldr	r1, [pc, #36]	; (800062c <DelayUS+0x34>)
 8000606:	0018      	movs	r0, r3
 8000608:	f7ff fd7c 	bl	8000104 <__udivsi3>
 800060c:	0003      	movs	r3, r0
 800060e:	001a      	movs	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4353      	muls	r3, r2
 8000614:	60fb      	str	r3, [r7, #12]
  volatile uint32_t cnt;

  do
  {
  } while(cnt < cycles);
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	d8fb      	bhi.n	8000616 <DelayUS+0x1e>
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b004      	add	sp, #16
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000010 	.word	0x20000010
 800062c:	000f4240 	.word	0x000f4240

08000630 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0

  HAL_Init();
 8000636:	f000 fa4d 	bl	8000ad4 <HAL_Init>
  SystemClock_Config();
 800063a:	f000 f88d 	bl	8000758 <SystemClock_Config>
  MX_GPIO_Init();
 800063e:	f000 f923 	bl	8000888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000642:	f000 f8e1 	bl	8000808 <MX_I2C1_Init>

    HD44780_Init(2);
 8000646:	2002      	movs	r0, #2
 8000648:	f7ff fde8 	bl	800021c <HD44780_Init>
    HD44780_Clear();
 800064c:	f7ff fe72 	bl	8000334 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000650:	2100      	movs	r1, #0
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff fe88 	bl	8000368 <HD44780_SetCursor>
    HD44780_PrintStr("STM32 BLUE PILL");
 8000658:	4b3a      	ldr	r3, [pc, #232]	; (8000744 <main+0x114>)
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff ff0f 	bl	800047e <HD44780_PrintStr>
    HD44780_SetCursor(0,1);
 8000660:	2101      	movs	r1, #1
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff fe80 	bl	8000368 <HD44780_SetCursor>
    HD44780_PrintStr("I2C LCD DEMO");
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <main+0x118>)
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff07 	bl	800047e <HD44780_PrintStr>
    HAL_Delay(2000);
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	0018      	movs	r0, r3
 8000676:	f000 fab3 	bl	8000be0 <HAL_Delay>

    HD44780_Clear();
 800067a:	f7ff fe5b 	bl	8000334 <HD44780_Clear>
    HD44780_SetCursor(16,0);
 800067e:	2100      	movs	r1, #0
 8000680:	2010      	movs	r0, #16
 8000682:	f7ff fe71 	bl	8000368 <HD44780_SetCursor>
    HD44780_PrintStr("SCROLL LEFT");
 8000686:	4b31      	ldr	r3, [pc, #196]	; (800074c <main+0x11c>)
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff fef8 	bl	800047e <HD44780_PrintStr>

    for(int i=0; i<20; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e009      	b.n	80006a8 <main+0x78>
    {
      HD44780_ScrollDisplayLeft();
 8000694:	f7ff feb6 	bl	8000404 <HD44780_ScrollDisplayLeft>
      HAL_Delay(500);
 8000698:	23fa      	movs	r3, #250	; 0xfa
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f000 fa9f 	bl	8000be0 <HAL_Delay>
    for(int i=0; i<20; i++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2b13      	cmp	r3, #19
 80006ac:	ddf2      	ble.n	8000694 <main+0x64>
    }

    HD44780_Clear();
 80006ae:	f7ff fe41 	bl	8000334 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff fe57 	bl	8000368 <HD44780_SetCursor>
    HD44780_PrintStr("SCROLL RIGHT");
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <main+0x120>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fede 	bl	800047e <HD44780_PrintStr>

    for(int i=0; i<20; i++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	613b      	str	r3, [r7, #16]
 80006c6:	e009      	b.n	80006dc <main+0xac>
    {
      HD44780_ScrollDisplayRight();
 80006c8:	f7ff fea4 	bl	8000414 <HD44780_ScrollDisplayRight>
      HAL_Delay(500);
 80006cc:	23fa      	movs	r3, #250	; 0xfa
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fa85 	bl	8000be0 <HAL_Delay>
    for(int i=0; i<20; i++)
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	3301      	adds	r3, #1
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
 80006de:	2b13      	cmp	r3, #19
 80006e0:	ddf2      	ble.n	80006c8 <main+0x98>
    }

    HD44780_Clear();
 80006e2:	f7ff fe27 	bl	8000334 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 80006e6:	2100      	movs	r1, #0
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fe3d 	bl	8000368 <HD44780_SetCursor>
    HD44780_PrintStr("Lets Count 0-10!");
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <main+0x124>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fec4 	bl	800047e <HD44780_PrintStr>
    HAL_Delay(2000);
 80006f6:	23fa      	movs	r3, #250	; 0xfa
 80006f8:	00db      	lsls	r3, r3, #3
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fa70 	bl	8000be0 <HAL_Delay>

    char string[5];
    for(int counter=0;counter<= 10;counter++)
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e017      	b.n	8000736 <main+0x106>
    {
      itoa(counter,string,10);
 8000706:	1d39      	adds	r1, r7, #4
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	220a      	movs	r2, #10
 800070c:	0018      	movs	r0, r3
 800070e:	f002 f8a9 	bl	8002864 <itoa>
      HD44780_Clear();
 8000712:	f7ff fe0f 	bl	8000334 <HD44780_Clear>
      HD44780_SetCursor(0,0);
 8000716:	2100      	movs	r1, #0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff fe25 	bl	8000368 <HD44780_SetCursor>
      HD44780_PrintStr(string);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff feac 	bl	800047e <HD44780_PrintStr>
      HAL_Delay(1000);
 8000726:	23fa      	movs	r3, #250	; 0xfa
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fa58 	bl	8000be0 <HAL_Delay>
    for(int counter=0;counter<= 10;counter++)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b0a      	cmp	r3, #10
 800073a:	dde4      	ble.n	8000706 <main+0xd6>
    }
    HD44780_Clear();
 800073c:	f7ff fdfa 	bl	8000334 <HD44780_Clear>


  while (1)
 8000740:	e7fe      	b.n	8000740 <main+0x110>
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	08002968 	.word	0x08002968
 8000748:	08002978 	.word	0x08002978
 800074c:	08002988 	.word	0x08002988
 8000750:	08002994 	.word	0x08002994
 8000754:	080029a4 	.word	0x080029a4

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b095      	sub	sp, #84	; 0x54
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	2414      	movs	r4, #20
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	233c      	movs	r3, #60	; 0x3c
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f002 f8b3 	bl	80028d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	0018      	movs	r0, r3
 8000772:	2310      	movs	r3, #16
 8000774:	001a      	movs	r2, r3
 8000776:	2100      	movs	r1, #0
 8000778:	f002 f8ac 	bl	80028d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	0018      	movs	r0, r3
 8000782:	f001 f8f1 	bl	8001968 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	0252      	lsls	r2, r2, #9
 8000792:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2202      	movs	r2, #2
 800079a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2203      	movs	r2, #3
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2210      	movs	r2, #16
 80007ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2280      	movs	r2, #128	; 0x80
 80007b2:	0292      	lsls	r2, r2, #10
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0492      	lsls	r2, r2, #18
 80007bc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0592      	lsls	r2, r2, #22
 80007c4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 f90d 	bl	80019e8 <HAL_RCC_OscConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007d2:	f000 f8a9 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2202      	movs	r2, #2
 80007e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2102      	movs	r1, #2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fc58 	bl	80020a8 <HAL_RCC_ClockConfig>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007fc:	f000 f894 	bl	8000928 <Error_Handler>
  }
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b015      	add	sp, #84	; 0x54
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_I2C1_Init+0x74>)
 800080e:	4a1c      	ldr	r2, [pc, #112]	; (8000880 <MX_I2C1_Init+0x78>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000812:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_I2C1_Init+0x74>)
 8000814:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <MX_I2C1_Init+0x7c>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_I2C1_Init+0x74>)
 8000820:	2201      	movs	r2, #1
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_I2C1_Init+0x74>)
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fc43 	bl	80010d0 <HAL_I2C_Init>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800084e:	f000 f86b 	bl	8000928 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_I2C1_Init+0x74>)
 8000854:	2100      	movs	r1, #0
 8000856:	0018      	movs	r0, r3
 8000858:	f000 ffee 	bl	8001838 <HAL_I2CEx_ConfigAnalogFilter>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 f862 	bl	8000928 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <MX_I2C1_Init+0x74>)
 8000866:	2100      	movs	r1, #0
 8000868:	0018      	movs	r0, r3
 800086a:	f001 f831 	bl	80018d0 <HAL_I2CEx_ConfigDigitalFilter>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000872:	f000 f859 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000040 	.word	0x20000040
 8000880:	40005400 	.word	0x40005400
 8000884:	10707dbc 	.word	0x10707dbc

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	240c      	movs	r4, #12
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2314      	movs	r3, #20
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f002 f81b 	bl	80028d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008a4:	2104      	movs	r1, #4
 80008a6:	430a      	orrs	r2, r1
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ae:	2204      	movs	r2, #4
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008bc:	2120      	movs	r1, #32
 80008be:	430a      	orrs	r2, r1
 80008c0:	635a      	str	r2, [r3, #52]	; 0x34
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c6:	2220      	movs	r2, #32
 80008c8:	4013      	ands	r3, r2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008d4:	2101      	movs	r1, #1
 80008d6:	430a      	orrs	r2, r1
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_GPIO_Init+0x9c>)
 80008dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008de:	2201      	movs	r2, #1
 80008e0:	4013      	ands	r3, r2
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008e6:	23a0      	movs	r3, #160	; 0xa0
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2200      	movs	r2, #0
 80008ec:	2120      	movs	r1, #32
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fbd0 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008f4:	0021      	movs	r1, r4
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2220      	movs	r2, #32
 80008fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2201      	movs	r2, #1
 8000900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800090e:	187a      	adds	r2, r7, r1
 8000910:	23a0      	movs	r3, #160	; 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fa50 	bl	8000dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b009      	add	sp, #36	; 0x24
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_MspInit+0x4c>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	641a      	str	r2, [r3, #64]	; 0x40
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x4c>)
 8000954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000956:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <HAL_MspInit+0x4c>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0549      	lsls	r1, r1, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_MspInit+0x4c>)
 8000962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800096e:	23c0      	movs	r3, #192	; 0xc0
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f958 	bl	8000c28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	b002      	add	sp, #8
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b09d      	sub	sp, #116	; 0x74
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	235c      	movs	r3, #92	; 0x5c
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	0018      	movs	r0, r3
 8000992:	2314      	movs	r3, #20
 8000994:	001a      	movs	r2, r3
 8000996:	2100      	movs	r1, #0
 8000998:	f001 ff9c 	bl	80028d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	2410      	movs	r4, #16
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	234c      	movs	r3, #76	; 0x4c
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f001 ff94 	bl	80028d4 <memset>
  if(hi2c->Instance==I2C1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <HAL_I2C_MspInit+0xbc>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d13f      	bne.n	8000a36 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2220      	movs	r2, #32
 80009ba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 fcf9 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009ce:	f7ff ffab 	bl	8000928 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	215c      	movs	r1, #92	; 0x5c
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	22c0      	movs	r2, #192	; 0xc0
 80009f0:	00d2      	lsls	r2, r2, #3
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2212      	movs	r2, #18
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2206      	movs	r2, #6
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f9d1 	bl	8000dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 8000a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0389      	lsls	r1, r1, #14
 8000a24:	430a      	orrs	r2, r1
 8000a26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_I2C_MspInit+0xc0>)
 8000a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	039b      	lsls	r3, r3, #14
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b01d      	add	sp, #116	; 0x74
 8000a3c:	bd90      	pop	{r4, r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	40005400 	.word	0x40005400
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f89c 	bl	8000ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a84:	f7ff fff7 	bl	8000a76 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	; (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	; (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aae:	f001 ff19 	bl	80028e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000ab2:	f7ff fdbd 	bl	8000630 <main>

08000ab6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   r0, =_estack
 8000ab8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ac4:	08002a28 	.word	0x08002a28
  ldr r2, =_sbss
 8000ac8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000acc:	20000098 	.word	0x20000098

08000ad0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_COMP_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ada:	1dfb      	adds	r3, r7, #7
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x3c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Init+0x3c>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0049      	lsls	r1, r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f810 	bl	8000b14 <HAL_InitTick>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d003      	beq.n	8000b00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	2201      	movs	r2, #1
 8000afc:	701a      	strb	r2, [r3, #0]
 8000afe:	e001      	b.n	8000b04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b00:	f7ff ff18 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b002      	add	sp, #8
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40022000 	.word	0x40022000

08000b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_InitTick+0x88>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d02b      	beq.n	8000b84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <HAL_InitTick+0x8c>)
 8000b2e:	681c      	ldr	r4, [r3, #0]
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_InitTick+0x88>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	0019      	movs	r1, r3
 8000b36:	23fa      	movs	r3, #250	; 0xfa
 8000b38:	0098      	lsls	r0, r3, #2
 8000b3a:	f7ff fae3 	bl	8000104 <__udivsi3>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	0019      	movs	r1, r3
 8000b42:	0020      	movs	r0, r4
 8000b44:	f7ff fade 	bl	8000104 <__udivsi3>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f929 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d112      	bne.n	8000b7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d80a      	bhi.n	8000b70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	425b      	negs	r3, r3
 8000b60:	2200      	movs	r2, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f908 	bl	8000d78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_InitTick+0x90>)
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e00d      	b.n	8000b8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e008      	b.n	8000b8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
 8000b82:	e003      	b.n	8000b8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	781b      	ldrb	r3, [r3, #0]
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b005      	add	sp, #20
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000018 	.word	0x20000018
 8000ba0:	20000010 	.word	0x20000010
 8000ba4:	20000014 	.word	0x20000014

08000ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x1c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	18d2      	adds	r2, r2, r3
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000018 	.word	0x20000018
 8000bc8:	20000094 	.word	0x20000094

08000bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <HAL_GetTick+0x10>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	20000094 	.word	0x20000094

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff fff0 	bl	8000bcc <HAL_GetTick>
 8000bec:	0003      	movs	r3, r0
 8000bee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	001a      	movs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	189b      	adds	r3, r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	f7ff ffe0 	bl	8000bcc <HAL_GetTick>
 8000c0c:	0002      	movs	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	46c0      	nop			; (mov r8, r8)
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b004      	add	sp, #16
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000018 	.word	0x20000018

08000c28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	0019      	movs	r1, r3
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	40010000 	.word	0x40010000
 8000c50:	fffff9ff 	.word	0xfffff9ff

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	0002      	movs	r2, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b7f      	cmp	r3, #127	; 0x7f
 8000c68:	d828      	bhi.n	8000cbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	; (8000d28 <__NVIC_SetPriority+0xd4>)
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	33c0      	adds	r3, #192	; 0xc0
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	589b      	ldr	r3, [r3, r2]
 8000c7a:	1dfa      	adds	r2, r7, #7
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	0011      	movs	r1, r2
 8000c80:	2203      	movs	r2, #3
 8000c82:	400a      	ands	r2, r1
 8000c84:	00d2      	lsls	r2, r2, #3
 8000c86:	21ff      	movs	r1, #255	; 0xff
 8000c88:	4091      	lsls	r1, r2
 8000c8a:	000a      	movs	r2, r1
 8000c8c:	43d2      	mvns	r2, r2
 8000c8e:	401a      	ands	r2, r3
 8000c90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	019b      	lsls	r3, r3, #6
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	401a      	ands	r2, r3
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	4003      	ands	r3, r0
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ca8:	481f      	ldr	r0, [pc, #124]	; (8000d28 <__NVIC_SetPriority+0xd4>)
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b25b      	sxtb	r3, r3
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	33c0      	adds	r3, #192	; 0xc0
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cba:	e031      	b.n	8000d20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <__NVIC_SetPriority+0xd8>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0019      	movs	r1, r3
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	400b      	ands	r3, r1
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3306      	adds	r3, #6
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1dfa      	adds	r2, r7, #7
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	0011      	movs	r1, r2
 8000cdc:	2203      	movs	r2, #3
 8000cde:	400a      	ands	r2, r1
 8000ce0:	00d2      	lsls	r2, r2, #3
 8000ce2:	21ff      	movs	r1, #255	; 0xff
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	000a      	movs	r2, r1
 8000ce8:	43d2      	mvns	r2, r2
 8000cea:	401a      	ands	r2, r3
 8000cec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	019b      	lsls	r3, r3, #6
 8000cf2:	22ff      	movs	r2, #255	; 0xff
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	4003      	ands	r3, r0
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <__NVIC_SetPriority+0xd8>)
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	001c      	movs	r4, r3
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	4023      	ands	r3, r4
 8000d10:	3b08      	subs	r3, #8
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	430a      	orrs	r2, r1
 8000d16:	3306      	adds	r3, #6
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	18c3      	adds	r3, r0, r3
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	601a      	str	r2, [r3, #0]
}
 8000d20:	46c0      	nop			; (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b003      	add	sp, #12
 8000d26:	bd90      	pop	{r4, r7, pc}
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	1e5a      	subs	r2, r3, #1
 8000d3c:	2380      	movs	r3, #128	; 0x80
 8000d3e:	045b      	lsls	r3, r3, #17
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d301      	bcc.n	8000d48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d44:	2301      	movs	r3, #1
 8000d46:	e010      	b.n	8000d6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d48:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <SysTick_Config+0x44>)
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	3a01      	subs	r2, #1
 8000d4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d50:	2301      	movs	r3, #1
 8000d52:	425b      	negs	r3, r3
 8000d54:	2103      	movs	r1, #3
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff ff7c 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SysTick_Config+0x44>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d62:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <SysTick_Config+0x44>)
 8000d64:	2207      	movs	r2, #7
 8000d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	e000e010 	.word	0xe000e010

08000d78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	210f      	movs	r1, #15
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	1c02      	adds	r2, r0, #0
 8000d88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b25b      	sxtb	r3, r3
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b004      	add	sp, #16
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff ffbf 	bl	8000d30 <SysTick_Config>
 8000db2:	0003      	movs	r3, r0
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dca:	e14d      	b.n	8001068 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d100      	bne.n	8000de4 <HAL_GPIO_Init+0x28>
 8000de2:	e13e      	b.n	8001062 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d005      	beq.n	8000dfc <HAL_GPIO_Init+0x40>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	2203      	movs	r2, #3
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d130      	bne.n	8000e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	43da      	mvns	r2, r3
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	409a      	lsls	r2, r3
 8000e1e:	0013      	movs	r3, r2
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e32:	2201      	movs	r2, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
 8000e38:	0013      	movs	r3, r2
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	091b      	lsrs	r3, r3, #4
 8000e48:	2201      	movs	r2, #1
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2203      	movs	r2, #3
 8000e64:	4013      	ands	r3, r2
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d017      	beq.n	8000e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d123      	bne.n	8000eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	0092      	lsls	r2, r2, #2
 8000eb0:	58d3      	ldr	r3, [r2, r3]
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	2207      	movs	r2, #7
 8000eb8:	4013      	ands	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	691a      	ldr	r2, [r3, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	0092      	lsls	r2, r2, #2
 8000eea:	6939      	ldr	r1, [r7, #16]
 8000eec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	43da      	mvns	r2, r3
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	409a      	lsls	r2, r3
 8000f14:	0013      	movs	r3, r2
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685a      	ldr	r2, [r3, #4]
 8000f26:	23c0      	movs	r3, #192	; 0xc0
 8000f28:	029b      	lsls	r3, r3, #10
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d100      	bne.n	8000f30 <HAL_GPIO_Init+0x174>
 8000f2e:	e098      	b.n	8001062 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f30:	4a53      	ldr	r2, [pc, #332]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3318      	adds	r3, #24
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	589b      	ldr	r3, [r3, r2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	2203      	movs	r2, #3
 8000f42:	4013      	ands	r3, r2
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	220f      	movs	r2, #15
 8000f48:	409a      	lsls	r2, r3
 8000f4a:	0013      	movs	r3, r2
 8000f4c:	43da      	mvns	r2, r3
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	23a0      	movs	r3, #160	; 0xa0
 8000f58:	05db      	lsls	r3, r3, #23
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d019      	beq.n	8000f92 <HAL_GPIO_Init+0x1d6>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a48      	ldr	r2, [pc, #288]	; (8001084 <HAL_GPIO_Init+0x2c8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d013      	beq.n	8000f8e <HAL_GPIO_Init+0x1d2>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a47      	ldr	r2, [pc, #284]	; (8001088 <HAL_GPIO_Init+0x2cc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00d      	beq.n	8000f8a <HAL_GPIO_Init+0x1ce>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a46      	ldr	r2, [pc, #280]	; (800108c <HAL_GPIO_Init+0x2d0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x1ca>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a45      	ldr	r2, [pc, #276]	; (8001090 <HAL_GPIO_Init+0x2d4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_GPIO_Init+0x1c6>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e008      	b.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e006      	b.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e004      	b.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e000      	b.n	8000f94 <HAL_GPIO_Init+0x1d8>
 8000f92:	2300      	movs	r3, #0
 8000f94:	697a      	ldr	r2, [r7, #20]
 8000f96:	2103      	movs	r1, #3
 8000f98:	400a      	ands	r2, r1
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	4093      	lsls	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fa4:	4936      	ldr	r1, [pc, #216]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	089b      	lsrs	r3, r3, #2
 8000faa:	3318      	adds	r3, #24
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb2:	4b33      	ldr	r3, [pc, #204]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	035b      	lsls	r3, r3, #13
 8000fca:	4013      	ands	r3, r2
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	039b      	lsls	r3, r3, #14
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8001008:	2384      	movs	r3, #132	; 0x84
 800100a:	58d3      	ldr	r3, [r2, r3]
 800100c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	43da      	mvns	r2, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685a      	ldr	r2, [r3, #4]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	029b      	lsls	r3, r3, #10
 8001020:	4013      	ands	r3, r2
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800102c:	4914      	ldr	r1, [pc, #80]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 800102e:	2284      	movs	r2, #132	; 0x84
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	58d3      	ldr	r3, [r2, r3]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43da      	mvns	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	025b      	lsls	r3, r3, #9
 800104e:	4013      	ands	r3, r2
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105a:	4909      	ldr	r1, [pc, #36]	; (8001080 <HAL_GPIO_Init+0x2c4>)
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	3301      	adds	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	40da      	lsrs	r2, r3
 8001070:	1e13      	subs	r3, r2, #0
 8001072:	d000      	beq.n	8001076 <HAL_GPIO_Init+0x2ba>
 8001074:	e6aa      	b.n	8000dcc <HAL_GPIO_Init+0x10>
  }
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40021800 	.word	0x40021800
 8001084:	50000400 	.word	0x50000400
 8001088:	50000800 	.word	0x50000800
 800108c:	50000c00 	.word	0x50000c00
 8001090:	50001000 	.word	0x50001000

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e082      	b.n	80011e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2241      	movs	r2, #65	; 0x41
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d107      	bne.n	80010fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	2100      	movs	r1, #0
 80010f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff fc43 	bl	8000984 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2241      	movs	r2, #65	; 0x41
 8001102:	2124      	movs	r1, #36	; 0x24
 8001104:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	438a      	bics	r2, r1
 8001114:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4934      	ldr	r1, [pc, #208]	; (80011f0 <HAL_I2C_Init+0x120>)
 8001120:	400a      	ands	r2, r1
 8001122:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <HAL_I2C_Init+0x124>)
 8001130:	400a      	ands	r2, r1
 8001132:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	0209      	lsls	r1, r1, #8
 8001148:	430a      	orrs	r2, r1
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	e007      	b.n	800115e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2184      	movs	r1, #132	; 0x84
 8001158:	0209      	lsls	r1, r1, #8
 800115a:	430a      	orrs	r2, r1
 800115c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d104      	bne.n	8001170 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	491f      	ldr	r1, [pc, #124]	; (80011f8 <HAL_I2C_Init+0x128>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	491a      	ldr	r1, [pc, #104]	; (80011f4 <HAL_I2C_Init+0x124>)
 800118c:	400a      	ands	r2, r1
 800118e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	431a      	orrs	r2, r3
 800119a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69d9      	ldr	r1, [r3, #28]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2241      	movs	r2, #65	; 0x41
 80011d4:	2120      	movs	r1, #32
 80011d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2242      	movs	r2, #66	; 0x42
 80011e2:	2100      	movs	r1, #0
 80011e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	f0ffffff 	.word	0xf0ffffff
 80011f4:	ffff7fff 	.word	0xffff7fff
 80011f8:	02008000 	.word	0x02008000

080011fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011fc:	b590      	push	{r4, r7, lr}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	0008      	movs	r0, r1
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	0019      	movs	r1, r3
 800120a:	230a      	movs	r3, #10
 800120c:	18fb      	adds	r3, r7, r3
 800120e:	1c02      	adds	r2, r0, #0
 8001210:	801a      	strh	r2, [r3, #0]
 8001212:	2308      	movs	r3, #8
 8001214:	18fb      	adds	r3, r7, r3
 8001216:	1c0a      	adds	r2, r1, #0
 8001218:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2241      	movs	r2, #65	; 0x41
 800121e:	5c9b      	ldrb	r3, [r3, r2]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b20      	cmp	r3, #32
 8001224:	d000      	beq.n	8001228 <HAL_I2C_Master_Transmit+0x2c>
 8001226:	e0e7      	b.n	80013f8 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2240      	movs	r2, #64	; 0x40
 800122c:	5c9b      	ldrb	r3, [r3, r2]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d101      	bne.n	8001236 <HAL_I2C_Master_Transmit+0x3a>
 8001232:	2302      	movs	r3, #2
 8001234:	e0e1      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	2101      	movs	r1, #1
 800123c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800123e:	f7ff fcc5 	bl	8000bcc <HAL_GetTick>
 8001242:	0003      	movs	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	0219      	lsls	r1, r3, #8
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2319      	movs	r3, #25
 8001252:	2201      	movs	r2, #1
 8001254:	f000 f8fc 	bl	8001450 <I2C_WaitOnFlagUntilTimeout>
 8001258:	1e03      	subs	r3, r0, #0
 800125a:	d001      	beq.n	8001260 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e0cc      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2241      	movs	r2, #65	; 0x41
 8001264:	2121      	movs	r1, #33	; 0x21
 8001266:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2242      	movs	r2, #66	; 0x42
 800126c:	2110      	movs	r1, #16
 800126e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2208      	movs	r2, #8
 8001280:	18ba      	adds	r2, r7, r2
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d911      	bls.n	80012ba <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	22ff      	movs	r2, #255	; 0xff
 800129a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	045c      	lsls	r4, r3, #17
 80012a6:	230a      	movs	r3, #10
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	8819      	ldrh	r1, [r3, #0]
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <HAL_I2C_Master_Transmit+0x208>)
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	0023      	movs	r3, r4
 80012b4:	f000 fa86 	bl	80017c4 <I2C_TransferConfig>
 80012b8:	e075      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012be:	b29a      	uxth	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	049c      	lsls	r4, r3, #18
 80012ce:	230a      	movs	r3, #10
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	8819      	ldrh	r1, [r3, #0]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_I2C_Master_Transmit+0x208>)
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	0023      	movs	r3, r4
 80012dc:	f000 fa72 	bl	80017c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012e0:	e061      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 f8f0 	bl	80014ce <I2C_WaitOnTXISFlagUntilTimeout>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e081      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001310:	b29b      	uxth	r3, r3
 8001312:	3b01      	subs	r3, #1
 8001314:	b29a      	uxth	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800131e:	3b01      	subs	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03a      	beq.n	80013a6 <HAL_I2C_Master_Transmit+0x1aa>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d136      	bne.n	80013a6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0013      	movs	r3, r2
 8001342:	2200      	movs	r2, #0
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	f000 f883 	bl	8001450 <I2C_WaitOnFlagUntilTimeout>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e053      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001356:	b29b      	uxth	r3, r3
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d911      	bls.n	8001380 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	b2da      	uxtb	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	045c      	lsls	r4, r3, #17
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0023      	movs	r3, r4
 800137a:	f000 fa23 	bl	80017c4 <I2C_TransferConfig>
 800137e:	e012      	b.n	80013a6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138e:	b2da      	uxtb	r2, r3
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	049c      	lsls	r4, r3, #18
 8001394:	230a      	movs	r3, #10
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	8819      	ldrh	r1, [r3, #0]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	0023      	movs	r3, r4
 80013a2:	f000 fa0f 	bl	80017c4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d198      	bne.n	80012e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f8c8 	bl	800154c <I2C_WaitOnSTOPFlagUntilTimeout>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e01a      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2220      	movs	r2, #32
 80013ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <HAL_I2C_Master_Transmit+0x20c>)
 80013d8:	400a      	ands	r2, r1
 80013da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2241      	movs	r2, #65	; 0x41
 80013e0:	2120      	movs	r1, #32
 80013e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2242      	movs	r2, #66	; 0x42
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80013f8:	2302      	movs	r3, #2
  }
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b007      	add	sp, #28
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	80002000 	.word	0x80002000
 8001408:	fe00e800 	.word	0xfe00e800

0800140c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2202      	movs	r2, #2
 800141c:	4013      	ands	r3, r2
 800141e:	2b02      	cmp	r3, #2
 8001420:	d103      	bne.n	800142a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	2b01      	cmp	r3, #1
 8001436:	d007      	beq.n	8001448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699a      	ldr	r2, [r3, #24]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	430a      	orrs	r2, r1
 8001446:	619a      	str	r2, [r3, #24]
  }
}
 8001448:	46c0      	nop			; (mov r8, r8)
 800144a:	46bd      	mov	sp, r7
 800144c:	b002      	add	sp, #8
 800144e:	bd80      	pop	{r7, pc}

08001450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	1dfb      	adds	r3, r7, #7
 800145e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001460:	e021      	b.n	80014a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	3301      	adds	r3, #1
 8001466:	d01e      	beq.n	80014a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001468:	f7ff fbb0 	bl	8000bcc <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d302      	bcc.n	800147e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d113      	bne.n	80014a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	2220      	movs	r2, #32
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2241      	movs	r2, #65	; 0x41
 800148e:	2120      	movs	r1, #32
 8001490:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	2242      	movs	r2, #66	; 0x42
 8001496:	2100      	movs	r1, #0
 8001498:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2240      	movs	r2, #64	; 0x40
 800149e:	2100      	movs	r1, #0
 80014a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00f      	b.n	80014c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4013      	ands	r3, r2
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	425a      	negs	r2, r3
 80014b6:	4153      	adcs	r3, r2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	001a      	movs	r2, r3
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d0ce      	beq.n	8001462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014da:	e02b      	b.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	0018      	movs	r0, r3
 80014e4:	f000 f86e 	bl	80015c4 <I2C_IsErrorOccurred>
 80014e8:	1e03      	subs	r3, r0, #0
 80014ea:	d001      	beq.n	80014f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e029      	b.n	8001544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	d01e      	beq.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014f6:	f7ff fb69 	bl	8000bcc <HAL_GetTick>
 80014fa:	0002      	movs	r2, r0
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d113      	bne.n	8001534 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001510:	2220      	movs	r2, #32
 8001512:	431a      	orrs	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2241      	movs	r2, #65	; 0x41
 800151c:	2120      	movs	r1, #32
 800151e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2242      	movs	r2, #66	; 0x42
 8001524:	2100      	movs	r1, #0
 8001526:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2240      	movs	r2, #64	; 0x40
 800152c:	2100      	movs	r1, #0
 800152e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e007      	b.n	8001544 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	2b02      	cmp	r3, #2
 8001540:	d1cc      	bne.n	80014dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bd80      	pop	{r7, pc}

0800154c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001558:	e028      	b.n	80015ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	0018      	movs	r0, r3
 8001562:	f000 f82f 	bl	80015c4 <I2C_IsErrorOccurred>
 8001566:	1e03      	subs	r3, r0, #0
 8001568:	d001      	beq.n	800156e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e026      	b.n	80015bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800156e:	f7ff fb2d 	bl	8000bcc <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	429a      	cmp	r2, r3
 800157c:	d302      	bcc.n	8001584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d113      	bne.n	80015ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001588:	2220      	movs	r2, #32
 800158a:	431a      	orrs	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2241      	movs	r2, #65	; 0x41
 8001594:	2120      	movs	r1, #32
 8001596:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2242      	movs	r2, #66	; 0x42
 800159c:	2100      	movs	r1, #0
 800159e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e007      	b.n	80015bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2220      	movs	r2, #32
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b20      	cmp	r3, #32
 80015b8:	d1cf      	bne.n	800155a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b004      	add	sp, #16
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b08b      	sub	sp, #44	; 0x2c
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d0:	2327      	movs	r3, #39	; 0x27
 80015d2:	18fb      	adds	r3, r7, r3
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	2210      	movs	r2, #16
 80015ec:	4013      	ands	r3, r2
 80015ee:	d100      	bne.n	80015f2 <I2C_IsErrorOccurred+0x2e>
 80015f0:	e082      	b.n	80016f8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2210      	movs	r2, #16
 80015f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015fa:	e060      	b.n	80016be <I2C_IsErrorOccurred+0xfa>
 80015fc:	2427      	movs	r4, #39	; 0x27
 80015fe:	193b      	adds	r3, r7, r4
 8001600:	193a      	adds	r2, r7, r4
 8001602:	7812      	ldrb	r2, [r2, #0]
 8001604:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	3301      	adds	r3, #1
 800160a:	d058      	beq.n	80016be <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800160c:	f7ff fade 	bl	8000bcc <HAL_GetTick>
 8001610:	0002      	movs	r2, r0
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	429a      	cmp	r2, r3
 800161a:	d306      	bcc.n	800162a <I2C_IsErrorOccurred+0x66>
 800161c:	193b      	adds	r3, r7, r4
 800161e:	193a      	adds	r2, r7, r4
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d149      	bne.n	80016be <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	01db      	lsls	r3, r3, #7
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001638:	2013      	movs	r0, #19
 800163a:	183b      	adds	r3, r7, r0
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	2142      	movs	r1, #66	; 0x42
 8001640:	5c52      	ldrb	r2, [r2, r1]
 8001642:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	401a      	ands	r2, r3
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	429a      	cmp	r2, r3
 8001656:	d126      	bne.n	80016a6 <I2C_IsErrorOccurred+0xe2>
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	429a      	cmp	r2, r3
 8001660:	d021      	beq.n	80016a6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001662:	183b      	adds	r3, r7, r0
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b20      	cmp	r3, #32
 8001668:	d01d      	beq.n	80016a6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2180      	movs	r1, #128	; 0x80
 8001676:	01c9      	lsls	r1, r1, #7
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800167c:	f7ff faa6 	bl	8000bcc <HAL_GetTick>
 8001680:	0003      	movs	r3, r0
 8001682:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001684:	e00f      	b.n	80016a6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001686:	f7ff faa1 	bl	8000bcc <HAL_GetTick>
 800168a:	0002      	movs	r2, r0
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b19      	cmp	r3, #25
 8001692:	d908      	bls.n	80016a6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	2220      	movs	r2, #32
 8001698:	4313      	orrs	r3, r2
 800169a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800169c:	2327      	movs	r3, #39	; 0x27
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]

              break;
 80016a4:	e00b      	b.n	80016be <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2220      	movs	r2, #32
 80016ae:	4013      	ands	r3, r2
 80016b0:	2127      	movs	r1, #39	; 0x27
 80016b2:	187a      	adds	r2, r7, r1
 80016b4:	1879      	adds	r1, r7, r1
 80016b6:	7809      	ldrb	r1, [r1, #0]
 80016b8:	7011      	strb	r1, [r2, #0]
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	d1e3      	bne.n	8001686 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2220      	movs	r2, #32
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b20      	cmp	r3, #32
 80016ca:	d004      	beq.n	80016d6 <I2C_IsErrorOccurred+0x112>
 80016cc:	2327      	movs	r3, #39	; 0x27
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d092      	beq.n	80015fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016d6:	2327      	movs	r3, #39	; 0x27
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2220      	movs	r2, #32
 80016e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4313      	orrs	r3, r2
 80016ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80016f0:	2327      	movs	r3, #39	; 0x27
 80016f2:	18fb      	adds	r3, r7, r3
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4013      	ands	r3, r2
 8001708:	d00c      	beq.n	8001724 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800170a:	6a3b      	ldr	r3, [r7, #32]
 800170c:	2201      	movs	r2, #1
 800170e:	4313      	orrs	r3, r2
 8001710:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2280      	movs	r2, #128	; 0x80
 8001718:	0052      	lsls	r2, r2, #1
 800171a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800171c:	2327      	movs	r3, #39	; 0x27
 800171e:	18fb      	adds	r3, r7, r3
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4013      	ands	r3, r2
 800172c:	d00c      	beq.n	8001748 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2208      	movs	r2, #8
 8001732:	4313      	orrs	r3, r2
 8001734:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2280      	movs	r2, #128	; 0x80
 800173c:	00d2      	lsls	r2, r2, #3
 800173e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001740:	2327      	movs	r3, #39	; 0x27
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4013      	ands	r3, r2
 8001750:	d00c      	beq.n	800176c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2202      	movs	r2, #2
 8001756:	4313      	orrs	r3, r2
 8001758:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0092      	lsls	r2, r2, #2
 8001762:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001764:	2327      	movs	r3, #39	; 0x27
 8001766:	18fb      	adds	r3, r7, r3
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800176c:	2327      	movs	r3, #39	; 0x27
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01d      	beq.n	80017b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fe47 	bl	800140c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	490d      	ldr	r1, [pc, #52]	; (80017c0 <I2C_IsErrorOccurred+0x1fc>)
 800178a:	400a      	ands	r2, r1
 800178c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	431a      	orrs	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2241      	movs	r2, #65	; 0x41
 800179e:	2120      	movs	r1, #32
 80017a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2242      	movs	r2, #66	; 0x42
 80017a6:	2100      	movs	r1, #0
 80017a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2240      	movs	r2, #64	; 0x40
 80017ae:	2100      	movs	r1, #0
 80017b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80017b2:	2327      	movs	r3, #39	; 0x27
 80017b4:	18fb      	adds	r3, r7, r3
 80017b6:	781b      	ldrb	r3, [r3, #0]
}
 80017b8:	0018      	movs	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b00b      	add	sp, #44	; 0x2c
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	fe00e800 	.word	0xfe00e800

080017c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b087      	sub	sp, #28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	0008      	movs	r0, r1
 80017ce:	0011      	movs	r1, r2
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	240a      	movs	r4, #10
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	1c02      	adds	r2, r0, #0
 80017d8:	801a      	strh	r2, [r3, #0]
 80017da:	2009      	movs	r0, #9
 80017dc:	183b      	adds	r3, r7, r0
 80017de:	1c0a      	adds	r2, r1, #0
 80017e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	059b      	lsls	r3, r3, #22
 80017e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ea:	183b      	adds	r3, r7, r0
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	0419      	lsls	r1, r3, #16
 80017f0:	23ff      	movs	r3, #255	; 0xff
 80017f2:	041b      	lsls	r3, r3, #16
 80017f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fe:	4313      	orrs	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800180e:	0d51      	lsrs	r1, r2, #21
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	00d2      	lsls	r2, r2, #3
 8001814:	400a      	ands	r2, r1
 8001816:	4907      	ldr	r1, [pc, #28]	; (8001834 <I2C_TransferConfig+0x70>)
 8001818:	430a      	orrs	r2, r1
 800181a:	43d2      	mvns	r2, r2
 800181c:	401a      	ands	r2, r3
 800181e:	0011      	movs	r1, r2
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	430a      	orrs	r2, r1
 8001828:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b007      	add	sp, #28
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	03ff63ff 	.word	0x03ff63ff

08001838 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2241      	movs	r2, #65	; 0x41
 8001846:	5c9b      	ldrb	r3, [r3, r2]
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b20      	cmp	r3, #32
 800184c:	d138      	bne.n	80018c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2240      	movs	r2, #64	; 0x40
 8001852:	5c9b      	ldrb	r3, [r3, r2]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001858:	2302      	movs	r3, #2
 800185a:	e032      	b.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2240      	movs	r2, #64	; 0x40
 8001860:	2101      	movs	r1, #1
 8001862:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2241      	movs	r2, #65	; 0x41
 8001868:	2124      	movs	r1, #36	; 0x24
 800186a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2101      	movs	r1, #1
 8001878:	438a      	bics	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4911      	ldr	r1, [pc, #68]	; (80018cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6819      	ldr	r1, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2101      	movs	r1, #1
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2241      	movs	r2, #65	; 0x41
 80018b0:	2120      	movs	r1, #32
 80018b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2240      	movs	r2, #64	; 0x40
 80018b8:	2100      	movs	r1, #0
 80018ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	e000      	b.n	80018c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018c0:	2302      	movs	r3, #2
  }
}
 80018c2:	0018      	movs	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	ffffefff 	.word	0xffffefff

080018d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2241      	movs	r2, #65	; 0x41
 80018de:	5c9b      	ldrb	r3, [r3, r2]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	d139      	bne.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2240      	movs	r2, #64	; 0x40
 80018ea:	5c9b      	ldrb	r3, [r3, r2]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e033      	b.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2240      	movs	r2, #64	; 0x40
 80018f8:	2101      	movs	r1, #1
 80018fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2241      	movs	r2, #65	; 0x41
 8001900:	2124      	movs	r1, #36	; 0x24
 8001902:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2101      	movs	r1, #1
 8001910:	438a      	bics	r2, r1
 8001912:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a11      	ldr	r2, [pc, #68]	; (8001964 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4313      	orrs	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	430a      	orrs	r2, r1
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2241      	movs	r2, #65	; 0x41
 800194a:	2120      	movs	r1, #32
 800194c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2240      	movs	r2, #64	; 0x40
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800195a:	2302      	movs	r3, #2
  }
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b004      	add	sp, #16
 8001962:	bd80      	pop	{r7, pc}
 8001964:	fffff0ff 	.word	0xfffff0ff

08001968 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001970:	4b19      	ldr	r3, [pc, #100]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001976:	4013      	ands	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	429a      	cmp	r2, r3
 800198a:	d11f      	bne.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800198c:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	0013      	movs	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	189b      	adds	r3, r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4912      	ldr	r1, [pc, #72]	; (80019e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800199a:	0018      	movs	r0, r3
 800199c:	f7fe fbb2 	bl	8000104 <__udivsi3>
 80019a0:	0003      	movs	r3, r0
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019a6:	e008      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e001      	b.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e009      	b.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	401a      	ands	r2, r3
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d0ed      	beq.n	80019a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b004      	add	sp, #16
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	40007000 	.word	0x40007000
 80019dc:	fffff9ff 	.word	0xfffff9ff
 80019e0:	20000010 	.word	0x20000010
 80019e4:	000f4240 	.word	0x000f4240

080019e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d102      	bne.n	80019fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f000 fb50 	bl	800209c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d100      	bne.n	8001a08 <HAL_RCC_OscConfig+0x20>
 8001a06:	e07c      	b.n	8001b02 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a08:	4bc3      	ldr	r3, [pc, #780]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2238      	movs	r2, #56	; 0x38
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a12:	4bc1      	ldr	r3, [pc, #772]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2203      	movs	r2, #3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b10      	cmp	r3, #16
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0x40>
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d002      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d10b      	bne.n	8001a46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2e:	4bba      	ldr	r3, [pc, #744]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	4013      	ands	r3, r2
 8001a38:	d062      	beq.n	8001b00 <HAL_RCC_OscConfig+0x118>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d15e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e32a      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	025b      	lsls	r3, r3, #9
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_OscConfig+0x7a>
 8001a52:	4bb1      	ldr	r3, [pc, #708]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4bb0      	ldr	r3, [pc, #704]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	0249      	lsls	r1, r1, #9
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	e020      	b.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	23a0      	movs	r3, #160	; 0xa0
 8001a68:	02db      	lsls	r3, r3, #11
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d10e      	bne.n	8001a8c <HAL_RCC_OscConfig+0xa4>
 8001a6e:	4baa      	ldr	r3, [pc, #680]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	4ba9      	ldr	r3, [pc, #676]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a74:	2180      	movs	r1, #128	; 0x80
 8001a76:	02c9      	lsls	r1, r1, #11
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4ba6      	ldr	r3, [pc, #664]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4ba5      	ldr	r3, [pc, #660]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a82:	2180      	movs	r1, #128	; 0x80
 8001a84:	0249      	lsls	r1, r1, #9
 8001a86:	430a      	orrs	r2, r1
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0xbc>
 8001a8c:	4ba2      	ldr	r3, [pc, #648]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4ba1      	ldr	r3, [pc, #644]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a92:	49a2      	ldr	r1, [pc, #648]	; (8001d1c <HAL_RCC_OscConfig+0x334>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4b9f      	ldr	r3, [pc, #636]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b9e      	ldr	r3, [pc, #632]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001a9e:	49a0      	ldr	r1, [pc, #640]	; (8001d20 <HAL_RCC_OscConfig+0x338>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff f88e 	bl	8000bcc <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab6:	f7ff f889 	bl	8000bcc <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b64      	cmp	r3, #100	; 0x64
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e2e9      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac8:	4b93      	ldr	r3, [pc, #588]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	029b      	lsls	r3, r3, #10
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0xce>
 8001ad4:	e015      	b.n	8001b02 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f879 	bl	8000bcc <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f874 	bl	8000bcc <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2d4      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	029b      	lsls	r3, r3, #10
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xf8>
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d100      	bne.n	8001b0e <HAL_RCC_OscConfig+0x126>
 8001b0c:	e099      	b.n	8001c42 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4b82      	ldr	r3, [pc, #520]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2238      	movs	r2, #56	; 0x38
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4b7f      	ldr	r3, [pc, #508]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4013      	ands	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b10      	cmp	r3, #16
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x146>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d135      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b34:	4b78      	ldr	r3, [pc, #480]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_OscConfig+0x164>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d101      	bne.n	8001b4c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e2a7      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4c:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a74      	ldr	r2, [pc, #464]	; (8001d24 <HAL_RCC_OscConfig+0x33c>)
 8001b52:	4013      	ands	r3, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	021a      	lsls	r2, r3, #8
 8001b5c:	4b6e      	ldr	r3, [pc, #440]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d112      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b68:	4b6b      	ldr	r3, [pc, #428]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x340>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	4b68      	ldr	r3, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b7c:	4b66      	ldr	r3, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0adb      	lsrs	r3, r3, #11
 8001b82:	2207      	movs	r2, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x344>)
 8001b88:	40da      	lsrs	r2, r3
 8001b8a:	4b69      	ldr	r3, [pc, #420]	; (8001d30 <HAL_RCC_OscConfig+0x348>)
 8001b8c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b8e:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x34c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe ffbe 	bl	8000b14 <HAL_InitTick>
 8001b98:	1e03      	subs	r3, r0, #0
 8001b9a:	d051      	beq.n	8001c40 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e27d      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d030      	beq.n	8001c0a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_RCC_OscConfig+0x340>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	0019      	movs	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bbc:	4b56      	ldr	r3, [pc, #344]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	0049      	lsls	r1, r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7fe ffff 	bl	8000bcc <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7fe fffa 	bl	8000bcc <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e25a      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf2:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4a4b      	ldr	r2, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	021a      	lsls	r2, r3, #8
 8001c02:	4b45      	ldr	r3, [pc, #276]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
 8001c08:	e01b      	b.n	8001c42 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c0a:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c10:	4949      	ldr	r1, [pc, #292]	; (8001d38 <HAL_RCC_OscConfig+0x350>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7fe ffd9 	bl	8000bcc <HAL_GetTick>
 8001c1a:	0003      	movs	r3, r0
 8001c1c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c20:	f7fe ffd4 	bl	8000bcc <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e234      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c32:	4b39      	ldr	r3, [pc, #228]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x238>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2208      	movs	r2, #8
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d047      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	; 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b18      	cmp	r3, #24
 8001c56:	d10a      	bne.n	8001c6e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d03c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x2f4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d138      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e216      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c76:	4b28      	ldr	r3, [pc, #160]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c7a:	4b27      	ldr	r3, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c82:	f7fe ffa3 	bl	8000bcc <HAL_GetTick>
 8001c86:	0003      	movs	r3, r0
 8001c88:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7fe ff9e 	bl	8000bcc <HAL_GetTick>
 8001c90:	0002      	movs	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e1fe      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f1      	beq.n	8001c8c <HAL_RCC_OscConfig+0x2a4>
 8001ca8:	e018      	b.n	8001cdc <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001cac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7fe ff89 	bl	8000bcc <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7fe ff84 	bl	8000bcc <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1e4      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d1f1      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x300>
 8001ce6:	e0c7      	b.n	8001e78 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce8:	231f      	movs	r3, #31
 8001cea:	18fb      	adds	r3, r7, r3
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cf0:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d11f      	bne.n	8001d3c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_OscConfig+0x330>)
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d100      	bne.n	8001d08 <HAL_RCC_OscConfig+0x320>
 8001d06:	e0b7      	b.n	8001e78 <HAL_RCC_OscConfig+0x490>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d000      	beq.n	8001d12 <HAL_RCC_OscConfig+0x32a>
 8001d10:	e0b2      	b.n	8001e78 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1c2      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	fffeffff 	.word	0xfffeffff
 8001d20:	fffbffff 	.word	0xfffbffff
 8001d24:	ffff80ff 	.word	0xffff80ff
 8001d28:	ffffc7ff 	.word	0xffffc7ff
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000014 	.word	0x20000014
 8001d38:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d3c:	4bb5      	ldr	r3, [pc, #724]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	4013      	ands	r3, r2
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x364>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x366>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d011      	beq.n	8001d76 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4bb0      	ldr	r3, [pc, #704]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d56:	4baf      	ldr	r3, [pc, #700]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	0549      	lsls	r1, r1, #21
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d60:	4bac      	ldr	r3, [pc, #688]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	055b      	lsls	r3, r3, #21
 8001d68:	4013      	ands	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d6e:	231f      	movs	r3, #31
 8001d70:	18fb      	adds	r3, r7, r3
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	4ba8      	ldr	r3, [pc, #672]	; (8002018 <HAL_RCC_OscConfig+0x630>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d82:	4ba5      	ldr	r3, [pc, #660]	; (8002018 <HAL_RCC_OscConfig+0x630>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	4ba4      	ldr	r3, [pc, #656]	; (8002018 <HAL_RCC_OscConfig+0x630>)
 8001d88:	2180      	movs	r1, #128	; 0x80
 8001d8a:	0049      	lsls	r1, r1, #1
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d90:	f7fe ff1c 	bl	8000bcc <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9a:	f7fe ff17 	bl	8000bcc <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e177      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dac:	4b9a      	ldr	r3, [pc, #616]	; (8002018 <HAL_RCC_OscConfig+0x630>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x3e6>
 8001dc0:	4b94      	ldr	r3, [pc, #592]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc4:	4b93      	ldr	r3, [pc, #588]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x420>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x408>
 8001dd6:	4b8f      	ldr	r3, [pc, #572]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001dd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dda:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001ddc:	2104      	movs	r1, #4
 8001dde:	430a      	orrs	r2, r1
 8001de0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de2:	4b8c      	ldr	r3, [pc, #560]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001de4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de6:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0x420>
 8001df0:	4b88      	ldr	r3, [pc, #544]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001df2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df4:	4b87      	ldr	r3, [pc, #540]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	438a      	bics	r2, r1
 8001dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dfc:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001dfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e00:	4b84      	ldr	r3, [pc, #528]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e02:	2104      	movs	r1, #4
 8001e04:	438a      	bics	r2, r1
 8001e06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d014      	beq.n	8001e3a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fedc 	bl	8000bcc <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1a:	f7fe fed7 	bl	8000bcc <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a7d      	ldr	r2, [pc, #500]	; (800201c <HAL_RCC_OscConfig+0x634>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e136      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2e:	4b79      	ldr	r3, [pc, #484]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x432>
 8001e38:	e013      	b.n	8001e62 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fec7 	bl	8000bcc <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e42:	e009      	b.n	8001e58 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7fe fec2 	bl	8000bcc <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	4a73      	ldr	r2, [pc, #460]	; (800201c <HAL_RCC_OscConfig+0x634>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e121      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e58:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e62:	231f      	movs	r3, #31
 8001e64:	18fb      	adds	r3, r7, r3
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e6c:	4b69      	ldr	r3, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e70:	4b68      	ldr	r3, [pc, #416]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e72:	496b      	ldr	r1, [pc, #428]	; (8002020 <HAL_RCC_OscConfig+0x638>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d039      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001e90:	2180      	movs	r1, #128	; 0x80
 8001e92:	03c9      	lsls	r1, r1, #15
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7fe fe98 	bl	8000bcc <HAL_GetTick>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea2:	f7fe fe93 	bl	8000bcc <HAL_GetTick>
 8001ea6:	0002      	movs	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0f3      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001eb4:	4b57      	ldr	r3, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4ba>
 8001ec0:	e019      	b.n	8001ef6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001ec8:	4956      	ldr	r1, [pc, #344]	; (8002024 <HAL_RCC_OscConfig+0x63c>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7fe fe7d 	bl	8000bcc <HAL_GetTick>
 8001ed2:	0003      	movs	r3, r0
 8001ed4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed8:	f7fe fe78 	bl	8000bcc <HAL_GetTick>
 8001edc:	0002      	movs	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e0d8      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001eea:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	041b      	lsls	r3, r3, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d100      	bne.n	8001f00 <HAL_RCC_OscConfig+0x518>
 8001efe:	e0cc      	b.n	800209a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f00:	4b44      	ldr	r3, [pc, #272]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2238      	movs	r2, #56	; 0x38
 8001f06:	4013      	ands	r3, r2
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d100      	bne.n	8001f0e <HAL_RCC_OscConfig+0x526>
 8001f0c:	e07b      	b.n	8002006 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d156      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f1c:	4942      	ldr	r1, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0x640>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fe53 	bl	8000bcc <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe fe4e 	bl	8000bcc <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0ae      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	049b      	lsls	r3, r3, #18
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <HAL_RCC_OscConfig+0x644>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f76:	431a      	orrs	r2, r3
 8001f78:	4b26      	ldr	r3, [pc, #152]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7e:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0449      	lsls	r1, r1, #17
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0549      	lsls	r1, r1, #21
 8001f96:	430a      	orrs	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9a:	f7fe fe17 	bl	8000bcc <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe fe12 	bl	8000bcc <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e072      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b17      	ldr	r3, [pc, #92]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	049b      	lsls	r3, r3, #18
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x5bc>
 8001fc2:	e06a      	b.n	800209a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001fca:	4917      	ldr	r1, [pc, #92]	; (8002028 <HAL_RCC_OscConfig+0x640>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fdfc 	bl	8000bcc <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7fe fdf7 	bl	8000bcc <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e057      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	049b      	lsls	r3, r3, #18
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	4b05      	ldr	r3, [pc, #20]	; (8002014 <HAL_RCC_OscConfig+0x62c>)
 8001ffe:	490c      	ldr	r1, [pc, #48]	; (8002030 <HAL_RCC_OscConfig+0x648>)
 8002000:	400a      	ands	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	e049      	b.n	800209a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d112      	bne.n	8002034 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e044      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	00001388 	.word	0x00001388
 8002020:	efffffff 	.word	0xefffffff
 8002024:	ffbfffff 	.word	0xffbfffff
 8002028:	feffffff 	.word	0xfeffffff
 800202c:	11c1808c 	.word	0x11c1808c
 8002030:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x6bc>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2203      	movs	r2, #3
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	429a      	cmp	r2, r3
 8002046:	d126      	bne.n	8002096 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2270      	movs	r2, #112	; 0x70
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d11f      	bne.n	8002096 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	23fe      	movs	r3, #254	; 0xfe
 800205a:	01db      	lsls	r3, r3, #7
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d116      	bne.n	8002096 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	23f8      	movs	r3, #248	; 0xf8
 800206c:	039b      	lsls	r3, r3, #14
 800206e:	401a      	ands	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d10e      	bne.n	8002096 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	23e0      	movs	r3, #224	; 0xe0
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	401a      	ands	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0f5b      	lsrs	r3, r3, #29
 800208c:	075a      	lsls	r2, r3, #29
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d001      	beq.n	800209a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b008      	add	sp, #32
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40021000 	.word	0x40021000

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0e9      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b76      	ldr	r3, [pc, #472]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2207      	movs	r2, #7
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d91e      	bls.n	8002108 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020dc:	f7fe fd76 	bl	8000bcc <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020e4:	e009      	b.n	80020fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7fe fd71 	bl	8000bcc <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	4a6a      	ldr	r2, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e0ca      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020fa:	4b67      	ldr	r3, [pc, #412]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2207      	movs	r2, #7
 8002100:	4013      	ands	r3, r2
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d1ee      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d015      	beq.n	800213e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d006      	beq.n	800212a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	21e0      	movs	r1, #224	; 0xe0
 8002124:	01c9      	lsls	r1, r1, #7
 8002126:	430a      	orrs	r2, r1
 8002128:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002130:	4013      	ands	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	d057      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	029b      	lsls	r3, r3, #10
 8002158:	4013      	ands	r3, r2
 800215a:	d12b      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e097      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d107      	bne.n	8002178 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002168:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	049b      	lsls	r3, r3, #18
 8002170:	4013      	ands	r3, r2
 8002172:	d11f      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e08b      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d107      	bne.n	8002190 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002180:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d113      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e07f      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d106      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002198:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800219a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d108      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e074      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e06d      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b4:	4b3a      	ldr	r3, [pc, #232]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2207      	movs	r2, #7
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	4b37      	ldr	r3, [pc, #220]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fd00 	bl	8000bcc <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7fe fcfb 	bl	8000bcc <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a2f      	ldr	r2, [pc, #188]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e054      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	2238      	movs	r2, #56	; 0x38
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	00db      	lsls	r3, r3, #3
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d1ec      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2207      	movs	r2, #7
 80021fe:	4013      	ands	r3, r2
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	429a      	cmp	r2, r3
 8002204:	d21e      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4393      	bics	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002218:	f7fe fcd8 	bl	8000bcc <HAL_GetTick>
 800221c:	0003      	movs	r3, r0
 800221e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002220:	e009      	b.n	8002236 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7fe fcd3 	bl	8000bcc <HAL_GetTick>
 8002226:	0002      	movs	r2, r0
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_RCC_ClockConfig+0x1f4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e02c      	b.n	8002290 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002236:	4b18      	ldr	r3, [pc, #96]	; (8002298 <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2207      	movs	r2, #7
 800223c:	4013      	ands	r3, r2
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d1ee      	bne.n	8002222 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <HAL_RCC_ClockConfig+0x200>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002262:	f000 f829 	bl	80022b8 <HAL_RCC_GetSysClockFreq>
 8002266:	0001      	movs	r1, r0
 8002268:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_RCC_ClockConfig+0x1f8>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	220f      	movs	r2, #15
 8002270:	401a      	ands	r2, r3
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x204>)
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	58d3      	ldr	r3, [r2, r3]
 8002278:	221f      	movs	r2, #31
 800227a:	4013      	ands	r3, r2
 800227c:	000a      	movs	r2, r1
 800227e:	40da      	lsrs	r2, r3
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x208>)
 8002282:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_ClockConfig+0x20c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0018      	movs	r0, r3
 800228a:	f7fe fc43 	bl	8000b14 <HAL_InitTick>
 800228e:	0003      	movs	r3, r0
}
 8002290:	0018      	movs	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	b004      	add	sp, #16
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40022000 	.word	0x40022000
 800229c:	00001388 	.word	0x00001388
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffff0ff 	.word	0xfffff0ff
 80022a8:	ffff8fff 	.word	0xffff8fff
 80022ac:	080029b8 	.word	0x080029b8
 80022b0:	20000010 	.word	0x20000010
 80022b4:	20000014 	.word	0x20000014

080022b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b3c      	ldr	r3, [pc, #240]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2238      	movs	r2, #56	; 0x38
 80022c4:	4013      	ands	r3, r2
 80022c6:	d10f      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	0adb      	lsrs	r3, r3, #11
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	2201      	movs	r2, #1
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022da:	6839      	ldr	r1, [r7, #0]
 80022dc:	4835      	ldr	r0, [pc, #212]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022de:	f7fd ff11 	bl	8000104 <__udivsi3>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]
 80022e6:	e05d      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b30      	ldr	r3, [pc, #192]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	e054      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fa:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2238      	movs	r2, #56	; 0x38
 8002300:	4013      	ands	r3, r2
 8002302:	2b10      	cmp	r3, #16
 8002304:	d138      	bne.n	8002378 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002306:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2203      	movs	r2, #3
 800230c:	4013      	ands	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	091b      	lsrs	r3, r3, #4
 8002316:	2207      	movs	r2, #7
 8002318:	4013      	ands	r3, r2
 800231a:	3301      	adds	r3, #1
 800231c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	4824      	ldr	r0, [pc, #144]	; (80023b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002328:	f7fd feec 	bl	8000104 <__udivsi3>
 800232c:	0003      	movs	r3, r0
 800232e:	0019      	movs	r1, r3
 8002330:	4b1f      	ldr	r3, [pc, #124]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	227f      	movs	r2, #127	; 0x7f
 8002338:	4013      	ands	r3, r2
 800233a:	434b      	muls	r3, r1
 800233c:	617b      	str	r3, [r7, #20]
        break;
 800233e:	e00d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	481c      	ldr	r0, [pc, #112]	; (80023b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002344:	f7fd fede 	bl	8000104 <__udivsi3>
 8002348:	0003      	movs	r3, r0
 800234a:	0019      	movs	r1, r3
 800234c:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	227f      	movs	r2, #127	; 0x7f
 8002354:	4013      	ands	r3, r2
 8002356:	434b      	muls	r3, r1
 8002358:	617b      	str	r3, [r7, #20]
        break;
 800235a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800235c:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0f5b      	lsrs	r3, r3, #29
 8002362:	2207      	movs	r2, #7
 8002364:	4013      	ands	r3, r2
 8002366:	3301      	adds	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7fd fec9 	bl	8000104 <__udivsi3>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	e015      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2238      	movs	r2, #56	; 0x38
 800237e:	4013      	ands	r3, r2
 8002380:	2b20      	cmp	r3, #32
 8002382:	d103      	bne.n	800238c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2238      	movs	r2, #56	; 0x38
 8002392:	4013      	ands	r3, r2
 8002394:	2b18      	cmp	r3, #24
 8002396:	d103      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002398:	23fa      	movs	r3, #250	; 0xfa
 800239a:	01db      	lsls	r3, r3, #7
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	e001      	b.n	80023a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023a4:	693b      	ldr	r3, [r7, #16]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	007a1200 	.word	0x007a1200

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023c4:	2313      	movs	r3, #19
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023cc:	2312      	movs	r3, #18
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	029b      	lsls	r3, r3, #10
 80023dc:	4013      	ands	r3, r2
 80023de:	d100      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023e0:	e0ad      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e2:	2011      	movs	r0, #17
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	055b      	lsls	r3, r3, #21
 80023f2:	4013      	ands	r3, r2
 80023f4:	d110      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fa:	4b43      	ldr	r3, [pc, #268]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80023fc:	2180      	movs	r1, #128	; 0x80
 80023fe:	0549      	lsls	r1, r1, #21
 8002400:	430a      	orrs	r2, r1
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	055b      	lsls	r3, r3, #21
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	183b      	adds	r3, r7, r0
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002418:	4b3c      	ldr	r3, [pc, #240]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800241e:	2180      	movs	r1, #128	; 0x80
 8002420:	0049      	lsls	r1, r1, #1
 8002422:	430a      	orrs	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002426:	f7fe fbd1 	bl	8000bcc <HAL_GetTick>
 800242a:	0003      	movs	r3, r0
 800242c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800242e:	e00b      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe fbcc 	bl	8000bcc <HAL_GetTick>
 8002434:	0002      	movs	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d904      	bls.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800243e:	2313      	movs	r3, #19
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
        break;
 8002446:	e005      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002448:	4b30      	ldr	r3, [pc, #192]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d0ed      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002454:	2313      	movs	r3, #19
 8002456:	18fb      	adds	r3, r7, r3
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d15e      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800245e:	4b2a      	ldr	r3, [pc, #168]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002462:	23c0      	movs	r3, #192	; 0xc0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4013      	ands	r3, r2
 8002468:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d019      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	429a      	cmp	r2, r3
 8002478:	d014      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800247a:	4b23      	ldr	r3, [pc, #140]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	4a24      	ldr	r2, [pc, #144]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002480:	4013      	ands	r3, r2
 8002482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002484:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	0249      	lsls	r1, r1, #9
 800248e:	430a      	orrs	r2, r1
 8002490:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002494:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002498:	491e      	ldr	r1, [pc, #120]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800249a:	400a      	ands	r2, r1
 800249c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2201      	movs	r2, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d016      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fb8e 	bl	8000bcc <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b4:	e00c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fb89 	bl	8000bcc <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d904      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80024c6:	2313      	movs	r3, #19
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	2203      	movs	r2, #3
 80024cc:	701a      	strb	r2, [r3, #0]
            break;
 80024ce:	e004      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d0:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	2202      	movs	r2, #2
 80024d6:	4013      	ands	r3, r2
 80024d8:	d0ed      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80024da:	2313      	movs	r3, #19
 80024dc:	18fb      	adds	r3, r7, r3
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10a      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	0019      	movs	r1, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80024f4:	430a      	orrs	r2, r1
 80024f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80024f8:	e016      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024fa:	2312      	movs	r3, #18
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2213      	movs	r2, #19
 8002500:	18ba      	adds	r2, r7, r2
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e00f      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	fffffcff 	.word	0xfffffcff
 8002514:	fffeffff 	.word	0xfffeffff
 8002518:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251c:	2312      	movs	r3, #18
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2213      	movs	r2, #19
 8002522:	18ba      	adds	r2, r7, r2
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002528:	2311      	movs	r3, #17
 800252a:	18fb      	adds	r3, r7, r3
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d105      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002532:	4bb6      	ldr	r3, [pc, #728]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002534:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002536:	4bb5      	ldr	r3, [pc, #724]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002538:	49b5      	ldr	r1, [pc, #724]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800253a:	400a      	ands	r2, r1
 800253c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2201      	movs	r2, #1
 8002544:	4013      	ands	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002548:	4bb0      	ldr	r3, [pc, #704]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	2203      	movs	r2, #3
 800254e:	4393      	bics	r3, r2
 8002550:	0019      	movs	r1, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4bad      	ldr	r3, [pc, #692]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002558:	430a      	orrs	r2, r1
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2202      	movs	r2, #2
 8002562:	4013      	ands	r3, r2
 8002564:	d009      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002566:	4ba9      	ldr	r3, [pc, #676]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	220c      	movs	r2, #12
 800256c:	4393      	bics	r3, r2
 800256e:	0019      	movs	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	4ba5      	ldr	r3, [pc, #660]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002576:	430a      	orrs	r2, r1
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2204      	movs	r2, #4
 8002580:	4013      	ands	r3, r2
 8002582:	d009      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002584:	4ba1      	ldr	r3, [pc, #644]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	2230      	movs	r2, #48	; 0x30
 800258a:	4393      	bics	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b9e      	ldr	r3, [pc, #632]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002594:	430a      	orrs	r2, r1
 8002596:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2210      	movs	r2, #16
 800259e:	4013      	ands	r3, r2
 80025a0:	d009      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a2:	4b9a      	ldr	r3, [pc, #616]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	4a9b      	ldr	r2, [pc, #620]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691a      	ldr	r2, [r3, #16]
 80025b0:	4b96      	ldr	r3, [pc, #600]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	015b      	lsls	r3, r3, #5
 80025be:	4013      	ands	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80025c2:	4b92      	ldr	r3, [pc, #584]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	4a94      	ldr	r2, [pc, #592]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025c8:	4013      	ands	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695a      	ldr	r2, [r3, #20]
 80025d0:	4b8e      	ldr	r3, [pc, #568]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4013      	ands	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e2:	4b8a      	ldr	r3, [pc, #552]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	4a8d      	ldr	r2, [pc, #564]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f0:	4b86      	ldr	r3, [pc, #536]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4013      	ands	r3, r2
 8002600:	d009      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002602:	4b82      	ldr	r3, [pc, #520]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4a86      	ldr	r2, [pc, #536]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	4b7e      	ldr	r3, [pc, #504]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002612:	430a      	orrs	r2, r1
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d009      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002620:	4b7a      	ldr	r3, [pc, #488]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	4a7f      	ldr	r2, [pc, #508]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	4b77      	ldr	r3, [pc, #476]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002630:	430a      	orrs	r2, r1
 8002632:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	4013      	ands	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	4a79      	ldr	r2, [pc, #484]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	4b6f      	ldr	r3, [pc, #444]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800264e:	430a      	orrs	r2, r1
 8002650:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	01db      	lsls	r3, r3, #7
 800265a:	4013      	ands	r3, r2
 800265c:	d015      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800265e:	4b6b      	ldr	r3, [pc, #428]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	0899      	lsrs	r1, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266a:	4b68      	ldr	r3, [pc, #416]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800266c:	430a      	orrs	r2, r1
 800266e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	05db      	lsls	r3, r3, #23
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267c:	4b63      	ldr	r3, [pc, #396]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b62      	ldr	r3, [pc, #392]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002682:	2180      	movs	r1, #128	; 0x80
 8002684:	0249      	lsls	r1, r1, #9
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	031b      	lsls	r3, r3, #12
 8002692:	4013      	ands	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800269a:	2240      	movs	r2, #64	; 0x40
 800269c:	4393      	bics	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026a6:	430a      	orrs	r2, r1
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	039b      	lsls	r3, r3, #14
 80026b2:	4013      	ands	r3, r2
 80026b4:	d016      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026b6:	4b55      	ldr	r3, [pc, #340]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80026bc:	4013      	ands	r3, r2
 80026be:	0019      	movs	r1, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026c4:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026c6:	430a      	orrs	r2, r1
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	03db      	lsls	r3, r3, #15
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d106      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	4b4c      	ldr	r3, [pc, #304]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026dc:	2180      	movs	r1, #128	; 0x80
 80026de:	0449      	lsls	r1, r1, #17
 80026e0:	430a      	orrs	r2, r1
 80026e2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	03db      	lsls	r3, r3, #15
 80026ec:	4013      	ands	r3, r2
 80026ee:	d016      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026f0:	4b46      	ldr	r3, [pc, #280]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	4a4e      	ldr	r2, [pc, #312]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026fe:	4b43      	ldr	r3, [pc, #268]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002700:	430a      	orrs	r2, r1
 8002702:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	045b      	lsls	r3, r3, #17
 800270c:	429a      	cmp	r2, r3
 800270e:	d106      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002710:	4b3e      	ldr	r3, [pc, #248]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	0449      	lsls	r1, r1, #17
 800271a:	430a      	orrs	r2, r1
 800271c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4013      	ands	r3, r2
 8002728:	d014      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800272a:	4b38      	ldr	r3, [pc, #224]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	2203      	movs	r2, #3
 8002730:	4393      	bics	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1a      	ldr	r2, [r3, #32]
 8002738:	4b34      	ldr	r3, [pc, #208]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800273a:	430a      	orrs	r2, r1
 800273c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d106      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002746:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800274c:	2180      	movs	r1, #128	; 0x80
 800274e:	0249      	lsls	r1, r1, #9
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2380      	movs	r3, #128	; 0x80
 800275a:	019b      	lsls	r3, r3, #6
 800275c:	4013      	ands	r3, r2
 800275e:	d014      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002760:	4b2a      	ldr	r3, [pc, #168]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	220c      	movs	r2, #12
 8002766:	4393      	bics	r3, r2
 8002768:	0019      	movs	r1, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002770:	430a      	orrs	r2, r1
 8002772:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2b04      	cmp	r3, #4
 800277a:	d106      	bne.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	0249      	lsls	r1, r1, #9
 8002786:	430a      	orrs	r2, r1
 8002788:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	045b      	lsls	r3, r3, #17
 8002792:	4013      	ands	r3, r2
 8002794:	d016      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002796:	4b1d      	ldr	r3, [pc, #116]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a22      	ldr	r2, [pc, #136]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	019b      	lsls	r3, r3, #6
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0449      	lsls	r1, r1, #17
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	049b      	lsls	r3, r3, #18
 80027cc:	4013      	ands	r3, r2
 80027ce:	d016      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d106      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0449      	lsls	r1, r1, #17
 80027fa:	430a      	orrs	r2, r1
 80027fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80027fe:	2312      	movs	r3, #18
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	781b      	ldrb	r3, [r3, #0]
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b006      	add	sp, #24
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000
 8002810:	efffffff 	.word	0xefffffff
 8002814:	fffff3ff 	.word	0xfffff3ff
 8002818:	fffffcff 	.word	0xfffffcff
 800281c:	fff3ffff 	.word	0xfff3ffff
 8002820:	ffcfffff 	.word	0xffcfffff
 8002824:	ffffcfff 	.word	0xffffcfff
 8002828:	ffff3fff 	.word	0xffff3fff
 800282c:	ffbfffff 	.word	0xffbfffff
 8002830:	feffffff 	.word	0xfeffffff

08002834 <__itoa>:
 8002834:	1e93      	subs	r3, r2, #2
 8002836:	b510      	push	{r4, lr}
 8002838:	000c      	movs	r4, r1
 800283a:	2b22      	cmp	r3, #34	; 0x22
 800283c:	d904      	bls.n	8002848 <__itoa+0x14>
 800283e:	2300      	movs	r3, #0
 8002840:	001c      	movs	r4, r3
 8002842:	700b      	strb	r3, [r1, #0]
 8002844:	0020      	movs	r0, r4
 8002846:	bd10      	pop	{r4, pc}
 8002848:	2a0a      	cmp	r2, #10
 800284a:	d109      	bne.n	8002860 <__itoa+0x2c>
 800284c:	2800      	cmp	r0, #0
 800284e:	da07      	bge.n	8002860 <__itoa+0x2c>
 8002850:	232d      	movs	r3, #45	; 0x2d
 8002852:	700b      	strb	r3, [r1, #0]
 8002854:	2101      	movs	r1, #1
 8002856:	4240      	negs	r0, r0
 8002858:	1861      	adds	r1, r4, r1
 800285a:	f000 f807 	bl	800286c <__utoa>
 800285e:	e7f1      	b.n	8002844 <__itoa+0x10>
 8002860:	2100      	movs	r1, #0
 8002862:	e7f9      	b.n	8002858 <__itoa+0x24>

08002864 <itoa>:
 8002864:	b510      	push	{r4, lr}
 8002866:	f7ff ffe5 	bl	8002834 <__itoa>
 800286a:	bd10      	pop	{r4, pc}

0800286c <__utoa>:
 800286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286e:	000c      	movs	r4, r1
 8002870:	0016      	movs	r6, r2
 8002872:	b08d      	sub	sp, #52	; 0x34
 8002874:	2225      	movs	r2, #37	; 0x25
 8002876:	0007      	movs	r7, r0
 8002878:	4915      	ldr	r1, [pc, #84]	; (80028d0 <__utoa+0x64>)
 800287a:	a802      	add	r0, sp, #8
 800287c:	f000 f856 	bl	800292c <memcpy>
 8002880:	1e62      	subs	r2, r4, #1
 8002882:	1eb3      	subs	r3, r6, #2
 8002884:	2500      	movs	r5, #0
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	2b22      	cmp	r3, #34	; 0x22
 800288a:	d904      	bls.n	8002896 <__utoa+0x2a>
 800288c:	7025      	strb	r5, [r4, #0]
 800288e:	002c      	movs	r4, r5
 8002890:	0020      	movs	r0, r4
 8002892:	b00d      	add	sp, #52	; 0x34
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	0038      	movs	r0, r7
 8002898:	0031      	movs	r1, r6
 800289a:	f7fd fcb9 	bl	8000210 <__aeabi_uidivmod>
 800289e:	000b      	movs	r3, r1
 80028a0:	aa02      	add	r2, sp, #8
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	9a01      	ldr	r2, [sp, #4]
 80028a6:	0029      	movs	r1, r5
 80028a8:	3501      	adds	r5, #1
 80028aa:	5553      	strb	r3, [r2, r5]
 80028ac:	003b      	movs	r3, r7
 80028ae:	0007      	movs	r7, r0
 80028b0:	429e      	cmp	r6, r3
 80028b2:	d9f0      	bls.n	8002896 <__utoa+0x2a>
 80028b4:	2300      	movs	r3, #0
 80028b6:	0022      	movs	r2, r4
 80028b8:	5563      	strb	r3, [r4, r5]
 80028ba:	000b      	movs	r3, r1
 80028bc:	1ac8      	subs	r0, r1, r3
 80028be:	4283      	cmp	r3, r0
 80028c0:	dde6      	ble.n	8002890 <__utoa+0x24>
 80028c2:	7810      	ldrb	r0, [r2, #0]
 80028c4:	5ce5      	ldrb	r5, [r4, r3]
 80028c6:	7015      	strb	r5, [r2, #0]
 80028c8:	54e0      	strb	r0, [r4, r3]
 80028ca:	3201      	adds	r2, #1
 80028cc:	3b01      	subs	r3, #1
 80028ce:	e7f5      	b.n	80028bc <__utoa+0x50>
 80028d0:	080029f8 	.word	0x080029f8

080028d4 <memset>:
 80028d4:	0003      	movs	r3, r0
 80028d6:	1882      	adds	r2, r0, r2
 80028d8:	4293      	cmp	r3, r2
 80028da:	d100      	bne.n	80028de <memset+0xa>
 80028dc:	4770      	bx	lr
 80028de:	7019      	strb	r1, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	e7f9      	b.n	80028d8 <memset+0x4>

080028e4 <__libc_init_array>:
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	2600      	movs	r6, #0
 80028e8:	4c0c      	ldr	r4, [pc, #48]	; (800291c <__libc_init_array+0x38>)
 80028ea:	4d0d      	ldr	r5, [pc, #52]	; (8002920 <__libc_init_array+0x3c>)
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	42a6      	cmp	r6, r4
 80028f2:	d109      	bne.n	8002908 <__libc_init_array+0x24>
 80028f4:	2600      	movs	r6, #0
 80028f6:	f000 f823 	bl	8002940 <_init>
 80028fa:	4c0a      	ldr	r4, [pc, #40]	; (8002924 <__libc_init_array+0x40>)
 80028fc:	4d0a      	ldr	r5, [pc, #40]	; (8002928 <__libc_init_array+0x44>)
 80028fe:	1b64      	subs	r4, r4, r5
 8002900:	10a4      	asrs	r4, r4, #2
 8002902:	42a6      	cmp	r6, r4
 8002904:	d105      	bne.n	8002912 <__libc_init_array+0x2e>
 8002906:	bd70      	pop	{r4, r5, r6, pc}
 8002908:	00b3      	lsls	r3, r6, #2
 800290a:	58eb      	ldr	r3, [r5, r3]
 800290c:	4798      	blx	r3
 800290e:	3601      	adds	r6, #1
 8002910:	e7ee      	b.n	80028f0 <__libc_init_array+0xc>
 8002912:	00b3      	lsls	r3, r6, #2
 8002914:	58eb      	ldr	r3, [r5, r3]
 8002916:	4798      	blx	r3
 8002918:	3601      	adds	r6, #1
 800291a:	e7f2      	b.n	8002902 <__libc_init_array+0x1e>
 800291c:	08002a20 	.word	0x08002a20
 8002920:	08002a20 	.word	0x08002a20
 8002924:	08002a24 	.word	0x08002a24
 8002928:	08002a20 	.word	0x08002a20

0800292c <memcpy>:
 800292c:	2300      	movs	r3, #0
 800292e:	b510      	push	{r4, lr}
 8002930:	429a      	cmp	r2, r3
 8002932:	d100      	bne.n	8002936 <memcpy+0xa>
 8002934:	bd10      	pop	{r4, pc}
 8002936:	5ccc      	ldrb	r4, [r1, r3]
 8002938:	54c4      	strb	r4, [r0, r3]
 800293a:	3301      	adds	r3, #1
 800293c:	e7f8      	b.n	8002930 <memcpy+0x4>
	...

08002940 <_init>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr

0800294c <_fini>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr
