
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004af0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c74  08004c74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c7c  08004c7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c7c  08004c7c  00014c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08004c90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08004c90  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fce4  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f9a  00000000  00000000  0002fd5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b3b  00000000  00000000  00032b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b8c2  00000000  00000000  0003366b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110e7  00000000  00000000  0004ef2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7772  00000000  00000000  00060014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035a0  00000000  00000000  00117788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004b94 	.word	0x08004b94

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004b94 	.word	0x08004b94

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f824 	bl	800046c <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_d2uiz>:
 8000430:	b570      	push	{r4, r5, r6, lr}
 8000432:	2200      	movs	r2, #0
 8000434:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <__aeabi_d2uiz+0x38>)
 8000436:	0004      	movs	r4, r0
 8000438:	000d      	movs	r5, r1
 800043a:	f001 faa5 	bl	8001988 <__aeabi_dcmpge>
 800043e:	2800      	cmp	r0, #0
 8000440:	d104      	bne.n	800044c <__aeabi_d2uiz+0x1c>
 8000442:	0020      	movs	r0, r4
 8000444:	0029      	movs	r1, r5
 8000446:	f001 fa0f 	bl	8001868 <__aeabi_d2iz>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <__aeabi_d2uiz+0x38>)
 800044e:	2200      	movs	r2, #0
 8000450:	0020      	movs	r0, r4
 8000452:	0029      	movs	r1, r5
 8000454:	f000 fe86 	bl	8001164 <__aeabi_dsub>
 8000458:	f001 fa06 	bl	8001868 <__aeabi_d2iz>
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	061b      	lsls	r3, r3, #24
 8000460:	469c      	mov	ip, r3
 8000462:	4460      	add	r0, ip
 8000464:	e7f1      	b.n	800044a <__aeabi_d2uiz+0x1a>
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	41e00000 	.word	0x41e00000

0800046c <__udivmoddi4>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	4657      	mov	r7, sl
 8000470:	464e      	mov	r6, r9
 8000472:	4645      	mov	r5, r8
 8000474:	46de      	mov	lr, fp
 8000476:	b5e0      	push	{r5, r6, r7, lr}
 8000478:	0004      	movs	r4, r0
 800047a:	000d      	movs	r5, r1
 800047c:	4692      	mov	sl, r2
 800047e:	4699      	mov	r9, r3
 8000480:	b083      	sub	sp, #12
 8000482:	428b      	cmp	r3, r1
 8000484:	d830      	bhi.n	80004e8 <__udivmoddi4+0x7c>
 8000486:	d02d      	beq.n	80004e4 <__udivmoddi4+0x78>
 8000488:	4649      	mov	r1, r9
 800048a:	4650      	mov	r0, sl
 800048c:	f001 faa4 	bl	80019d8 <__clzdi2>
 8000490:	0029      	movs	r1, r5
 8000492:	0006      	movs	r6, r0
 8000494:	0020      	movs	r0, r4
 8000496:	f001 fa9f 	bl	80019d8 <__clzdi2>
 800049a:	1a33      	subs	r3, r6, r0
 800049c:	4698      	mov	r8, r3
 800049e:	3b20      	subs	r3, #32
 80004a0:	d434      	bmi.n	800050c <__udivmoddi4+0xa0>
 80004a2:	469b      	mov	fp, r3
 80004a4:	4653      	mov	r3, sl
 80004a6:	465a      	mov	r2, fp
 80004a8:	4093      	lsls	r3, r2
 80004aa:	4642      	mov	r2, r8
 80004ac:	001f      	movs	r7, r3
 80004ae:	4653      	mov	r3, sl
 80004b0:	4093      	lsls	r3, r2
 80004b2:	001e      	movs	r6, r3
 80004b4:	42af      	cmp	r7, r5
 80004b6:	d83b      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80004b8:	42af      	cmp	r7, r5
 80004ba:	d100      	bne.n	80004be <__udivmoddi4+0x52>
 80004bc:	e079      	b.n	80005b2 <__udivmoddi4+0x146>
 80004be:	465b      	mov	r3, fp
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	41bd      	sbcs	r5, r7
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	da00      	bge.n	80004ca <__udivmoddi4+0x5e>
 80004c8:	e076      	b.n	80005b8 <__udivmoddi4+0x14c>
 80004ca:	2200      	movs	r2, #0
 80004cc:	2300      	movs	r3, #0
 80004ce:	9200      	str	r2, [sp, #0]
 80004d0:	9301      	str	r3, [sp, #4]
 80004d2:	2301      	movs	r3, #1
 80004d4:	465a      	mov	r2, fp
 80004d6:	4093      	lsls	r3, r2
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2301      	movs	r3, #1
 80004dc:	4642      	mov	r2, r8
 80004de:	4093      	lsls	r3, r2
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	e029      	b.n	8000538 <__udivmoddi4+0xcc>
 80004e4:	4282      	cmp	r2, r0
 80004e6:	d9cf      	bls.n	8000488 <__udivmoddi4+0x1c>
 80004e8:	2200      	movs	r2, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	9200      	str	r2, [sp, #0]
 80004ee:	9301      	str	r3, [sp, #4]
 80004f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <__udivmoddi4+0x8e>
 80004f6:	601c      	str	r4, [r3, #0]
 80004f8:	605d      	str	r5, [r3, #4]
 80004fa:	9800      	ldr	r0, [sp, #0]
 80004fc:	9901      	ldr	r1, [sp, #4]
 80004fe:	b003      	add	sp, #12
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	46bb      	mov	fp, r7
 8000504:	46b2      	mov	sl, r6
 8000506:	46a9      	mov	r9, r5
 8000508:	46a0      	mov	r8, r4
 800050a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800050c:	4642      	mov	r2, r8
 800050e:	469b      	mov	fp, r3
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	4652      	mov	r2, sl
 8000516:	40da      	lsrs	r2, r3
 8000518:	4641      	mov	r1, r8
 800051a:	0013      	movs	r3, r2
 800051c:	464a      	mov	r2, r9
 800051e:	408a      	lsls	r2, r1
 8000520:	0017      	movs	r7, r2
 8000522:	4642      	mov	r2, r8
 8000524:	431f      	orrs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d9c3      	bls.n	80004b8 <__udivmoddi4+0x4c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	4643      	mov	r3, r8
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0d8      	beq.n	80004f0 <__udivmoddi4+0x84>
 800053e:	07fb      	lsls	r3, r7, #31
 8000540:	0872      	lsrs	r2, r6, #1
 8000542:	431a      	orrs	r2, r3
 8000544:	4646      	mov	r6, r8
 8000546:	087b      	lsrs	r3, r7, #1
 8000548:	e00e      	b.n	8000568 <__udivmoddi4+0xfc>
 800054a:	42ab      	cmp	r3, r5
 800054c:	d101      	bne.n	8000552 <__udivmoddi4+0xe6>
 800054e:	42a2      	cmp	r2, r4
 8000550:	d80c      	bhi.n	800056c <__udivmoddi4+0x100>
 8000552:	1aa4      	subs	r4, r4, r2
 8000554:	419d      	sbcs	r5, r3
 8000556:	2001      	movs	r0, #1
 8000558:	1924      	adds	r4, r4, r4
 800055a:	416d      	adcs	r5, r5
 800055c:	2100      	movs	r1, #0
 800055e:	3e01      	subs	r6, #1
 8000560:	1824      	adds	r4, r4, r0
 8000562:	414d      	adcs	r5, r1
 8000564:	2e00      	cmp	r6, #0
 8000566:	d006      	beq.n	8000576 <__udivmoddi4+0x10a>
 8000568:	42ab      	cmp	r3, r5
 800056a:	d9ee      	bls.n	800054a <__udivmoddi4+0xde>
 800056c:	3e01      	subs	r6, #1
 800056e:	1924      	adds	r4, r4, r4
 8000570:	416d      	adcs	r5, r5
 8000572:	2e00      	cmp	r6, #0
 8000574:	d1f8      	bne.n	8000568 <__udivmoddi4+0xfc>
 8000576:	9800      	ldr	r0, [sp, #0]
 8000578:	9901      	ldr	r1, [sp, #4]
 800057a:	465b      	mov	r3, fp
 800057c:	1900      	adds	r0, r0, r4
 800057e:	4169      	adcs	r1, r5
 8000580:	2b00      	cmp	r3, #0
 8000582:	db24      	blt.n	80005ce <__udivmoddi4+0x162>
 8000584:	002b      	movs	r3, r5
 8000586:	465a      	mov	r2, fp
 8000588:	4644      	mov	r4, r8
 800058a:	40d3      	lsrs	r3, r2
 800058c:	002a      	movs	r2, r5
 800058e:	40e2      	lsrs	r2, r4
 8000590:	001c      	movs	r4, r3
 8000592:	465b      	mov	r3, fp
 8000594:	0015      	movs	r5, r2
 8000596:	2b00      	cmp	r3, #0
 8000598:	db2a      	blt.n	80005f0 <__udivmoddi4+0x184>
 800059a:	0026      	movs	r6, r4
 800059c:	409e      	lsls	r6, r3
 800059e:	0033      	movs	r3, r6
 80005a0:	0026      	movs	r6, r4
 80005a2:	4647      	mov	r7, r8
 80005a4:	40be      	lsls	r6, r7
 80005a6:	0032      	movs	r2, r6
 80005a8:	1a80      	subs	r0, r0, r2
 80005aa:	4199      	sbcs	r1, r3
 80005ac:	9000      	str	r0, [sp, #0]
 80005ae:	9101      	str	r1, [sp, #4]
 80005b0:	e79e      	b.n	80004f0 <__udivmoddi4+0x84>
 80005b2:	42a3      	cmp	r3, r4
 80005b4:	d8bc      	bhi.n	8000530 <__udivmoddi4+0xc4>
 80005b6:	e782      	b.n	80004be <__udivmoddi4+0x52>
 80005b8:	4642      	mov	r2, r8
 80005ba:	2320      	movs	r3, #32
 80005bc:	2100      	movs	r1, #0
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	9100      	str	r1, [sp, #0]
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2201      	movs	r2, #1
 80005c8:	40da      	lsrs	r2, r3
 80005ca:	9201      	str	r2, [sp, #4]
 80005cc:	e785      	b.n	80004da <__udivmoddi4+0x6e>
 80005ce:	4642      	mov	r2, r8
 80005d0:	2320      	movs	r3, #32
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	4646      	mov	r6, r8
 80005d8:	409a      	lsls	r2, r3
 80005da:	0023      	movs	r3, r4
 80005dc:	40f3      	lsrs	r3, r6
 80005de:	4644      	mov	r4, r8
 80005e0:	4313      	orrs	r3, r2
 80005e2:	002a      	movs	r2, r5
 80005e4:	40e2      	lsrs	r2, r4
 80005e6:	001c      	movs	r4, r3
 80005e8:	465b      	mov	r3, fp
 80005ea:	0015      	movs	r5, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	dad4      	bge.n	800059a <__udivmoddi4+0x12e>
 80005f0:	4642      	mov	r2, r8
 80005f2:	002f      	movs	r7, r5
 80005f4:	2320      	movs	r3, #32
 80005f6:	0026      	movs	r6, r4
 80005f8:	4097      	lsls	r7, r2
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	40de      	lsrs	r6, r3
 80005fe:	003b      	movs	r3, r7
 8000600:	4333      	orrs	r3, r6
 8000602:	e7cd      	b.n	80005a0 <__udivmoddi4+0x134>

08000604 <__aeabi_ddiv>:
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	4657      	mov	r7, sl
 8000608:	464e      	mov	r6, r9
 800060a:	4645      	mov	r5, r8
 800060c:	46de      	mov	lr, fp
 800060e:	b5e0      	push	{r5, r6, r7, lr}
 8000610:	030c      	lsls	r4, r1, #12
 8000612:	001f      	movs	r7, r3
 8000614:	004b      	lsls	r3, r1, #1
 8000616:	4681      	mov	r9, r0
 8000618:	4692      	mov	sl, r2
 800061a:	0005      	movs	r5, r0
 800061c:	b085      	sub	sp, #20
 800061e:	0b24      	lsrs	r4, r4, #12
 8000620:	0d5b      	lsrs	r3, r3, #21
 8000622:	0fce      	lsrs	r6, r1, #31
 8000624:	2b00      	cmp	r3, #0
 8000626:	d100      	bne.n	800062a <__aeabi_ddiv+0x26>
 8000628:	e152      	b.n	80008d0 <__aeabi_ddiv+0x2cc>
 800062a:	4ad2      	ldr	r2, [pc, #840]	; (8000974 <__aeabi_ddiv+0x370>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d100      	bne.n	8000632 <__aeabi_ddiv+0x2e>
 8000630:	e16e      	b.n	8000910 <__aeabi_ddiv+0x30c>
 8000632:	0f42      	lsrs	r2, r0, #29
 8000634:	00e4      	lsls	r4, r4, #3
 8000636:	4314      	orrs	r4, r2
 8000638:	2280      	movs	r2, #128	; 0x80
 800063a:	0412      	lsls	r2, r2, #16
 800063c:	4322      	orrs	r2, r4
 800063e:	4690      	mov	r8, r2
 8000640:	4acd      	ldr	r2, [pc, #820]	; (8000978 <__aeabi_ddiv+0x374>)
 8000642:	00c5      	lsls	r5, r0, #3
 8000644:	4693      	mov	fp, r2
 8000646:	449b      	add	fp, r3
 8000648:	2300      	movs	r3, #0
 800064a:	4699      	mov	r9, r3
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	033c      	lsls	r4, r7, #12
 8000650:	007b      	lsls	r3, r7, #1
 8000652:	4650      	mov	r0, sl
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	0d5b      	lsrs	r3, r3, #21
 8000658:	0fff      	lsrs	r7, r7, #31
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_ddiv+0x5c>
 800065e:	e11a      	b.n	8000896 <__aeabi_ddiv+0x292>
 8000660:	4ac4      	ldr	r2, [pc, #784]	; (8000974 <__aeabi_ddiv+0x370>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d100      	bne.n	8000668 <__aeabi_ddiv+0x64>
 8000666:	e15e      	b.n	8000926 <__aeabi_ddiv+0x322>
 8000668:	0f42      	lsrs	r2, r0, #29
 800066a:	00e4      	lsls	r4, r4, #3
 800066c:	4322      	orrs	r2, r4
 800066e:	2480      	movs	r4, #128	; 0x80
 8000670:	0424      	lsls	r4, r4, #16
 8000672:	4314      	orrs	r4, r2
 8000674:	4ac0      	ldr	r2, [pc, #768]	; (8000978 <__aeabi_ddiv+0x374>)
 8000676:	00c1      	lsls	r1, r0, #3
 8000678:	4694      	mov	ip, r2
 800067a:	465a      	mov	r2, fp
 800067c:	4463      	add	r3, ip
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	469b      	mov	fp, r3
 8000682:	2000      	movs	r0, #0
 8000684:	0033      	movs	r3, r6
 8000686:	407b      	eors	r3, r7
 8000688:	469a      	mov	sl, r3
 800068a:	464b      	mov	r3, r9
 800068c:	2b0f      	cmp	r3, #15
 800068e:	d827      	bhi.n	80006e0 <__aeabi_ddiv+0xdc>
 8000690:	4aba      	ldr	r2, [pc, #744]	; (800097c <__aeabi_ddiv+0x378>)
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	58d3      	ldr	r3, [r2, r3]
 8000696:	469f      	mov	pc, r3
 8000698:	46b2      	mov	sl, r6
 800069a:	9b00      	ldr	r3, [sp, #0]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d016      	beq.n	80006ce <__aeabi_ddiv+0xca>
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_ddiv+0xa2>
 80006a4:	e287      	b.n	8000bb6 <__aeabi_ddiv+0x5b2>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d000      	beq.n	80006ac <__aeabi_ddiv+0xa8>
 80006aa:	e0d5      	b.n	8000858 <__aeabi_ddiv+0x254>
 80006ac:	2300      	movs	r3, #0
 80006ae:	2200      	movs	r2, #0
 80006b0:	2500      	movs	r5, #0
 80006b2:	051b      	lsls	r3, r3, #20
 80006b4:	4313      	orrs	r3, r2
 80006b6:	4652      	mov	r2, sl
 80006b8:	07d2      	lsls	r2, r2, #31
 80006ba:	4313      	orrs	r3, r2
 80006bc:	0028      	movs	r0, r5
 80006be:	0019      	movs	r1, r3
 80006c0:	b005      	add	sp, #20
 80006c2:	bcf0      	pop	{r4, r5, r6, r7}
 80006c4:	46bb      	mov	fp, r7
 80006c6:	46b2      	mov	sl, r6
 80006c8:	46a9      	mov	r9, r5
 80006ca:	46a0      	mov	r8, r4
 80006cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ce:	2200      	movs	r2, #0
 80006d0:	2500      	movs	r5, #0
 80006d2:	4ba8      	ldr	r3, [pc, #672]	; (8000974 <__aeabi_ddiv+0x370>)
 80006d4:	e7ed      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80006d6:	46ba      	mov	sl, r7
 80006d8:	46a0      	mov	r8, r4
 80006da:	000d      	movs	r5, r1
 80006dc:	9000      	str	r0, [sp, #0]
 80006de:	e7dc      	b.n	800069a <__aeabi_ddiv+0x96>
 80006e0:	4544      	cmp	r4, r8
 80006e2:	d200      	bcs.n	80006e6 <__aeabi_ddiv+0xe2>
 80006e4:	e1c4      	b.n	8000a70 <__aeabi_ddiv+0x46c>
 80006e6:	d100      	bne.n	80006ea <__aeabi_ddiv+0xe6>
 80006e8:	e1bf      	b.n	8000a6a <__aeabi_ddiv+0x466>
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	469c      	mov	ip, r3
 80006f0:	002e      	movs	r6, r5
 80006f2:	4640      	mov	r0, r8
 80006f4:	2500      	movs	r5, #0
 80006f6:	44e3      	add	fp, ip
 80006f8:	0223      	lsls	r3, r4, #8
 80006fa:	0e0c      	lsrs	r4, r1, #24
 80006fc:	431c      	orrs	r4, r3
 80006fe:	0c1b      	lsrs	r3, r3, #16
 8000700:	4699      	mov	r9, r3
 8000702:	0423      	lsls	r3, r4, #16
 8000704:	020a      	lsls	r2, r1, #8
 8000706:	0c1f      	lsrs	r7, r3, #16
 8000708:	4649      	mov	r1, r9
 800070a:	9200      	str	r2, [sp, #0]
 800070c:	9701      	str	r7, [sp, #4]
 800070e:	f7ff fd7f 	bl	8000210 <__aeabi_uidivmod>
 8000712:	0002      	movs	r2, r0
 8000714:	437a      	muls	r2, r7
 8000716:	040b      	lsls	r3, r1, #16
 8000718:	0c31      	lsrs	r1, r6, #16
 800071a:	4680      	mov	r8, r0
 800071c:	4319      	orrs	r1, r3
 800071e:	428a      	cmp	r2, r1
 8000720:	d907      	bls.n	8000732 <__aeabi_ddiv+0x12e>
 8000722:	2301      	movs	r3, #1
 8000724:	425b      	negs	r3, r3
 8000726:	469c      	mov	ip, r3
 8000728:	1909      	adds	r1, r1, r4
 800072a:	44e0      	add	r8, ip
 800072c:	428c      	cmp	r4, r1
 800072e:	d800      	bhi.n	8000732 <__aeabi_ddiv+0x12e>
 8000730:	e201      	b.n	8000b36 <__aeabi_ddiv+0x532>
 8000732:	1a88      	subs	r0, r1, r2
 8000734:	4649      	mov	r1, r9
 8000736:	f7ff fd6b 	bl	8000210 <__aeabi_uidivmod>
 800073a:	9a01      	ldr	r2, [sp, #4]
 800073c:	0436      	lsls	r6, r6, #16
 800073e:	4342      	muls	r2, r0
 8000740:	0409      	lsls	r1, r1, #16
 8000742:	0c36      	lsrs	r6, r6, #16
 8000744:	0003      	movs	r3, r0
 8000746:	430e      	orrs	r6, r1
 8000748:	42b2      	cmp	r2, r6
 800074a:	d904      	bls.n	8000756 <__aeabi_ddiv+0x152>
 800074c:	1936      	adds	r6, r6, r4
 800074e:	3b01      	subs	r3, #1
 8000750:	42b4      	cmp	r4, r6
 8000752:	d800      	bhi.n	8000756 <__aeabi_ddiv+0x152>
 8000754:	e1e9      	b.n	8000b2a <__aeabi_ddiv+0x526>
 8000756:	1ab0      	subs	r0, r6, r2
 8000758:	4642      	mov	r2, r8
 800075a:	9e00      	ldr	r6, [sp, #0]
 800075c:	0412      	lsls	r2, r2, #16
 800075e:	431a      	orrs	r2, r3
 8000760:	0c33      	lsrs	r3, r6, #16
 8000762:	001f      	movs	r7, r3
 8000764:	0c11      	lsrs	r1, r2, #16
 8000766:	4690      	mov	r8, r2
 8000768:	9302      	str	r3, [sp, #8]
 800076a:	0413      	lsls	r3, r2, #16
 800076c:	0432      	lsls	r2, r6, #16
 800076e:	0c16      	lsrs	r6, r2, #16
 8000770:	0032      	movs	r2, r6
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	435a      	muls	r2, r3
 8000776:	9603      	str	r6, [sp, #12]
 8000778:	437b      	muls	r3, r7
 800077a:	434e      	muls	r6, r1
 800077c:	4379      	muls	r1, r7
 800077e:	0c17      	lsrs	r7, r2, #16
 8000780:	46bc      	mov	ip, r7
 8000782:	199b      	adds	r3, r3, r6
 8000784:	4463      	add	r3, ip
 8000786:	429e      	cmp	r6, r3
 8000788:	d903      	bls.n	8000792 <__aeabi_ddiv+0x18e>
 800078a:	2680      	movs	r6, #128	; 0x80
 800078c:	0276      	lsls	r6, r6, #9
 800078e:	46b4      	mov	ip, r6
 8000790:	4461      	add	r1, ip
 8000792:	0c1e      	lsrs	r6, r3, #16
 8000794:	1871      	adds	r1, r6, r1
 8000796:	0416      	lsls	r6, r2, #16
 8000798:	041b      	lsls	r3, r3, #16
 800079a:	0c36      	lsrs	r6, r6, #16
 800079c:	199e      	adds	r6, r3, r6
 800079e:	4288      	cmp	r0, r1
 80007a0:	d302      	bcc.n	80007a8 <__aeabi_ddiv+0x1a4>
 80007a2:	d112      	bne.n	80007ca <__aeabi_ddiv+0x1c6>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d210      	bcs.n	80007ca <__aeabi_ddiv+0x1c6>
 80007a8:	4643      	mov	r3, r8
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	9b00      	ldr	r3, [sp, #0]
 80007ae:	469c      	mov	ip, r3
 80007b0:	4465      	add	r5, ip
 80007b2:	001f      	movs	r7, r3
 80007b4:	429d      	cmp	r5, r3
 80007b6:	419b      	sbcs	r3, r3
 80007b8:	425b      	negs	r3, r3
 80007ba:	191b      	adds	r3, r3, r4
 80007bc:	18c0      	adds	r0, r0, r3
 80007be:	4284      	cmp	r4, r0
 80007c0:	d200      	bcs.n	80007c4 <__aeabi_ddiv+0x1c0>
 80007c2:	e19e      	b.n	8000b02 <__aeabi_ddiv+0x4fe>
 80007c4:	d100      	bne.n	80007c8 <__aeabi_ddiv+0x1c4>
 80007c6:	e199      	b.n	8000afc <__aeabi_ddiv+0x4f8>
 80007c8:	4690      	mov	r8, r2
 80007ca:	1bae      	subs	r6, r5, r6
 80007cc:	42b5      	cmp	r5, r6
 80007ce:	41ad      	sbcs	r5, r5
 80007d0:	1a40      	subs	r0, r0, r1
 80007d2:	426d      	negs	r5, r5
 80007d4:	1b40      	subs	r0, r0, r5
 80007d6:	4284      	cmp	r4, r0
 80007d8:	d100      	bne.n	80007dc <__aeabi_ddiv+0x1d8>
 80007da:	e1d2      	b.n	8000b82 <__aeabi_ddiv+0x57e>
 80007dc:	4649      	mov	r1, r9
 80007de:	f7ff fd17 	bl	8000210 <__aeabi_uidivmod>
 80007e2:	9a01      	ldr	r2, [sp, #4]
 80007e4:	040b      	lsls	r3, r1, #16
 80007e6:	4342      	muls	r2, r0
 80007e8:	0c31      	lsrs	r1, r6, #16
 80007ea:	0005      	movs	r5, r0
 80007ec:	4319      	orrs	r1, r3
 80007ee:	428a      	cmp	r2, r1
 80007f0:	d900      	bls.n	80007f4 <__aeabi_ddiv+0x1f0>
 80007f2:	e16c      	b.n	8000ace <__aeabi_ddiv+0x4ca>
 80007f4:	1a88      	subs	r0, r1, r2
 80007f6:	4649      	mov	r1, r9
 80007f8:	f7ff fd0a 	bl	8000210 <__aeabi_uidivmod>
 80007fc:	9a01      	ldr	r2, [sp, #4]
 80007fe:	0436      	lsls	r6, r6, #16
 8000800:	4342      	muls	r2, r0
 8000802:	0409      	lsls	r1, r1, #16
 8000804:	0c36      	lsrs	r6, r6, #16
 8000806:	0003      	movs	r3, r0
 8000808:	430e      	orrs	r6, r1
 800080a:	42b2      	cmp	r2, r6
 800080c:	d900      	bls.n	8000810 <__aeabi_ddiv+0x20c>
 800080e:	e153      	b.n	8000ab8 <__aeabi_ddiv+0x4b4>
 8000810:	9803      	ldr	r0, [sp, #12]
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	0002      	movs	r2, r0
 8000816:	042d      	lsls	r5, r5, #16
 8000818:	431d      	orrs	r5, r3
 800081a:	9f02      	ldr	r7, [sp, #8]
 800081c:	042b      	lsls	r3, r5, #16
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	435a      	muls	r2, r3
 8000822:	437b      	muls	r3, r7
 8000824:	469c      	mov	ip, r3
 8000826:	0c29      	lsrs	r1, r5, #16
 8000828:	4348      	muls	r0, r1
 800082a:	0c13      	lsrs	r3, r2, #16
 800082c:	4484      	add	ip, r0
 800082e:	4463      	add	r3, ip
 8000830:	4379      	muls	r1, r7
 8000832:	4298      	cmp	r0, r3
 8000834:	d903      	bls.n	800083e <__aeabi_ddiv+0x23a>
 8000836:	2080      	movs	r0, #128	; 0x80
 8000838:	0240      	lsls	r0, r0, #9
 800083a:	4684      	mov	ip, r0
 800083c:	4461      	add	r1, ip
 800083e:	0c18      	lsrs	r0, r3, #16
 8000840:	0412      	lsls	r2, r2, #16
 8000842:	041b      	lsls	r3, r3, #16
 8000844:	0c12      	lsrs	r2, r2, #16
 8000846:	1840      	adds	r0, r0, r1
 8000848:	189b      	adds	r3, r3, r2
 800084a:	4286      	cmp	r6, r0
 800084c:	d200      	bcs.n	8000850 <__aeabi_ddiv+0x24c>
 800084e:	e100      	b.n	8000a52 <__aeabi_ddiv+0x44e>
 8000850:	d100      	bne.n	8000854 <__aeabi_ddiv+0x250>
 8000852:	e0fb      	b.n	8000a4c <__aeabi_ddiv+0x448>
 8000854:	2301      	movs	r3, #1
 8000856:	431d      	orrs	r5, r3
 8000858:	4b49      	ldr	r3, [pc, #292]	; (8000980 <__aeabi_ddiv+0x37c>)
 800085a:	445b      	add	r3, fp
 800085c:	2b00      	cmp	r3, #0
 800085e:	dc00      	bgt.n	8000862 <__aeabi_ddiv+0x25e>
 8000860:	e0aa      	b.n	80009b8 <__aeabi_ddiv+0x3b4>
 8000862:	076a      	lsls	r2, r5, #29
 8000864:	d000      	beq.n	8000868 <__aeabi_ddiv+0x264>
 8000866:	e13d      	b.n	8000ae4 <__aeabi_ddiv+0x4e0>
 8000868:	08e9      	lsrs	r1, r5, #3
 800086a:	4642      	mov	r2, r8
 800086c:	01d2      	lsls	r2, r2, #7
 800086e:	d506      	bpl.n	800087e <__aeabi_ddiv+0x27a>
 8000870:	4642      	mov	r2, r8
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <__aeabi_ddiv+0x380>)
 8000874:	401a      	ands	r2, r3
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	4690      	mov	r8, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	445b      	add	r3, fp
 800087e:	4a42      	ldr	r2, [pc, #264]	; (8000988 <__aeabi_ddiv+0x384>)
 8000880:	4293      	cmp	r3, r2
 8000882:	dd00      	ble.n	8000886 <__aeabi_ddiv+0x282>
 8000884:	e723      	b.n	80006ce <__aeabi_ddiv+0xca>
 8000886:	4642      	mov	r2, r8
 8000888:	055b      	lsls	r3, r3, #21
 800088a:	0755      	lsls	r5, r2, #29
 800088c:	0252      	lsls	r2, r2, #9
 800088e:	430d      	orrs	r5, r1
 8000890:	0b12      	lsrs	r2, r2, #12
 8000892:	0d5b      	lsrs	r3, r3, #21
 8000894:	e70d      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000896:	4651      	mov	r1, sl
 8000898:	4321      	orrs	r1, r4
 800089a:	d100      	bne.n	800089e <__aeabi_ddiv+0x29a>
 800089c:	e07c      	b.n	8000998 <__aeabi_ddiv+0x394>
 800089e:	2c00      	cmp	r4, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_ddiv+0x2a0>
 80008a2:	e0fb      	b.n	8000a9c <__aeabi_ddiv+0x498>
 80008a4:	0020      	movs	r0, r4
 80008a6:	f001 f879 	bl	800199c <__clzsi2>
 80008aa:	0002      	movs	r2, r0
 80008ac:	3a0b      	subs	r2, #11
 80008ae:	231d      	movs	r3, #29
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	4652      	mov	r2, sl
 80008b4:	0001      	movs	r1, r0
 80008b6:	40da      	lsrs	r2, r3
 80008b8:	4653      	mov	r3, sl
 80008ba:	3908      	subs	r1, #8
 80008bc:	408b      	lsls	r3, r1
 80008be:	408c      	lsls	r4, r1
 80008c0:	0019      	movs	r1, r3
 80008c2:	4314      	orrs	r4, r2
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <__aeabi_ddiv+0x388>)
 80008c6:	4458      	add	r0, fp
 80008c8:	469b      	mov	fp, r3
 80008ca:	4483      	add	fp, r0
 80008cc:	2000      	movs	r0, #0
 80008ce:	e6d9      	b.n	8000684 <__aeabi_ddiv+0x80>
 80008d0:	0003      	movs	r3, r0
 80008d2:	4323      	orrs	r3, r4
 80008d4:	4698      	mov	r8, r3
 80008d6:	d044      	beq.n	8000962 <__aeabi_ddiv+0x35e>
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d100      	bne.n	80008de <__aeabi_ddiv+0x2da>
 80008dc:	e0cf      	b.n	8000a7e <__aeabi_ddiv+0x47a>
 80008de:	0020      	movs	r0, r4
 80008e0:	f001 f85c 	bl	800199c <__clzsi2>
 80008e4:	0001      	movs	r1, r0
 80008e6:	0002      	movs	r2, r0
 80008e8:	390b      	subs	r1, #11
 80008ea:	231d      	movs	r3, #29
 80008ec:	1a5b      	subs	r3, r3, r1
 80008ee:	4649      	mov	r1, r9
 80008f0:	0010      	movs	r0, r2
 80008f2:	40d9      	lsrs	r1, r3
 80008f4:	3808      	subs	r0, #8
 80008f6:	4084      	lsls	r4, r0
 80008f8:	000b      	movs	r3, r1
 80008fa:	464d      	mov	r5, r9
 80008fc:	4323      	orrs	r3, r4
 80008fe:	4698      	mov	r8, r3
 8000900:	4085      	lsls	r5, r0
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <__aeabi_ddiv+0x38c>)
 8000904:	1a9b      	subs	r3, r3, r2
 8000906:	469b      	mov	fp, r3
 8000908:	2300      	movs	r3, #0
 800090a:	4699      	mov	r9, r3
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	e69e      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000910:	0002      	movs	r2, r0
 8000912:	4322      	orrs	r2, r4
 8000914:	4690      	mov	r8, r2
 8000916:	d11d      	bne.n	8000954 <__aeabi_ddiv+0x350>
 8000918:	2208      	movs	r2, #8
 800091a:	469b      	mov	fp, r3
 800091c:	2302      	movs	r3, #2
 800091e:	2500      	movs	r5, #0
 8000920:	4691      	mov	r9, r2
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	e693      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000926:	4651      	mov	r1, sl
 8000928:	4321      	orrs	r1, r4
 800092a:	d109      	bne.n	8000940 <__aeabi_ddiv+0x33c>
 800092c:	2302      	movs	r3, #2
 800092e:	464a      	mov	r2, r9
 8000930:	431a      	orrs	r2, r3
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <__aeabi_ddiv+0x390>)
 8000934:	4691      	mov	r9, r2
 8000936:	469c      	mov	ip, r3
 8000938:	2400      	movs	r4, #0
 800093a:	2002      	movs	r0, #2
 800093c:	44e3      	add	fp, ip
 800093e:	e6a1      	b.n	8000684 <__aeabi_ddiv+0x80>
 8000940:	2303      	movs	r3, #3
 8000942:	464a      	mov	r2, r9
 8000944:	431a      	orrs	r2, r3
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <__aeabi_ddiv+0x390>)
 8000948:	4691      	mov	r9, r2
 800094a:	469c      	mov	ip, r3
 800094c:	4651      	mov	r1, sl
 800094e:	2003      	movs	r0, #3
 8000950:	44e3      	add	fp, ip
 8000952:	e697      	b.n	8000684 <__aeabi_ddiv+0x80>
 8000954:	220c      	movs	r2, #12
 8000956:	469b      	mov	fp, r3
 8000958:	2303      	movs	r3, #3
 800095a:	46a0      	mov	r8, r4
 800095c:	4691      	mov	r9, r2
 800095e:	9300      	str	r3, [sp, #0]
 8000960:	e675      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000962:	2304      	movs	r3, #4
 8000964:	4699      	mov	r9, r3
 8000966:	2300      	movs	r3, #0
 8000968:	469b      	mov	fp, r3
 800096a:	3301      	adds	r3, #1
 800096c:	2500      	movs	r5, #0
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	e66d      	b.n	800064e <__aeabi_ddiv+0x4a>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	000007ff 	.word	0x000007ff
 8000978:	fffffc01 	.word	0xfffffc01
 800097c:	08004bac 	.word	0x08004bac
 8000980:	000003ff 	.word	0x000003ff
 8000984:	feffffff 	.word	0xfeffffff
 8000988:	000007fe 	.word	0x000007fe
 800098c:	000003f3 	.word	0x000003f3
 8000990:	fffffc0d 	.word	0xfffffc0d
 8000994:	fffff801 	.word	0xfffff801
 8000998:	464a      	mov	r2, r9
 800099a:	2301      	movs	r3, #1
 800099c:	431a      	orrs	r2, r3
 800099e:	4691      	mov	r9, r2
 80009a0:	2400      	movs	r4, #0
 80009a2:	2001      	movs	r0, #1
 80009a4:	e66e      	b.n	8000684 <__aeabi_ddiv+0x80>
 80009a6:	2300      	movs	r3, #0
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	469a      	mov	sl, r3
 80009ac:	2500      	movs	r5, #0
 80009ae:	4b88      	ldr	r3, [pc, #544]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 80009b0:	0312      	lsls	r2, r2, #12
 80009b2:	e67e      	b.n	80006b2 <__aeabi_ddiv+0xae>
 80009b4:	2501      	movs	r5, #1
 80009b6:	426d      	negs	r5, r5
 80009b8:	2201      	movs	r2, #1
 80009ba:	1ad2      	subs	r2, r2, r3
 80009bc:	2a38      	cmp	r2, #56	; 0x38
 80009be:	dd00      	ble.n	80009c2 <__aeabi_ddiv+0x3be>
 80009c0:	e674      	b.n	80006ac <__aeabi_ddiv+0xa8>
 80009c2:	2a1f      	cmp	r2, #31
 80009c4:	dc00      	bgt.n	80009c8 <__aeabi_ddiv+0x3c4>
 80009c6:	e0bd      	b.n	8000b44 <__aeabi_ddiv+0x540>
 80009c8:	211f      	movs	r1, #31
 80009ca:	4249      	negs	r1, r1
 80009cc:	1acb      	subs	r3, r1, r3
 80009ce:	4641      	mov	r1, r8
 80009d0:	40d9      	lsrs	r1, r3
 80009d2:	000b      	movs	r3, r1
 80009d4:	2a20      	cmp	r2, #32
 80009d6:	d004      	beq.n	80009e2 <__aeabi_ddiv+0x3de>
 80009d8:	4641      	mov	r1, r8
 80009da:	4a7e      	ldr	r2, [pc, #504]	; (8000bd4 <__aeabi_ddiv+0x5d0>)
 80009dc:	445a      	add	r2, fp
 80009de:	4091      	lsls	r1, r2
 80009e0:	430d      	orrs	r5, r1
 80009e2:	0029      	movs	r1, r5
 80009e4:	1e4a      	subs	r2, r1, #1
 80009e6:	4191      	sbcs	r1, r2
 80009e8:	4319      	orrs	r1, r3
 80009ea:	2307      	movs	r3, #7
 80009ec:	001d      	movs	r5, r3
 80009ee:	2200      	movs	r2, #0
 80009f0:	400d      	ands	r5, r1
 80009f2:	420b      	tst	r3, r1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_ddiv+0x3f4>
 80009f6:	e0d0      	b.n	8000b9a <__aeabi_ddiv+0x596>
 80009f8:	220f      	movs	r2, #15
 80009fa:	2300      	movs	r3, #0
 80009fc:	400a      	ands	r2, r1
 80009fe:	2a04      	cmp	r2, #4
 8000a00:	d100      	bne.n	8000a04 <__aeabi_ddiv+0x400>
 8000a02:	e0c7      	b.n	8000b94 <__aeabi_ddiv+0x590>
 8000a04:	1d0a      	adds	r2, r1, #4
 8000a06:	428a      	cmp	r2, r1
 8000a08:	4189      	sbcs	r1, r1
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	185b      	adds	r3, r3, r1
 8000a0e:	0011      	movs	r1, r2
 8000a10:	021a      	lsls	r2, r3, #8
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_ddiv+0x412>
 8000a14:	e0be      	b.n	8000b94 <__aeabi_ddiv+0x590>
 8000a16:	2301      	movs	r3, #1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e649      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	4643      	mov	r3, r8
 8000a22:	0312      	lsls	r2, r2, #12
 8000a24:	4213      	tst	r3, r2
 8000a26:	d008      	beq.n	8000a3a <__aeabi_ddiv+0x436>
 8000a28:	4214      	tst	r4, r2
 8000a2a:	d106      	bne.n	8000a3a <__aeabi_ddiv+0x436>
 8000a2c:	4322      	orrs	r2, r4
 8000a2e:	0312      	lsls	r2, r2, #12
 8000a30:	46ba      	mov	sl, r7
 8000a32:	000d      	movs	r5, r1
 8000a34:	4b66      	ldr	r3, [pc, #408]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000a36:	0b12      	lsrs	r2, r2, #12
 8000a38:	e63b      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0312      	lsls	r2, r2, #12
 8000a40:	431a      	orrs	r2, r3
 8000a42:	0312      	lsls	r2, r2, #12
 8000a44:	46b2      	mov	sl, r6
 8000a46:	4b62      	ldr	r3, [pc, #392]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000a48:	0b12      	lsrs	r2, r2, #12
 8000a4a:	e632      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_ddiv+0x44e>
 8000a50:	e702      	b.n	8000858 <__aeabi_ddiv+0x254>
 8000a52:	19a6      	adds	r6, r4, r6
 8000a54:	1e6a      	subs	r2, r5, #1
 8000a56:	42a6      	cmp	r6, r4
 8000a58:	d200      	bcs.n	8000a5c <__aeabi_ddiv+0x458>
 8000a5a:	e089      	b.n	8000b70 <__aeabi_ddiv+0x56c>
 8000a5c:	4286      	cmp	r6, r0
 8000a5e:	d200      	bcs.n	8000a62 <__aeabi_ddiv+0x45e>
 8000a60:	e09f      	b.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000a62:	d100      	bne.n	8000a66 <__aeabi_ddiv+0x462>
 8000a64:	e0af      	b.n	8000bc6 <__aeabi_ddiv+0x5c2>
 8000a66:	0015      	movs	r5, r2
 8000a68:	e6f4      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000a6a:	42a9      	cmp	r1, r5
 8000a6c:	d900      	bls.n	8000a70 <__aeabi_ddiv+0x46c>
 8000a6e:	e63c      	b.n	80006ea <__aeabi_ddiv+0xe6>
 8000a70:	4643      	mov	r3, r8
 8000a72:	07de      	lsls	r6, r3, #31
 8000a74:	0858      	lsrs	r0, r3, #1
 8000a76:	086b      	lsrs	r3, r5, #1
 8000a78:	431e      	orrs	r6, r3
 8000a7a:	07ed      	lsls	r5, r5, #31
 8000a7c:	e63c      	b.n	80006f8 <__aeabi_ddiv+0xf4>
 8000a7e:	f000 ff8d 	bl	800199c <__clzsi2>
 8000a82:	0001      	movs	r1, r0
 8000a84:	0002      	movs	r2, r0
 8000a86:	3115      	adds	r1, #21
 8000a88:	3220      	adds	r2, #32
 8000a8a:	291c      	cmp	r1, #28
 8000a8c:	dc00      	bgt.n	8000a90 <__aeabi_ddiv+0x48c>
 8000a8e:	e72c      	b.n	80008ea <__aeabi_ddiv+0x2e6>
 8000a90:	464b      	mov	r3, r9
 8000a92:	3808      	subs	r0, #8
 8000a94:	4083      	lsls	r3, r0
 8000a96:	2500      	movs	r5, #0
 8000a98:	4698      	mov	r8, r3
 8000a9a:	e732      	b.n	8000902 <__aeabi_ddiv+0x2fe>
 8000a9c:	f000 ff7e 	bl	800199c <__clzsi2>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	001a      	movs	r2, r3
 8000aa4:	3215      	adds	r2, #21
 8000aa6:	3020      	adds	r0, #32
 8000aa8:	2a1c      	cmp	r2, #28
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_ddiv+0x4aa>
 8000aac:	e6ff      	b.n	80008ae <__aeabi_ddiv+0x2aa>
 8000aae:	4654      	mov	r4, sl
 8000ab0:	3b08      	subs	r3, #8
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	409c      	lsls	r4, r3
 8000ab6:	e705      	b.n	80008c4 <__aeabi_ddiv+0x2c0>
 8000ab8:	1936      	adds	r6, r6, r4
 8000aba:	3b01      	subs	r3, #1
 8000abc:	42b4      	cmp	r4, r6
 8000abe:	d900      	bls.n	8000ac2 <__aeabi_ddiv+0x4be>
 8000ac0:	e6a6      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ac2:	42b2      	cmp	r2, r6
 8000ac4:	d800      	bhi.n	8000ac8 <__aeabi_ddiv+0x4c4>
 8000ac6:	e6a3      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ac8:	1e83      	subs	r3, r0, #2
 8000aca:	1936      	adds	r6, r6, r4
 8000acc:	e6a0      	b.n	8000810 <__aeabi_ddiv+0x20c>
 8000ace:	1909      	adds	r1, r1, r4
 8000ad0:	3d01      	subs	r5, #1
 8000ad2:	428c      	cmp	r4, r1
 8000ad4:	d900      	bls.n	8000ad8 <__aeabi_ddiv+0x4d4>
 8000ad6:	e68d      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ad8:	428a      	cmp	r2, r1
 8000ada:	d800      	bhi.n	8000ade <__aeabi_ddiv+0x4da>
 8000adc:	e68a      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ade:	1e85      	subs	r5, r0, #2
 8000ae0:	1909      	adds	r1, r1, r4
 8000ae2:	e687      	b.n	80007f4 <__aeabi_ddiv+0x1f0>
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	402a      	ands	r2, r5
 8000ae8:	2a04      	cmp	r2, #4
 8000aea:	d100      	bne.n	8000aee <__aeabi_ddiv+0x4ea>
 8000aec:	e6bc      	b.n	8000868 <__aeabi_ddiv+0x264>
 8000aee:	1d29      	adds	r1, r5, #4
 8000af0:	42a9      	cmp	r1, r5
 8000af2:	41ad      	sbcs	r5, r5
 8000af4:	426d      	negs	r5, r5
 8000af6:	08c9      	lsrs	r1, r1, #3
 8000af8:	44a8      	add	r8, r5
 8000afa:	e6b6      	b.n	800086a <__aeabi_ddiv+0x266>
 8000afc:	42af      	cmp	r7, r5
 8000afe:	d900      	bls.n	8000b02 <__aeabi_ddiv+0x4fe>
 8000b00:	e662      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b02:	4281      	cmp	r1, r0
 8000b04:	d804      	bhi.n	8000b10 <__aeabi_ddiv+0x50c>
 8000b06:	d000      	beq.n	8000b0a <__aeabi_ddiv+0x506>
 8000b08:	e65e      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b0a:	42ae      	cmp	r6, r5
 8000b0c:	d800      	bhi.n	8000b10 <__aeabi_ddiv+0x50c>
 8000b0e:	e65b      	b.n	80007c8 <__aeabi_ddiv+0x1c4>
 8000b10:	2302      	movs	r3, #2
 8000b12:	425b      	negs	r3, r3
 8000b14:	469c      	mov	ip, r3
 8000b16:	9b00      	ldr	r3, [sp, #0]
 8000b18:	44e0      	add	r8, ip
 8000b1a:	469c      	mov	ip, r3
 8000b1c:	4465      	add	r5, ip
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	419b      	sbcs	r3, r3
 8000b22:	425b      	negs	r3, r3
 8000b24:	191b      	adds	r3, r3, r4
 8000b26:	18c0      	adds	r0, r0, r3
 8000b28:	e64f      	b.n	80007ca <__aeabi_ddiv+0x1c6>
 8000b2a:	42b2      	cmp	r2, r6
 8000b2c:	d800      	bhi.n	8000b30 <__aeabi_ddiv+0x52c>
 8000b2e:	e612      	b.n	8000756 <__aeabi_ddiv+0x152>
 8000b30:	1e83      	subs	r3, r0, #2
 8000b32:	1936      	adds	r6, r6, r4
 8000b34:	e60f      	b.n	8000756 <__aeabi_ddiv+0x152>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	d800      	bhi.n	8000b3c <__aeabi_ddiv+0x538>
 8000b3a:	e5fa      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b3c:	1e83      	subs	r3, r0, #2
 8000b3e:	4698      	mov	r8, r3
 8000b40:	1909      	adds	r1, r1, r4
 8000b42:	e5f6      	b.n	8000732 <__aeabi_ddiv+0x12e>
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <__aeabi_ddiv+0x5d4>)
 8000b46:	0028      	movs	r0, r5
 8000b48:	445b      	add	r3, fp
 8000b4a:	4641      	mov	r1, r8
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	4099      	lsls	r1, r3
 8000b50:	40d0      	lsrs	r0, r2
 8000b52:	1e6b      	subs	r3, r5, #1
 8000b54:	419d      	sbcs	r5, r3
 8000b56:	4643      	mov	r3, r8
 8000b58:	4301      	orrs	r1, r0
 8000b5a:	4329      	orrs	r1, r5
 8000b5c:	40d3      	lsrs	r3, r2
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x560>
 8000b62:	e755      	b.n	8000a10 <__aeabi_ddiv+0x40c>
 8000b64:	220f      	movs	r2, #15
 8000b66:	400a      	ands	r2, r1
 8000b68:	2a04      	cmp	r2, #4
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_ddiv+0x56a>
 8000b6c:	e74a      	b.n	8000a04 <__aeabi_ddiv+0x400>
 8000b6e:	e74f      	b.n	8000a10 <__aeabi_ddiv+0x40c>
 8000b70:	0015      	movs	r5, r2
 8000b72:	4286      	cmp	r6, r0
 8000b74:	d000      	beq.n	8000b78 <__aeabi_ddiv+0x574>
 8000b76:	e66d      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000b78:	9a00      	ldr	r2, [sp, #0]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_ddiv+0x57c>
 8000b7e:	e669      	b.n	8000854 <__aeabi_ddiv+0x250>
 8000b80:	e66a      	b.n	8000858 <__aeabi_ddiv+0x254>
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <__aeabi_ddiv+0x5d8>)
 8000b84:	445b      	add	r3, fp
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	dc00      	bgt.n	8000b8c <__aeabi_ddiv+0x588>
 8000b8a:	e713      	b.n	80009b4 <__aeabi_ddiv+0x3b0>
 8000b8c:	2501      	movs	r5, #1
 8000b8e:	2100      	movs	r1, #0
 8000b90:	44a8      	add	r8, r5
 8000b92:	e66a      	b.n	800086a <__aeabi_ddiv+0x266>
 8000b94:	075d      	lsls	r5, r3, #29
 8000b96:	025b      	lsls	r3, r3, #9
 8000b98:	0b1a      	lsrs	r2, r3, #12
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	430d      	orrs	r5, r1
 8000ba0:	e587      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000ba2:	9900      	ldr	r1, [sp, #0]
 8000ba4:	3d02      	subs	r5, #2
 8000ba6:	004a      	lsls	r2, r1, #1
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	41bf      	sbcs	r7, r7
 8000bac:	427f      	negs	r7, r7
 8000bae:	193f      	adds	r7, r7, r4
 8000bb0:	19f6      	adds	r6, r6, r7
 8000bb2:	9200      	str	r2, [sp, #0]
 8000bb4:	e7dd      	b.n	8000b72 <__aeabi_ddiv+0x56e>
 8000bb6:	2280      	movs	r2, #128	; 0x80
 8000bb8:	4643      	mov	r3, r8
 8000bba:	0312      	lsls	r2, r2, #12
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	0312      	lsls	r2, r2, #12
 8000bc0:	4b03      	ldr	r3, [pc, #12]	; (8000bd0 <__aeabi_ddiv+0x5cc>)
 8000bc2:	0b12      	lsrs	r2, r2, #12
 8000bc4:	e575      	b.n	80006b2 <__aeabi_ddiv+0xae>
 8000bc6:	9900      	ldr	r1, [sp, #0]
 8000bc8:	4299      	cmp	r1, r3
 8000bca:	d3ea      	bcc.n	8000ba2 <__aeabi_ddiv+0x59e>
 8000bcc:	0015      	movs	r5, r2
 8000bce:	e7d3      	b.n	8000b78 <__aeabi_ddiv+0x574>
 8000bd0:	000007ff 	.word	0x000007ff
 8000bd4:	0000043e 	.word	0x0000043e
 8000bd8:	0000041e 	.word	0x0000041e
 8000bdc:	000003ff 	.word	0x000003ff

08000be0 <__aeabi_dmul>:
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	4645      	mov	r5, r8
 8000be4:	46de      	mov	lr, fp
 8000be6:	4657      	mov	r7, sl
 8000be8:	464e      	mov	r6, r9
 8000bea:	b5e0      	push	{r5, r6, r7, lr}
 8000bec:	001f      	movs	r7, r3
 8000bee:	030b      	lsls	r3, r1, #12
 8000bf0:	0b1b      	lsrs	r3, r3, #12
 8000bf2:	469b      	mov	fp, r3
 8000bf4:	004d      	lsls	r5, r1, #1
 8000bf6:	0fcb      	lsrs	r3, r1, #31
 8000bf8:	0004      	movs	r4, r0
 8000bfa:	4691      	mov	r9, r2
 8000bfc:	4698      	mov	r8, r3
 8000bfe:	b087      	sub	sp, #28
 8000c00:	0d6d      	lsrs	r5, r5, #21
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dmul+0x26>
 8000c04:	e1cd      	b.n	8000fa2 <__aeabi_dmul+0x3c2>
 8000c06:	4bce      	ldr	r3, [pc, #824]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c08:	429d      	cmp	r5, r3
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dmul+0x2e>
 8000c0c:	e1e9      	b.n	8000fe2 <__aeabi_dmul+0x402>
 8000c0e:	465a      	mov	r2, fp
 8000c10:	0f43      	lsrs	r3, r0, #29
 8000c12:	00d2      	lsls	r2, r2, #3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	0412      	lsls	r2, r2, #16
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	00c3      	lsls	r3, r0, #3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	4bc8      	ldr	r3, [pc, #800]	; (8000f44 <__aeabi_dmul+0x364>)
 8000c22:	4693      	mov	fp, r2
 8000c24:	469c      	mov	ip, r3
 8000c26:	2300      	movs	r3, #0
 8000c28:	2600      	movs	r6, #0
 8000c2a:	4465      	add	r5, ip
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	033c      	lsls	r4, r7, #12
 8000c30:	007b      	lsls	r3, r7, #1
 8000c32:	4648      	mov	r0, r9
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	0d5b      	lsrs	r3, r3, #21
 8000c38:	0fff      	lsrs	r7, r7, #31
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_dmul+0x60>
 8000c3e:	e189      	b.n	8000f54 <__aeabi_dmul+0x374>
 8000c40:	4abf      	ldr	r2, [pc, #764]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d019      	beq.n	8000c7a <__aeabi_dmul+0x9a>
 8000c46:	0f42      	lsrs	r2, r0, #29
 8000c48:	00e4      	lsls	r4, r4, #3
 8000c4a:	4322      	orrs	r2, r4
 8000c4c:	2480      	movs	r4, #128	; 0x80
 8000c4e:	0424      	lsls	r4, r4, #16
 8000c50:	4314      	orrs	r4, r2
 8000c52:	4abc      	ldr	r2, [pc, #752]	; (8000f44 <__aeabi_dmul+0x364>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	4694      	mov	ip, r2
 8000c58:	4642      	mov	r2, r8
 8000c5a:	4463      	add	r3, ip
 8000c5c:	195b      	adds	r3, r3, r5
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	9b01      	ldr	r3, [sp, #4]
 8000c62:	407a      	eors	r2, r7
 8000c64:	3301      	adds	r3, #1
 8000c66:	00c0      	lsls	r0, r0, #3
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2e0a      	cmp	r6, #10
 8000c6e:	dd1c      	ble.n	8000caa <__aeabi_dmul+0xca>
 8000c70:	003a      	movs	r2, r7
 8000c72:	2e0b      	cmp	r6, #11
 8000c74:	d05e      	beq.n	8000d34 <__aeabi_dmul+0x154>
 8000c76:	4647      	mov	r7, r8
 8000c78:	e056      	b.n	8000d28 <__aeabi_dmul+0x148>
 8000c7a:	4649      	mov	r1, r9
 8000c7c:	4bb0      	ldr	r3, [pc, #704]	; (8000f40 <__aeabi_dmul+0x360>)
 8000c7e:	4321      	orrs	r1, r4
 8000c80:	18eb      	adds	r3, r5, r3
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2900      	cmp	r1, #0
 8000c86:	d12a      	bne.n	8000cde <__aeabi_dmul+0xfe>
 8000c88:	2080      	movs	r0, #128	; 0x80
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	0100      	lsls	r0, r0, #4
 8000c8e:	002b      	movs	r3, r5
 8000c90:	4684      	mov	ip, r0
 8000c92:	4316      	orrs	r6, r2
 8000c94:	4642      	mov	r2, r8
 8000c96:	4463      	add	r3, ip
 8000c98:	407a      	eors	r2, r7
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	2e0a      	cmp	r6, #10
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_dmul+0xc4>
 8000ca2:	e231      	b.n	8001108 <__aeabi_dmul+0x528>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	2102      	movs	r1, #2
 8000caa:	2e02      	cmp	r6, #2
 8000cac:	dc26      	bgt.n	8000cfc <__aeabi_dmul+0x11c>
 8000cae:	3e01      	subs	r6, #1
 8000cb0:	2e01      	cmp	r6, #1
 8000cb2:	d852      	bhi.n	8000d5a <__aeabi_dmul+0x17a>
 8000cb4:	2902      	cmp	r1, #2
 8000cb6:	d04c      	beq.n	8000d52 <__aeabi_dmul+0x172>
 8000cb8:	2901      	cmp	r1, #1
 8000cba:	d000      	beq.n	8000cbe <__aeabi_dmul+0xde>
 8000cbc:	e118      	b.n	8000ef0 <__aeabi_dmul+0x310>
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2400      	movs	r4, #0
 8000cc2:	2500      	movs	r5, #0
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	4323      	orrs	r3, r4
 8000cc8:	07d2      	lsls	r2, r2, #31
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	0028      	movs	r0, r5
 8000cce:	0019      	movs	r1, r3
 8000cd0:	b007      	add	sp, #28
 8000cd2:	bcf0      	pop	{r4, r5, r6, r7}
 8000cd4:	46bb      	mov	fp, r7
 8000cd6:	46b2      	mov	sl, r6
 8000cd8:	46a9      	mov	r9, r5
 8000cda:	46a0      	mov	r8, r4
 8000cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	0109      	lsls	r1, r1, #4
 8000ce4:	002b      	movs	r3, r5
 8000ce6:	468c      	mov	ip, r1
 8000ce8:	4316      	orrs	r6, r2
 8000cea:	4642      	mov	r2, r8
 8000cec:	4463      	add	r3, ip
 8000cee:	407a      	eors	r2, r7
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	9302      	str	r3, [sp, #8]
 8000cf4:	2e0a      	cmp	r6, #10
 8000cf6:	dd00      	ble.n	8000cfa <__aeabi_dmul+0x11a>
 8000cf8:	e228      	b.n	800114c <__aeabi_dmul+0x56c>
 8000cfa:	2103      	movs	r1, #3
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	40b5      	lsls	r5, r6
 8000d00:	46ac      	mov	ip, r5
 8000d02:	26a6      	movs	r6, #166	; 0xa6
 8000d04:	4663      	mov	r3, ip
 8000d06:	00f6      	lsls	r6, r6, #3
 8000d08:	4035      	ands	r5, r6
 8000d0a:	4233      	tst	r3, r6
 8000d0c:	d10b      	bne.n	8000d26 <__aeabi_dmul+0x146>
 8000d0e:	2690      	movs	r6, #144	; 0x90
 8000d10:	00b6      	lsls	r6, r6, #2
 8000d12:	4233      	tst	r3, r6
 8000d14:	d118      	bne.n	8000d48 <__aeabi_dmul+0x168>
 8000d16:	3eb9      	subs	r6, #185	; 0xb9
 8000d18:	3eff      	subs	r6, #255	; 0xff
 8000d1a:	421e      	tst	r6, r3
 8000d1c:	d01d      	beq.n	8000d5a <__aeabi_dmul+0x17a>
 8000d1e:	46a3      	mov	fp, r4
 8000d20:	4682      	mov	sl, r0
 8000d22:	9100      	str	r1, [sp, #0]
 8000d24:	e000      	b.n	8000d28 <__aeabi_dmul+0x148>
 8000d26:	0017      	movs	r7, r2
 8000d28:	9900      	ldr	r1, [sp, #0]
 8000d2a:	003a      	movs	r2, r7
 8000d2c:	2902      	cmp	r1, #2
 8000d2e:	d010      	beq.n	8000d52 <__aeabi_dmul+0x172>
 8000d30:	465c      	mov	r4, fp
 8000d32:	4650      	mov	r0, sl
 8000d34:	2903      	cmp	r1, #3
 8000d36:	d1bf      	bne.n	8000cb8 <__aeabi_dmul+0xd8>
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	031b      	lsls	r3, r3, #12
 8000d3c:	431c      	orrs	r4, r3
 8000d3e:	0324      	lsls	r4, r4, #12
 8000d40:	0005      	movs	r5, r0
 8000d42:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	e7bd      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d48:	2480      	movs	r4, #128	; 0x80
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d4e:	0324      	lsls	r4, r4, #12
 8000d50:	e7b8      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d52:	2400      	movs	r4, #0
 8000d54:	2500      	movs	r5, #0
 8000d56:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <__aeabi_dmul+0x360>)
 8000d58:	e7b4      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000d5a:	4653      	mov	r3, sl
 8000d5c:	041e      	lsls	r6, r3, #16
 8000d5e:	0c36      	lsrs	r6, r6, #16
 8000d60:	0c1f      	lsrs	r7, r3, #16
 8000d62:	0033      	movs	r3, r6
 8000d64:	0c01      	lsrs	r1, r0, #16
 8000d66:	0400      	lsls	r0, r0, #16
 8000d68:	0c00      	lsrs	r0, r0, #16
 8000d6a:	4343      	muls	r3, r0
 8000d6c:	4698      	mov	r8, r3
 8000d6e:	0003      	movs	r3, r0
 8000d70:	437b      	muls	r3, r7
 8000d72:	4699      	mov	r9, r3
 8000d74:	0033      	movs	r3, r6
 8000d76:	434b      	muls	r3, r1
 8000d78:	469c      	mov	ip, r3
 8000d7a:	4643      	mov	r3, r8
 8000d7c:	000d      	movs	r5, r1
 8000d7e:	0c1b      	lsrs	r3, r3, #16
 8000d80:	469a      	mov	sl, r3
 8000d82:	437d      	muls	r5, r7
 8000d84:	44cc      	add	ip, r9
 8000d86:	44d4      	add	ip, sl
 8000d88:	9500      	str	r5, [sp, #0]
 8000d8a:	45e1      	cmp	r9, ip
 8000d8c:	d904      	bls.n	8000d98 <__aeabi_dmul+0x1b8>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	025b      	lsls	r3, r3, #9
 8000d92:	4699      	mov	r9, r3
 8000d94:	444d      	add	r5, r9
 8000d96:	9500      	str	r5, [sp, #0]
 8000d98:	4663      	mov	r3, ip
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	001d      	movs	r5, r3
 8000d9e:	4663      	mov	r3, ip
 8000da0:	041b      	lsls	r3, r3, #16
 8000da2:	469c      	mov	ip, r3
 8000da4:	4643      	mov	r3, r8
 8000da6:	041b      	lsls	r3, r3, #16
 8000da8:	0c1b      	lsrs	r3, r3, #16
 8000daa:	4698      	mov	r8, r3
 8000dac:	4663      	mov	r3, ip
 8000dae:	4443      	add	r3, r8
 8000db0:	9303      	str	r3, [sp, #12]
 8000db2:	0c23      	lsrs	r3, r4, #16
 8000db4:	4698      	mov	r8, r3
 8000db6:	0033      	movs	r3, r6
 8000db8:	0424      	lsls	r4, r4, #16
 8000dba:	0c24      	lsrs	r4, r4, #16
 8000dbc:	4363      	muls	r3, r4
 8000dbe:	469c      	mov	ip, r3
 8000dc0:	0023      	movs	r3, r4
 8000dc2:	437b      	muls	r3, r7
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	435e      	muls	r6, r3
 8000dca:	435f      	muls	r7, r3
 8000dcc:	444e      	add	r6, r9
 8000dce:	4663      	mov	r3, ip
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	0c1e      	lsrs	r6, r3, #16
 8000dd4:	4456      	add	r6, sl
 8000dd6:	45b1      	cmp	r9, r6
 8000dd8:	d903      	bls.n	8000de2 <__aeabi_dmul+0x202>
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	025b      	lsls	r3, r3, #9
 8000dde:	4699      	mov	r9, r3
 8000de0:	444f      	add	r7, r9
 8000de2:	0c33      	lsrs	r3, r6, #16
 8000de4:	4699      	mov	r9, r3
 8000de6:	003b      	movs	r3, r7
 8000de8:	444b      	add	r3, r9
 8000dea:	9305      	str	r3, [sp, #20]
 8000dec:	4663      	mov	r3, ip
 8000dee:	46ac      	mov	ip, r5
 8000df0:	041f      	lsls	r7, r3, #16
 8000df2:	0c3f      	lsrs	r7, r7, #16
 8000df4:	0436      	lsls	r6, r6, #16
 8000df6:	19f6      	adds	r6, r6, r7
 8000df8:	44b4      	add	ip, r6
 8000dfa:	4663      	mov	r3, ip
 8000dfc:	9304      	str	r3, [sp, #16]
 8000dfe:	465b      	mov	r3, fp
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	469c      	mov	ip, r3
 8000e04:	465b      	mov	r3, fp
 8000e06:	041f      	lsls	r7, r3, #16
 8000e08:	0c3f      	lsrs	r7, r7, #16
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	4343      	muls	r3, r0
 8000e0e:	4699      	mov	r9, r3
 8000e10:	4663      	mov	r3, ip
 8000e12:	4343      	muls	r3, r0
 8000e14:	469a      	mov	sl, r3
 8000e16:	464b      	mov	r3, r9
 8000e18:	4660      	mov	r0, ip
 8000e1a:	0c1b      	lsrs	r3, r3, #16
 8000e1c:	469b      	mov	fp, r3
 8000e1e:	4348      	muls	r0, r1
 8000e20:	4379      	muls	r1, r7
 8000e22:	4451      	add	r1, sl
 8000e24:	4459      	add	r1, fp
 8000e26:	458a      	cmp	sl, r1
 8000e28:	d903      	bls.n	8000e32 <__aeabi_dmul+0x252>
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	025b      	lsls	r3, r3, #9
 8000e2e:	469a      	mov	sl, r3
 8000e30:	4450      	add	r0, sl
 8000e32:	0c0b      	lsrs	r3, r1, #16
 8000e34:	469a      	mov	sl, r3
 8000e36:	464b      	mov	r3, r9
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	4699      	mov	r9, r3
 8000e3e:	003b      	movs	r3, r7
 8000e40:	4363      	muls	r3, r4
 8000e42:	0409      	lsls	r1, r1, #16
 8000e44:	4645      	mov	r5, r8
 8000e46:	4449      	add	r1, r9
 8000e48:	4699      	mov	r9, r3
 8000e4a:	4663      	mov	r3, ip
 8000e4c:	435c      	muls	r4, r3
 8000e4e:	436b      	muls	r3, r5
 8000e50:	469c      	mov	ip, r3
 8000e52:	464b      	mov	r3, r9
 8000e54:	0c1b      	lsrs	r3, r3, #16
 8000e56:	4698      	mov	r8, r3
 8000e58:	436f      	muls	r7, r5
 8000e5a:	193f      	adds	r7, r7, r4
 8000e5c:	4447      	add	r7, r8
 8000e5e:	4450      	add	r0, sl
 8000e60:	42bc      	cmp	r4, r7
 8000e62:	d903      	bls.n	8000e6c <__aeabi_dmul+0x28c>
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	025b      	lsls	r3, r3, #9
 8000e68:	4698      	mov	r8, r3
 8000e6a:	44c4      	add	ip, r8
 8000e6c:	9b04      	ldr	r3, [sp, #16]
 8000e6e:	9d00      	ldr	r5, [sp, #0]
 8000e70:	4698      	mov	r8, r3
 8000e72:	4445      	add	r5, r8
 8000e74:	42b5      	cmp	r5, r6
 8000e76:	41b6      	sbcs	r6, r6
 8000e78:	4273      	negs	r3, r6
 8000e7a:	4698      	mov	r8, r3
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	041e      	lsls	r6, r3, #16
 8000e80:	9b05      	ldr	r3, [sp, #20]
 8000e82:	043c      	lsls	r4, r7, #16
 8000e84:	4699      	mov	r9, r3
 8000e86:	0c36      	lsrs	r6, r6, #16
 8000e88:	19a4      	adds	r4, r4, r6
 8000e8a:	444c      	add	r4, r9
 8000e8c:	46a1      	mov	r9, r4
 8000e8e:	4683      	mov	fp, r0
 8000e90:	186e      	adds	r6, r5, r1
 8000e92:	44c1      	add	r9, r8
 8000e94:	428e      	cmp	r6, r1
 8000e96:	4189      	sbcs	r1, r1
 8000e98:	44cb      	add	fp, r9
 8000e9a:	465d      	mov	r5, fp
 8000e9c:	4249      	negs	r1, r1
 8000e9e:	186d      	adds	r5, r5, r1
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	41a4      	sbcs	r4, r4
 8000ea4:	45c1      	cmp	r9, r8
 8000ea6:	419b      	sbcs	r3, r3
 8000ea8:	4583      	cmp	fp, r0
 8000eaa:	4180      	sbcs	r0, r0
 8000eac:	428d      	cmp	r5, r1
 8000eae:	4189      	sbcs	r1, r1
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	4264      	negs	r4, r4
 8000eb4:	431c      	orrs	r4, r3
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	9b03      	ldr	r3, [sp, #12]
 8000eba:	4249      	negs	r1, r1
 8000ebc:	4301      	orrs	r1, r0
 8000ebe:	0270      	lsls	r0, r6, #9
 8000ec0:	0c3f      	lsrs	r7, r7, #16
 8000ec2:	4318      	orrs	r0, r3
 8000ec4:	19e4      	adds	r4, r4, r7
 8000ec6:	1e47      	subs	r7, r0, #1
 8000ec8:	41b8      	sbcs	r0, r7
 8000eca:	1864      	adds	r4, r4, r1
 8000ecc:	4464      	add	r4, ip
 8000ece:	0df6      	lsrs	r6, r6, #23
 8000ed0:	0261      	lsls	r1, r4, #9
 8000ed2:	4330      	orrs	r0, r6
 8000ed4:	0dec      	lsrs	r4, r5, #23
 8000ed6:	026e      	lsls	r6, r5, #9
 8000ed8:	430c      	orrs	r4, r1
 8000eda:	4330      	orrs	r0, r6
 8000edc:	01c9      	lsls	r1, r1, #7
 8000ede:	d400      	bmi.n	8000ee2 <__aeabi_dmul+0x302>
 8000ee0:	e0f1      	b.n	80010c6 <__aeabi_dmul+0x4e6>
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	0843      	lsrs	r3, r0, #1
 8000ee6:	4001      	ands	r1, r0
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	07e0      	lsls	r0, r4, #31
 8000eec:	4318      	orrs	r0, r3
 8000eee:	0864      	lsrs	r4, r4, #1
 8000ef0:	4915      	ldr	r1, [pc, #84]	; (8000f48 <__aeabi_dmul+0x368>)
 8000ef2:	9b02      	ldr	r3, [sp, #8]
 8000ef4:	468c      	mov	ip, r1
 8000ef6:	4463      	add	r3, ip
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	dc00      	bgt.n	8000efe <__aeabi_dmul+0x31e>
 8000efc:	e097      	b.n	800102e <__aeabi_dmul+0x44e>
 8000efe:	0741      	lsls	r1, r0, #29
 8000f00:	d009      	beq.n	8000f16 <__aeabi_dmul+0x336>
 8000f02:	210f      	movs	r1, #15
 8000f04:	4001      	ands	r1, r0
 8000f06:	2904      	cmp	r1, #4
 8000f08:	d005      	beq.n	8000f16 <__aeabi_dmul+0x336>
 8000f0a:	1d01      	adds	r1, r0, #4
 8000f0c:	4281      	cmp	r1, r0
 8000f0e:	4180      	sbcs	r0, r0
 8000f10:	4240      	negs	r0, r0
 8000f12:	1824      	adds	r4, r4, r0
 8000f14:	0008      	movs	r0, r1
 8000f16:	01e1      	lsls	r1, r4, #7
 8000f18:	d506      	bpl.n	8000f28 <__aeabi_dmul+0x348>
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	00c9      	lsls	r1, r1, #3
 8000f1e:	468c      	mov	ip, r1
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <__aeabi_dmul+0x36c>)
 8000f22:	401c      	ands	r4, r3
 8000f24:	9b02      	ldr	r3, [sp, #8]
 8000f26:	4463      	add	r3, ip
 8000f28:	4909      	ldr	r1, [pc, #36]	; (8000f50 <__aeabi_dmul+0x370>)
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	dd00      	ble.n	8000f30 <__aeabi_dmul+0x350>
 8000f2e:	e710      	b.n	8000d52 <__aeabi_dmul+0x172>
 8000f30:	0761      	lsls	r1, r4, #29
 8000f32:	08c5      	lsrs	r5, r0, #3
 8000f34:	0264      	lsls	r4, r4, #9
 8000f36:	055b      	lsls	r3, r3, #21
 8000f38:	430d      	orrs	r5, r1
 8000f3a:	0b24      	lsrs	r4, r4, #12
 8000f3c:	0d5b      	lsrs	r3, r3, #21
 8000f3e:	e6c1      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8000f40:	000007ff 	.word	0x000007ff
 8000f44:	fffffc01 	.word	0xfffffc01
 8000f48:	000003ff 	.word	0x000003ff
 8000f4c:	feffffff 	.word	0xfeffffff
 8000f50:	000007fe 	.word	0x000007fe
 8000f54:	464b      	mov	r3, r9
 8000f56:	4323      	orrs	r3, r4
 8000f58:	d059      	beq.n	800100e <__aeabi_dmul+0x42e>
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d100      	bne.n	8000f60 <__aeabi_dmul+0x380>
 8000f5e:	e0a3      	b.n	80010a8 <__aeabi_dmul+0x4c8>
 8000f60:	0020      	movs	r0, r4
 8000f62:	f000 fd1b 	bl	800199c <__clzsi2>
 8000f66:	0001      	movs	r1, r0
 8000f68:	0003      	movs	r3, r0
 8000f6a:	390b      	subs	r1, #11
 8000f6c:	221d      	movs	r2, #29
 8000f6e:	1a52      	subs	r2, r2, r1
 8000f70:	4649      	mov	r1, r9
 8000f72:	0018      	movs	r0, r3
 8000f74:	40d1      	lsrs	r1, r2
 8000f76:	464a      	mov	r2, r9
 8000f78:	3808      	subs	r0, #8
 8000f7a:	4082      	lsls	r2, r0
 8000f7c:	4084      	lsls	r4, r0
 8000f7e:	0010      	movs	r0, r2
 8000f80:	430c      	orrs	r4, r1
 8000f82:	4a74      	ldr	r2, [pc, #464]	; (8001154 <__aeabi_dmul+0x574>)
 8000f84:	1aeb      	subs	r3, r5, r3
 8000f86:	4694      	mov	ip, r2
 8000f88:	4642      	mov	r2, r8
 8000f8a:	4463      	add	r3, ip
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	9b01      	ldr	r3, [sp, #4]
 8000f90:	407a      	eors	r2, r7
 8000f92:	3301      	adds	r3, #1
 8000f94:	2100      	movs	r1, #0
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2e0a      	cmp	r6, #10
 8000f9c:	dd00      	ble.n	8000fa0 <__aeabi_dmul+0x3c0>
 8000f9e:	e667      	b.n	8000c70 <__aeabi_dmul+0x90>
 8000fa0:	e683      	b.n	8000caa <__aeabi_dmul+0xca>
 8000fa2:	465b      	mov	r3, fp
 8000fa4:	4303      	orrs	r3, r0
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	d02a      	beq.n	8001000 <__aeabi_dmul+0x420>
 8000faa:	465b      	mov	r3, fp
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d06d      	beq.n	800108c <__aeabi_dmul+0x4ac>
 8000fb0:	4658      	mov	r0, fp
 8000fb2:	f000 fcf3 	bl	800199c <__clzsi2>
 8000fb6:	0001      	movs	r1, r0
 8000fb8:	0003      	movs	r3, r0
 8000fba:	390b      	subs	r1, #11
 8000fbc:	221d      	movs	r2, #29
 8000fbe:	1a52      	subs	r2, r2, r1
 8000fc0:	0021      	movs	r1, r4
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	465d      	mov	r5, fp
 8000fc6:	40d1      	lsrs	r1, r2
 8000fc8:	3808      	subs	r0, #8
 8000fca:	4085      	lsls	r5, r0
 8000fcc:	000a      	movs	r2, r1
 8000fce:	4084      	lsls	r4, r0
 8000fd0:	432a      	orrs	r2, r5
 8000fd2:	4693      	mov	fp, r2
 8000fd4:	46a2      	mov	sl, r4
 8000fd6:	4d5f      	ldr	r5, [pc, #380]	; (8001154 <__aeabi_dmul+0x574>)
 8000fd8:	2600      	movs	r6, #0
 8000fda:	1aed      	subs	r5, r5, r3
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	e625      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8000fe2:	465b      	mov	r3, fp
 8000fe4:	4303      	orrs	r3, r0
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	d105      	bne.n	8000ff6 <__aeabi_dmul+0x416>
 8000fea:	2300      	movs	r3, #0
 8000fec:	469b      	mov	fp, r3
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2608      	movs	r6, #8
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	e61b      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	4682      	mov	sl, r0
 8000ffa:	260c      	movs	r6, #12
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	e616      	b.n	8000c2e <__aeabi_dmul+0x4e>
 8001000:	2300      	movs	r3, #0
 8001002:	469b      	mov	fp, r3
 8001004:	3301      	adds	r3, #1
 8001006:	2604      	movs	r6, #4
 8001008:	2500      	movs	r5, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	e60f      	b.n	8000c2e <__aeabi_dmul+0x4e>
 800100e:	4642      	mov	r2, r8
 8001010:	3301      	adds	r3, #1
 8001012:	9501      	str	r5, [sp, #4]
 8001014:	431e      	orrs	r6, r3
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	407a      	eors	r2, r7
 800101a:	3301      	adds	r3, #1
 800101c:	2400      	movs	r4, #0
 800101e:	2000      	movs	r0, #0
 8001020:	2101      	movs	r1, #1
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2e0a      	cmp	r6, #10
 8001028:	dd00      	ble.n	800102c <__aeabi_dmul+0x44c>
 800102a:	e621      	b.n	8000c70 <__aeabi_dmul+0x90>
 800102c:	e63d      	b.n	8000caa <__aeabi_dmul+0xca>
 800102e:	2101      	movs	r1, #1
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	2938      	cmp	r1, #56	; 0x38
 8001034:	dd00      	ble.n	8001038 <__aeabi_dmul+0x458>
 8001036:	e642      	b.n	8000cbe <__aeabi_dmul+0xde>
 8001038:	291f      	cmp	r1, #31
 800103a:	dd47      	ble.n	80010cc <__aeabi_dmul+0x4ec>
 800103c:	261f      	movs	r6, #31
 800103e:	0025      	movs	r5, r4
 8001040:	4276      	negs	r6, r6
 8001042:	1af3      	subs	r3, r6, r3
 8001044:	40dd      	lsrs	r5, r3
 8001046:	002b      	movs	r3, r5
 8001048:	2920      	cmp	r1, #32
 800104a:	d005      	beq.n	8001058 <__aeabi_dmul+0x478>
 800104c:	4942      	ldr	r1, [pc, #264]	; (8001158 <__aeabi_dmul+0x578>)
 800104e:	9d02      	ldr	r5, [sp, #8]
 8001050:	468c      	mov	ip, r1
 8001052:	4465      	add	r5, ip
 8001054:	40ac      	lsls	r4, r5
 8001056:	4320      	orrs	r0, r4
 8001058:	1e41      	subs	r1, r0, #1
 800105a:	4188      	sbcs	r0, r1
 800105c:	4318      	orrs	r0, r3
 800105e:	2307      	movs	r3, #7
 8001060:	001d      	movs	r5, r3
 8001062:	2400      	movs	r4, #0
 8001064:	4005      	ands	r5, r0
 8001066:	4203      	tst	r3, r0
 8001068:	d04a      	beq.n	8001100 <__aeabi_dmul+0x520>
 800106a:	230f      	movs	r3, #15
 800106c:	2400      	movs	r4, #0
 800106e:	4003      	ands	r3, r0
 8001070:	2b04      	cmp	r3, #4
 8001072:	d042      	beq.n	80010fa <__aeabi_dmul+0x51a>
 8001074:	1d03      	adds	r3, r0, #4
 8001076:	4283      	cmp	r3, r0
 8001078:	4180      	sbcs	r0, r0
 800107a:	4240      	negs	r0, r0
 800107c:	1824      	adds	r4, r4, r0
 800107e:	0018      	movs	r0, r3
 8001080:	0223      	lsls	r3, r4, #8
 8001082:	d53a      	bpl.n	80010fa <__aeabi_dmul+0x51a>
 8001084:	2301      	movs	r3, #1
 8001086:	2400      	movs	r4, #0
 8001088:	2500      	movs	r5, #0
 800108a:	e61b      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800108c:	f000 fc86 	bl	800199c <__clzsi2>
 8001090:	0001      	movs	r1, r0
 8001092:	0003      	movs	r3, r0
 8001094:	3115      	adds	r1, #21
 8001096:	3320      	adds	r3, #32
 8001098:	291c      	cmp	r1, #28
 800109a:	dd8f      	ble.n	8000fbc <__aeabi_dmul+0x3dc>
 800109c:	3808      	subs	r0, #8
 800109e:	2200      	movs	r2, #0
 80010a0:	4084      	lsls	r4, r0
 80010a2:	4692      	mov	sl, r2
 80010a4:	46a3      	mov	fp, r4
 80010a6:	e796      	b.n	8000fd6 <__aeabi_dmul+0x3f6>
 80010a8:	f000 fc78 	bl	800199c <__clzsi2>
 80010ac:	0001      	movs	r1, r0
 80010ae:	0003      	movs	r3, r0
 80010b0:	3115      	adds	r1, #21
 80010b2:	3320      	adds	r3, #32
 80010b4:	291c      	cmp	r1, #28
 80010b6:	dc00      	bgt.n	80010ba <__aeabi_dmul+0x4da>
 80010b8:	e758      	b.n	8000f6c <__aeabi_dmul+0x38c>
 80010ba:	0002      	movs	r2, r0
 80010bc:	464c      	mov	r4, r9
 80010be:	3a08      	subs	r2, #8
 80010c0:	2000      	movs	r0, #0
 80010c2:	4094      	lsls	r4, r2
 80010c4:	e75d      	b.n	8000f82 <__aeabi_dmul+0x3a2>
 80010c6:	9b01      	ldr	r3, [sp, #4]
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	e711      	b.n	8000ef0 <__aeabi_dmul+0x310>
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <__aeabi_dmul+0x57c>)
 80010ce:	0026      	movs	r6, r4
 80010d0:	469c      	mov	ip, r3
 80010d2:	0003      	movs	r3, r0
 80010d4:	9d02      	ldr	r5, [sp, #8]
 80010d6:	40cb      	lsrs	r3, r1
 80010d8:	4465      	add	r5, ip
 80010da:	40ae      	lsls	r6, r5
 80010dc:	431e      	orrs	r6, r3
 80010de:	0003      	movs	r3, r0
 80010e0:	40ab      	lsls	r3, r5
 80010e2:	1e58      	subs	r0, r3, #1
 80010e4:	4183      	sbcs	r3, r0
 80010e6:	0030      	movs	r0, r6
 80010e8:	4318      	orrs	r0, r3
 80010ea:	40cc      	lsrs	r4, r1
 80010ec:	0743      	lsls	r3, r0, #29
 80010ee:	d0c7      	beq.n	8001080 <__aeabi_dmul+0x4a0>
 80010f0:	230f      	movs	r3, #15
 80010f2:	4003      	ands	r3, r0
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d1bd      	bne.n	8001074 <__aeabi_dmul+0x494>
 80010f8:	e7c2      	b.n	8001080 <__aeabi_dmul+0x4a0>
 80010fa:	0765      	lsls	r5, r4, #29
 80010fc:	0264      	lsls	r4, r4, #9
 80010fe:	0b24      	lsrs	r4, r4, #12
 8001100:	08c0      	lsrs	r0, r0, #3
 8001102:	2300      	movs	r3, #0
 8001104:	4305      	orrs	r5, r0
 8001106:	e5dd      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 8001108:	2500      	movs	r5, #0
 800110a:	2302      	movs	r3, #2
 800110c:	2e0f      	cmp	r6, #15
 800110e:	d10c      	bne.n	800112a <__aeabi_dmul+0x54a>
 8001110:	2480      	movs	r4, #128	; 0x80
 8001112:	465b      	mov	r3, fp
 8001114:	0324      	lsls	r4, r4, #12
 8001116:	4223      	tst	r3, r4
 8001118:	d00e      	beq.n	8001138 <__aeabi_dmul+0x558>
 800111a:	4221      	tst	r1, r4
 800111c:	d10c      	bne.n	8001138 <__aeabi_dmul+0x558>
 800111e:	430c      	orrs	r4, r1
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	003a      	movs	r2, r7
 8001124:	4b0e      	ldr	r3, [pc, #56]	; (8001160 <__aeabi_dmul+0x580>)
 8001126:	0b24      	lsrs	r4, r4, #12
 8001128:	e5cc      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800112a:	2e0b      	cmp	r6, #11
 800112c:	d000      	beq.n	8001130 <__aeabi_dmul+0x550>
 800112e:	e5a2      	b.n	8000c76 <__aeabi_dmul+0x96>
 8001130:	468b      	mov	fp, r1
 8001132:	46aa      	mov	sl, r5
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	e5f7      	b.n	8000d28 <__aeabi_dmul+0x148>
 8001138:	2480      	movs	r4, #128	; 0x80
 800113a:	465b      	mov	r3, fp
 800113c:	0324      	lsls	r4, r4, #12
 800113e:	431c      	orrs	r4, r3
 8001140:	0324      	lsls	r4, r4, #12
 8001142:	4642      	mov	r2, r8
 8001144:	4655      	mov	r5, sl
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <__aeabi_dmul+0x580>)
 8001148:	0b24      	lsrs	r4, r4, #12
 800114a:	e5bb      	b.n	8000cc4 <__aeabi_dmul+0xe4>
 800114c:	464d      	mov	r5, r9
 800114e:	0021      	movs	r1, r4
 8001150:	2303      	movs	r3, #3
 8001152:	e7db      	b.n	800110c <__aeabi_dmul+0x52c>
 8001154:	fffffc0d 	.word	0xfffffc0d
 8001158:	0000043e 	.word	0x0000043e
 800115c:	0000041e 	.word	0x0000041e
 8001160:	000007ff 	.word	0x000007ff

08001164 <__aeabi_dsub>:
 8001164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001166:	4657      	mov	r7, sl
 8001168:	464e      	mov	r6, r9
 800116a:	4645      	mov	r5, r8
 800116c:	46de      	mov	lr, fp
 800116e:	b5e0      	push	{r5, r6, r7, lr}
 8001170:	000d      	movs	r5, r1
 8001172:	0004      	movs	r4, r0
 8001174:	0019      	movs	r1, r3
 8001176:	0010      	movs	r0, r2
 8001178:	032b      	lsls	r3, r5, #12
 800117a:	0a5b      	lsrs	r3, r3, #9
 800117c:	0f62      	lsrs	r2, r4, #29
 800117e:	431a      	orrs	r2, r3
 8001180:	00e3      	lsls	r3, r4, #3
 8001182:	030c      	lsls	r4, r1, #12
 8001184:	0a64      	lsrs	r4, r4, #9
 8001186:	0f47      	lsrs	r7, r0, #29
 8001188:	4327      	orrs	r7, r4
 800118a:	4cd0      	ldr	r4, [pc, #832]	; (80014cc <__aeabi_dsub+0x368>)
 800118c:	006e      	lsls	r6, r5, #1
 800118e:	4691      	mov	r9, r2
 8001190:	b083      	sub	sp, #12
 8001192:	004a      	lsls	r2, r1, #1
 8001194:	00c0      	lsls	r0, r0, #3
 8001196:	4698      	mov	r8, r3
 8001198:	46a2      	mov	sl, r4
 800119a:	0d76      	lsrs	r6, r6, #21
 800119c:	0fed      	lsrs	r5, r5, #31
 800119e:	0d52      	lsrs	r2, r2, #21
 80011a0:	0fc9      	lsrs	r1, r1, #31
 80011a2:	9001      	str	r0, [sp, #4]
 80011a4:	42a2      	cmp	r2, r4
 80011a6:	d100      	bne.n	80011aa <__aeabi_dsub+0x46>
 80011a8:	e0b9      	b.n	800131e <__aeabi_dsub+0x1ba>
 80011aa:	2401      	movs	r4, #1
 80011ac:	4061      	eors	r1, r4
 80011ae:	468b      	mov	fp, r1
 80011b0:	428d      	cmp	r5, r1
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dsub+0x52>
 80011b4:	e08d      	b.n	80012d2 <__aeabi_dsub+0x16e>
 80011b6:	1ab4      	subs	r4, r6, r2
 80011b8:	46a4      	mov	ip, r4
 80011ba:	2c00      	cmp	r4, #0
 80011bc:	dc00      	bgt.n	80011c0 <__aeabi_dsub+0x5c>
 80011be:	e0b7      	b.n	8001330 <__aeabi_dsub+0x1cc>
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dsub+0x62>
 80011c4:	e0cb      	b.n	800135e <__aeabi_dsub+0x1fa>
 80011c6:	4ac1      	ldr	r2, [pc, #772]	; (80014cc <__aeabi_dsub+0x368>)
 80011c8:	4296      	cmp	r6, r2
 80011ca:	d100      	bne.n	80011ce <__aeabi_dsub+0x6a>
 80011cc:	e186      	b.n	80014dc <__aeabi_dsub+0x378>
 80011ce:	2280      	movs	r2, #128	; 0x80
 80011d0:	0412      	lsls	r2, r2, #16
 80011d2:	4317      	orrs	r7, r2
 80011d4:	4662      	mov	r2, ip
 80011d6:	2a38      	cmp	r2, #56	; 0x38
 80011d8:	dd00      	ble.n	80011dc <__aeabi_dsub+0x78>
 80011da:	e1a4      	b.n	8001526 <__aeabi_dsub+0x3c2>
 80011dc:	2a1f      	cmp	r2, #31
 80011de:	dd00      	ble.n	80011e2 <__aeabi_dsub+0x7e>
 80011e0:	e21d      	b.n	800161e <__aeabi_dsub+0x4ba>
 80011e2:	4661      	mov	r1, ip
 80011e4:	2220      	movs	r2, #32
 80011e6:	003c      	movs	r4, r7
 80011e8:	1a52      	subs	r2, r2, r1
 80011ea:	0001      	movs	r1, r0
 80011ec:	4090      	lsls	r0, r2
 80011ee:	4094      	lsls	r4, r2
 80011f0:	1e42      	subs	r2, r0, #1
 80011f2:	4190      	sbcs	r0, r2
 80011f4:	4662      	mov	r2, ip
 80011f6:	46a0      	mov	r8, r4
 80011f8:	4664      	mov	r4, ip
 80011fa:	40d7      	lsrs	r7, r2
 80011fc:	464a      	mov	r2, r9
 80011fe:	40e1      	lsrs	r1, r4
 8001200:	4644      	mov	r4, r8
 8001202:	1bd2      	subs	r2, r2, r7
 8001204:	4691      	mov	r9, r2
 8001206:	430c      	orrs	r4, r1
 8001208:	4304      	orrs	r4, r0
 800120a:	1b1c      	subs	r4, r3, r4
 800120c:	42a3      	cmp	r3, r4
 800120e:	4192      	sbcs	r2, r2
 8001210:	464b      	mov	r3, r9
 8001212:	4252      	negs	r2, r2
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	469a      	mov	sl, r3
 8001218:	4653      	mov	r3, sl
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	d400      	bmi.n	8001220 <__aeabi_dsub+0xbc>
 800121e:	e12b      	b.n	8001478 <__aeabi_dsub+0x314>
 8001220:	4653      	mov	r3, sl
 8001222:	025a      	lsls	r2, r3, #9
 8001224:	0a53      	lsrs	r3, r2, #9
 8001226:	469a      	mov	sl, r3
 8001228:	4653      	mov	r3, sl
 800122a:	2b00      	cmp	r3, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0xcc>
 800122e:	e166      	b.n	80014fe <__aeabi_dsub+0x39a>
 8001230:	4650      	mov	r0, sl
 8001232:	f000 fbb3 	bl	800199c <__clzsi2>
 8001236:	0003      	movs	r3, r0
 8001238:	3b08      	subs	r3, #8
 800123a:	2220      	movs	r2, #32
 800123c:	0020      	movs	r0, r4
 800123e:	1ad2      	subs	r2, r2, r3
 8001240:	4651      	mov	r1, sl
 8001242:	40d0      	lsrs	r0, r2
 8001244:	4099      	lsls	r1, r3
 8001246:	0002      	movs	r2, r0
 8001248:	409c      	lsls	r4, r3
 800124a:	430a      	orrs	r2, r1
 800124c:	429e      	cmp	r6, r3
 800124e:	dd00      	ble.n	8001252 <__aeabi_dsub+0xee>
 8001250:	e164      	b.n	800151c <__aeabi_dsub+0x3b8>
 8001252:	1b9b      	subs	r3, r3, r6
 8001254:	1c59      	adds	r1, r3, #1
 8001256:	291f      	cmp	r1, #31
 8001258:	dd00      	ble.n	800125c <__aeabi_dsub+0xf8>
 800125a:	e0fe      	b.n	800145a <__aeabi_dsub+0x2f6>
 800125c:	2320      	movs	r3, #32
 800125e:	0010      	movs	r0, r2
 8001260:	0026      	movs	r6, r4
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	409c      	lsls	r4, r3
 8001266:	4098      	lsls	r0, r3
 8001268:	40ce      	lsrs	r6, r1
 800126a:	40ca      	lsrs	r2, r1
 800126c:	1e63      	subs	r3, r4, #1
 800126e:	419c      	sbcs	r4, r3
 8001270:	4330      	orrs	r0, r6
 8001272:	4692      	mov	sl, r2
 8001274:	2600      	movs	r6, #0
 8001276:	4304      	orrs	r4, r0
 8001278:	0763      	lsls	r3, r4, #29
 800127a:	d009      	beq.n	8001290 <__aeabi_dsub+0x12c>
 800127c:	230f      	movs	r3, #15
 800127e:	4023      	ands	r3, r4
 8001280:	2b04      	cmp	r3, #4
 8001282:	d005      	beq.n	8001290 <__aeabi_dsub+0x12c>
 8001284:	1d23      	adds	r3, r4, #4
 8001286:	42a3      	cmp	r3, r4
 8001288:	41a4      	sbcs	r4, r4
 800128a:	4264      	negs	r4, r4
 800128c:	44a2      	add	sl, r4
 800128e:	001c      	movs	r4, r3
 8001290:	4653      	mov	r3, sl
 8001292:	021b      	lsls	r3, r3, #8
 8001294:	d400      	bmi.n	8001298 <__aeabi_dsub+0x134>
 8001296:	e0f2      	b.n	800147e <__aeabi_dsub+0x31a>
 8001298:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <__aeabi_dsub+0x368>)
 800129a:	3601      	adds	r6, #1
 800129c:	429e      	cmp	r6, r3
 800129e:	d100      	bne.n	80012a2 <__aeabi_dsub+0x13e>
 80012a0:	e10f      	b.n	80014c2 <__aeabi_dsub+0x35e>
 80012a2:	4653      	mov	r3, sl
 80012a4:	498a      	ldr	r1, [pc, #552]	; (80014d0 <__aeabi_dsub+0x36c>)
 80012a6:	08e4      	lsrs	r4, r4, #3
 80012a8:	400b      	ands	r3, r1
 80012aa:	0019      	movs	r1, r3
 80012ac:	075b      	lsls	r3, r3, #29
 80012ae:	4323      	orrs	r3, r4
 80012b0:	0572      	lsls	r2, r6, #21
 80012b2:	024c      	lsls	r4, r1, #9
 80012b4:	0b24      	lsrs	r4, r4, #12
 80012b6:	0d52      	lsrs	r2, r2, #21
 80012b8:	0512      	lsls	r2, r2, #20
 80012ba:	4322      	orrs	r2, r4
 80012bc:	07ed      	lsls	r5, r5, #31
 80012be:	432a      	orrs	r2, r5
 80012c0:	0018      	movs	r0, r3
 80012c2:	0011      	movs	r1, r2
 80012c4:	b003      	add	sp, #12
 80012c6:	bcf0      	pop	{r4, r5, r6, r7}
 80012c8:	46bb      	mov	fp, r7
 80012ca:	46b2      	mov	sl, r6
 80012cc:	46a9      	mov	r9, r5
 80012ce:	46a0      	mov	r8, r4
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	1ab4      	subs	r4, r6, r2
 80012d4:	46a4      	mov	ip, r4
 80012d6:	2c00      	cmp	r4, #0
 80012d8:	dd59      	ble.n	800138e <__aeabi_dsub+0x22a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_dsub+0x17c>
 80012de:	e0b0      	b.n	8001442 <__aeabi_dsub+0x2de>
 80012e0:	4556      	cmp	r6, sl
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dsub+0x182>
 80012e4:	e0fa      	b.n	80014dc <__aeabi_dsub+0x378>
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	0412      	lsls	r2, r2, #16
 80012ea:	4317      	orrs	r7, r2
 80012ec:	4662      	mov	r2, ip
 80012ee:	2a38      	cmp	r2, #56	; 0x38
 80012f0:	dd00      	ble.n	80012f4 <__aeabi_dsub+0x190>
 80012f2:	e0d4      	b.n	800149e <__aeabi_dsub+0x33a>
 80012f4:	2a1f      	cmp	r2, #31
 80012f6:	dc00      	bgt.n	80012fa <__aeabi_dsub+0x196>
 80012f8:	e1c0      	b.n	800167c <__aeabi_dsub+0x518>
 80012fa:	0039      	movs	r1, r7
 80012fc:	3a20      	subs	r2, #32
 80012fe:	40d1      	lsrs	r1, r2
 8001300:	4662      	mov	r2, ip
 8001302:	2a20      	cmp	r2, #32
 8001304:	d006      	beq.n	8001314 <__aeabi_dsub+0x1b0>
 8001306:	4664      	mov	r4, ip
 8001308:	2240      	movs	r2, #64	; 0x40
 800130a:	1b12      	subs	r2, r2, r4
 800130c:	003c      	movs	r4, r7
 800130e:	4094      	lsls	r4, r2
 8001310:	4304      	orrs	r4, r0
 8001312:	9401      	str	r4, [sp, #4]
 8001314:	9c01      	ldr	r4, [sp, #4]
 8001316:	1e62      	subs	r2, r4, #1
 8001318:	4194      	sbcs	r4, r2
 800131a:	430c      	orrs	r4, r1
 800131c:	e0c3      	b.n	80014a6 <__aeabi_dsub+0x342>
 800131e:	003c      	movs	r4, r7
 8001320:	4304      	orrs	r4, r0
 8001322:	d02b      	beq.n	800137c <__aeabi_dsub+0x218>
 8001324:	468b      	mov	fp, r1
 8001326:	428d      	cmp	r5, r1
 8001328:	d02e      	beq.n	8001388 <__aeabi_dsub+0x224>
 800132a:	4c6a      	ldr	r4, [pc, #424]	; (80014d4 <__aeabi_dsub+0x370>)
 800132c:	46a4      	mov	ip, r4
 800132e:	44b4      	add	ip, r6
 8001330:	4664      	mov	r4, ip
 8001332:	2c00      	cmp	r4, #0
 8001334:	d05f      	beq.n	80013f6 <__aeabi_dsub+0x292>
 8001336:	1b94      	subs	r4, r2, r6
 8001338:	46a4      	mov	ip, r4
 800133a:	2e00      	cmp	r6, #0
 800133c:	d000      	beq.n	8001340 <__aeabi_dsub+0x1dc>
 800133e:	e120      	b.n	8001582 <__aeabi_dsub+0x41e>
 8001340:	464c      	mov	r4, r9
 8001342:	431c      	orrs	r4, r3
 8001344:	d100      	bne.n	8001348 <__aeabi_dsub+0x1e4>
 8001346:	e1c7      	b.n	80016d8 <__aeabi_dsub+0x574>
 8001348:	4661      	mov	r1, ip
 800134a:	1e4c      	subs	r4, r1, #1
 800134c:	2901      	cmp	r1, #1
 800134e:	d100      	bne.n	8001352 <__aeabi_dsub+0x1ee>
 8001350:	e223      	b.n	800179a <__aeabi_dsub+0x636>
 8001352:	4d5e      	ldr	r5, [pc, #376]	; (80014cc <__aeabi_dsub+0x368>)
 8001354:	45ac      	cmp	ip, r5
 8001356:	d100      	bne.n	800135a <__aeabi_dsub+0x1f6>
 8001358:	e1d8      	b.n	800170c <__aeabi_dsub+0x5a8>
 800135a:	46a4      	mov	ip, r4
 800135c:	e11a      	b.n	8001594 <__aeabi_dsub+0x430>
 800135e:	003a      	movs	r2, r7
 8001360:	4302      	orrs	r2, r0
 8001362:	d100      	bne.n	8001366 <__aeabi_dsub+0x202>
 8001364:	e0e4      	b.n	8001530 <__aeabi_dsub+0x3cc>
 8001366:	0022      	movs	r2, r4
 8001368:	3a01      	subs	r2, #1
 800136a:	2c01      	cmp	r4, #1
 800136c:	d100      	bne.n	8001370 <__aeabi_dsub+0x20c>
 800136e:	e1c3      	b.n	80016f8 <__aeabi_dsub+0x594>
 8001370:	4956      	ldr	r1, [pc, #344]	; (80014cc <__aeabi_dsub+0x368>)
 8001372:	428c      	cmp	r4, r1
 8001374:	d100      	bne.n	8001378 <__aeabi_dsub+0x214>
 8001376:	e0b1      	b.n	80014dc <__aeabi_dsub+0x378>
 8001378:	4694      	mov	ip, r2
 800137a:	e72b      	b.n	80011d4 <__aeabi_dsub+0x70>
 800137c:	2401      	movs	r4, #1
 800137e:	4061      	eors	r1, r4
 8001380:	468b      	mov	fp, r1
 8001382:	428d      	cmp	r5, r1
 8001384:	d000      	beq.n	8001388 <__aeabi_dsub+0x224>
 8001386:	e716      	b.n	80011b6 <__aeabi_dsub+0x52>
 8001388:	4952      	ldr	r1, [pc, #328]	; (80014d4 <__aeabi_dsub+0x370>)
 800138a:	468c      	mov	ip, r1
 800138c:	44b4      	add	ip, r6
 800138e:	4664      	mov	r4, ip
 8001390:	2c00      	cmp	r4, #0
 8001392:	d100      	bne.n	8001396 <__aeabi_dsub+0x232>
 8001394:	e0d3      	b.n	800153e <__aeabi_dsub+0x3da>
 8001396:	1b91      	subs	r1, r2, r6
 8001398:	468c      	mov	ip, r1
 800139a:	2e00      	cmp	r6, #0
 800139c:	d100      	bne.n	80013a0 <__aeabi_dsub+0x23c>
 800139e:	e15e      	b.n	800165e <__aeabi_dsub+0x4fa>
 80013a0:	494a      	ldr	r1, [pc, #296]	; (80014cc <__aeabi_dsub+0x368>)
 80013a2:	428a      	cmp	r2, r1
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dsub+0x244>
 80013a6:	e1be      	b.n	8001726 <__aeabi_dsub+0x5c2>
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	464c      	mov	r4, r9
 80013ac:	0409      	lsls	r1, r1, #16
 80013ae:	430c      	orrs	r4, r1
 80013b0:	46a1      	mov	r9, r4
 80013b2:	4661      	mov	r1, ip
 80013b4:	2938      	cmp	r1, #56	; 0x38
 80013b6:	dd00      	ble.n	80013ba <__aeabi_dsub+0x256>
 80013b8:	e1ba      	b.n	8001730 <__aeabi_dsub+0x5cc>
 80013ba:	291f      	cmp	r1, #31
 80013bc:	dd00      	ble.n	80013c0 <__aeabi_dsub+0x25c>
 80013be:	e227      	b.n	8001810 <__aeabi_dsub+0x6ac>
 80013c0:	2420      	movs	r4, #32
 80013c2:	1a64      	subs	r4, r4, r1
 80013c4:	4649      	mov	r1, r9
 80013c6:	40a1      	lsls	r1, r4
 80013c8:	001e      	movs	r6, r3
 80013ca:	4688      	mov	r8, r1
 80013cc:	4661      	mov	r1, ip
 80013ce:	40a3      	lsls	r3, r4
 80013d0:	40ce      	lsrs	r6, r1
 80013d2:	4641      	mov	r1, r8
 80013d4:	1e5c      	subs	r4, r3, #1
 80013d6:	41a3      	sbcs	r3, r4
 80013d8:	4331      	orrs	r1, r6
 80013da:	4319      	orrs	r1, r3
 80013dc:	000c      	movs	r4, r1
 80013de:	4663      	mov	r3, ip
 80013e0:	4649      	mov	r1, r9
 80013e2:	40d9      	lsrs	r1, r3
 80013e4:	187f      	adds	r7, r7, r1
 80013e6:	1824      	adds	r4, r4, r0
 80013e8:	4284      	cmp	r4, r0
 80013ea:	419b      	sbcs	r3, r3
 80013ec:	425b      	negs	r3, r3
 80013ee:	469a      	mov	sl, r3
 80013f0:	0016      	movs	r6, r2
 80013f2:	44ba      	add	sl, r7
 80013f4:	e05d      	b.n	80014b2 <__aeabi_dsub+0x34e>
 80013f6:	4c38      	ldr	r4, [pc, #224]	; (80014d8 <__aeabi_dsub+0x374>)
 80013f8:	1c72      	adds	r2, r6, #1
 80013fa:	4222      	tst	r2, r4
 80013fc:	d000      	beq.n	8001400 <__aeabi_dsub+0x29c>
 80013fe:	e0df      	b.n	80015c0 <__aeabi_dsub+0x45c>
 8001400:	464a      	mov	r2, r9
 8001402:	431a      	orrs	r2, r3
 8001404:	2e00      	cmp	r6, #0
 8001406:	d000      	beq.n	800140a <__aeabi_dsub+0x2a6>
 8001408:	e15c      	b.n	80016c4 <__aeabi_dsub+0x560>
 800140a:	2a00      	cmp	r2, #0
 800140c:	d100      	bne.n	8001410 <__aeabi_dsub+0x2ac>
 800140e:	e1cf      	b.n	80017b0 <__aeabi_dsub+0x64c>
 8001410:	003a      	movs	r2, r7
 8001412:	4302      	orrs	r2, r0
 8001414:	d100      	bne.n	8001418 <__aeabi_dsub+0x2b4>
 8001416:	e17f      	b.n	8001718 <__aeabi_dsub+0x5b4>
 8001418:	1a1c      	subs	r4, r3, r0
 800141a:	464a      	mov	r2, r9
 800141c:	42a3      	cmp	r3, r4
 800141e:	4189      	sbcs	r1, r1
 8001420:	1bd2      	subs	r2, r2, r7
 8001422:	4249      	negs	r1, r1
 8001424:	1a52      	subs	r2, r2, r1
 8001426:	4692      	mov	sl, r2
 8001428:	0212      	lsls	r2, r2, #8
 800142a:	d400      	bmi.n	800142e <__aeabi_dsub+0x2ca>
 800142c:	e20a      	b.n	8001844 <__aeabi_dsub+0x6e0>
 800142e:	1ac4      	subs	r4, r0, r3
 8001430:	42a0      	cmp	r0, r4
 8001432:	4180      	sbcs	r0, r0
 8001434:	464b      	mov	r3, r9
 8001436:	4240      	negs	r0, r0
 8001438:	1aff      	subs	r7, r7, r3
 800143a:	1a3b      	subs	r3, r7, r0
 800143c:	469a      	mov	sl, r3
 800143e:	465d      	mov	r5, fp
 8001440:	e71a      	b.n	8001278 <__aeabi_dsub+0x114>
 8001442:	003a      	movs	r2, r7
 8001444:	4302      	orrs	r2, r0
 8001446:	d073      	beq.n	8001530 <__aeabi_dsub+0x3cc>
 8001448:	0022      	movs	r2, r4
 800144a:	3a01      	subs	r2, #1
 800144c:	2c01      	cmp	r4, #1
 800144e:	d100      	bne.n	8001452 <__aeabi_dsub+0x2ee>
 8001450:	e0cb      	b.n	80015ea <__aeabi_dsub+0x486>
 8001452:	4554      	cmp	r4, sl
 8001454:	d042      	beq.n	80014dc <__aeabi_dsub+0x378>
 8001456:	4694      	mov	ip, r2
 8001458:	e748      	b.n	80012ec <__aeabi_dsub+0x188>
 800145a:	0010      	movs	r0, r2
 800145c:	3b1f      	subs	r3, #31
 800145e:	40d8      	lsrs	r0, r3
 8001460:	2920      	cmp	r1, #32
 8001462:	d003      	beq.n	800146c <__aeabi_dsub+0x308>
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	1a5b      	subs	r3, r3, r1
 8001468:	409a      	lsls	r2, r3
 800146a:	4314      	orrs	r4, r2
 800146c:	1e63      	subs	r3, r4, #1
 800146e:	419c      	sbcs	r4, r3
 8001470:	2300      	movs	r3, #0
 8001472:	2600      	movs	r6, #0
 8001474:	469a      	mov	sl, r3
 8001476:	4304      	orrs	r4, r0
 8001478:	0763      	lsls	r3, r4, #29
 800147a:	d000      	beq.n	800147e <__aeabi_dsub+0x31a>
 800147c:	e6fe      	b.n	800127c <__aeabi_dsub+0x118>
 800147e:	4652      	mov	r2, sl
 8001480:	08e3      	lsrs	r3, r4, #3
 8001482:	0752      	lsls	r2, r2, #29
 8001484:	4313      	orrs	r3, r2
 8001486:	4652      	mov	r2, sl
 8001488:	46b4      	mov	ip, r6
 800148a:	08d2      	lsrs	r2, r2, #3
 800148c:	490f      	ldr	r1, [pc, #60]	; (80014cc <__aeabi_dsub+0x368>)
 800148e:	458c      	cmp	ip, r1
 8001490:	d02a      	beq.n	80014e8 <__aeabi_dsub+0x384>
 8001492:	0312      	lsls	r2, r2, #12
 8001494:	0b14      	lsrs	r4, r2, #12
 8001496:	4662      	mov	r2, ip
 8001498:	0552      	lsls	r2, r2, #21
 800149a:	0d52      	lsrs	r2, r2, #21
 800149c:	e70c      	b.n	80012b8 <__aeabi_dsub+0x154>
 800149e:	003c      	movs	r4, r7
 80014a0:	4304      	orrs	r4, r0
 80014a2:	1e62      	subs	r2, r4, #1
 80014a4:	4194      	sbcs	r4, r2
 80014a6:	18e4      	adds	r4, r4, r3
 80014a8:	429c      	cmp	r4, r3
 80014aa:	4192      	sbcs	r2, r2
 80014ac:	4252      	negs	r2, r2
 80014ae:	444a      	add	r2, r9
 80014b0:	4692      	mov	sl, r2
 80014b2:	4653      	mov	r3, sl
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	d5df      	bpl.n	8001478 <__aeabi_dsub+0x314>
 80014b8:	4b04      	ldr	r3, [pc, #16]	; (80014cc <__aeabi_dsub+0x368>)
 80014ba:	3601      	adds	r6, #1
 80014bc:	429e      	cmp	r6, r3
 80014be:	d000      	beq.n	80014c2 <__aeabi_dsub+0x35e>
 80014c0:	e0a0      	b.n	8001604 <__aeabi_dsub+0x4a0>
 80014c2:	0032      	movs	r2, r6
 80014c4:	2400      	movs	r4, #0
 80014c6:	2300      	movs	r3, #0
 80014c8:	e6f6      	b.n	80012b8 <__aeabi_dsub+0x154>
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	000007ff 	.word	0x000007ff
 80014d0:	ff7fffff 	.word	0xff7fffff
 80014d4:	fffff801 	.word	0xfffff801
 80014d8:	000007fe 	.word	0x000007fe
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	464a      	mov	r2, r9
 80014e0:	0752      	lsls	r2, r2, #29
 80014e2:	4313      	orrs	r3, r2
 80014e4:	464a      	mov	r2, r9
 80014e6:	08d2      	lsrs	r2, r2, #3
 80014e8:	0019      	movs	r1, r3
 80014ea:	4311      	orrs	r1, r2
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dsub+0x38c>
 80014ee:	e1b5      	b.n	800185c <__aeabi_dsub+0x6f8>
 80014f0:	2480      	movs	r4, #128	; 0x80
 80014f2:	0324      	lsls	r4, r4, #12
 80014f4:	4314      	orrs	r4, r2
 80014f6:	0324      	lsls	r4, r4, #12
 80014f8:	4ad5      	ldr	r2, [pc, #852]	; (8001850 <__aeabi_dsub+0x6ec>)
 80014fa:	0b24      	lsrs	r4, r4, #12
 80014fc:	e6dc      	b.n	80012b8 <__aeabi_dsub+0x154>
 80014fe:	0020      	movs	r0, r4
 8001500:	f000 fa4c 	bl	800199c <__clzsi2>
 8001504:	0003      	movs	r3, r0
 8001506:	3318      	adds	r3, #24
 8001508:	2b1f      	cmp	r3, #31
 800150a:	dc00      	bgt.n	800150e <__aeabi_dsub+0x3aa>
 800150c:	e695      	b.n	800123a <__aeabi_dsub+0xd6>
 800150e:	0022      	movs	r2, r4
 8001510:	3808      	subs	r0, #8
 8001512:	4082      	lsls	r2, r0
 8001514:	2400      	movs	r4, #0
 8001516:	429e      	cmp	r6, r3
 8001518:	dc00      	bgt.n	800151c <__aeabi_dsub+0x3b8>
 800151a:	e69a      	b.n	8001252 <__aeabi_dsub+0xee>
 800151c:	1af6      	subs	r6, r6, r3
 800151e:	4bcd      	ldr	r3, [pc, #820]	; (8001854 <__aeabi_dsub+0x6f0>)
 8001520:	401a      	ands	r2, r3
 8001522:	4692      	mov	sl, r2
 8001524:	e6a8      	b.n	8001278 <__aeabi_dsub+0x114>
 8001526:	003c      	movs	r4, r7
 8001528:	4304      	orrs	r4, r0
 800152a:	1e62      	subs	r2, r4, #1
 800152c:	4194      	sbcs	r4, r2
 800152e:	e66c      	b.n	800120a <__aeabi_dsub+0xa6>
 8001530:	464a      	mov	r2, r9
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	0752      	lsls	r2, r2, #29
 8001536:	4313      	orrs	r3, r2
 8001538:	464a      	mov	r2, r9
 800153a:	08d2      	lsrs	r2, r2, #3
 800153c:	e7a6      	b.n	800148c <__aeabi_dsub+0x328>
 800153e:	4cc6      	ldr	r4, [pc, #792]	; (8001858 <__aeabi_dsub+0x6f4>)
 8001540:	1c72      	adds	r2, r6, #1
 8001542:	4222      	tst	r2, r4
 8001544:	d000      	beq.n	8001548 <__aeabi_dsub+0x3e4>
 8001546:	e0ac      	b.n	80016a2 <__aeabi_dsub+0x53e>
 8001548:	464a      	mov	r2, r9
 800154a:	431a      	orrs	r2, r3
 800154c:	2e00      	cmp	r6, #0
 800154e:	d000      	beq.n	8001552 <__aeabi_dsub+0x3ee>
 8001550:	e105      	b.n	800175e <__aeabi_dsub+0x5fa>
 8001552:	2a00      	cmp	r2, #0
 8001554:	d100      	bne.n	8001558 <__aeabi_dsub+0x3f4>
 8001556:	e156      	b.n	8001806 <__aeabi_dsub+0x6a2>
 8001558:	003a      	movs	r2, r7
 800155a:	4302      	orrs	r2, r0
 800155c:	d100      	bne.n	8001560 <__aeabi_dsub+0x3fc>
 800155e:	e0db      	b.n	8001718 <__aeabi_dsub+0x5b4>
 8001560:	181c      	adds	r4, r3, r0
 8001562:	429c      	cmp	r4, r3
 8001564:	419b      	sbcs	r3, r3
 8001566:	444f      	add	r7, r9
 8001568:	46ba      	mov	sl, r7
 800156a:	425b      	negs	r3, r3
 800156c:	449a      	add	sl, r3
 800156e:	4653      	mov	r3, sl
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	d400      	bmi.n	8001576 <__aeabi_dsub+0x412>
 8001574:	e780      	b.n	8001478 <__aeabi_dsub+0x314>
 8001576:	4652      	mov	r2, sl
 8001578:	4bb6      	ldr	r3, [pc, #728]	; (8001854 <__aeabi_dsub+0x6f0>)
 800157a:	2601      	movs	r6, #1
 800157c:	401a      	ands	r2, r3
 800157e:	4692      	mov	sl, r2
 8001580:	e77a      	b.n	8001478 <__aeabi_dsub+0x314>
 8001582:	4cb3      	ldr	r4, [pc, #716]	; (8001850 <__aeabi_dsub+0x6ec>)
 8001584:	42a2      	cmp	r2, r4
 8001586:	d100      	bne.n	800158a <__aeabi_dsub+0x426>
 8001588:	e0c0      	b.n	800170c <__aeabi_dsub+0x5a8>
 800158a:	2480      	movs	r4, #128	; 0x80
 800158c:	464d      	mov	r5, r9
 800158e:	0424      	lsls	r4, r4, #16
 8001590:	4325      	orrs	r5, r4
 8001592:	46a9      	mov	r9, r5
 8001594:	4664      	mov	r4, ip
 8001596:	2c38      	cmp	r4, #56	; 0x38
 8001598:	dc53      	bgt.n	8001642 <__aeabi_dsub+0x4de>
 800159a:	4661      	mov	r1, ip
 800159c:	2c1f      	cmp	r4, #31
 800159e:	dd00      	ble.n	80015a2 <__aeabi_dsub+0x43e>
 80015a0:	e0cd      	b.n	800173e <__aeabi_dsub+0x5da>
 80015a2:	2520      	movs	r5, #32
 80015a4:	001e      	movs	r6, r3
 80015a6:	1b2d      	subs	r5, r5, r4
 80015a8:	464c      	mov	r4, r9
 80015aa:	40ab      	lsls	r3, r5
 80015ac:	40ac      	lsls	r4, r5
 80015ae:	40ce      	lsrs	r6, r1
 80015b0:	1e5d      	subs	r5, r3, #1
 80015b2:	41ab      	sbcs	r3, r5
 80015b4:	4334      	orrs	r4, r6
 80015b6:	4323      	orrs	r3, r4
 80015b8:	464c      	mov	r4, r9
 80015ba:	40cc      	lsrs	r4, r1
 80015bc:	1b3f      	subs	r7, r7, r4
 80015be:	e045      	b.n	800164c <__aeabi_dsub+0x4e8>
 80015c0:	464a      	mov	r2, r9
 80015c2:	1a1c      	subs	r4, r3, r0
 80015c4:	1bd1      	subs	r1, r2, r7
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	4192      	sbcs	r2, r2
 80015ca:	4252      	negs	r2, r2
 80015cc:	4692      	mov	sl, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	4651      	mov	r1, sl
 80015d2:	1a52      	subs	r2, r2, r1
 80015d4:	4692      	mov	sl, r2
 80015d6:	0212      	lsls	r2, r2, #8
 80015d8:	d500      	bpl.n	80015dc <__aeabi_dsub+0x478>
 80015da:	e083      	b.n	80016e4 <__aeabi_dsub+0x580>
 80015dc:	4653      	mov	r3, sl
 80015de:	4323      	orrs	r3, r4
 80015e0:	d000      	beq.n	80015e4 <__aeabi_dsub+0x480>
 80015e2:	e621      	b.n	8001228 <__aeabi_dsub+0xc4>
 80015e4:	2200      	movs	r2, #0
 80015e6:	2500      	movs	r5, #0
 80015e8:	e753      	b.n	8001492 <__aeabi_dsub+0x32e>
 80015ea:	181c      	adds	r4, r3, r0
 80015ec:	429c      	cmp	r4, r3
 80015ee:	419b      	sbcs	r3, r3
 80015f0:	444f      	add	r7, r9
 80015f2:	46ba      	mov	sl, r7
 80015f4:	425b      	negs	r3, r3
 80015f6:	449a      	add	sl, r3
 80015f8:	4653      	mov	r3, sl
 80015fa:	2601      	movs	r6, #1
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	d400      	bmi.n	8001602 <__aeabi_dsub+0x49e>
 8001600:	e73a      	b.n	8001478 <__aeabi_dsub+0x314>
 8001602:	2602      	movs	r6, #2
 8001604:	4652      	mov	r2, sl
 8001606:	4b93      	ldr	r3, [pc, #588]	; (8001854 <__aeabi_dsub+0x6f0>)
 8001608:	2101      	movs	r1, #1
 800160a:	401a      	ands	r2, r3
 800160c:	0013      	movs	r3, r2
 800160e:	4021      	ands	r1, r4
 8001610:	0862      	lsrs	r2, r4, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	07dc      	lsls	r4, r3, #31
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	469a      	mov	sl, r3
 800161a:	4314      	orrs	r4, r2
 800161c:	e62c      	b.n	8001278 <__aeabi_dsub+0x114>
 800161e:	0039      	movs	r1, r7
 8001620:	3a20      	subs	r2, #32
 8001622:	40d1      	lsrs	r1, r2
 8001624:	4662      	mov	r2, ip
 8001626:	2a20      	cmp	r2, #32
 8001628:	d006      	beq.n	8001638 <__aeabi_dsub+0x4d4>
 800162a:	4664      	mov	r4, ip
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	1b12      	subs	r2, r2, r4
 8001630:	003c      	movs	r4, r7
 8001632:	4094      	lsls	r4, r2
 8001634:	4304      	orrs	r4, r0
 8001636:	9401      	str	r4, [sp, #4]
 8001638:	9c01      	ldr	r4, [sp, #4]
 800163a:	1e62      	subs	r2, r4, #1
 800163c:	4194      	sbcs	r4, r2
 800163e:	430c      	orrs	r4, r1
 8001640:	e5e3      	b.n	800120a <__aeabi_dsub+0xa6>
 8001642:	4649      	mov	r1, r9
 8001644:	4319      	orrs	r1, r3
 8001646:	000b      	movs	r3, r1
 8001648:	1e5c      	subs	r4, r3, #1
 800164a:	41a3      	sbcs	r3, r4
 800164c:	1ac4      	subs	r4, r0, r3
 800164e:	42a0      	cmp	r0, r4
 8001650:	419b      	sbcs	r3, r3
 8001652:	425b      	negs	r3, r3
 8001654:	1afb      	subs	r3, r7, r3
 8001656:	469a      	mov	sl, r3
 8001658:	465d      	mov	r5, fp
 800165a:	0016      	movs	r6, r2
 800165c:	e5dc      	b.n	8001218 <__aeabi_dsub+0xb4>
 800165e:	4649      	mov	r1, r9
 8001660:	4319      	orrs	r1, r3
 8001662:	d100      	bne.n	8001666 <__aeabi_dsub+0x502>
 8001664:	e0ae      	b.n	80017c4 <__aeabi_dsub+0x660>
 8001666:	4661      	mov	r1, ip
 8001668:	4664      	mov	r4, ip
 800166a:	3901      	subs	r1, #1
 800166c:	2c01      	cmp	r4, #1
 800166e:	d100      	bne.n	8001672 <__aeabi_dsub+0x50e>
 8001670:	e0e0      	b.n	8001834 <__aeabi_dsub+0x6d0>
 8001672:	4c77      	ldr	r4, [pc, #476]	; (8001850 <__aeabi_dsub+0x6ec>)
 8001674:	45a4      	cmp	ip, r4
 8001676:	d056      	beq.n	8001726 <__aeabi_dsub+0x5c2>
 8001678:	468c      	mov	ip, r1
 800167a:	e69a      	b.n	80013b2 <__aeabi_dsub+0x24e>
 800167c:	4661      	mov	r1, ip
 800167e:	2220      	movs	r2, #32
 8001680:	003c      	movs	r4, r7
 8001682:	1a52      	subs	r2, r2, r1
 8001684:	4094      	lsls	r4, r2
 8001686:	0001      	movs	r1, r0
 8001688:	4090      	lsls	r0, r2
 800168a:	46a0      	mov	r8, r4
 800168c:	4664      	mov	r4, ip
 800168e:	1e42      	subs	r2, r0, #1
 8001690:	4190      	sbcs	r0, r2
 8001692:	4662      	mov	r2, ip
 8001694:	40e1      	lsrs	r1, r4
 8001696:	4644      	mov	r4, r8
 8001698:	40d7      	lsrs	r7, r2
 800169a:	430c      	orrs	r4, r1
 800169c:	4304      	orrs	r4, r0
 800169e:	44b9      	add	r9, r7
 80016a0:	e701      	b.n	80014a6 <__aeabi_dsub+0x342>
 80016a2:	496b      	ldr	r1, [pc, #428]	; (8001850 <__aeabi_dsub+0x6ec>)
 80016a4:	428a      	cmp	r2, r1
 80016a6:	d100      	bne.n	80016aa <__aeabi_dsub+0x546>
 80016a8:	e70c      	b.n	80014c4 <__aeabi_dsub+0x360>
 80016aa:	1818      	adds	r0, r3, r0
 80016ac:	4298      	cmp	r0, r3
 80016ae:	419b      	sbcs	r3, r3
 80016b0:	444f      	add	r7, r9
 80016b2:	425b      	negs	r3, r3
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	07dc      	lsls	r4, r3, #31
 80016b8:	0840      	lsrs	r0, r0, #1
 80016ba:	085b      	lsrs	r3, r3, #1
 80016bc:	469a      	mov	sl, r3
 80016be:	0016      	movs	r6, r2
 80016c0:	4304      	orrs	r4, r0
 80016c2:	e6d9      	b.n	8001478 <__aeabi_dsub+0x314>
 80016c4:	2a00      	cmp	r2, #0
 80016c6:	d000      	beq.n	80016ca <__aeabi_dsub+0x566>
 80016c8:	e081      	b.n	80017ce <__aeabi_dsub+0x66a>
 80016ca:	003b      	movs	r3, r7
 80016cc:	4303      	orrs	r3, r0
 80016ce:	d11d      	bne.n	800170c <__aeabi_dsub+0x5a8>
 80016d0:	2280      	movs	r2, #128	; 0x80
 80016d2:	2500      	movs	r5, #0
 80016d4:	0312      	lsls	r2, r2, #12
 80016d6:	e70b      	b.n	80014f0 <__aeabi_dsub+0x38c>
 80016d8:	08c0      	lsrs	r0, r0, #3
 80016da:	077b      	lsls	r3, r7, #29
 80016dc:	465d      	mov	r5, fp
 80016de:	4303      	orrs	r3, r0
 80016e0:	08fa      	lsrs	r2, r7, #3
 80016e2:	e6d3      	b.n	800148c <__aeabi_dsub+0x328>
 80016e4:	1ac4      	subs	r4, r0, r3
 80016e6:	42a0      	cmp	r0, r4
 80016e8:	4180      	sbcs	r0, r0
 80016ea:	464b      	mov	r3, r9
 80016ec:	4240      	negs	r0, r0
 80016ee:	1aff      	subs	r7, r7, r3
 80016f0:	1a3b      	subs	r3, r7, r0
 80016f2:	469a      	mov	sl, r3
 80016f4:	465d      	mov	r5, fp
 80016f6:	e597      	b.n	8001228 <__aeabi_dsub+0xc4>
 80016f8:	1a1c      	subs	r4, r3, r0
 80016fa:	464a      	mov	r2, r9
 80016fc:	42a3      	cmp	r3, r4
 80016fe:	419b      	sbcs	r3, r3
 8001700:	1bd7      	subs	r7, r2, r7
 8001702:	425b      	negs	r3, r3
 8001704:	1afb      	subs	r3, r7, r3
 8001706:	469a      	mov	sl, r3
 8001708:	2601      	movs	r6, #1
 800170a:	e585      	b.n	8001218 <__aeabi_dsub+0xb4>
 800170c:	08c0      	lsrs	r0, r0, #3
 800170e:	077b      	lsls	r3, r7, #29
 8001710:	465d      	mov	r5, fp
 8001712:	4303      	orrs	r3, r0
 8001714:	08fa      	lsrs	r2, r7, #3
 8001716:	e6e7      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001718:	464a      	mov	r2, r9
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	0752      	lsls	r2, r2, #29
 800171e:	4313      	orrs	r3, r2
 8001720:	464a      	mov	r2, r9
 8001722:	08d2      	lsrs	r2, r2, #3
 8001724:	e6b5      	b.n	8001492 <__aeabi_dsub+0x32e>
 8001726:	08c0      	lsrs	r0, r0, #3
 8001728:	077b      	lsls	r3, r7, #29
 800172a:	4303      	orrs	r3, r0
 800172c:	08fa      	lsrs	r2, r7, #3
 800172e:	e6db      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001730:	4649      	mov	r1, r9
 8001732:	4319      	orrs	r1, r3
 8001734:	000b      	movs	r3, r1
 8001736:	1e59      	subs	r1, r3, #1
 8001738:	418b      	sbcs	r3, r1
 800173a:	001c      	movs	r4, r3
 800173c:	e653      	b.n	80013e6 <__aeabi_dsub+0x282>
 800173e:	464d      	mov	r5, r9
 8001740:	3c20      	subs	r4, #32
 8001742:	40e5      	lsrs	r5, r4
 8001744:	2920      	cmp	r1, #32
 8001746:	d005      	beq.n	8001754 <__aeabi_dsub+0x5f0>
 8001748:	2440      	movs	r4, #64	; 0x40
 800174a:	1a64      	subs	r4, r4, r1
 800174c:	4649      	mov	r1, r9
 800174e:	40a1      	lsls	r1, r4
 8001750:	430b      	orrs	r3, r1
 8001752:	4698      	mov	r8, r3
 8001754:	4643      	mov	r3, r8
 8001756:	1e5c      	subs	r4, r3, #1
 8001758:	41a3      	sbcs	r3, r4
 800175a:	432b      	orrs	r3, r5
 800175c:	e776      	b.n	800164c <__aeabi_dsub+0x4e8>
 800175e:	2a00      	cmp	r2, #0
 8001760:	d0e1      	beq.n	8001726 <__aeabi_dsub+0x5c2>
 8001762:	003a      	movs	r2, r7
 8001764:	08db      	lsrs	r3, r3, #3
 8001766:	4302      	orrs	r2, r0
 8001768:	d100      	bne.n	800176c <__aeabi_dsub+0x608>
 800176a:	e6b8      	b.n	80014de <__aeabi_dsub+0x37a>
 800176c:	464a      	mov	r2, r9
 800176e:	0752      	lsls	r2, r2, #29
 8001770:	2480      	movs	r4, #128	; 0x80
 8001772:	4313      	orrs	r3, r2
 8001774:	464a      	mov	r2, r9
 8001776:	0324      	lsls	r4, r4, #12
 8001778:	08d2      	lsrs	r2, r2, #3
 800177a:	4222      	tst	r2, r4
 800177c:	d007      	beq.n	800178e <__aeabi_dsub+0x62a>
 800177e:	08fe      	lsrs	r6, r7, #3
 8001780:	4226      	tst	r6, r4
 8001782:	d104      	bne.n	800178e <__aeabi_dsub+0x62a>
 8001784:	465d      	mov	r5, fp
 8001786:	0032      	movs	r2, r6
 8001788:	08c3      	lsrs	r3, r0, #3
 800178a:	077f      	lsls	r7, r7, #29
 800178c:	433b      	orrs	r3, r7
 800178e:	0f59      	lsrs	r1, r3, #29
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	0749      	lsls	r1, r1, #29
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	430b      	orrs	r3, r1
 8001798:	e6a6      	b.n	80014e8 <__aeabi_dsub+0x384>
 800179a:	1ac4      	subs	r4, r0, r3
 800179c:	42a0      	cmp	r0, r4
 800179e:	4180      	sbcs	r0, r0
 80017a0:	464b      	mov	r3, r9
 80017a2:	4240      	negs	r0, r0
 80017a4:	1aff      	subs	r7, r7, r3
 80017a6:	1a3b      	subs	r3, r7, r0
 80017a8:	469a      	mov	sl, r3
 80017aa:	465d      	mov	r5, fp
 80017ac:	2601      	movs	r6, #1
 80017ae:	e533      	b.n	8001218 <__aeabi_dsub+0xb4>
 80017b0:	003b      	movs	r3, r7
 80017b2:	4303      	orrs	r3, r0
 80017b4:	d100      	bne.n	80017b8 <__aeabi_dsub+0x654>
 80017b6:	e715      	b.n	80015e4 <__aeabi_dsub+0x480>
 80017b8:	08c0      	lsrs	r0, r0, #3
 80017ba:	077b      	lsls	r3, r7, #29
 80017bc:	465d      	mov	r5, fp
 80017be:	4303      	orrs	r3, r0
 80017c0:	08fa      	lsrs	r2, r7, #3
 80017c2:	e666      	b.n	8001492 <__aeabi_dsub+0x32e>
 80017c4:	08c0      	lsrs	r0, r0, #3
 80017c6:	077b      	lsls	r3, r7, #29
 80017c8:	4303      	orrs	r3, r0
 80017ca:	08fa      	lsrs	r2, r7, #3
 80017cc:	e65e      	b.n	800148c <__aeabi_dsub+0x328>
 80017ce:	003a      	movs	r2, r7
 80017d0:	08db      	lsrs	r3, r3, #3
 80017d2:	4302      	orrs	r2, r0
 80017d4:	d100      	bne.n	80017d8 <__aeabi_dsub+0x674>
 80017d6:	e682      	b.n	80014de <__aeabi_dsub+0x37a>
 80017d8:	464a      	mov	r2, r9
 80017da:	0752      	lsls	r2, r2, #29
 80017dc:	2480      	movs	r4, #128	; 0x80
 80017de:	4313      	orrs	r3, r2
 80017e0:	464a      	mov	r2, r9
 80017e2:	0324      	lsls	r4, r4, #12
 80017e4:	08d2      	lsrs	r2, r2, #3
 80017e6:	4222      	tst	r2, r4
 80017e8:	d007      	beq.n	80017fa <__aeabi_dsub+0x696>
 80017ea:	08fe      	lsrs	r6, r7, #3
 80017ec:	4226      	tst	r6, r4
 80017ee:	d104      	bne.n	80017fa <__aeabi_dsub+0x696>
 80017f0:	465d      	mov	r5, fp
 80017f2:	0032      	movs	r2, r6
 80017f4:	08c3      	lsrs	r3, r0, #3
 80017f6:	077f      	lsls	r7, r7, #29
 80017f8:	433b      	orrs	r3, r7
 80017fa:	0f59      	lsrs	r1, r3, #29
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	08db      	lsrs	r3, r3, #3
 8001800:	0749      	lsls	r1, r1, #29
 8001802:	430b      	orrs	r3, r1
 8001804:	e670      	b.n	80014e8 <__aeabi_dsub+0x384>
 8001806:	08c0      	lsrs	r0, r0, #3
 8001808:	077b      	lsls	r3, r7, #29
 800180a:	4303      	orrs	r3, r0
 800180c:	08fa      	lsrs	r2, r7, #3
 800180e:	e640      	b.n	8001492 <__aeabi_dsub+0x32e>
 8001810:	464c      	mov	r4, r9
 8001812:	3920      	subs	r1, #32
 8001814:	40cc      	lsrs	r4, r1
 8001816:	4661      	mov	r1, ip
 8001818:	2920      	cmp	r1, #32
 800181a:	d006      	beq.n	800182a <__aeabi_dsub+0x6c6>
 800181c:	4666      	mov	r6, ip
 800181e:	2140      	movs	r1, #64	; 0x40
 8001820:	1b89      	subs	r1, r1, r6
 8001822:	464e      	mov	r6, r9
 8001824:	408e      	lsls	r6, r1
 8001826:	4333      	orrs	r3, r6
 8001828:	4698      	mov	r8, r3
 800182a:	4643      	mov	r3, r8
 800182c:	1e59      	subs	r1, r3, #1
 800182e:	418b      	sbcs	r3, r1
 8001830:	431c      	orrs	r4, r3
 8001832:	e5d8      	b.n	80013e6 <__aeabi_dsub+0x282>
 8001834:	181c      	adds	r4, r3, r0
 8001836:	4284      	cmp	r4, r0
 8001838:	4180      	sbcs	r0, r0
 800183a:	444f      	add	r7, r9
 800183c:	46ba      	mov	sl, r7
 800183e:	4240      	negs	r0, r0
 8001840:	4482      	add	sl, r0
 8001842:	e6d9      	b.n	80015f8 <__aeabi_dsub+0x494>
 8001844:	4653      	mov	r3, sl
 8001846:	4323      	orrs	r3, r4
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x6e8>
 800184a:	e6cb      	b.n	80015e4 <__aeabi_dsub+0x480>
 800184c:	e614      	b.n	8001478 <__aeabi_dsub+0x314>
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	000007ff 	.word	0x000007ff
 8001854:	ff7fffff 	.word	0xff7fffff
 8001858:	000007fe 	.word	0x000007fe
 800185c:	2300      	movs	r3, #0
 800185e:	4a01      	ldr	r2, [pc, #4]	; (8001864 <__aeabi_dsub+0x700>)
 8001860:	001c      	movs	r4, r3
 8001862:	e529      	b.n	80012b8 <__aeabi_dsub+0x154>
 8001864:	000007ff 	.word	0x000007ff

08001868 <__aeabi_d2iz>:
 8001868:	000a      	movs	r2, r1
 800186a:	b530      	push	{r4, r5, lr}
 800186c:	4c13      	ldr	r4, [pc, #76]	; (80018bc <__aeabi_d2iz+0x54>)
 800186e:	0053      	lsls	r3, r2, #1
 8001870:	0309      	lsls	r1, r1, #12
 8001872:	0005      	movs	r5, r0
 8001874:	0b09      	lsrs	r1, r1, #12
 8001876:	2000      	movs	r0, #0
 8001878:	0d5b      	lsrs	r3, r3, #21
 800187a:	0fd2      	lsrs	r2, r2, #31
 800187c:	42a3      	cmp	r3, r4
 800187e:	dd04      	ble.n	800188a <__aeabi_d2iz+0x22>
 8001880:	480f      	ldr	r0, [pc, #60]	; (80018c0 <__aeabi_d2iz+0x58>)
 8001882:	4283      	cmp	r3, r0
 8001884:	dd02      	ble.n	800188c <__aeabi_d2iz+0x24>
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <__aeabi_d2iz+0x5c>)
 8001888:	18d0      	adds	r0, r2, r3
 800188a:	bd30      	pop	{r4, r5, pc}
 800188c:	2080      	movs	r0, #128	; 0x80
 800188e:	0340      	lsls	r0, r0, #13
 8001890:	4301      	orrs	r1, r0
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <__aeabi_d2iz+0x60>)
 8001894:	1ac0      	subs	r0, r0, r3
 8001896:	281f      	cmp	r0, #31
 8001898:	dd08      	ble.n	80018ac <__aeabi_d2iz+0x44>
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <__aeabi_d2iz+0x64>)
 800189c:	1ac3      	subs	r3, r0, r3
 800189e:	40d9      	lsrs	r1, r3
 80018a0:	000b      	movs	r3, r1
 80018a2:	4258      	negs	r0, r3
 80018a4:	2a00      	cmp	r2, #0
 80018a6:	d1f0      	bne.n	800188a <__aeabi_d2iz+0x22>
 80018a8:	0018      	movs	r0, r3
 80018aa:	e7ee      	b.n	800188a <__aeabi_d2iz+0x22>
 80018ac:	4c08      	ldr	r4, [pc, #32]	; (80018d0 <__aeabi_d2iz+0x68>)
 80018ae:	40c5      	lsrs	r5, r0
 80018b0:	46a4      	mov	ip, r4
 80018b2:	4463      	add	r3, ip
 80018b4:	4099      	lsls	r1, r3
 80018b6:	000b      	movs	r3, r1
 80018b8:	432b      	orrs	r3, r5
 80018ba:	e7f2      	b.n	80018a2 <__aeabi_d2iz+0x3a>
 80018bc:	000003fe 	.word	0x000003fe
 80018c0:	0000041d 	.word	0x0000041d
 80018c4:	7fffffff 	.word	0x7fffffff
 80018c8:	00000433 	.word	0x00000433
 80018cc:	00000413 	.word	0x00000413
 80018d0:	fffffbed 	.word	0xfffffbed

080018d4 <__aeabi_ui2d>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	1e04      	subs	r4, r0, #0
 80018d8:	d010      	beq.n	80018fc <__aeabi_ui2d+0x28>
 80018da:	f000 f85f 	bl	800199c <__clzsi2>
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <__aeabi_ui2d+0x48>)
 80018e0:	1a1b      	subs	r3, r3, r0
 80018e2:	280a      	cmp	r0, #10
 80018e4:	dc11      	bgt.n	800190a <__aeabi_ui2d+0x36>
 80018e6:	220b      	movs	r2, #11
 80018e8:	0021      	movs	r1, r4
 80018ea:	1a12      	subs	r2, r2, r0
 80018ec:	40d1      	lsrs	r1, r2
 80018ee:	3015      	adds	r0, #21
 80018f0:	030a      	lsls	r2, r1, #12
 80018f2:	055b      	lsls	r3, r3, #21
 80018f4:	4084      	lsls	r4, r0
 80018f6:	0b12      	lsrs	r2, r2, #12
 80018f8:	0d5b      	lsrs	r3, r3, #21
 80018fa:	e001      	b.n	8001900 <__aeabi_ui2d+0x2c>
 80018fc:	2300      	movs	r3, #0
 80018fe:	2200      	movs	r2, #0
 8001900:	051b      	lsls	r3, r3, #20
 8001902:	4313      	orrs	r3, r2
 8001904:	0020      	movs	r0, r4
 8001906:	0019      	movs	r1, r3
 8001908:	bd10      	pop	{r4, pc}
 800190a:	0022      	movs	r2, r4
 800190c:	380b      	subs	r0, #11
 800190e:	4082      	lsls	r2, r0
 8001910:	055b      	lsls	r3, r3, #21
 8001912:	0312      	lsls	r2, r2, #12
 8001914:	2400      	movs	r4, #0
 8001916:	0b12      	lsrs	r2, r2, #12
 8001918:	0d5b      	lsrs	r3, r3, #21
 800191a:	e7f1      	b.n	8001900 <__aeabi_ui2d+0x2c>
 800191c:	0000041e 	.word	0x0000041e

08001920 <__aeabi_cdrcmple>:
 8001920:	4684      	mov	ip, r0
 8001922:	0010      	movs	r0, r2
 8001924:	4662      	mov	r2, ip
 8001926:	468c      	mov	ip, r1
 8001928:	0019      	movs	r1, r3
 800192a:	4663      	mov	r3, ip
 800192c:	e000      	b.n	8001930 <__aeabi_cdcmpeq>
 800192e:	46c0      	nop			; (mov r8, r8)

08001930 <__aeabi_cdcmpeq>:
 8001930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001932:	f000 f905 	bl	8001b40 <__ledf2>
 8001936:	2800      	cmp	r0, #0
 8001938:	d401      	bmi.n	800193e <__aeabi_cdcmpeq+0xe>
 800193a:	2100      	movs	r1, #0
 800193c:	42c8      	cmn	r0, r1
 800193e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001940 <__aeabi_dcmpeq>:
 8001940:	b510      	push	{r4, lr}
 8001942:	f000 f855 	bl	80019f0 <__eqdf2>
 8001946:	4240      	negs	r0, r0
 8001948:	3001      	adds	r0, #1
 800194a:	bd10      	pop	{r4, pc}

0800194c <__aeabi_dcmplt>:
 800194c:	b510      	push	{r4, lr}
 800194e:	f000 f8f7 	bl	8001b40 <__ledf2>
 8001952:	2800      	cmp	r0, #0
 8001954:	db01      	blt.n	800195a <__aeabi_dcmplt+0xe>
 8001956:	2000      	movs	r0, #0
 8001958:	bd10      	pop	{r4, pc}
 800195a:	2001      	movs	r0, #1
 800195c:	bd10      	pop	{r4, pc}
 800195e:	46c0      	nop			; (mov r8, r8)

08001960 <__aeabi_dcmple>:
 8001960:	b510      	push	{r4, lr}
 8001962:	f000 f8ed 	bl	8001b40 <__ledf2>
 8001966:	2800      	cmp	r0, #0
 8001968:	dd01      	ble.n	800196e <__aeabi_dcmple+0xe>
 800196a:	2000      	movs	r0, #0
 800196c:	bd10      	pop	{r4, pc}
 800196e:	2001      	movs	r0, #1
 8001970:	bd10      	pop	{r4, pc}
 8001972:	46c0      	nop			; (mov r8, r8)

08001974 <__aeabi_dcmpgt>:
 8001974:	b510      	push	{r4, lr}
 8001976:	f000 f87d 	bl	8001a74 <__gedf2>
 800197a:	2800      	cmp	r0, #0
 800197c:	dc01      	bgt.n	8001982 <__aeabi_dcmpgt+0xe>
 800197e:	2000      	movs	r0, #0
 8001980:	bd10      	pop	{r4, pc}
 8001982:	2001      	movs	r0, #1
 8001984:	bd10      	pop	{r4, pc}
 8001986:	46c0      	nop			; (mov r8, r8)

08001988 <__aeabi_dcmpge>:
 8001988:	b510      	push	{r4, lr}
 800198a:	f000 f873 	bl	8001a74 <__gedf2>
 800198e:	2800      	cmp	r0, #0
 8001990:	da01      	bge.n	8001996 <__aeabi_dcmpge+0xe>
 8001992:	2000      	movs	r0, #0
 8001994:	bd10      	pop	{r4, pc}
 8001996:	2001      	movs	r0, #1
 8001998:	bd10      	pop	{r4, pc}
 800199a:	46c0      	nop			; (mov r8, r8)

0800199c <__clzsi2>:
 800199c:	211c      	movs	r1, #28
 800199e:	2301      	movs	r3, #1
 80019a0:	041b      	lsls	r3, r3, #16
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d301      	bcc.n	80019aa <__clzsi2+0xe>
 80019a6:	0c00      	lsrs	r0, r0, #16
 80019a8:	3910      	subs	r1, #16
 80019aa:	0a1b      	lsrs	r3, r3, #8
 80019ac:	4298      	cmp	r0, r3
 80019ae:	d301      	bcc.n	80019b4 <__clzsi2+0x18>
 80019b0:	0a00      	lsrs	r0, r0, #8
 80019b2:	3908      	subs	r1, #8
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d301      	bcc.n	80019be <__clzsi2+0x22>
 80019ba:	0900      	lsrs	r0, r0, #4
 80019bc:	3904      	subs	r1, #4
 80019be:	a202      	add	r2, pc, #8	; (adr r2, 80019c8 <__clzsi2+0x2c>)
 80019c0:	5c10      	ldrb	r0, [r2, r0]
 80019c2:	1840      	adds	r0, r0, r1
 80019c4:	4770      	bx	lr
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	02020304 	.word	0x02020304
 80019cc:	01010101 	.word	0x01010101
	...

080019d8 <__clzdi2>:
 80019d8:	b510      	push	{r4, lr}
 80019da:	2900      	cmp	r1, #0
 80019dc:	d103      	bne.n	80019e6 <__clzdi2+0xe>
 80019de:	f7ff ffdd 	bl	800199c <__clzsi2>
 80019e2:	3020      	adds	r0, #32
 80019e4:	e002      	b.n	80019ec <__clzdi2+0x14>
 80019e6:	0008      	movs	r0, r1
 80019e8:	f7ff ffd8 	bl	800199c <__clzsi2>
 80019ec:	bd10      	pop	{r4, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)

080019f0 <__eqdf2>:
 80019f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f2:	464e      	mov	r6, r9
 80019f4:	4645      	mov	r5, r8
 80019f6:	46de      	mov	lr, fp
 80019f8:	4657      	mov	r7, sl
 80019fa:	4690      	mov	r8, r2
 80019fc:	b5e0      	push	{r5, r6, r7, lr}
 80019fe:	0017      	movs	r7, r2
 8001a00:	031a      	lsls	r2, r3, #12
 8001a02:	0b12      	lsrs	r2, r2, #12
 8001a04:	0005      	movs	r5, r0
 8001a06:	4684      	mov	ip, r0
 8001a08:	4819      	ldr	r0, [pc, #100]	; (8001a70 <__eqdf2+0x80>)
 8001a0a:	030e      	lsls	r6, r1, #12
 8001a0c:	004c      	lsls	r4, r1, #1
 8001a0e:	4691      	mov	r9, r2
 8001a10:	005a      	lsls	r2, r3, #1
 8001a12:	0fdb      	lsrs	r3, r3, #31
 8001a14:	469b      	mov	fp, r3
 8001a16:	0b36      	lsrs	r6, r6, #12
 8001a18:	0d64      	lsrs	r4, r4, #21
 8001a1a:	0fc9      	lsrs	r1, r1, #31
 8001a1c:	0d52      	lsrs	r2, r2, #21
 8001a1e:	4284      	cmp	r4, r0
 8001a20:	d019      	beq.n	8001a56 <__eqdf2+0x66>
 8001a22:	4282      	cmp	r2, r0
 8001a24:	d010      	beq.n	8001a48 <__eqdf2+0x58>
 8001a26:	2001      	movs	r0, #1
 8001a28:	4294      	cmp	r4, r2
 8001a2a:	d10e      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a2c:	454e      	cmp	r6, r9
 8001a2e:	d10c      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a30:	2001      	movs	r0, #1
 8001a32:	45c4      	cmp	ip, r8
 8001a34:	d109      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a36:	4559      	cmp	r1, fp
 8001a38:	d017      	beq.n	8001a6a <__eqdf2+0x7a>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d105      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a3e:	0030      	movs	r0, r6
 8001a40:	4328      	orrs	r0, r5
 8001a42:	1e43      	subs	r3, r0, #1
 8001a44:	4198      	sbcs	r0, r3
 8001a46:	e000      	b.n	8001a4a <__eqdf2+0x5a>
 8001a48:	2001      	movs	r0, #1
 8001a4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	46b2      	mov	sl, r6
 8001a50:	46a9      	mov	r9, r5
 8001a52:	46a0      	mov	r8, r4
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	0033      	movs	r3, r6
 8001a58:	2001      	movs	r0, #1
 8001a5a:	432b      	orrs	r3, r5
 8001a5c:	d1f5      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a5e:	42a2      	cmp	r2, r4
 8001a60:	d1f3      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a62:	464b      	mov	r3, r9
 8001a64:	433b      	orrs	r3, r7
 8001a66:	d1f0      	bne.n	8001a4a <__eqdf2+0x5a>
 8001a68:	e7e2      	b.n	8001a30 <__eqdf2+0x40>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e7ed      	b.n	8001a4a <__eqdf2+0x5a>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	000007ff 	.word	0x000007ff

08001a74 <__gedf2>:
 8001a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a76:	4647      	mov	r7, r8
 8001a78:	46ce      	mov	lr, r9
 8001a7a:	0004      	movs	r4, r0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	0016      	movs	r6, r2
 8001a80:	031b      	lsls	r3, r3, #12
 8001a82:	0b1b      	lsrs	r3, r3, #12
 8001a84:	4d2d      	ldr	r5, [pc, #180]	; (8001b3c <__gedf2+0xc8>)
 8001a86:	004a      	lsls	r2, r1, #1
 8001a88:	4699      	mov	r9, r3
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	0043      	lsls	r3, r0, #1
 8001a8e:	030f      	lsls	r7, r1, #12
 8001a90:	46a4      	mov	ip, r4
 8001a92:	46b0      	mov	r8, r6
 8001a94:	0b3f      	lsrs	r7, r7, #12
 8001a96:	0d52      	lsrs	r2, r2, #21
 8001a98:	0fc9      	lsrs	r1, r1, #31
 8001a9a:	0d5b      	lsrs	r3, r3, #21
 8001a9c:	0fc0      	lsrs	r0, r0, #31
 8001a9e:	42aa      	cmp	r2, r5
 8001aa0:	d021      	beq.n	8001ae6 <__gedf2+0x72>
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d013      	beq.n	8001ace <__gedf2+0x5a>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d122      	bne.n	8001af0 <__gedf2+0x7c>
 8001aaa:	433c      	orrs	r4, r7
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <__gedf2+0x42>
 8001ab0:	464d      	mov	r5, r9
 8001ab2:	432e      	orrs	r6, r5
 8001ab4:	d022      	beq.n	8001afc <__gedf2+0x88>
 8001ab6:	2c00      	cmp	r4, #0
 8001ab8:	d010      	beq.n	8001adc <__gedf2+0x68>
 8001aba:	4281      	cmp	r1, r0
 8001abc:	d022      	beq.n	8001b04 <__gedf2+0x90>
 8001abe:	2002      	movs	r0, #2
 8001ac0:	3901      	subs	r1, #1
 8001ac2:	4008      	ands	r0, r1
 8001ac4:	3801      	subs	r0, #1
 8001ac6:	bcc0      	pop	{r6, r7}
 8001ac8:	46b9      	mov	r9, r7
 8001aca:	46b0      	mov	r8, r6
 8001acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ace:	464d      	mov	r5, r9
 8001ad0:	432e      	orrs	r6, r5
 8001ad2:	d129      	bne.n	8001b28 <__gedf2+0xb4>
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d1f0      	bne.n	8001aba <__gedf2+0x46>
 8001ad8:	433c      	orrs	r4, r7
 8001ada:	d1ee      	bne.n	8001aba <__gedf2+0x46>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1f2      	bne.n	8001ac6 <__gedf2+0x52>
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	4240      	negs	r0, r0
 8001ae4:	e7ef      	b.n	8001ac6 <__gedf2+0x52>
 8001ae6:	003d      	movs	r5, r7
 8001ae8:	4325      	orrs	r5, r4
 8001aea:	d11d      	bne.n	8001b28 <__gedf2+0xb4>
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d0ee      	beq.n	8001ace <__gedf2+0x5a>
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e2      	bne.n	8001aba <__gedf2+0x46>
 8001af4:	464c      	mov	r4, r9
 8001af6:	4326      	orrs	r6, r4
 8001af8:	d1df      	bne.n	8001aba <__gedf2+0x46>
 8001afa:	e7e0      	b.n	8001abe <__gedf2+0x4a>
 8001afc:	2000      	movs	r0, #0
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d0e1      	beq.n	8001ac6 <__gedf2+0x52>
 8001b02:	e7dc      	b.n	8001abe <__gedf2+0x4a>
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dc0a      	bgt.n	8001b1e <__gedf2+0xaa>
 8001b08:	dbe8      	blt.n	8001adc <__gedf2+0x68>
 8001b0a:	454f      	cmp	r7, r9
 8001b0c:	d8d7      	bhi.n	8001abe <__gedf2+0x4a>
 8001b0e:	d00e      	beq.n	8001b2e <__gedf2+0xba>
 8001b10:	2000      	movs	r0, #0
 8001b12:	454f      	cmp	r7, r9
 8001b14:	d2d7      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b16:	2900      	cmp	r1, #0
 8001b18:	d0e2      	beq.n	8001ae0 <__gedf2+0x6c>
 8001b1a:	0008      	movs	r0, r1
 8001b1c:	e7d3      	b.n	8001ac6 <__gedf2+0x52>
 8001b1e:	4243      	negs	r3, r0
 8001b20:	4158      	adcs	r0, r3
 8001b22:	0040      	lsls	r0, r0, #1
 8001b24:	3801      	subs	r0, #1
 8001b26:	e7ce      	b.n	8001ac6 <__gedf2+0x52>
 8001b28:	2002      	movs	r0, #2
 8001b2a:	4240      	negs	r0, r0
 8001b2c:	e7cb      	b.n	8001ac6 <__gedf2+0x52>
 8001b2e:	45c4      	cmp	ip, r8
 8001b30:	d8c5      	bhi.n	8001abe <__gedf2+0x4a>
 8001b32:	2000      	movs	r0, #0
 8001b34:	45c4      	cmp	ip, r8
 8001b36:	d2c6      	bcs.n	8001ac6 <__gedf2+0x52>
 8001b38:	e7ed      	b.n	8001b16 <__gedf2+0xa2>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	000007ff 	.word	0x000007ff

08001b40 <__ledf2>:
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	4647      	mov	r7, r8
 8001b44:	46ce      	mov	lr, r9
 8001b46:	0004      	movs	r4, r0
 8001b48:	0018      	movs	r0, r3
 8001b4a:	0016      	movs	r6, r2
 8001b4c:	031b      	lsls	r3, r3, #12
 8001b4e:	0b1b      	lsrs	r3, r3, #12
 8001b50:	4d2c      	ldr	r5, [pc, #176]	; (8001c04 <__ledf2+0xc4>)
 8001b52:	004a      	lsls	r2, r1, #1
 8001b54:	4699      	mov	r9, r3
 8001b56:	b580      	push	{r7, lr}
 8001b58:	0043      	lsls	r3, r0, #1
 8001b5a:	030f      	lsls	r7, r1, #12
 8001b5c:	46a4      	mov	ip, r4
 8001b5e:	46b0      	mov	r8, r6
 8001b60:	0b3f      	lsrs	r7, r7, #12
 8001b62:	0d52      	lsrs	r2, r2, #21
 8001b64:	0fc9      	lsrs	r1, r1, #31
 8001b66:	0d5b      	lsrs	r3, r3, #21
 8001b68:	0fc0      	lsrs	r0, r0, #31
 8001b6a:	42aa      	cmp	r2, r5
 8001b6c:	d00d      	beq.n	8001b8a <__ledf2+0x4a>
 8001b6e:	42ab      	cmp	r3, r5
 8001b70:	d010      	beq.n	8001b94 <__ledf2+0x54>
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d127      	bne.n	8001bc6 <__ledf2+0x86>
 8001b76:	433c      	orrs	r4, r7
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d111      	bne.n	8001ba0 <__ledf2+0x60>
 8001b7c:	464d      	mov	r5, r9
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	d10e      	bne.n	8001ba0 <__ledf2+0x60>
 8001b82:	2000      	movs	r0, #0
 8001b84:	2c00      	cmp	r4, #0
 8001b86:	d015      	beq.n	8001bb4 <__ledf2+0x74>
 8001b88:	e00e      	b.n	8001ba8 <__ledf2+0x68>
 8001b8a:	003d      	movs	r5, r7
 8001b8c:	4325      	orrs	r5, r4
 8001b8e:	d110      	bne.n	8001bb2 <__ledf2+0x72>
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d118      	bne.n	8001bc6 <__ledf2+0x86>
 8001b94:	464d      	mov	r5, r9
 8001b96:	432e      	orrs	r6, r5
 8001b98:	d10b      	bne.n	8001bb2 <__ledf2+0x72>
 8001b9a:	2a00      	cmp	r2, #0
 8001b9c:	d102      	bne.n	8001ba4 <__ledf2+0x64>
 8001b9e:	433c      	orrs	r4, r7
 8001ba0:	2c00      	cmp	r4, #0
 8001ba2:	d00b      	beq.n	8001bbc <__ledf2+0x7c>
 8001ba4:	4281      	cmp	r1, r0
 8001ba6:	d014      	beq.n	8001bd2 <__ledf2+0x92>
 8001ba8:	2002      	movs	r0, #2
 8001baa:	3901      	subs	r1, #1
 8001bac:	4008      	ands	r0, r1
 8001bae:	3801      	subs	r0, #1
 8001bb0:	e000      	b.n	8001bb4 <__ledf2+0x74>
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	bcc0      	pop	{r6, r7}
 8001bb6:	46b9      	mov	r9, r7
 8001bb8:	46b0      	mov	r8, r6
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	2800      	cmp	r0, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <__ledf2+0x74>
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	4240      	negs	r0, r0
 8001bc4:	e7f6      	b.n	8001bb4 <__ledf2+0x74>
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1ec      	bne.n	8001ba4 <__ledf2+0x64>
 8001bca:	464c      	mov	r4, r9
 8001bcc:	4326      	orrs	r6, r4
 8001bce:	d1e9      	bne.n	8001ba4 <__ledf2+0x64>
 8001bd0:	e7ea      	b.n	8001ba8 <__ledf2+0x68>
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	dd04      	ble.n	8001be0 <__ledf2+0xa0>
 8001bd6:	4243      	negs	r3, r0
 8001bd8:	4158      	adcs	r0, r3
 8001bda:	0040      	lsls	r0, r0, #1
 8001bdc:	3801      	subs	r0, #1
 8001bde:	e7e9      	b.n	8001bb4 <__ledf2+0x74>
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbeb      	blt.n	8001bbc <__ledf2+0x7c>
 8001be4:	454f      	cmp	r7, r9
 8001be6:	d8df      	bhi.n	8001ba8 <__ledf2+0x68>
 8001be8:	d006      	beq.n	8001bf8 <__ledf2+0xb8>
 8001bea:	2000      	movs	r0, #0
 8001bec:	454f      	cmp	r7, r9
 8001bee:	d2e1      	bcs.n	8001bb4 <__ledf2+0x74>
 8001bf0:	2900      	cmp	r1, #0
 8001bf2:	d0e5      	beq.n	8001bc0 <__ledf2+0x80>
 8001bf4:	0008      	movs	r0, r1
 8001bf6:	e7dd      	b.n	8001bb4 <__ledf2+0x74>
 8001bf8:	45c4      	cmp	ip, r8
 8001bfa:	d8d5      	bhi.n	8001ba8 <__ledf2+0x68>
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	45c4      	cmp	ip, r8
 8001c00:	d2d8      	bcs.n	8001bb4 <__ledf2+0x74>
 8001c02:	e7f5      	b.n	8001bf0 <__ledf2+0xb0>
 8001c04:	000007ff 	.word	0x000007ff

08001c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c0c:	f000 fb36 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c10:	f000 f8ac 	bl	8001d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c14:	f000 f9b2 	bl	8001f7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001c18:	f000 f962 	bl	8001ee0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001c1c:	f000 f904 	bl	8001e28 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001c20:	4b4b      	ldr	r3, [pc, #300]	; (8001d50 <main+0x148>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f001 fe2e 	bl	8003884 <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	0099      	lsls	r1, r3, #2
 8001c2c:	23a0      	movs	r3, #160	; 0xa0
 8001c2e:	05db      	lsls	r3, r3, #23
 8001c30:	2200      	movs	r2, #0
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fe1f 	bl	8002876 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	0099      	lsls	r1, r3, #2
 8001c3c:	23a0      	movs	r3, #160	; 0xa0
 8001c3e:	05db      	lsls	r3, r3, #23
 8001c40:	2201      	movs	r2, #1
 8001c42:	0018      	movs	r0, r3
 8001c44:	f000 fe17 	bl	8002876 <HAL_GPIO_WritePin>
	      __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <main+0x148>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	625a      	str	r2, [r3, #36]	; 0x24
	      while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <main+0x148>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d9fa      	bls.n	8001c52 <main+0x4a>
	      HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	0099      	lsls	r1, r3, #2
 8001c60:	23a0      	movs	r3, #160	; 0xa0
 8001c62:	05db      	lsls	r3, r3, #23
 8001c64:	2200      	movs	r2, #0
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 fe05 	bl	8002876 <HAL_GPIO_WritePin>

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001c6c:	f000 fb82 	bl	8002374 <HAL_GetTick>
 8001c70:	0002      	movs	r2, r0
 8001c72:	4b38      	ldr	r3, [pc, #224]	; (8001d54 <main+0x14c>)
 8001c74:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go high
	      while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	005a      	lsls	r2, r3, #1
 8001c7c:	23a0      	movs	r3, #160	; 0xa0
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fdda 	bl	800283c <HAL_GPIO_ReadPin>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d108      	bne.n	8001c9e <main+0x96>
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <main+0x14c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	330a      	adds	r3, #10
 8001c92:	001c      	movs	r4, r3
 8001c94:	f000 fb6e 	bl	8002374 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	429c      	cmp	r4, r3
 8001c9c:	d8ec      	bhi.n	8001c78 <main+0x70>
	      Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001c9e:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <main+0x148>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <main+0x150>)
 8001ca6:	601a      	str	r2, [r3, #0]

	      pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001ca8:	f000 fb64 	bl	8002374 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <main+0x14c>)
 8001cb0:	601a      	str	r2, [r3, #0]
	      // wait for the echo pin to go low
	      while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	005a      	lsls	r2, r3, #1
 8001cb8:	23a0      	movs	r3, #160	; 0xa0
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 fdbc 	bl	800283c <HAL_GPIO_ReadPin>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d008      	beq.n	8001cda <main+0xd2>
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <main+0x14c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3332      	adds	r3, #50	; 0x32
 8001cce:	001c      	movs	r4, r3
 8001cd0:	f000 fb50 	bl	8002374 <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	429c      	cmp	r4, r3
 8001cd8:	d8ec      	bhi.n	8001cb4 <main+0xac>
	      Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <main+0x148>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <main+0x154>)
 8001ce2:	601a      	str	r2, [r3, #0]

	      Distance = (Value2-Value1)* 0.034/2;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <main+0x154>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <main+0x150>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff fdf0 	bl	80018d4 <__aeabi_ui2d>
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	; (8001d60 <main+0x158>)
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <main+0x15c>)
 8001cf8:	f7fe ff72 	bl	8000be0 <__aeabi_dmul>
 8001cfc:	0002      	movs	r2, r0
 8001cfe:	000b      	movs	r3, r1
 8001d00:	0010      	movs	r0, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	2200      	movs	r2, #0
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	05db      	lsls	r3, r3, #23
 8001d0a:	f7fe fc7b 	bl	8000604 <__aeabi_ddiv>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	000b      	movs	r3, r1
 8001d12:	0010      	movs	r0, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	f7fe fb8b 	bl	8000430 <__aeabi_d2uiz>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <main+0x160>)
 8001d20:	801a      	strh	r2, [r3, #0]
	      HAL_Delay(50);
 8001d22:	2032      	movs	r0, #50	; 0x32
 8001d24:	f000 fb30 	bl	8002388 <HAL_Delay>

	      if (Distance < 10){
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <main+0x160>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b09      	cmp	r3, #9
 8001d2e:	d807      	bhi.n	8001d40 <main+0x138>
	    	  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_SET);
 8001d30:	23a0      	movs	r3, #160	; 0xa0
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	2201      	movs	r2, #1
 8001d36:	2120      	movs	r1, #32
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 fd9c 	bl	8002876 <HAL_GPIO_WritePin>
 8001d3e:	e77b      	b.n	8001c38 <main+0x30>
	      }else{
	    	  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001d40:	23a0      	movs	r3, #160	; 0xa0
 8001d42:	05db      	lsls	r3, r3, #23
 8001d44:	2200      	movs	r2, #0
 8001d46:	2120      	movs	r1, #32
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 fd94 	bl	8002876 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001d4e:	e773      	b.n	8001c38 <main+0x30>
 8001d50:	20000028 	.word	0x20000028
 8001d54:	20000108 	.word	0x20000108
 8001d58:	2000010c 	.word	0x2000010c
 8001d5c:	20000110 	.word	0x20000110
 8001d60:	b020c49c 	.word	0xb020c49c
 8001d64:	3fa16872 	.word	0x3fa16872
 8001d68:	20000114 	.word	0x20000114

08001d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b095      	sub	sp, #84	; 0x54
 8001d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d72:	2414      	movs	r4, #20
 8001d74:	193b      	adds	r3, r7, r4
 8001d76:	0018      	movs	r0, r3
 8001d78:	233c      	movs	r3, #60	; 0x3c
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	f002 fedd 	bl	8004b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	0018      	movs	r0, r3
 8001d86:	2310      	movs	r3, #16
 8001d88:	001a      	movs	r2, r3
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	f002 fed6 	bl	8004b3c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fd8b 	bl	80028b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da0:	193b      	adds	r3, r7, r4
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0052      	lsls	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001da8:	0021      	movs	r1, r4
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2240      	movs	r2, #64	; 0x40
 8001db4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	2202      	movs	r2, #2
 8001dba:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	2208      	movs	r2, #8
 8001dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	0292      	lsls	r2, r2, #10
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	0492      	lsls	r2, r2, #18
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dde:	187b      	adds	r3, r7, r1
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	0592      	lsls	r2, r2, #22
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	0018      	movs	r0, r3
 8001dea:	f000 fdad 	bl	8002948 <HAL_RCC_OscConfig>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001df2:	f000 f939 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df6:	1d3b      	adds	r3, r7, #4
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	2202      	movs	r2, #2
 8001e00:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	2102      	movs	r1, #2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 f8f8 	bl	8003008 <HAL_RCC_ClockConfig>
 8001e18:	1e03      	subs	r3, r0, #0
 8001e1a:	d001      	beq.n	8001e20 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001e1c:	f000 f924 	bl	8002068 <Error_Handler>
  }
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b015      	add	sp, #84	; 0x54
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b088      	sub	sp, #32
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2e:	2310      	movs	r3, #16
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	2310      	movs	r3, #16
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f002 fe7f 	bl	8004b3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	0018      	movs	r0, r3
 8001e42:	230c      	movs	r3, #12
 8001e44:	001a      	movs	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f002 fe78 	bl	8004b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <MX_TIM1_Init+0xb0>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e54:	2247      	movs	r2, #71	; 0x47
 8001e56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e60:	4a1e      	ldr	r2, [pc, #120]	; (8001edc <MX_TIM1_Init+0xb4>)
 8001e62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f001 fcab 	bl	80037d4 <HAL_TIM_Base_Init>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001e82:	f000 f8f1 	bl	8002068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e86:	2110      	movs	r1, #16
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	0152      	lsls	r2, r2, #5
 8001e8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e90:	187a      	adds	r2, r7, r1
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001e94:	0011      	movs	r1, r2
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 fd4e 	bl	8003938 <HAL_TIM_ConfigClockSource>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001ea0:	f000 f8e2 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb6:	1d3a      	adds	r2, r7, #4
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <MX_TIM1_Init+0xac>)
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f001 ff37 	bl	8003d30 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001ec6:	f000 f8cf 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b008      	add	sp, #32
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	20000028 	.word	0x20000028
 8001ed8:	40012c00 	.word	0x40012c00
 8001edc:	0000ffff 	.word	0x0000ffff

08001ee0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <MX_USART2_UART_Init+0x98>)
 8001ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001eec:	22e1      	movs	r2, #225	; 0xe1
 8001eee:	0252      	lsls	r2, r2, #9
 8001ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f06:	220c      	movs	r2, #12
 8001f08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f16:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f2a:	0018      	movs	r0, r3
 8001f2c:	f001 ff76 	bl	8003e1c <HAL_UART_Init>
 8001f30:	1e03      	subs	r3, r0, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f34:	f000 f898 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f002 fd1d 	bl	800497c <HAL_UARTEx_SetTxFifoThreshold>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f46:	f000 f88f 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f002 fd54 	bl	80049fc <HAL_UARTEx_SetRxFifoThreshold>
 8001f54:	1e03      	subs	r3, r0, #0
 8001f56:	d001      	beq.n	8001f5c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f58:	f000 f886 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <MX_USART2_UART_Init+0x94>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f002 fcd2 	bl	8004908 <HAL_UARTEx_DisableFifoMode>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f68:	f000 f87e 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f6c:	46c0      	nop			; (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	20000074 	.word	0x20000074
 8001f78:	40004400 	.word	0x40004400

08001f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	240c      	movs	r4, #12
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	0018      	movs	r0, r3
 8001f88:	2314      	movs	r3, #20
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	f002 fdd5 	bl	8004b3c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b34      	ldr	r3, [pc, #208]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001f98:	2104      	movs	r1, #4
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f9e:	4b31      	ldr	r3, [pc, #196]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	2220      	movs	r2, #32
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc6:	4b27      	ldr	r3, [pc, #156]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fc8:	2101      	movs	r1, #1
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <MX_GPIO_Init+0xe8>)
 8001fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_GREEN_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001fda:	2388      	movs	r3, #136	; 0x88
 8001fdc:	0099      	lsls	r1, r3, #2
 8001fde:	23a0      	movs	r3, #160	; 0xa0
 8001fe0:	05db      	lsls	r3, r3, #23
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 fc46 	bl	8002876 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	2220      	movs	r2, #32
 8001fee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	2202      	movs	r2, #2
 8002000:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002002:	193a      	adds	r2, r7, r4
 8002004:	23a0      	movs	r3, #160	; 0xa0
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f000 faaa 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002010:	193b      	adds	r3, r7, r4
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	0052      	lsls	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002018:	193b      	adds	r3, r7, r4
 800201a:	2200      	movs	r2, #0
 800201c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	193b      	adds	r3, r7, r4
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002024:	193a      	adds	r2, r7, r4
 8002026:	23a0      	movs	r3, #160	; 0xa0
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	0011      	movs	r1, r2
 800202c:	0018      	movs	r0, r3
 800202e:	f000 fa99 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002032:	0021      	movs	r1, r4
 8002034:	187b      	adds	r3, r7, r1
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	187b      	adds	r3, r7, r1
 800203e:	2201      	movs	r2, #1
 8002040:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	187b      	adds	r3, r7, r1
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	187b      	adds	r3, r7, r1
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204e:	187a      	adds	r2, r7, r1
 8002050:	23a0      	movs	r3, #160	; 0xa0
 8002052:	05db      	lsls	r3, r3, #23
 8002054:	0011      	movs	r1, r2
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fa84 	bl	8002564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b009      	add	sp, #36	; 0x24
 8002062:	bd90      	pop	{r4, r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002070:	e7fe      	b.n	8002070 <Error_Handler+0x8>
	...

08002074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <HAL_MspInit+0x4c>)
 800207c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <HAL_MspInit+0x4c>)
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	641a      	str	r2, [r3, #64]	; 0x40
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_MspInit+0x4c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_MspInit+0x4c>)
 8002094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_MspInit+0x4c>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0549      	lsls	r1, r1, #21
 800209c:	430a      	orrs	r2, r1
 800209e:	63da      	str	r2, [r3, #60]	; 0x3c
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_MspInit+0x4c>)
 80020a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	055b      	lsls	r3, r3, #21
 80020a8:	4013      	ands	r3, r2
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80020ae:	23c0      	movs	r3, #192	; 0xc0
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 f98c 	bl	80023d0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020b8:	46c0      	nop			; (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b002      	add	sp, #8
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000

080020c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b097      	sub	sp, #92	; 0x5c
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020cc:	240c      	movs	r4, #12
 80020ce:	193b      	adds	r3, r7, r4
 80020d0:	0018      	movs	r0, r3
 80020d2:	234c      	movs	r3, #76	; 0x4c
 80020d4:	001a      	movs	r2, r3
 80020d6:	2100      	movs	r1, #0
 80020d8:	f002 fd30 	bl	8004b3c <memset>
  if(htim_base->Instance==TIM1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a11      	ldr	r2, [pc, #68]	; (8002128 <HAL_TIM_Base_MspInit+0x64>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d11c      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	0392      	lsls	r2, r2, #14
 80020ec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80020ee:	193b      	adds	r3, r7, r4
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f4:	193b      	adds	r3, r7, r4
 80020f6:	0018      	movs	r0, r3
 80020f8:	f001 f930 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	1e03      	subs	r3, r0, #0
 80020fe:	d001      	beq.n	8002104 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002100:	f7ff ffb2 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002104:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 8002106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0109      	lsls	r1, r1, #4
 800210e:	430a      	orrs	r2, r1
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_TIM_Base_MspInit+0x68>)
 8002114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4013      	ands	r3, r2
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	b017      	add	sp, #92	; 0x5c
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40021000 	.word	0x40021000

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b09d      	sub	sp, #116	; 0x74
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	235c      	movs	r3, #92	; 0x5c
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	0018      	movs	r0, r3
 800213e:	2314      	movs	r3, #20
 8002140:	001a      	movs	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f002 fcfa 	bl	8004b3c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	2410      	movs	r4, #16
 800214a:	193b      	adds	r3, r7, r4
 800214c:	0018      	movs	r0, r3
 800214e:	234c      	movs	r3, #76	; 0x4c
 8002150:	001a      	movs	r2, r3
 8002152:	2100      	movs	r1, #0
 8002154:	f002 fcf2 	bl	8004b3c <memset>
  if(huart->Instance==USART2)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_UART_MspInit+0xb8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d13e      	bne.n	80021e0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2202      	movs	r2, #2
 8002166:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002168:	193b      	adds	r3, r7, r4
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800216e:	193b      	adds	r3, r7, r4
 8002170:	0018      	movs	r0, r3
 8002172:	f001 f8f3 	bl	800335c <HAL_RCCEx_PeriphCLKConfig>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800217a:	f7ff ff75 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_UART_MspInit+0xbc>)
 8002180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_UART_MspInit+0xbc>)
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	0289      	lsls	r1, r1, #10
 8002188:	430a      	orrs	r2, r1
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <HAL_UART_MspInit+0xbc>)
 800218e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	029b      	lsls	r3, r3, #10
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_UART_MspInit+0xbc>)
 800219c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_UART_MspInit+0xbc>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	635a      	str	r2, [r3, #52]	; 0x34
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <HAL_UART_MspInit+0xbc>)
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	2201      	movs	r2, #1
 80021ac:	4013      	ands	r3, r2
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80021b2:	215c      	movs	r1, #92	; 0x5c
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2202      	movs	r2, #2
 80021be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2201      	movs	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	187a      	adds	r2, r7, r1
 80021d4:	23a0      	movs	r3, #160	; 0xa0
 80021d6:	05db      	lsls	r3, r3, #23
 80021d8:	0011      	movs	r1, r2
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 f9c2 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021e0:	46c0      	nop			; (mov r8, r8)
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b01d      	add	sp, #116	; 0x74
 80021e6:	bd90      	pop	{r4, r7, pc}
 80021e8:	40004400 	.word	0x40004400
 80021ec:	40021000 	.word	0x40021000

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021f4:	e7fe      	b.n	80021f4 <NMI_Handler+0x4>

080021f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fa:	e7fe      	b.n	80021fa <HardFault_Handler+0x4>

080021fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 f89c 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800222c:	f7ff fff7 	bl	800221e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 8002232:	490d      	ldr	r1, [pc, #52]	; (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <LoopForever+0xe>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002248:	4c0a      	ldr	r4, [pc, #40]	; (8002274 <LoopForever+0x16>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002256:	f002 fc79 	bl	8004b4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800225a:	f7ff fcd5 	bl	8001c08 <main>

0800225e <LoopForever>:

LoopForever:
  b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   r0, =_estack
 8002260:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800226c:	08004c84 	.word	0x08004c84
  ldr r2, =_sbss
 8002270:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002274:	2000011c 	.word	0x2000011c

08002278 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC1_COMP_IRQHandler>
	...

0800227c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002282:	1dfb      	adds	r3, r7, #7
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_Init+0x3c>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_Init+0x3c>)
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	0049      	lsls	r1, r1, #1
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002296:	2000      	movs	r0, #0
 8002298:	f000 f810 	bl	80022bc <HAL_InitTick>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d003      	beq.n	80022a8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80022a0:	1dfb      	adds	r3, r7, #7
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e001      	b.n	80022ac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80022a8:	f7ff fee4 	bl	8002074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ac:	1dfb      	adds	r3, r7, #7
 80022ae:	781b      	ldrb	r3, [r3, #0]
}
 80022b0:	0018      	movs	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	b002      	add	sp, #8
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40022000 	.word	0x40022000

080022bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_InitTick+0x88>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02b      	beq.n	800232c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <HAL_InitTick+0x8c>)
 80022d6:	681c      	ldr	r4, [r3, #0]
 80022d8:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <HAL_InitTick+0x88>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	0019      	movs	r1, r3
 80022de:	23fa      	movs	r3, #250	; 0xfa
 80022e0:	0098      	lsls	r0, r3, #2
 80022e2:	f7fd ff0f 	bl	8000104 <__udivsi3>
 80022e6:	0003      	movs	r3, r0
 80022e8:	0019      	movs	r1, r3
 80022ea:	0020      	movs	r0, r4
 80022ec:	f7fd ff0a 	bl	8000104 <__udivsi3>
 80022f0:	0003      	movs	r3, r0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f929 	bl	800254a <HAL_SYSTICK_Config>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d112      	bne.n	8002322 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d80a      	bhi.n	8002318 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	2301      	movs	r3, #1
 8002306:	425b      	negs	r3, r3
 8002308:	2200      	movs	r2, #0
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f908 	bl	8002520 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_InitTick+0x90>)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	e00d      	b.n	8002334 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	e008      	b.n	8002334 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002322:	230f      	movs	r3, #15
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	e003      	b.n	8002334 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800232c:	230f      	movs	r3, #15
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002334:	230f      	movs	r3, #15
 8002336:	18fb      	adds	r3, r7, r3
 8002338:	781b      	ldrb	r3, [r3, #0]
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b005      	add	sp, #20
 8002340:	bd90      	pop	{r4, r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000008 	.word	0x20000008
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x1c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x20>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	18d2      	adds	r2, r2, r3
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_IncTick+0x20>)
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	20000008 	.word	0x20000008
 8002370:	20000118 	.word	0x20000118

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_GetTick+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	20000118 	.word	0x20000118

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fff0 	bl	8002374 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3301      	adds	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	001a      	movs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	f7ff ffe0 	bl	8002374 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000008 	.word	0x20000008

080023d0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40010000 	.word	0x40010000
 80023f8:	fffff9ff 	.word	0xfffff9ff

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	0002      	movs	r2, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b7f      	cmp	r3, #127	; 0x7f
 8002410:	d828      	bhi.n	8002464 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002412:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <__NVIC_SetPriority+0xd4>)
 8002414:	1dfb      	adds	r3, r7, #7
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	b25b      	sxtb	r3, r3
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	33c0      	adds	r3, #192	; 0xc0
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	589b      	ldr	r3, [r3, r2]
 8002422:	1dfa      	adds	r2, r7, #7
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	0011      	movs	r1, r2
 8002428:	2203      	movs	r2, #3
 800242a:	400a      	ands	r2, r1
 800242c:	00d2      	lsls	r2, r2, #3
 800242e:	21ff      	movs	r1, #255	; 0xff
 8002430:	4091      	lsls	r1, r2
 8002432:	000a      	movs	r2, r1
 8002434:	43d2      	mvns	r2, r2
 8002436:	401a      	ands	r2, r3
 8002438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	22ff      	movs	r2, #255	; 0xff
 8002440:	401a      	ands	r2, r3
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	2303      	movs	r3, #3
 800244a:	4003      	ands	r3, r0
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002450:	481f      	ldr	r0, [pc, #124]	; (80024d0 <__NVIC_SetPriority+0xd4>)
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b25b      	sxtb	r3, r3
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	430a      	orrs	r2, r1
 800245c:	33c0      	adds	r3, #192	; 0xc0
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002462:	e031      	b.n	80024c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002464:	4a1b      	ldr	r2, [pc, #108]	; (80024d4 <__NVIC_SetPriority+0xd8>)
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	0019      	movs	r1, r3
 800246c:	230f      	movs	r3, #15
 800246e:	400b      	ands	r3, r1
 8002470:	3b08      	subs	r3, #8
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3306      	adds	r3, #6
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	18d3      	adds	r3, r2, r3
 800247a:	3304      	adds	r3, #4
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1dfa      	adds	r2, r7, #7
 8002480:	7812      	ldrb	r2, [r2, #0]
 8002482:	0011      	movs	r1, r2
 8002484:	2203      	movs	r2, #3
 8002486:	400a      	ands	r2, r1
 8002488:	00d2      	lsls	r2, r2, #3
 800248a:	21ff      	movs	r1, #255	; 0xff
 800248c:	4091      	lsls	r1, r2
 800248e:	000a      	movs	r2, r1
 8002490:	43d2      	mvns	r2, r2
 8002492:	401a      	ands	r2, r3
 8002494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	22ff      	movs	r2, #255	; 0xff
 800249c:	401a      	ands	r2, r3
 800249e:	1dfb      	adds	r3, r7, #7
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	0018      	movs	r0, r3
 80024a4:	2303      	movs	r3, #3
 80024a6:	4003      	ands	r3, r0
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ac:	4809      	ldr	r0, [pc, #36]	; (80024d4 <__NVIC_SetPriority+0xd8>)
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	001c      	movs	r4, r3
 80024b4:	230f      	movs	r3, #15
 80024b6:	4023      	ands	r3, r4
 80024b8:	3b08      	subs	r3, #8
 80024ba:	089b      	lsrs	r3, r3, #2
 80024bc:	430a      	orrs	r2, r1
 80024be:	3306      	adds	r3, #6
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	18c3      	adds	r3, r0, r3
 80024c4:	3304      	adds	r3, #4
 80024c6:	601a      	str	r2, [r3, #0]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b003      	add	sp, #12
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	045b      	lsls	r3, r3, #17
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d301      	bcc.n	80024f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ec:	2301      	movs	r3, #1
 80024ee:	e010      	b.n	8002512 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f0:	4b0a      	ldr	r3, [pc, #40]	; (800251c <SysTick_Config+0x44>)
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	3a01      	subs	r2, #1
 80024f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f8:	2301      	movs	r3, #1
 80024fa:	425b      	negs	r3, r3
 80024fc:	2103      	movs	r1, #3
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff ff7c 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <SysTick_Config+0x44>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <SysTick_Config+0x44>)
 800250c:	2207      	movs	r2, #7
 800250e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	e000e010 	.word	0xe000e010

08002520 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	210f      	movs	r1, #15
 800252c:	187b      	adds	r3, r7, r1
 800252e:	1c02      	adds	r2, r0, #0
 8002530:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	187b      	adds	r3, r7, r1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	0011      	movs	r1, r2
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ff5d 	bl	80023fc <__NVIC_SetPriority>
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b004      	add	sp, #16
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ffbf 	bl	80024d8 <SysTick_Config>
 800255a:	0003      	movs	r3, r0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002572:	e14d      	b.n	8002810 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	4091      	lsls	r1, r2
 800257e:	000a      	movs	r2, r1
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d100      	bne.n	800258c <HAL_GPIO_Init+0x28>
 800258a:	e13e      	b.n	800280a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2203      	movs	r2, #3
 8002592:	4013      	ands	r3, r2
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_Init+0x40>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2203      	movs	r2, #3
 800259e:	4013      	ands	r3, r2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	409a      	lsls	r2, r3
 80025b2:	0013      	movs	r3, r2
 80025b4:	43da      	mvns	r2, r3
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	409a      	lsls	r2, r3
 80025c6:	0013      	movs	r3, r2
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
 80025e0:	0013      	movs	r3, r2
 80025e2:	43da      	mvns	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	2201      	movs	r2, #1
 80025f2:	401a      	ands	r2, r3
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	409a      	lsls	r2, r3
 80025f8:	0013      	movs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	4013      	ands	r3, r2
 800260e:	2b03      	cmp	r3, #3
 8002610:	d017      	beq.n	8002642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	409a      	lsls	r2, r3
 8002634:	0013      	movs	r3, r2
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2203      	movs	r2, #3
 8002648:	4013      	ands	r3, r2
 800264a:	2b02      	cmp	r3, #2
 800264c:	d123      	bne.n	8002696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	58d3      	ldr	r3, [r2, r3]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2207      	movs	r2, #7
 8002660:	4013      	ands	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	409a      	lsls	r2, r3
 8002668:	0013      	movs	r3, r2
 800266a:	43da      	mvns	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2107      	movs	r1, #7
 800267a:	400b      	ands	r3, r1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	409a      	lsls	r2, r3
 8002680:	0013      	movs	r3, r2
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	6939      	ldr	r1, [r7, #16]
 8002694:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	409a      	lsls	r2, r3
 80026a4:	0013      	movs	r3, r2
 80026a6:	43da      	mvns	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	401a      	ands	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	409a      	lsls	r2, r3
 80026bc:	0013      	movs	r3, r2
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	23c0      	movs	r3, #192	; 0xc0
 80026d0:	029b      	lsls	r3, r3, #10
 80026d2:	4013      	ands	r3, r2
 80026d4:	d100      	bne.n	80026d8 <HAL_GPIO_Init+0x174>
 80026d6:	e098      	b.n	800280a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80026d8:	4a53      	ldr	r2, [pc, #332]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	3318      	adds	r3, #24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	589b      	ldr	r3, [r3, r2]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	220f      	movs	r2, #15
 80026f0:	409a      	lsls	r2, r3
 80026f2:	0013      	movs	r3, r2
 80026f4:	43da      	mvns	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	23a0      	movs	r3, #160	; 0xa0
 8002700:	05db      	lsls	r3, r3, #23
 8002702:	429a      	cmp	r2, r3
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x1d6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_GPIO_Init+0x2c8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x1d2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a47      	ldr	r2, [pc, #284]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x1ce>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a46      	ldr	r2, [pc, #280]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x1ca>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a45      	ldr	r2, [pc, #276]	; (8002838 <HAL_GPIO_Init+0x2d4>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x1c6>
 8002726:	2304      	movs	r3, #4
 8002728:	e008      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 800272a:	2305      	movs	r3, #5
 800272c:	e006      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 800272e:	2303      	movs	r3, #3
 8002730:	e004      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 8002732:	2302      	movs	r3, #2
 8002734:	e002      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_GPIO_Init+0x1d8>
 800273a:	2300      	movs	r3, #0
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	2103      	movs	r1, #3
 8002740:	400a      	ands	r2, r1
 8002742:	00d2      	lsls	r2, r2, #3
 8002744:	4093      	lsls	r3, r2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800274c:	4936      	ldr	r1, [pc, #216]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3318      	adds	r3, #24
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800275a:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	035b      	lsls	r3, r3, #13
 8002772:	4013      	ands	r3, r2
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002784:	4b28      	ldr	r3, [pc, #160]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43da      	mvns	r2, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	039b      	lsls	r3, r3, #14
 800279c:	4013      	ands	r3, r2
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a8:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ae:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80027b0:	2384      	movs	r3, #132	; 0x84
 80027b2:	58d3      	ldr	r3, [r2, r3]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	029b      	lsls	r3, r3, #10
 80027c8:	4013      	ands	r3, r2
 80027ca:	d003      	beq.n	80027d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d4:	4914      	ldr	r1, [pc, #80]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80027d6:	2284      	movs	r2, #132	; 0x84
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80027dc:	4a12      	ldr	r2, [pc, #72]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80027de:	2380      	movs	r3, #128	; 0x80
 80027e0:	58d3      	ldr	r3, [r2, r3]
 80027e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	43da      	mvns	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	4013      	ands	r3, r2
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002802:	4909      	ldr	r1, [pc, #36]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	3301      	adds	r3, #1
 800280e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	40da      	lsrs	r2, r3
 8002818:	1e13      	subs	r3, r2, #0
 800281a:	d000      	beq.n	800281e <HAL_GPIO_Init+0x2ba>
 800281c:	e6aa      	b.n	8002574 <HAL_GPIO_Init+0x10>
  }
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b006      	add	sp, #24
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40021800 	.word	0x40021800
 800282c:	50000400 	.word	0x50000400
 8002830:	50000800 	.word	0x50000800
 8002834:	50000c00 	.word	0x50000c00
 8002838:	50001000 	.word	0x50001000

0800283c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	000a      	movs	r2, r1
 8002846:	1cbb      	adds	r3, r7, #2
 8002848:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	1cba      	adds	r2, r7, #2
 8002850:	8812      	ldrh	r2, [r2, #0]
 8002852:	4013      	ands	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002856:	230f      	movs	r3, #15
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
 800285e:	e003      	b.n	8002868 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002860:	230f      	movs	r3, #15
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	781b      	ldrb	r3, [r3, #0]
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	0008      	movs	r0, r1
 8002880:	0011      	movs	r1, r2
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	1c02      	adds	r2, r0, #0
 8002886:	801a      	strh	r2, [r3, #0]
 8002888:	1c7b      	adds	r3, r7, #1
 800288a:	1c0a      	adds	r2, r1, #0
 800288c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288e:	1c7b      	adds	r3, r7, #1
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002896:	1cbb      	adds	r3, r7, #2
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800289e:	e003      	b.n	80028a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028a0:	1cbb      	adds	r3, r7, #2
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	; (8002924 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	4b17      	ldr	r3, [pc, #92]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d11f      	bne.n	8002914 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	0013      	movs	r3, r2
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4912      	ldr	r1, [pc, #72]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7fd fc0e 	bl	8000104 <__udivsi3>
 80028e8:	0003      	movs	r3, r0
 80028ea:	3301      	adds	r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ee:	e008      	b.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e001      	b.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e009      	b.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	401a      	ands	r2, r3
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	429a      	cmp	r2, r3
 8002912:	d0ed      	beq.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b004      	add	sp, #16
 800291c:	bd80      	pop	{r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	40007000 	.word	0x40007000
 8002924:	fffff9ff 	.word	0xfffff9ff
 8002928:	20000000 	.word	0x20000000
 800292c:	000f4240 	.word	0x000f4240

08002930 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	23e0      	movs	r3, #224	; 0xe0
 800293a:	01db      	lsls	r3, r3, #7
 800293c:	4013      	ands	r3, r2
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000

08002948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d102      	bne.n	800295c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f000 fb50 	bl	8002ffc <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2201      	movs	r2, #1
 8002962:	4013      	ands	r3, r2
 8002964:	d100      	bne.n	8002968 <HAL_RCC_OscConfig+0x20>
 8002966:	e07c      	b.n	8002a62 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002968:	4bc3      	ldr	r3, [pc, #780]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2238      	movs	r2, #56	; 0x38
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002972:	4bc1      	ldr	r3, [pc, #772]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2203      	movs	r2, #3
 8002978:	4013      	ands	r3, r2
 800297a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b10      	cmp	r3, #16
 8002980:	d102      	bne.n	8002988 <HAL_RCC_OscConfig+0x40>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d002      	beq.n	800298e <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b08      	cmp	r3, #8
 800298c:	d10b      	bne.n	80029a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298e:	4bba      	ldr	r3, [pc, #744]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	029b      	lsls	r3, r3, #10
 8002996:	4013      	ands	r3, r2
 8002998:	d062      	beq.n	8002a60 <HAL_RCC_OscConfig+0x118>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d15e      	bne.n	8002a60 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e32a      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d107      	bne.n	80029c2 <HAL_RCC_OscConfig+0x7a>
 80029b2:	4bb1      	ldr	r3, [pc, #708]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4bb0      	ldr	r3, [pc, #704]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	0249      	lsls	r1, r1, #9
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	e020      	b.n	8002a04 <HAL_RCC_OscConfig+0xbc>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	23a0      	movs	r3, #160	; 0xa0
 80029c8:	02db      	lsls	r3, r3, #11
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10e      	bne.n	80029ec <HAL_RCC_OscConfig+0xa4>
 80029ce:	4baa      	ldr	r3, [pc, #680]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4ba9      	ldr	r3, [pc, #676]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	02c9      	lsls	r1, r1, #11
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	4ba6      	ldr	r3, [pc, #664]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4ba5      	ldr	r3, [pc, #660]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029e2:	2180      	movs	r1, #128	; 0x80
 80029e4:	0249      	lsls	r1, r1, #9
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e00b      	b.n	8002a04 <HAL_RCC_OscConfig+0xbc>
 80029ec:	4ba2      	ldr	r3, [pc, #648]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4ba1      	ldr	r3, [pc, #644]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029f2:	49a2      	ldr	r1, [pc, #648]	; (8002c7c <HAL_RCC_OscConfig+0x334>)
 80029f4:	400a      	ands	r2, r1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	4b9f      	ldr	r3, [pc, #636]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 80029fe:	49a0      	ldr	r1, [pc, #640]	; (8002c80 <HAL_RCC_OscConfig+0x338>)
 8002a00:	400a      	ands	r2, r1
 8002a02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d014      	beq.n	8002a36 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fcb2 	bl	8002374 <HAL_GetTick>
 8002a10:	0003      	movs	r3, r0
 8002a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a16:	f7ff fcad 	bl	8002374 <HAL_GetTick>
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e2e9      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a28:	4b93      	ldr	r3, [pc, #588]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	2380      	movs	r3, #128	; 0x80
 8002a2e:	029b      	lsls	r3, r3, #10
 8002a30:	4013      	ands	r3, r2
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0xce>
 8002a34:	e015      	b.n	8002a62 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7ff fc9d 	bl	8002374 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff fc98 	bl	8002374 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e2d4      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	2380      	movs	r3, #128	; 0x80
 8002a58:	029b      	lsls	r3, r3, #10
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xf8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCC_OscConfig+0x126>
 8002a6c:	e099      	b.n	8002ba2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b82      	ldr	r3, [pc, #520]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2238      	movs	r2, #56	; 0x38
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2203      	movs	r2, #3
 8002a7e:	4013      	ands	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x146>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d135      	bne.n	8002b00 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b78      	ldr	r3, [pc, #480]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x164>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e2a7      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b72      	ldr	r3, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a74      	ldr	r2, [pc, #464]	; (8002c84 <HAL_RCC_OscConfig+0x33c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	021a      	lsls	r2, r3, #8
 8002abc:	4b6e      	ldr	r3, [pc, #440]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d112      	bne.n	8002aee <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ac8:	4b6b      	ldr	r3, [pc, #428]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a6e      	ldr	r2, [pc, #440]	; (8002c88 <HAL_RCC_OscConfig+0x340>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691a      	ldr	r2, [r3, #16]
 8002ad6:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002adc:	4b66      	ldr	r3, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0adb      	lsrs	r3, r3, #11
 8002ae2:	2207      	movs	r2, #7
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_RCC_OscConfig+0x344>)
 8002ae8:	40da      	lsrs	r2, r3
 8002aea:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x348>)
 8002aec:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002aee:	4b69      	ldr	r3, [pc, #420]	; (8002c94 <HAL_RCC_OscConfig+0x34c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f7ff fbe2 	bl	80022bc <HAL_InitTick>
 8002af8:	1e03      	subs	r3, r0, #0
 8002afa:	d051      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e27d      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d030      	beq.n	8002b6a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_RCC_OscConfig+0x340>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4b56      	ldr	r3, [pc, #344]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	0049      	lsls	r1, r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fc23 	bl	8002374 <HAL_GetTick>
 8002b2e:	0003      	movs	r3, r0
 8002b30:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7ff fc1e 	bl	8002374 <HAL_GetTick>
 8002b38:	0002      	movs	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e25a      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b46:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b52:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_RCC_OscConfig+0x33c>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	021a      	lsls	r2, r3, #8
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	e01b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002b6a:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b70:	4949      	ldr	r1, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x350>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7ff fbfd 	bl	8002374 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b80:	f7ff fbf8 	bl	8002374 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e234      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b92:	4b39      	ldr	r3, [pc, #228]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x238>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d047      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	2238      	movs	r2, #56	; 0x38
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b18      	cmp	r3, #24
 8002bb6:	d10a      	bne.n	8002bce <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002bb8:	4b2f      	ldr	r3, [pc, #188]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d03c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d138      	bne.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e216      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002bd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bda:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7ff fbc7 	bl	8002374 <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bec:	f7ff fbc2 	bl	8002374 <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1fe      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	2202      	movs	r2, #2
 8002c04:	4013      	ands	r3, r2
 8002c06:	d0f1      	beq.n	8002bec <HAL_RCC_OscConfig+0x2a4>
 8002c08:	e018      	b.n	8002c3c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b1b      	ldr	r3, [pc, #108]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	438a      	bics	r2, r1
 8002c14:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c16:	f7ff fbad 	bl	8002374 <HAL_GetTick>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c20:	f7ff fba8 	bl	8002374 <HAL_GetTick>
 8002c24:	0002      	movs	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1e4      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	2202      	movs	r2, #2
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d1f1      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2204      	movs	r2, #4
 8002c42:	4013      	ands	r3, r2
 8002c44:	d100      	bne.n	8002c48 <HAL_RCC_OscConfig+0x300>
 8002c46:	e0c7      	b.n	8002dd8 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c48:	231f      	movs	r3, #31
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2238      	movs	r2, #56	; 0x38
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d11f      	bne.n	8002c9c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <HAL_RCC_OscConfig+0x330>)
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d100      	bne.n	8002c68 <HAL_RCC_OscConfig+0x320>
 8002c66:	e0b7      	b.n	8002dd8 <HAL_RCC_OscConfig+0x490>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d000      	beq.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c70:	e0b2      	b.n	8002dd8 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e1c2      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	fffeffff 	.word	0xfffeffff
 8002c80:	fffbffff 	.word	0xfffbffff
 8002c84:	ffff80ff 	.word	0xffff80ff
 8002c88:	ffffc7ff 	.word	0xffffc7ff
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004
 8002c98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c9c:	4bb5      	ldr	r3, [pc, #724]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002c9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	055b      	lsls	r3, r3, #21
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x364>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <HAL_RCC_OscConfig+0x366>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d011      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4bb0      	ldr	r3, [pc, #704]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb6:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	0549      	lsls	r1, r1, #21
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cc0:	4bac      	ldr	r3, [pc, #688]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	055b      	lsls	r3, r3, #21
 8002cc8:	4013      	ands	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002cce:	231f      	movs	r3, #31
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd6:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <HAL_RCC_OscConfig+0x630>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce2:	4ba5      	ldr	r3, [pc, #660]	; (8002f78 <HAL_RCC_OscConfig+0x630>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4ba4      	ldr	r3, [pc, #656]	; (8002f78 <HAL_RCC_OscConfig+0x630>)
 8002ce8:	2180      	movs	r1, #128	; 0x80
 8002cea:	0049      	lsls	r1, r1, #1
 8002cec:	430a      	orrs	r2, r1
 8002cee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002cf0:	f7ff fb40 	bl	8002374 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfa:	f7ff fb3b 	bl	8002374 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e177      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0c:	4b9a      	ldr	r3, [pc, #616]	; (8002f78 <HAL_RCC_OscConfig+0x630>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	4013      	ands	r3, r2
 8002d16:	d0f0      	beq.n	8002cfa <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_RCC_OscConfig+0x3e6>
 8002d20:	4b94      	ldr	r3, [pc, #592]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d24:	4b93      	ldr	r3, [pc, #588]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d26:	2101      	movs	r1, #1
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d2c:	e01c      	b.n	8002d68 <HAL_RCC_OscConfig+0x420>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b05      	cmp	r3, #5
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCC_OscConfig+0x408>
 8002d36:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d42:	4b8c      	ldr	r3, [pc, #560]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d46:	4b8b      	ldr	r3, [pc, #556]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCC_OscConfig+0x420>
 8002d50:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d54:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d56:	2101      	movs	r1, #1
 8002d58:	438a      	bics	r2, r1
 8002d5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d5c:	4b85      	ldr	r3, [pc, #532]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d60:	4b84      	ldr	r3, [pc, #528]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d62:	2104      	movs	r1, #4
 8002d64:	438a      	bics	r2, r1
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d014      	beq.n	8002d9a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7ff fb00 	bl	8002374 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d78:	e009      	b.n	8002d8e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7a:	f7ff fafb 	bl	8002374 <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	4a7d      	ldr	r2, [pc, #500]	; (8002f7c <HAL_RCC_OscConfig+0x634>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e136      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8e:	4b79      	ldr	r3, [pc, #484]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x432>
 8002d98:	e013      	b.n	8002dc2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d9a:	f7ff faeb 	bl	8002374 <HAL_GetTick>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da4:	f7ff fae6 	bl	8002374 <HAL_GetTick>
 8002da8:	0002      	movs	r2, r0
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	4a73      	ldr	r2, [pc, #460]	; (8002f7c <HAL_RCC_OscConfig+0x634>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e121      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002db8:	4b6e      	ldr	r3, [pc, #440]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d1f0      	bne.n	8002da4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d105      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002dce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002dd2:	496b      	ldr	r1, [pc, #428]	; (8002f80 <HAL_RCC_OscConfig+0x638>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	4013      	ands	r3, r2
 8002de0:	d039      	beq.n	8002e56 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01b      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	03c9      	lsls	r1, r1, #15
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7ff fabc 	bl	8002374 <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e02:	f7ff fab7 	bl	8002374 <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e0f3      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002e14:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	041b      	lsls	r3, r3, #16
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d0f0      	beq.n	8002e02 <HAL_RCC_OscConfig+0x4ba>
 8002e20:	e019      	b.n	8002e56 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e28:	4956      	ldr	r1, [pc, #344]	; (8002f84 <HAL_RCC_OscConfig+0x63c>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7ff faa1 	bl	8002374 <HAL_GetTick>
 8002e32:	0003      	movs	r3, r0
 8002e34:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e38:	f7ff fa9c 	bl	8002374 <HAL_GetTick>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0d8      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	041b      	lsls	r3, r3, #16
 8002e52:	4013      	ands	r3, r2
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x518>
 8002e5e:	e0cc      	b.n	8002ffa <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e60:	4b44      	ldr	r3, [pc, #272]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2238      	movs	r2, #56	; 0x38
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x526>
 8002e6c:	e07b      	b.n	8002f66 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d156      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e76:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002e7c:	4942      	ldr	r1, [pc, #264]	; (8002f88 <HAL_RCC_OscConfig+0x640>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7ff fa77 	bl	8002374 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7ff fa72 	bl	8002374 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e0ae      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e9e:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	049b      	lsls	r3, r3, #18
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eaa:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	4a37      	ldr	r2, [pc, #220]	; (8002f8c <HAL_RCC_OscConfig+0x644>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002ee4:	2180      	movs	r1, #128	; 0x80
 8002ee6:	0449      	lsls	r1, r1, #17
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002ef2:	2180      	movs	r1, #128	; 0x80
 8002ef4:	0549      	lsls	r1, r1, #21
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7ff fa3b 	bl	8002374 <HAL_GetTick>
 8002efe:	0003      	movs	r3, r0
 8002f00:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f04:	f7ff fa36 	bl	8002374 <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e072      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f16:	4b17      	ldr	r3, [pc, #92]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	049b      	lsls	r3, r3, #18
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x5bc>
 8002f22:	e06a      	b.n	8002ffa <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f2a:	4917      	ldr	r1, [pc, #92]	; (8002f88 <HAL_RCC_OscConfig+0x640>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7ff fa20 	bl	8002374 <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7ff fa1b 	bl	8002374 <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e057      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	049b      	lsls	r3, r3, #18
 8002f54:	4013      	ands	r3, r2
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_OscConfig+0x62c>)
 8002f5e:	490c      	ldr	r1, [pc, #48]	; (8002f90 <HAL_RCC_OscConfig+0x648>)
 8002f60:	400a      	ands	r2, r1
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	e049      	b.n	8002ffa <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d112      	bne.n	8002f94 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e044      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	00001388 	.word	0x00001388
 8002f80:	efffffff 	.word	0xefffffff
 8002f84:	ffbfffff 	.word	0xffbfffff
 8002f88:	feffffff 	.word	0xfeffffff
 8002f8c:	11c1808c 	.word	0x11c1808c
 8002f90:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x6bc>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d126      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2270      	movs	r2, #112	; 0x70
 8002fac:	401a      	ands	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	23fe      	movs	r3, #254	; 0xfe
 8002fba:	01db      	lsls	r3, r3, #7
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d116      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	23f8      	movs	r3, #248	; 0xf8
 8002fcc:	039b      	lsls	r3, r3, #14
 8002fce:	401a      	ands	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d10e      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	23e0      	movs	r3, #224	; 0xe0
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	401a      	ands	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	0f5b      	lsrs	r3, r3, #29
 8002fec:	075a      	lsls	r2, r3, #29
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	b008      	add	sp, #32
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0e9      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800301c:	4b76      	ldr	r3, [pc, #472]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2207      	movs	r2, #7
 8003022:	4013      	ands	r3, r2
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d91e      	bls.n	8003068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b73      	ldr	r3, [pc, #460]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2207      	movs	r2, #7
 8003030:	4393      	bics	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	4b70      	ldr	r3, [pc, #448]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800303c:	f7ff f99a 	bl	8002374 <HAL_GetTick>
 8003040:	0003      	movs	r3, r0
 8003042:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003044:	e009      	b.n	800305a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003046:	f7ff f995 	bl	8002374 <HAL_GetTick>
 800304a:	0002      	movs	r2, r0
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	4a6a      	ldr	r2, [pc, #424]	; (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e0ca      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2207      	movs	r2, #7
 8003060:	4013      	ands	r3, r2
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d1ee      	bne.n	8003046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2202      	movs	r2, #2
 800306e:	4013      	ands	r3, r2
 8003070:	d015      	beq.n	800309e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2204      	movs	r2, #4
 8003078:	4013      	ands	r3, r2
 800307a:	d006      	beq.n	800308a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800307c:	4b60      	ldr	r3, [pc, #384]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	4b5f      	ldr	r3, [pc, #380]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003082:	21e0      	movs	r1, #224	; 0xe0
 8003084:	01c9      	lsls	r1, r1, #7
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <HAL_RCC_ClockConfig+0x1fc>)
 8003090:	4013      	ands	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2201      	movs	r2, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	d057      	beq.n	8003158 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d107      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	2380      	movs	r3, #128	; 0x80
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	4013      	ands	r3, r2
 80030ba:	d12b      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e097      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030c8:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	049b      	lsls	r3, r3, #18
 80030d0:	4013      	ands	r3, r2
 80030d2:	d11f      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e08b      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	2380      	movs	r3, #128	; 0x80
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	d113      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e07f      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d106      	bne.n	8003106 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	2202      	movs	r2, #2
 80030fe:	4013      	ands	r3, r2
 8003100:	d108      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e074      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	2202      	movs	r2, #2
 800310c:	4013      	ands	r3, r2
 800310e:	d101      	bne.n	8003114 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e06d      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2207      	movs	r2, #7
 800311a:	4393      	bics	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003124:	430a      	orrs	r2, r1
 8003126:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003128:	f7ff f924 	bl	8002374 <HAL_GetTick>
 800312c:	0003      	movs	r3, r0
 800312e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003130:	e009      	b.n	8003146 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003132:	f7ff f91f 	bl	8002374 <HAL_GetTick>
 8003136:	0002      	movs	r2, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	4a2f      	ldr	r2, [pc, #188]	; (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e054      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2238      	movs	r2, #56	; 0x38
 800314c:	401a      	ands	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	429a      	cmp	r2, r3
 8003156:	d1ec      	bne.n	8003132 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2207      	movs	r2, #7
 800315e:	4013      	ands	r3, r2
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d21e      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2207      	movs	r2, #7
 800316c:	4393      	bics	r3, r2
 800316e:	0019      	movs	r1, r3
 8003170:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003178:	f7ff f8fc 	bl	8002374 <HAL_GetTick>
 800317c:	0003      	movs	r3, r0
 800317e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003180:	e009      	b.n	8003196 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003182:	f7ff f8f7 	bl	8002374 <HAL_GetTick>
 8003186:	0002      	movs	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_RCC_ClockConfig+0x1f4>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e02c      	b.n	80031f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003196:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <HAL_RCC_ClockConfig+0x1f0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2207      	movs	r2, #7
 800319c:	4013      	ands	r3, r2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1ee      	bne.n	8003182 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2204      	movs	r2, #4
 80031aa:	4013      	ands	r3, r2
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <HAL_RCC_ClockConfig+0x200>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	0019      	movs	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031be:	430a      	orrs	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031c2:	f000 f829 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80031c6:	0001      	movs	r1, r0
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_RCC_ClockConfig+0x1f8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	220f      	movs	r2, #15
 80031d0:	401a      	ands	r2, r3
 80031d2:	4b0e      	ldr	r3, [pc, #56]	; (800320c <HAL_RCC_ClockConfig+0x204>)
 80031d4:	0092      	lsls	r2, r2, #2
 80031d6:	58d3      	ldr	r3, [r2, r3]
 80031d8:	221f      	movs	r2, #31
 80031da:	4013      	ands	r3, r2
 80031dc:	000a      	movs	r2, r1
 80031de:	40da      	lsrs	r2, r3
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_ClockConfig+0x208>)
 80031e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_ClockConfig+0x20c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff f867 	bl	80022bc <HAL_InitTick>
 80031ee:	0003      	movs	r3, r0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40022000 	.word	0x40022000
 80031fc:	00001388 	.word	0x00001388
 8003200:	40021000 	.word	0x40021000
 8003204:	fffff0ff 	.word	0xfffff0ff
 8003208:	ffff8fff 	.word	0xffff8fff
 800320c:	08004bec 	.word	0x08004bec
 8003210:	20000000 	.word	0x20000000
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2238      	movs	r2, #56	; 0x38
 8003224:	4013      	ands	r3, r2
 8003226:	d10f      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003228:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	0adb      	lsrs	r3, r3, #11
 800322e:	2207      	movs	r2, #7
 8003230:	4013      	ands	r3, r2
 8003232:	2201      	movs	r2, #1
 8003234:	409a      	lsls	r2, r3
 8003236:	0013      	movs	r3, r2
 8003238:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	4835      	ldr	r0, [pc, #212]	; (8003314 <HAL_RCC_GetSysClockFreq+0xfc>)
 800323e:	f7fc ff61 	bl	8000104 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e05d      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003248:	4b31      	ldr	r3, [pc, #196]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2238      	movs	r2, #56	; 0x38
 800324e:	4013      	ands	r3, r2
 8003250:	2b08      	cmp	r3, #8
 8003252:	d102      	bne.n	800325a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003254:	4b30      	ldr	r3, [pc, #192]	; (8003318 <HAL_RCC_GetSysClockFreq+0x100>)
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	e054      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	2238      	movs	r2, #56	; 0x38
 8003260:	4013      	ands	r3, r2
 8003262:	2b10      	cmp	r3, #16
 8003264:	d138      	bne.n	80032d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003266:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2203      	movs	r2, #3
 800326c:	4013      	ands	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	2207      	movs	r2, #7
 8003278:	4013      	ands	r3, r2
 800327a:	3301      	adds	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	4824      	ldr	r0, [pc, #144]	; (8003318 <HAL_RCC_GetSysClockFreq+0x100>)
 8003288:	f7fc ff3c 	bl	8000104 <__udivsi3>
 800328c:	0003      	movs	r3, r0
 800328e:	0019      	movs	r1, r3
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	227f      	movs	r2, #127	; 0x7f
 8003298:	4013      	ands	r3, r2
 800329a:	434b      	muls	r3, r1
 800329c:	617b      	str	r3, [r7, #20]
        break;
 800329e:	e00d      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	481c      	ldr	r0, [pc, #112]	; (8003314 <HAL_RCC_GetSysClockFreq+0xfc>)
 80032a4:	f7fc ff2e 	bl	8000104 <__udivsi3>
 80032a8:	0003      	movs	r3, r0
 80032aa:	0019      	movs	r1, r3
 80032ac:	4b18      	ldr	r3, [pc, #96]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	227f      	movs	r2, #127	; 0x7f
 80032b4:	4013      	ands	r3, r2
 80032b6:	434b      	muls	r3, r1
 80032b8:	617b      	str	r3, [r7, #20]
        break;
 80032ba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	0f5b      	lsrs	r3, r3, #29
 80032c2:	2207      	movs	r2, #7
 80032c4:	4013      	ands	r3, r2
 80032c6:	3301      	adds	r3, #1
 80032c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6978      	ldr	r0, [r7, #20]
 80032ce:	f7fc ff19 	bl	8000104 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	e015      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032d8:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2238      	movs	r2, #56	; 0x38
 80032de:	4013      	ands	r3, r2
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d103      	bne.n	80032ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	021b      	lsls	r3, r3, #8
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2238      	movs	r2, #56	; 0x38
 80032f2:	4013      	ands	r3, r2
 80032f4:	2b18      	cmp	r3, #24
 80032f6:	d103      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032f8:	23fa      	movs	r3, #250	; 0xfa
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e001      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003304:	693b      	ldr	r3, [r7, #16]
}
 8003306:	0018      	movs	r0, r3
 8003308:	46bd      	mov	sp, r7
 800330a:	b006      	add	sp, #24
 800330c:	bd80      	pop	{r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	40021000 	.word	0x40021000
 8003314:	00f42400 	.word	0x00f42400
 8003318:	007a1200 	.word	0x007a1200

0800331c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <HAL_RCC_GetHCLKFreq+0x10>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	20000000 	.word	0x20000000

08003330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003334:	f7ff fff2 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003338:	0004      	movs	r4, r0
 800333a:	f7ff faf9 	bl	8002930 <LL_RCC_GetAPB1Prescaler>
 800333e:	0003      	movs	r3, r0
 8003340:	0b1a      	lsrs	r2, r3, #12
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003344:	0092      	lsls	r2, r2, #2
 8003346:	58d3      	ldr	r3, [r2, r3]
 8003348:	221f      	movs	r2, #31
 800334a:	4013      	ands	r3, r2
 800334c:	40dc      	lsrs	r4, r3
 800334e:	0023      	movs	r3, r4
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	08004c2c 	.word	0x08004c2c

0800335c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003364:	2313      	movs	r3, #19
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800336c:	2312      	movs	r3, #18
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	029b      	lsls	r3, r3, #10
 800337c:	4013      	ands	r3, r2
 800337e:	d100      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003380:	e0ad      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003382:	2011      	movs	r0, #17
 8003384:	183b      	adds	r3, r7, r0
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338a:	4b47      	ldr	r3, [pc, #284]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800338c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	055b      	lsls	r3, r3, #21
 8003392:	4013      	ands	r3, r2
 8003394:	d110      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003396:	4b44      	ldr	r3, [pc, #272]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	0549      	lsls	r1, r1, #21
 80033a0:	430a      	orrs	r2, r1
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a4:	4b40      	ldr	r3, [pc, #256]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80033a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	055b      	lsls	r3, r3, #21
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	2201      	movs	r2, #1
 80033b6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b8:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b3b      	ldr	r3, [pc, #236]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033be:	2180      	movs	r1, #128	; 0x80
 80033c0:	0049      	lsls	r1, r1, #1
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033c6:	f7fe ffd5 	bl	8002374 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033ce:	e00b      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d0:	f7fe ffd0 	bl	8002374 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d904      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033de:	2313      	movs	r3, #19
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033e8:	4b30      	ldr	r3, [pc, #192]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4013      	ands	r3, r2
 80033f2:	d0ed      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033f4:	2313      	movs	r3, #19
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d15e      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fe:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003400:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003402:	23c0      	movs	r3, #192	; 0xc0
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4013      	ands	r3, r2
 8003408:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d019      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	429a      	cmp	r2, r3
 8003418:	d014      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800341c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341e:	4a24      	ldr	r2, [pc, #144]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003426:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003428:	4b1f      	ldr	r3, [pc, #124]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800342a:	2180      	movs	r1, #128	; 0x80
 800342c:	0249      	lsls	r1, r1, #9
 800342e:	430a      	orrs	r2, r1
 8003430:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003434:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003438:	491e      	ldr	r1, [pc, #120]	; (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800343a:	400a      	ands	r2, r1
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2201      	movs	r2, #1
 8003448:	4013      	ands	r3, r2
 800344a:	d016      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe ff92 	bl	8002374 <HAL_GetTick>
 8003450:	0003      	movs	r3, r0
 8003452:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003454:	e00c      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe ff8d 	bl	8002374 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	4a15      	ldr	r2, [pc, #84]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d904      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003466:	2313      	movs	r3, #19
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2203      	movs	r2, #3
 800346c:	701a      	strb	r2, [r3, #0]
            break;
 800346e:	e004      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003470:	4b0d      	ldr	r3, [pc, #52]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	2202      	movs	r2, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d0ed      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800347a:	2313      	movs	r3, #19
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10a      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003484:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800348a:	4013      	ands	r3, r2
 800348c:	0019      	movs	r1, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003492:	4b05      	ldr	r3, [pc, #20]	; (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003494:	430a      	orrs	r2, r1
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
 8003498:	e016      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800349a:	2312      	movs	r3, #18
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2213      	movs	r2, #19
 80034a0:	18ba      	adds	r2, r7, r2
 80034a2:	7812      	ldrb	r2, [r2, #0]
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e00f      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40007000 	.word	0x40007000
 80034b0:	fffffcff 	.word	0xfffffcff
 80034b4:	fffeffff 	.word	0xfffeffff
 80034b8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	2312      	movs	r3, #18
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2213      	movs	r2, #19
 80034c2:	18ba      	adds	r2, r7, r2
 80034c4:	7812      	ldrb	r2, [r2, #0]
 80034c6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034c8:	2311      	movs	r3, #17
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4bb6      	ldr	r3, [pc, #728]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d6:	4bb5      	ldr	r3, [pc, #724]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034d8:	49b5      	ldr	r1, [pc, #724]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80034da:	400a      	ands	r2, r1
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2201      	movs	r2, #1
 80034e4:	4013      	ands	r3, r2
 80034e6:	d009      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034e8:	4bb0      	ldr	r3, [pc, #704]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	2203      	movs	r2, #3
 80034ee:	4393      	bics	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4bad      	ldr	r3, [pc, #692]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80034f8:	430a      	orrs	r2, r1
 80034fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d009      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003506:	4ba9      	ldr	r3, [pc, #676]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	220c      	movs	r2, #12
 800350c:	4393      	bics	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4ba5      	ldr	r3, [pc, #660]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003516:	430a      	orrs	r2, r1
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2204      	movs	r2, #4
 8003520:	4013      	ands	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003524:	4ba1      	ldr	r3, [pc, #644]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003528:	2230      	movs	r2, #48	; 0x30
 800352a:	4393      	bics	r3, r2
 800352c:	0019      	movs	r1, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	4b9e      	ldr	r3, [pc, #632]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003534:	430a      	orrs	r2, r1
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003542:	4b9a      	ldr	r3, [pc, #616]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	4a9b      	ldr	r2, [pc, #620]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	4b96      	ldr	r3, [pc, #600]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003552:	430a      	orrs	r2, r1
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	4013      	ands	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003562:	4b92      	ldr	r3, [pc, #584]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003566:	4a94      	ldr	r2, [pc, #592]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695a      	ldr	r2, [r3, #20]
 8003570:	4b8e      	ldr	r3, [pc, #568]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003572:	430a      	orrs	r2, r1
 8003574:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003582:	4b8a      	ldr	r3, [pc, #552]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003586:	4a8d      	ldr	r2, [pc, #564]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003588:	4013      	ands	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003590:	4b86      	ldr	r3, [pc, #536]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003592:	430a      	orrs	r2, r1
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4013      	ands	r3, r2
 80035a0:	d009      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035a2:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	4a86      	ldr	r2, [pc, #536]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	0019      	movs	r1, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b0:	4b7e      	ldr	r3, [pc, #504]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035b2:	430a      	orrs	r2, r1
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2220      	movs	r2, #32
 80035bc:	4013      	ands	r3, r2
 80035be:	d009      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035c0:	4b7a      	ldr	r3, [pc, #488]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	4a7f      	ldr	r2, [pc, #508]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	4b77      	ldr	r3, [pc, #476]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	4013      	ands	r3, r2
 80035dc:	d009      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035de:	4b73      	ldr	r3, [pc, #460]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	4a79      	ldr	r2, [pc, #484]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	4b6f      	ldr	r3, [pc, #444]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80035ee:	430a      	orrs	r2, r1
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	01db      	lsls	r3, r3, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	d015      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035fe:	4b6b      	ldr	r3, [pc, #428]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	0899      	lsrs	r1, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800360a:	4b68      	ldr	r3, [pc, #416]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800360c:	430a      	orrs	r2, r1
 800360e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003614:	2380      	movs	r3, #128	; 0x80
 8003616:	05db      	lsls	r3, r3, #23
 8003618:	429a      	cmp	r2, r3
 800361a:	d106      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800361c:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003622:	2180      	movs	r1, #128	; 0x80
 8003624:	0249      	lsls	r1, r1, #9
 8003626:	430a      	orrs	r2, r1
 8003628:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	4013      	ands	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003636:	4b5d      	ldr	r3, [pc, #372]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	4393      	bics	r3, r2
 800363e:	0019      	movs	r1, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003646:	430a      	orrs	r2, r1
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	039b      	lsls	r3, r3, #14
 8003652:	4013      	ands	r3, r2
 8003654:	d016      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003656:	4b55      	ldr	r3, [pc, #340]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	4a5c      	ldr	r2, [pc, #368]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800365c:	4013      	ands	r3, r2
 800365e:	0019      	movs	r1, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003664:	4b51      	ldr	r3, [pc, #324]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003666:	430a      	orrs	r2, r1
 8003668:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	03db      	lsls	r3, r3, #15
 8003672:	429a      	cmp	r2, r3
 8003674:	d106      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003676:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	4b4c      	ldr	r3, [pc, #304]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	0449      	lsls	r1, r1, #17
 8003680:	430a      	orrs	r2, r1
 8003682:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	03db      	lsls	r3, r3, #15
 800368c:	4013      	ands	r3, r2
 800368e:	d016      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003694:	4a4e      	ldr	r2, [pc, #312]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369e:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	045b      	lsls	r3, r3, #17
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d106      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036b0:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	4b3d      	ldr	r3, [pc, #244]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	0449      	lsls	r1, r1, #17
 80036ba:	430a      	orrs	r2, r1
 80036bc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	4013      	ands	r3, r2
 80036c8:	d014      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	2203      	movs	r2, #3
 80036d0:	4393      	bics	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036da:	430a      	orrs	r2, r1
 80036dc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d106      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036e6:	4b31      	ldr	r3, [pc, #196]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	4b30      	ldr	r3, [pc, #192]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80036ec:	2180      	movs	r1, #128	; 0x80
 80036ee:	0249      	lsls	r1, r1, #9
 80036f0:	430a      	orrs	r2, r1
 80036f2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	019b      	lsls	r3, r3, #6
 80036fc:	4013      	ands	r3, r2
 80036fe:	d014      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003700:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	220c      	movs	r2, #12
 8003706:	4393      	bics	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800370e:	4b27      	ldr	r3, [pc, #156]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003710:	430a      	orrs	r2, r1
 8003712:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003718:	2b04      	cmp	r3, #4
 800371a:	d106      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800371c:	4b23      	ldr	r3, [pc, #140]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	0249      	lsls	r1, r1, #9
 8003726:	430a      	orrs	r2, r1
 8003728:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	045b      	lsls	r3, r3, #17
 8003732:	4013      	ands	r3, r2
 8003734:	d016      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	4a22      	ldr	r2, [pc, #136]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800373c:	4013      	ands	r3, r2
 800373e:	0019      	movs	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003744:	4b19      	ldr	r3, [pc, #100]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003746:	430a      	orrs	r2, r1
 8003748:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	429a      	cmp	r2, r3
 8003754:	d106      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0449      	lsls	r1, r1, #17
 8003760:	430a      	orrs	r2, r1
 8003762:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	049b      	lsls	r3, r3, #18
 800376c:	4013      	ands	r3, r2
 800376e:	d016      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003774:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003776:	4013      	ands	r3, r2
 8003778:	0019      	movs	r1, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800377e:	4b0b      	ldr	r3, [pc, #44]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003780:	430a      	orrs	r2, r1
 8003782:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	429a      	cmp	r2, r3
 800378e:	d106      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003796:	2180      	movs	r1, #128	; 0x80
 8003798:	0449      	lsls	r1, r1, #17
 800379a:	430a      	orrs	r2, r1
 800379c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800379e:	2312      	movs	r3, #18
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	781b      	ldrb	r3, [r3, #0]
}
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b006      	add	sp, #24
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	fffff3ff 	.word	0xfffff3ff
 80037b8:	fffffcff 	.word	0xfffffcff
 80037bc:	fff3ffff 	.word	0xfff3ffff
 80037c0:	ffcfffff 	.word	0xffcfffff
 80037c4:	ffffcfff 	.word	0xffffcfff
 80037c8:	ffff3fff 	.word	0xffff3fff
 80037cc:	ffbfffff 	.word	0xffbfffff
 80037d0:	feffffff 	.word	0xfeffffff

080037d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e04a      	b.n	800387c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	223d      	movs	r2, #61	; 0x3d
 80037ea:	5c9b      	ldrb	r3, [r3, r2]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d107      	bne.n	8003802 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	223c      	movs	r2, #60	; 0x3c
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7fe fc61 	bl	80020c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	223d      	movs	r2, #61	; 0x3d
 8003806:	2102      	movs	r1, #2
 8003808:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3304      	adds	r3, #4
 8003812:	0019      	movs	r1, r3
 8003814:	0010      	movs	r0, r2
 8003816:	f000 f965 	bl	8003ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2248      	movs	r2, #72	; 0x48
 800381e:	2101      	movs	r1, #1
 8003820:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	223e      	movs	r2, #62	; 0x3e
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	223f      	movs	r2, #63	; 0x3f
 800382e:	2101      	movs	r1, #1
 8003830:	5499      	strb	r1, [r3, r2]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	; 0x40
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2241      	movs	r2, #65	; 0x41
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2242      	movs	r2, #66	; 0x42
 8003846:	2101      	movs	r1, #1
 8003848:	5499      	strb	r1, [r3, r2]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2243      	movs	r2, #67	; 0x43
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2244      	movs	r2, #68	; 0x44
 8003856:	2101      	movs	r1, #1
 8003858:	5499      	strb	r1, [r3, r2]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2245      	movs	r2, #69	; 0x45
 800385e:	2101      	movs	r1, #1
 8003860:	5499      	strb	r1, [r3, r2]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2246      	movs	r2, #70	; 0x46
 8003866:	2101      	movs	r1, #1
 8003868:	5499      	strb	r1, [r3, r2]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2247      	movs	r2, #71	; 0x47
 800386e:	2101      	movs	r1, #1
 8003870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	223d      	movs	r2, #61	; 0x3d
 8003876:	2101      	movs	r1, #1
 8003878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b002      	add	sp, #8
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	223d      	movs	r2, #61	; 0x3d
 8003890:	5c9b      	ldrb	r3, [r3, r2]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e03f      	b.n	800391c <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	223d      	movs	r2, #61	; 0x3d
 80038a0:	2102      	movs	r1, #2
 80038a2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <HAL_TIM_Base_Start+0xa0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d014      	beq.n	80038d8 <HAL_TIM_Base_Start+0x54>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	05db      	lsls	r3, r3, #23
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d00e      	beq.n	80038d8 <HAL_TIM_Base_Start+0x54>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_TIM_Base_Start+0xa4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_TIM_Base_Start+0x54>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a18      	ldr	r2, [pc, #96]	; (800392c <HAL_TIM_Base_Start+0xa8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_Base_Start+0x54>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a17      	ldr	r2, [pc, #92]	; (8003930 <HAL_TIM_Base_Start+0xac>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d116      	bne.n	8003906 <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <HAL_TIM_Base_Start+0xb0>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b06      	cmp	r3, #6
 80038e8:	d016      	beq.n	8003918 <HAL_TIM_Base_Start+0x94>
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	025b      	lsls	r3, r3, #9
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d011      	beq.n	8003918 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003904:	e008      	b.n	8003918 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2101      	movs	r1, #1
 8003912:	430a      	orrs	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e000      	b.n	800391a <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40012c00 	.word	0x40012c00
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40014000 	.word	0x40014000
 8003934:	00010007 	.word	0x00010007

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	230f      	movs	r3, #15
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	223c      	movs	r2, #60	; 0x3c
 800394e:	5c9b      	ldrb	r3, [r3, r2]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0x20>
 8003954:	2302      	movs	r3, #2
 8003956:	e0bc      	b.n	8003ad2 <HAL_TIM_ConfigClockSource+0x19a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	223c      	movs	r2, #60	; 0x3c
 800395c:	2101      	movs	r1, #1
 800395e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	223d      	movs	r2, #61	; 0x3d
 8003964:	2102      	movs	r1, #2
 8003966:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	4a5a      	ldr	r2, [pc, #360]	; (8003adc <HAL_TIM_ConfigClockSource+0x1a4>)
 8003974:	4013      	ands	r3, r2
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4a59      	ldr	r2, [pc, #356]	; (8003ae0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2280      	movs	r2, #128	; 0x80
 800398e:	0192      	lsls	r2, r2, #6
 8003990:	4293      	cmp	r3, r2
 8003992:	d040      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xde>
 8003994:	2280      	movs	r2, #128	; 0x80
 8003996:	0192      	lsls	r2, r2, #6
 8003998:	4293      	cmp	r3, r2
 800399a:	d900      	bls.n	800399e <HAL_TIM_ConfigClockSource+0x66>
 800399c:	e088      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 800399e:	2280      	movs	r2, #128	; 0x80
 80039a0:	0152      	lsls	r2, r2, #5
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d100      	bne.n	80039a8 <HAL_TIM_ConfigClockSource+0x70>
 80039a6:	e088      	b.n	8003aba <HAL_TIM_ConfigClockSource+0x182>
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	0152      	lsls	r2, r2, #5
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d900      	bls.n	80039b2 <HAL_TIM_ConfigClockSource+0x7a>
 80039b0:	e07e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039b2:	2b70      	cmp	r3, #112	; 0x70
 80039b4:	d018      	beq.n	80039e8 <HAL_TIM_ConfigClockSource+0xb0>
 80039b6:	d900      	bls.n	80039ba <HAL_TIM_ConfigClockSource+0x82>
 80039b8:	e07a      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039ba:	2b60      	cmp	r3, #96	; 0x60
 80039bc:	d04f      	beq.n	8003a5e <HAL_TIM_ConfigClockSource+0x126>
 80039be:	d900      	bls.n	80039c2 <HAL_TIM_ConfigClockSource+0x8a>
 80039c0:	e076      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039c2:	2b50      	cmp	r3, #80	; 0x50
 80039c4:	d03b      	beq.n	8003a3e <HAL_TIM_ConfigClockSource+0x106>
 80039c6:	d900      	bls.n	80039ca <HAL_TIM_ConfigClockSource+0x92>
 80039c8:	e072      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039ca:	2b40      	cmp	r3, #64	; 0x40
 80039cc:	d057      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0x146>
 80039ce:	d900      	bls.n	80039d2 <HAL_TIM_ConfigClockSource+0x9a>
 80039d0:	e06e      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039d2:	2b30      	cmp	r3, #48	; 0x30
 80039d4:	d063      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x166>
 80039d6:	d86b      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d060      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x166>
 80039dc:	d868      	bhi.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d05d      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x166>
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d05b      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x166>
 80039e6:	e063      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f8:	f000 f97a 	bl	8003cf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2277      	movs	r2, #119	; 0x77
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	609a      	str	r2, [r3, #8]
      break;
 8003a14:	e052      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a26:	f000 f963 	bl	8003cf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	01c9      	lsls	r1, r1, #7
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
      break;
 8003a3c:	e03e      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	f000 f8d4 	bl	8003bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2150      	movs	r1, #80	; 0x50
 8003a56:	0018      	movs	r0, r3
 8003a58:	f000 f92e 	bl	8003cb8 <TIM_ITRx_SetConfig>
      break;
 8003a5c:	e02e      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	f000 f8f2 	bl	8003c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2160      	movs	r1, #96	; 0x60
 8003a76:	0018      	movs	r0, r3
 8003a78:	f000 f91e 	bl	8003cb8 <TIM_ITRx_SetConfig>
      break;
 8003a7c:	e01e      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	f000 f8b4 	bl	8003bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2140      	movs	r1, #64	; 0x40
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f90e 	bl	8003cb8 <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e00e      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	0010      	movs	r0, r2
 8003aaa:	f000 f905 	bl	8003cb8 <TIM_ITRx_SetConfig>
      break;
 8003aae:	e005      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ab0:	230f      	movs	r3, #15
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
      break;
 8003ab8:	e000      	b.n	8003abc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003aba:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	223d      	movs	r2, #61	; 0x3d
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	223c      	movs	r2, #60	; 0x3c
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

  return status;
 8003acc:	230f      	movs	r3, #15
 8003ace:	18fb      	adds	r3, r7, r3
 8003ad0:	781b      	ldrb	r3, [r3, #0]
}
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	b004      	add	sp, #16
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	ffceff88 	.word	0xffceff88
 8003ae0:	ffff00ff 	.word	0xffff00ff

08003ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <TIM_Base_SetConfig+0xf4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00c      	beq.n	8003b16 <TIM_Base_SetConfig+0x32>
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0x32>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <TIM_Base_SetConfig+0xf8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0x32>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <TIM_Base_SetConfig+0xfc>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d108      	bne.n	8003b28 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2270      	movs	r2, #112	; 0x70
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a2b      	ldr	r2, [pc, #172]	; (8003bd8 <TIM_Base_SetConfig+0xf4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01c      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	05db      	lsls	r3, r3, #23
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d017      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a27      	ldr	r2, [pc, #156]	; (8003bdc <TIM_Base_SetConfig+0xf8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a26      	ldr	r2, [pc, #152]	; (8003be0 <TIM_Base_SetConfig+0xfc>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d00f      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <TIM_Base_SetConfig+0x100>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00b      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <TIM_Base_SetConfig+0x104>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d007      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a23      	ldr	r2, [pc, #140]	; (8003bec <TIM_Base_SetConfig+0x108>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d003      	beq.n	8003b6a <TIM_Base_SetConfig+0x86>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a22      	ldr	r2, [pc, #136]	; (8003bf0 <TIM_Base_SetConfig+0x10c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d108      	bne.n	8003b7c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <TIM_Base_SetConfig+0x110>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	4393      	bics	r3, r2
 8003b82:	001a      	movs	r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a0c      	ldr	r2, [pc, #48]	; (8003bd8 <TIM_Base_SetConfig+0xf4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0xde>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <TIM_Base_SetConfig+0x104>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0xde>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	; (8003bec <TIM_Base_SetConfig+0x108>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0xde>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <TIM_Base_SetConfig+0x10c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d103      	bne.n	8003bca <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	615a      	str	r2, [r3, #20]
}
 8003bd0:	46c0      	nop			; (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40002000 	.word	0x40002000
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800
 8003bf4:	fffffcff 	.word	0xfffffcff

08003bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4393      	bics	r3, r2
 8003c12:	001a      	movs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	22f0      	movs	r2, #240	; 0xf0
 8003c22:	4393      	bics	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	220a      	movs	r2, #10
 8003c34:	4393      	bics	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	621a      	str	r2, [r3, #32]
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b006      	add	sp, #24
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	2210      	movs	r2, #16
 8003c66:	4393      	bics	r3, r2
 8003c68:	001a      	movs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <TIM_TI2_ConfigInputStage+0x60>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	031b      	lsls	r3, r3, #12
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	22a0      	movs	r2, #160	; 0xa0
 8003c90:	4393      	bics	r3, r2
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	621a      	str	r2, [r3, #32]
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b006      	add	sp, #24
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	ffff0fff 	.word	0xffff0fff

08003cb8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a08      	ldr	r2, [pc, #32]	; (8003cec <TIM_ITRx_SetConfig+0x34>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cd0:	683a      	ldr	r2, [r7, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	609a      	str	r2, [r3, #8]
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	46c0      	nop			; (mov r8, r8)
 8003cec:	ffcfff8f 	.word	0xffcfff8f

08003cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
 8003cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	4a09      	ldr	r2, [pc, #36]	; (8003d2c <TIM_ETR_SetConfig+0x3c>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	021a      	lsls	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	609a      	str	r2, [r3, #8]
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b006      	add	sp, #24
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	ffff00ff 	.word	0xffff00ff

08003d30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223c      	movs	r2, #60	; 0x3c
 8003d3e:	5c9b      	ldrb	r3, [r3, r2]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e05a      	b.n	8003dfe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	223c      	movs	r2, #60	; 0x3c
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	223d      	movs	r2, #61	; 0x3d
 8003d54:	2102      	movs	r1, #2
 8003d56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a26      	ldr	r2, [pc, #152]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d108      	bne.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2270      	movs	r2, #112	; 0x70
 8003d88:	4393      	bics	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d014      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	; 0x80
 8003dae:	05db      	lsls	r3, r3, #23
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d00e      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a15      	ldr	r2, [pc, #84]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d009      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d004      	beq.n	8003dd2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a12      	ldr	r2, [pc, #72]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10c      	bne.n	8003dec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2280      	movs	r2, #128	; 0x80
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	223d      	movs	r2, #61	; 0x3d
 8003df0:	2101      	movs	r1, #1
 8003df2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	223c      	movs	r2, #60	; 0x3c
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b004      	add	sp, #16
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			; (mov r8, r8)
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	ff0fffff 	.word	0xff0fffff
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800
 8003e18:	40014000 	.word	0x40014000

08003e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e046      	b.n	8003ebc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2288      	movs	r2, #136	; 0x88
 8003e32:	589b      	ldr	r3, [r3, r2]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2284      	movs	r2, #132	; 0x84
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7fe f974 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2288      	movs	r2, #136	; 0x88
 8003e4c:	2124      	movs	r1, #36	; 0x24
 8003e4e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	438a      	bics	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f830 	bl	8003ec8 <UART_SetConfig>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d101      	bne.n	8003e72 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e024      	b.n	8003ebc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f000 fb79 	bl	8004574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	490d      	ldr	r1, [pc, #52]	; (8003ec4 <HAL_UART_Init+0xa8>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	212a      	movs	r1, #42	; 0x2a
 8003e9e:	438a      	bics	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2101      	movs	r1, #1
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 fc11 	bl	80046dc <UART_CheckIdleState>
 8003eba:	0003      	movs	r3, r0
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b002      	add	sp, #8
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	ffffb7ff 	.word	0xffffb7ff

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b090      	sub	sp, #64	; 0x40
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed0:	231a      	movs	r3, #26
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	19db      	adds	r3, r3, r7
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4ac1      	ldr	r2, [pc, #772]	; (8004200 <UART_SetConfig+0x338>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	0019      	movs	r1, r3
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4abc      	ldr	r2, [pc, #752]	; (8004204 <UART_SetConfig+0x33c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	68d9      	ldr	r1, [r3, #12]
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	0003      	movs	r3, r0
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4ab6      	ldr	r2, [pc, #728]	; (8004208 <UART_SetConfig+0x340>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d009      	beq.n	8003f48 <UART_SetConfig+0x80>
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4ab4      	ldr	r2, [pc, #720]	; (800420c <UART_SetConfig+0x344>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d004      	beq.n	8003f48 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f44:	4313      	orrs	r3, r2
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	4ab0      	ldr	r2, [pc, #704]	; (8004210 <UART_SetConfig+0x348>)
 8003f50:	4013      	ands	r3, r2
 8003f52:	0019      	movs	r1, r3
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	220f      	movs	r2, #15
 8003f66:	4393      	bics	r3, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	0003      	movs	r3, r0
 8003f74:	430b      	orrs	r3, r1
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4aa5      	ldr	r2, [pc, #660]	; (8004214 <UART_SetConfig+0x34c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d131      	bne.n	8003fe6 <UART_SetConfig+0x11e>
 8003f82:	4ba5      	ldr	r3, [pc, #660]	; (8004218 <UART_SetConfig+0x350>)
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	2203      	movs	r2, #3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d01d      	beq.n	8003fca <UART_SetConfig+0x102>
 8003f8e:	d823      	bhi.n	8003fd8 <UART_SetConfig+0x110>
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00c      	beq.n	8003fae <UART_SetConfig+0xe6>
 8003f94:	d820      	bhi.n	8003fd8 <UART_SetConfig+0x110>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0xd8>
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d00e      	beq.n	8003fbc <UART_SetConfig+0xf4>
 8003f9e:	e01b      	b.n	8003fd8 <UART_SetConfig+0x110>
 8003fa0:	231b      	movs	r3, #27
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	189b      	adds	r3, r3, r2
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
 8003fac:	e154      	b.n	8004258 <UART_SetConfig+0x390>
 8003fae:	231b      	movs	r3, #27
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	189b      	adds	r3, r3, r2
 8003fb4:	19db      	adds	r3, r3, r7
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e14d      	b.n	8004258 <UART_SetConfig+0x390>
 8003fbc:	231b      	movs	r3, #27
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	2204      	movs	r2, #4
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	e146      	b.n	8004258 <UART_SetConfig+0x390>
 8003fca:	231b      	movs	r3, #27
 8003fcc:	2220      	movs	r2, #32
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	19db      	adds	r3, r3, r7
 8003fd2:	2208      	movs	r2, #8
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e13f      	b.n	8004258 <UART_SetConfig+0x390>
 8003fd8:	231b      	movs	r3, #27
 8003fda:	2220      	movs	r2, #32
 8003fdc:	189b      	adds	r3, r3, r2
 8003fde:	19db      	adds	r3, r3, r7
 8003fe0:	2210      	movs	r2, #16
 8003fe2:	701a      	strb	r2, [r3, #0]
 8003fe4:	e138      	b.n	8004258 <UART_SetConfig+0x390>
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a8c      	ldr	r2, [pc, #560]	; (800421c <UART_SetConfig+0x354>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d131      	bne.n	8004054 <UART_SetConfig+0x18c>
 8003ff0:	4b89      	ldr	r3, [pc, #548]	; (8004218 <UART_SetConfig+0x350>)
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	220c      	movs	r2, #12
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	d01d      	beq.n	8004038 <UART_SetConfig+0x170>
 8003ffc:	d823      	bhi.n	8004046 <UART_SetConfig+0x17e>
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d00c      	beq.n	800401c <UART_SetConfig+0x154>
 8004002:	d820      	bhi.n	8004046 <UART_SetConfig+0x17e>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <UART_SetConfig+0x146>
 8004008:	2b04      	cmp	r3, #4
 800400a:	d00e      	beq.n	800402a <UART_SetConfig+0x162>
 800400c:	e01b      	b.n	8004046 <UART_SetConfig+0x17e>
 800400e:	231b      	movs	r3, #27
 8004010:	2220      	movs	r2, #32
 8004012:	189b      	adds	r3, r3, r2
 8004014:	19db      	adds	r3, r3, r7
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	e11d      	b.n	8004258 <UART_SetConfig+0x390>
 800401c:	231b      	movs	r3, #27
 800401e:	2220      	movs	r2, #32
 8004020:	189b      	adds	r3, r3, r2
 8004022:	19db      	adds	r3, r3, r7
 8004024:	2202      	movs	r2, #2
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e116      	b.n	8004258 <UART_SetConfig+0x390>
 800402a:	231b      	movs	r3, #27
 800402c:	2220      	movs	r2, #32
 800402e:	189b      	adds	r3, r3, r2
 8004030:	19db      	adds	r3, r3, r7
 8004032:	2204      	movs	r2, #4
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e10f      	b.n	8004258 <UART_SetConfig+0x390>
 8004038:	231b      	movs	r3, #27
 800403a:	2220      	movs	r2, #32
 800403c:	189b      	adds	r3, r3, r2
 800403e:	19db      	adds	r3, r3, r7
 8004040:	2208      	movs	r2, #8
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	e108      	b.n	8004258 <UART_SetConfig+0x390>
 8004046:	231b      	movs	r3, #27
 8004048:	2220      	movs	r2, #32
 800404a:	189b      	adds	r3, r3, r2
 800404c:	19db      	adds	r3, r3, r7
 800404e:	2210      	movs	r2, #16
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e101      	b.n	8004258 <UART_SetConfig+0x390>
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a71      	ldr	r2, [pc, #452]	; (8004220 <UART_SetConfig+0x358>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d131      	bne.n	80040c2 <UART_SetConfig+0x1fa>
 800405e:	4b6e      	ldr	r3, [pc, #440]	; (8004218 <UART_SetConfig+0x350>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	2230      	movs	r2, #48	; 0x30
 8004064:	4013      	ands	r3, r2
 8004066:	2b30      	cmp	r3, #48	; 0x30
 8004068:	d01d      	beq.n	80040a6 <UART_SetConfig+0x1de>
 800406a:	d823      	bhi.n	80040b4 <UART_SetConfig+0x1ec>
 800406c:	2b20      	cmp	r3, #32
 800406e:	d00c      	beq.n	800408a <UART_SetConfig+0x1c2>
 8004070:	d820      	bhi.n	80040b4 <UART_SetConfig+0x1ec>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <UART_SetConfig+0x1b4>
 8004076:	2b10      	cmp	r3, #16
 8004078:	d00e      	beq.n	8004098 <UART_SetConfig+0x1d0>
 800407a:	e01b      	b.n	80040b4 <UART_SetConfig+0x1ec>
 800407c:	231b      	movs	r3, #27
 800407e:	2220      	movs	r2, #32
 8004080:	189b      	adds	r3, r3, r2
 8004082:	19db      	adds	r3, r3, r7
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	e0e6      	b.n	8004258 <UART_SetConfig+0x390>
 800408a:	231b      	movs	r3, #27
 800408c:	2220      	movs	r2, #32
 800408e:	189b      	adds	r3, r3, r2
 8004090:	19db      	adds	r3, r3, r7
 8004092:	2202      	movs	r2, #2
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e0df      	b.n	8004258 <UART_SetConfig+0x390>
 8004098:	231b      	movs	r3, #27
 800409a:	2220      	movs	r2, #32
 800409c:	189b      	adds	r3, r3, r2
 800409e:	19db      	adds	r3, r3, r7
 80040a0:	2204      	movs	r2, #4
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	e0d8      	b.n	8004258 <UART_SetConfig+0x390>
 80040a6:	231b      	movs	r3, #27
 80040a8:	2220      	movs	r2, #32
 80040aa:	189b      	adds	r3, r3, r2
 80040ac:	19db      	adds	r3, r3, r7
 80040ae:	2208      	movs	r2, #8
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	e0d1      	b.n	8004258 <UART_SetConfig+0x390>
 80040b4:	231b      	movs	r3, #27
 80040b6:	2220      	movs	r2, #32
 80040b8:	189b      	adds	r3, r3, r2
 80040ba:	19db      	adds	r3, r3, r7
 80040bc:	2210      	movs	r2, #16
 80040be:	701a      	strb	r2, [r3, #0]
 80040c0:	e0ca      	b.n	8004258 <UART_SetConfig+0x390>
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a57      	ldr	r2, [pc, #348]	; (8004224 <UART_SetConfig+0x35c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d106      	bne.n	80040da <UART_SetConfig+0x212>
 80040cc:	231b      	movs	r3, #27
 80040ce:	2220      	movs	r2, #32
 80040d0:	189b      	adds	r3, r3, r2
 80040d2:	19db      	adds	r3, r3, r7
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	e0be      	b.n	8004258 <UART_SetConfig+0x390>
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a52      	ldr	r2, [pc, #328]	; (8004228 <UART_SetConfig+0x360>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d106      	bne.n	80040f2 <UART_SetConfig+0x22a>
 80040e4:	231b      	movs	r3, #27
 80040e6:	2220      	movs	r2, #32
 80040e8:	189b      	adds	r3, r3, r2
 80040ea:	19db      	adds	r3, r3, r7
 80040ec:	2200      	movs	r2, #0
 80040ee:	701a      	strb	r2, [r3, #0]
 80040f0:	e0b2      	b.n	8004258 <UART_SetConfig+0x390>
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4d      	ldr	r2, [pc, #308]	; (800422c <UART_SetConfig+0x364>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d106      	bne.n	800410a <UART_SetConfig+0x242>
 80040fc:	231b      	movs	r3, #27
 80040fe:	2220      	movs	r2, #32
 8004100:	189b      	adds	r3, r3, r2
 8004102:	19db      	adds	r3, r3, r7
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e0a6      	b.n	8004258 <UART_SetConfig+0x390>
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3e      	ldr	r2, [pc, #248]	; (8004208 <UART_SetConfig+0x340>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d13e      	bne.n	8004192 <UART_SetConfig+0x2ca>
 8004114:	4b40      	ldr	r3, [pc, #256]	; (8004218 <UART_SetConfig+0x350>)
 8004116:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004118:	23c0      	movs	r3, #192	; 0xc0
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	4013      	ands	r3, r2
 800411e:	22c0      	movs	r2, #192	; 0xc0
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <UART_SetConfig+0x2ae>
 8004126:	22c0      	movs	r2, #192	; 0xc0
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	4293      	cmp	r3, r2
 800412c:	d82a      	bhi.n	8004184 <UART_SetConfig+0x2bc>
 800412e:	2280      	movs	r2, #128	; 0x80
 8004130:	0112      	lsls	r2, r2, #4
 8004132:	4293      	cmp	r3, r2
 8004134:	d011      	beq.n	800415a <UART_SetConfig+0x292>
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	0112      	lsls	r2, r2, #4
 800413a:	4293      	cmp	r3, r2
 800413c:	d822      	bhi.n	8004184 <UART_SetConfig+0x2bc>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <UART_SetConfig+0x284>
 8004142:	2280      	movs	r2, #128	; 0x80
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <UART_SetConfig+0x2a0>
 800414a:	e01b      	b.n	8004184 <UART_SetConfig+0x2bc>
 800414c:	231b      	movs	r3, #27
 800414e:	2220      	movs	r2, #32
 8004150:	189b      	adds	r3, r3, r2
 8004152:	19db      	adds	r3, r3, r7
 8004154:	2200      	movs	r2, #0
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e07e      	b.n	8004258 <UART_SetConfig+0x390>
 800415a:	231b      	movs	r3, #27
 800415c:	2220      	movs	r2, #32
 800415e:	189b      	adds	r3, r3, r2
 8004160:	19db      	adds	r3, r3, r7
 8004162:	2202      	movs	r2, #2
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e077      	b.n	8004258 <UART_SetConfig+0x390>
 8004168:	231b      	movs	r3, #27
 800416a:	2220      	movs	r2, #32
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2204      	movs	r2, #4
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e070      	b.n	8004258 <UART_SetConfig+0x390>
 8004176:	231b      	movs	r3, #27
 8004178:	2220      	movs	r2, #32
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2208      	movs	r2, #8
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e069      	b.n	8004258 <UART_SetConfig+0x390>
 8004184:	231b      	movs	r3, #27
 8004186:	2220      	movs	r2, #32
 8004188:	189b      	adds	r3, r3, r2
 800418a:	19db      	adds	r3, r3, r7
 800418c:	2210      	movs	r2, #16
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e062      	b.n	8004258 <UART_SetConfig+0x390>
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1d      	ldr	r2, [pc, #116]	; (800420c <UART_SetConfig+0x344>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d157      	bne.n	800424c <UART_SetConfig+0x384>
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <UART_SetConfig+0x350>)
 800419e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a0:	23c0      	movs	r3, #192	; 0xc0
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4013      	ands	r3, r2
 80041a6:	22c0      	movs	r2, #192	; 0xc0
 80041a8:	0092      	lsls	r2, r2, #2
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d040      	beq.n	8004230 <UART_SetConfig+0x368>
 80041ae:	22c0      	movs	r2, #192	; 0xc0
 80041b0:	0092      	lsls	r2, r2, #2
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d843      	bhi.n	800423e <UART_SetConfig+0x376>
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	0092      	lsls	r2, r2, #2
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d011      	beq.n	80041e2 <UART_SetConfig+0x31a>
 80041be:	2280      	movs	r2, #128	; 0x80
 80041c0:	0092      	lsls	r2, r2, #2
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d83b      	bhi.n	800423e <UART_SetConfig+0x376>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x30c>
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	0052      	lsls	r2, r2, #1
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00e      	beq.n	80041f0 <UART_SetConfig+0x328>
 80041d2:	e034      	b.n	800423e <UART_SetConfig+0x376>
 80041d4:	231b      	movs	r3, #27
 80041d6:	2220      	movs	r2, #32
 80041d8:	189b      	adds	r3, r3, r2
 80041da:	19db      	adds	r3, r3, r7
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e03a      	b.n	8004258 <UART_SetConfig+0x390>
 80041e2:	231b      	movs	r3, #27
 80041e4:	2220      	movs	r2, #32
 80041e6:	189b      	adds	r3, r3, r2
 80041e8:	19db      	adds	r3, r3, r7
 80041ea:	2202      	movs	r2, #2
 80041ec:	701a      	strb	r2, [r3, #0]
 80041ee:	e033      	b.n	8004258 <UART_SetConfig+0x390>
 80041f0:	231b      	movs	r3, #27
 80041f2:	2220      	movs	r2, #32
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	19db      	adds	r3, r3, r7
 80041f8:	2204      	movs	r2, #4
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e02c      	b.n	8004258 <UART_SetConfig+0x390>
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	cfff69f3 	.word	0xcfff69f3
 8004204:	ffffcfff 	.word	0xffffcfff
 8004208:	40008000 	.word	0x40008000
 800420c:	40008400 	.word	0x40008400
 8004210:	11fff4ff 	.word	0x11fff4ff
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	40005000 	.word	0x40005000
 800422c:	40013c00 	.word	0x40013c00
 8004230:	231b      	movs	r3, #27
 8004232:	2220      	movs	r2, #32
 8004234:	189b      	adds	r3, r3, r2
 8004236:	19db      	adds	r3, r3, r7
 8004238:	2208      	movs	r2, #8
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e00c      	b.n	8004258 <UART_SetConfig+0x390>
 800423e:	231b      	movs	r3, #27
 8004240:	2220      	movs	r2, #32
 8004242:	189b      	adds	r3, r3, r2
 8004244:	19db      	adds	r3, r3, r7
 8004246:	2210      	movs	r2, #16
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e005      	b.n	8004258 <UART_SetConfig+0x390>
 800424c:	231b      	movs	r3, #27
 800424e:	2220      	movs	r2, #32
 8004250:	189b      	adds	r3, r3, r2
 8004252:	19db      	adds	r3, r3, r7
 8004254:	2210      	movs	r2, #16
 8004256:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4ac1      	ldr	r2, [pc, #772]	; (8004564 <UART_SetConfig+0x69c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d005      	beq.n	800426e <UART_SetConfig+0x3a6>
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4ac0      	ldr	r2, [pc, #768]	; (8004568 <UART_SetConfig+0x6a0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d000      	beq.n	800426e <UART_SetConfig+0x3a6>
 800426c:	e093      	b.n	8004396 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800426e:	231b      	movs	r3, #27
 8004270:	2220      	movs	r2, #32
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b08      	cmp	r3, #8
 800427a:	d015      	beq.n	80042a8 <UART_SetConfig+0x3e0>
 800427c:	dc18      	bgt.n	80042b0 <UART_SetConfig+0x3e8>
 800427e:	2b04      	cmp	r3, #4
 8004280:	d00d      	beq.n	800429e <UART_SetConfig+0x3d6>
 8004282:	dc15      	bgt.n	80042b0 <UART_SetConfig+0x3e8>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <UART_SetConfig+0x3c6>
 8004288:	2b02      	cmp	r3, #2
 800428a:	d005      	beq.n	8004298 <UART_SetConfig+0x3d0>
 800428c:	e010      	b.n	80042b0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800428e:	f7ff f84f 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 8004292:	0003      	movs	r3, r0
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004296:	e014      	b.n	80042c2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004298:	4bb4      	ldr	r3, [pc, #720]	; (800456c <UART_SetConfig+0x6a4>)
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800429c:	e011      	b.n	80042c2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800429e:	f7fe ffbb 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80042a2:	0003      	movs	r3, r0
 80042a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042a6:	e00c      	b.n	80042c2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042ae:	e008      	b.n	80042c2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80042b4:	231a      	movs	r3, #26
 80042b6:	2220      	movs	r2, #32
 80042b8:	189b      	adds	r3, r3, r2
 80042ba:	19db      	adds	r3, r3, r7
 80042bc:	2201      	movs	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
        break;
 80042c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80042c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d100      	bne.n	80042ca <UART_SetConfig+0x402>
 80042c8:	e135      	b.n	8004536 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ce:	4ba8      	ldr	r3, [pc, #672]	; (8004570 <UART_SetConfig+0x6a8>)
 80042d0:	0052      	lsls	r2, r2, #1
 80042d2:	5ad3      	ldrh	r3, [r2, r3]
 80042d4:	0019      	movs	r1, r3
 80042d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042d8:	f7fb ff14 	bl	8000104 <__udivsi3>
 80042dc:	0003      	movs	r3, r0
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	0013      	movs	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	189b      	adds	r3, r3, r2
 80042ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d305      	bcc.n	80042fc <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80042f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d906      	bls.n	800430a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 80042fc:	231a      	movs	r3, #26
 80042fe:	2220      	movs	r2, #32
 8004300:	189b      	adds	r3, r3, r2
 8004302:	19db      	adds	r3, r3, r7
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e044      	b.n	8004394 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004316:	4b96      	ldr	r3, [pc, #600]	; (8004570 <UART_SetConfig+0x6a8>)
 8004318:	0052      	lsls	r2, r2, #1
 800431a:	5ad3      	ldrh	r3, [r2, r3]
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	69b8      	ldr	r0, [r7, #24]
 8004328:	69f9      	ldr	r1, [r7, #28]
 800432a:	f7fc f861 	bl	80003f0 <__aeabi_uldivmod>
 800432e:	0002      	movs	r2, r0
 8004330:	000b      	movs	r3, r1
 8004332:	0e11      	lsrs	r1, r2, #24
 8004334:	021d      	lsls	r5, r3, #8
 8004336:	430d      	orrs	r5, r1
 8004338:	0214      	lsls	r4, r2, #8
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	68f9      	ldr	r1, [r7, #12]
 800434a:	1900      	adds	r0, r0, r4
 800434c:	4169      	adcs	r1, r5
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f7fc f848 	bl	80003f0 <__aeabi_uldivmod>
 8004360:	0002      	movs	r2, r0
 8004362:	000b      	movs	r3, r1
 8004364:	0013      	movs	r3, r2
 8004366:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800436a:	23c0      	movs	r3, #192	; 0xc0
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	429a      	cmp	r2, r3
 8004370:	d309      	bcc.n	8004386 <UART_SetConfig+0x4be>
 8004372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	035b      	lsls	r3, r3, #13
 8004378:	429a      	cmp	r2, r3
 800437a:	d204      	bcs.n	8004386 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004382:	60da      	str	r2, [r3, #12]
 8004384:	e006      	b.n	8004394 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004386:	231a      	movs	r3, #26
 8004388:	2220      	movs	r2, #32
 800438a:	189b      	adds	r3, r3, r2
 800438c:	19db      	adds	r3, r3, r7
 800438e:	2201      	movs	r2, #1
 8004390:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004392:	e0d0      	b.n	8004536 <UART_SetConfig+0x66e>
 8004394:	e0cf      	b.n	8004536 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	429a      	cmp	r2, r3
 80043a0:	d000      	beq.n	80043a4 <UART_SetConfig+0x4dc>
 80043a2:	e070      	b.n	8004486 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80043a4:	231b      	movs	r3, #27
 80043a6:	2220      	movs	r2, #32
 80043a8:	189b      	adds	r3, r3, r2
 80043aa:	19db      	adds	r3, r3, r7
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d015      	beq.n	80043de <UART_SetConfig+0x516>
 80043b2:	dc18      	bgt.n	80043e6 <UART_SetConfig+0x51e>
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d00d      	beq.n	80043d4 <UART_SetConfig+0x50c>
 80043b8:	dc15      	bgt.n	80043e6 <UART_SetConfig+0x51e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <UART_SetConfig+0x4fc>
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d005      	beq.n	80043ce <UART_SetConfig+0x506>
 80043c2:	e010      	b.n	80043e6 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7fe ffb4 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80043c8:	0003      	movs	r3, r0
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043cc:	e014      	b.n	80043f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043ce:	4b67      	ldr	r3, [pc, #412]	; (800456c <UART_SetConfig+0x6a4>)
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d2:	e011      	b.n	80043f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043d4:	f7fe ff20 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80043d8:	0003      	movs	r3, r0
 80043da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043dc:	e00c      	b.n	80043f8 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043e4:	e008      	b.n	80043f8 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80043ea:	231a      	movs	r3, #26
 80043ec:	2220      	movs	r2, #32
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	19db      	adds	r3, r3, r7
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
        break;
 80043f6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d100      	bne.n	8004400 <UART_SetConfig+0x538>
 80043fe:	e09a      	b.n	8004536 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004404:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <UART_SetConfig+0x6a8>)
 8004406:	0052      	lsls	r2, r2, #1
 8004408:	5ad3      	ldrh	r3, [r2, r3]
 800440a:	0019      	movs	r1, r3
 800440c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800440e:	f7fb fe79 	bl	8000104 <__udivsi3>
 8004412:	0003      	movs	r3, r0
 8004414:	005a      	lsls	r2, r3, #1
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	18d2      	adds	r2, r2, r3
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	0019      	movs	r1, r3
 8004424:	0010      	movs	r0, r2
 8004426:	f7fb fe6d 	bl	8000104 <__udivsi3>
 800442a:	0003      	movs	r3, r0
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b0f      	cmp	r3, #15
 8004432:	d921      	bls.n	8004478 <UART_SetConfig+0x5b0>
 8004434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	025b      	lsls	r3, r3, #9
 800443a:	429a      	cmp	r2, r3
 800443c:	d21c      	bcs.n	8004478 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	b29a      	uxth	r2, r3
 8004442:	200e      	movs	r0, #14
 8004444:	2420      	movs	r4, #32
 8004446:	1903      	adds	r3, r0, r4
 8004448:	19db      	adds	r3, r3, r7
 800444a:	210f      	movs	r1, #15
 800444c:	438a      	bics	r2, r1
 800444e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	b29b      	uxth	r3, r3
 8004456:	2207      	movs	r2, #7
 8004458:	4013      	ands	r3, r2
 800445a:	b299      	uxth	r1, r3
 800445c:	1903      	adds	r3, r0, r4
 800445e:	19db      	adds	r3, r3, r7
 8004460:	1902      	adds	r2, r0, r4
 8004462:	19d2      	adds	r2, r2, r7
 8004464:	8812      	ldrh	r2, [r2, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	1902      	adds	r2, r0, r4
 8004470:	19d2      	adds	r2, r2, r7
 8004472:	8812      	ldrh	r2, [r2, #0]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e05e      	b.n	8004536 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004478:	231a      	movs	r3, #26
 800447a:	2220      	movs	r2, #32
 800447c:	189b      	adds	r3, r3, r2
 800447e:	19db      	adds	r3, r3, r7
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	e057      	b.n	8004536 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004486:	231b      	movs	r3, #27
 8004488:	2220      	movs	r2, #32
 800448a:	189b      	adds	r3, r3, r2
 800448c:	19db      	adds	r3, r3, r7
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d015      	beq.n	80044c0 <UART_SetConfig+0x5f8>
 8004494:	dc18      	bgt.n	80044c8 <UART_SetConfig+0x600>
 8004496:	2b04      	cmp	r3, #4
 8004498:	d00d      	beq.n	80044b6 <UART_SetConfig+0x5ee>
 800449a:	dc15      	bgt.n	80044c8 <UART_SetConfig+0x600>
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <UART_SetConfig+0x5de>
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d005      	beq.n	80044b0 <UART_SetConfig+0x5e8>
 80044a4:	e010      	b.n	80044c8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044a6:	f7fe ff43 	bl	8003330 <HAL_RCC_GetPCLK1Freq>
 80044aa:	0003      	movs	r3, r0
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044ae:	e014      	b.n	80044da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b2e      	ldr	r3, [pc, #184]	; (800456c <UART_SetConfig+0x6a4>)
 80044b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044b4:	e011      	b.n	80044da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe feaf 	bl	8003218 <HAL_RCC_GetSysClockFreq>
 80044ba:	0003      	movs	r3, r0
 80044bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044be:	e00c      	b.n	80044da <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c0:	2380      	movs	r3, #128	; 0x80
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044c6:	e008      	b.n	80044da <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80044cc:	231a      	movs	r3, #26
 80044ce:	2220      	movs	r2, #32
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	19db      	adds	r3, r3, r7
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
        break;
 80044d8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d02a      	beq.n	8004536 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e4:	4b22      	ldr	r3, [pc, #136]	; (8004570 <UART_SetConfig+0x6a8>)
 80044e6:	0052      	lsls	r2, r2, #1
 80044e8:	5ad3      	ldrh	r3, [r2, r3]
 80044ea:	0019      	movs	r1, r3
 80044ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80044ee:	f7fb fe09 	bl	8000104 <__udivsi3>
 80044f2:	0003      	movs	r3, r0
 80044f4:	001a      	movs	r2, r3
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	18d2      	adds	r2, r2, r3
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	0019      	movs	r1, r3
 8004504:	0010      	movs	r0, r2
 8004506:	f7fb fdfd 	bl	8000104 <__udivsi3>
 800450a:	0003      	movs	r3, r0
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d90a      	bls.n	800452a <UART_SetConfig+0x662>
 8004514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	429a      	cmp	r2, r3
 800451c:	d205      	bcs.n	800452a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	b29a      	uxth	r2, r3
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e005      	b.n	8004536 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800452a:	231a      	movs	r3, #26
 800452c:	2220      	movs	r2, #32
 800452e:	189b      	adds	r3, r3, r2
 8004530:	19db      	adds	r3, r3, r7
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	226a      	movs	r2, #106	; 0x6a
 800453a:	2101      	movs	r1, #1
 800453c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	2268      	movs	r2, #104	; 0x68
 8004542:	2101      	movs	r1, #1
 8004544:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	2200      	movs	r2, #0
 800454a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2200      	movs	r2, #0
 8004550:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004552:	231a      	movs	r3, #26
 8004554:	2220      	movs	r2, #32
 8004556:	189b      	adds	r3, r3, r2
 8004558:	19db      	adds	r3, r3, r7
 800455a:	781b      	ldrb	r3, [r3, #0]
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b010      	add	sp, #64	; 0x40
 8004562:	bdb0      	pop	{r4, r5, r7, pc}
 8004564:	40008000 	.word	0x40008000
 8004568:	40008400 	.word	0x40008400
 800456c:	00f42400 	.word	0x00f42400
 8004570:	08004c4c 	.word	0x08004c4c

08004574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	2201      	movs	r2, #1
 8004582:	4013      	ands	r3, r2
 8004584:	d00b      	beq.n	800459e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <UART_AdvFeatureConfig+0x144>)
 800458e:	4013      	ands	r3, r2
 8004590:	0019      	movs	r1, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a2:	2202      	movs	r2, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	4a43      	ldr	r2, [pc, #268]	; (80046bc <UART_AdvFeatureConfig+0x148>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	2204      	movs	r2, #4
 80045c6:	4013      	ands	r3, r2
 80045c8:	d00b      	beq.n	80045e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	4a3b      	ldr	r2, [pc, #236]	; (80046c0 <UART_AdvFeatureConfig+0x14c>)
 80045d2:	4013      	ands	r3, r2
 80045d4:	0019      	movs	r1, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	2208      	movs	r2, #8
 80045e8:	4013      	ands	r3, r2
 80045ea:	d00b      	beq.n	8004604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <UART_AdvFeatureConfig+0x150>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004608:	2210      	movs	r2, #16
 800460a:	4013      	ands	r3, r2
 800460c:	d00b      	beq.n	8004626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <UART_AdvFeatureConfig+0x154>)
 8004616:	4013      	ands	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	2220      	movs	r2, #32
 800462c:	4013      	ands	r3, r2
 800462e:	d00b      	beq.n	8004648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a25      	ldr	r2, [pc, #148]	; (80046cc <UART_AdvFeatureConfig+0x158>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	2240      	movs	r2, #64	; 0x40
 800464e:	4013      	ands	r3, r2
 8004650:	d01d      	beq.n	800468e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <UART_AdvFeatureConfig+0x15c>)
 800465a:	4013      	ands	r3, r2
 800465c:	0019      	movs	r1, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800466e:	2380      	movs	r3, #128	; 0x80
 8004670:	035b      	lsls	r3, r3, #13
 8004672:	429a      	cmp	r2, r3
 8004674:	d10b      	bne.n	800468e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <UART_AdvFeatureConfig+0x160>)
 800467e:	4013      	ands	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	4013      	ands	r3, r2
 8004696:	d00b      	beq.n	80046b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	4a0e      	ldr	r2, [pc, #56]	; (80046d8 <UART_AdvFeatureConfig+0x164>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	0019      	movs	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	fffdffff 	.word	0xfffdffff
 80046bc:	fffeffff 	.word	0xfffeffff
 80046c0:	fffbffff 	.word	0xfffbffff
 80046c4:	ffff7fff 	.word	0xffff7fff
 80046c8:	ffffefff 	.word	0xffffefff
 80046cc:	ffffdfff 	.word	0xffffdfff
 80046d0:	ffefffff 	.word	0xffefffff
 80046d4:	ff9fffff 	.word	0xff9fffff
 80046d8:	fff7ffff 	.word	0xfff7ffff

080046dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2290      	movs	r2, #144	; 0x90
 80046e8:	2100      	movs	r1, #0
 80046ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046ec:	f7fd fe42 	bl	8002374 <HAL_GetTick>
 80046f0:	0003      	movs	r3, r0
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2208      	movs	r2, #8
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d10c      	bne.n	800471c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2280      	movs	r2, #128	; 0x80
 8004706:	0391      	lsls	r1, r2, #14
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4a1a      	ldr	r2, [pc, #104]	; (8004774 <UART_CheckIdleState+0x98>)
 800470c:	9200      	str	r2, [sp, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	f000 f832 	bl	8004778 <UART_WaitOnFlagUntilTimeout>
 8004714:	1e03      	subs	r3, r0, #0
 8004716:	d001      	beq.n	800471c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e026      	b.n	800476a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2204      	movs	r2, #4
 8004724:	4013      	ands	r3, r2
 8004726:	2b04      	cmp	r3, #4
 8004728:	d10c      	bne.n	8004744 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2280      	movs	r2, #128	; 0x80
 800472e:	03d1      	lsls	r1, r2, #15
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4a10      	ldr	r2, [pc, #64]	; (8004774 <UART_CheckIdleState+0x98>)
 8004734:	9200      	str	r2, [sp, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	f000 f81e 	bl	8004778 <UART_WaitOnFlagUntilTimeout>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e012      	b.n	800476a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2288      	movs	r2, #136	; 0x88
 8004748:	2120      	movs	r1, #32
 800474a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	228c      	movs	r2, #140	; 0x8c
 8004750:	2120      	movs	r1, #32
 8004752:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2284      	movs	r2, #132	; 0x84
 8004764:	2100      	movs	r1, #0
 8004766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	0018      	movs	r0, r3
 800476c:	46bd      	mov	sp, r7
 800476e:	b004      	add	sp, #16
 8004770:	bd80      	pop	{r7, pc}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	01ffffff 	.word	0x01ffffff

08004778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b094      	sub	sp, #80	; 0x50
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	1dfb      	adds	r3, r7, #7
 8004786:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004788:	e0a7      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800478a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800478c:	3301      	adds	r3, #1
 800478e:	d100      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004790:	e0a3      	b.n	80048da <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004792:	f7fd fdef 	bl	8002374 <HAL_GetTick>
 8004796:	0002      	movs	r2, r0
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800479e:	429a      	cmp	r2, r3
 80047a0:	d302      	bcc.n	80047a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80047a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d13f      	bne.n	8004828 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047a8:	f3ef 8310 	mrs	r3, PRIMASK
 80047ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80047b0:	647b      	str	r3, [r7, #68]	; 0x44
 80047b2:	2301      	movs	r3, #1
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	f383 8810 	msr	PRIMASK, r3
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	494e      	ldr	r1, [pc, #312]	; (8004904 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80047ca:	400a      	ands	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	f383 8810 	msr	PRIMASK, r3
}
 80047d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047da:	f3ef 8310 	mrs	r3, PRIMASK
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
 80047e4:	2301      	movs	r3, #1
 80047e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ea:	f383 8810 	msr	PRIMASK, r3
}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2101      	movs	r1, #1
 80047fc:	438a      	bics	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004802:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	f383 8810 	msr	PRIMASK, r3
}
 800480a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2288      	movs	r2, #136	; 0x88
 8004810:	2120      	movs	r1, #32
 8004812:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	228c      	movs	r2, #140	; 0x8c
 8004818:	2120      	movs	r1, #32
 800481a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2284      	movs	r2, #132	; 0x84
 8004820:	2100      	movs	r1, #0
 8004822:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e069      	b.n	80048fc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2204      	movs	r2, #4
 8004830:	4013      	ands	r3, r2
 8004832:	d052      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	69da      	ldr	r2, [r3, #28]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	401a      	ands	r2, r3
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	429a      	cmp	r2, r3
 8004846:	d148      	bne.n	80048da <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2280      	movs	r2, #128	; 0x80
 800484e:	0112      	lsls	r2, r2, #4
 8004850:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004852:	f3ef 8310 	mrs	r3, PRIMASK
 8004856:	613b      	str	r3, [r7, #16]
  return(result);
 8004858:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800485a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485c:	2301      	movs	r3, #1
 800485e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f383 8810 	msr	PRIMASK, r3
}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4924      	ldr	r1, [pc, #144]	; (8004904 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004874:	400a      	ands	r2, r1
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004884:	f3ef 8310 	mrs	r3, PRIMASK
 8004888:	61fb      	str	r3, [r7, #28]
  return(result);
 800488a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488c:	64bb      	str	r3, [r7, #72]	; 0x48
 800488e:	2301      	movs	r3, #1
 8004890:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f383 8810 	msr	PRIMASK, r3
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	438a      	bics	r2, r1
 80048a8:	609a      	str	r2, [r3, #8]
 80048aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2288      	movs	r2, #136	; 0x88
 80048ba:	2120      	movs	r1, #32
 80048bc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	228c      	movs	r2, #140	; 0x8c
 80048c2:	2120      	movs	r1, #32
 80048c4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2290      	movs	r2, #144	; 0x90
 80048ca:	2120      	movs	r1, #32
 80048cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2284      	movs	r2, #132	; 0x84
 80048d2:	2100      	movs	r1, #0
 80048d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e010      	b.n	80048fc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	4013      	ands	r3, r2
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	425a      	negs	r2, r3
 80048ea:	4153      	adcs	r3, r2
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	001a      	movs	r2, r3
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d100      	bne.n	80048fa <UART_WaitOnFlagUntilTimeout+0x182>
 80048f8:	e747      	b.n	800478a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b014      	add	sp, #80	; 0x50
 8004902:	bd80      	pop	{r7, pc}
 8004904:	fffffe5f 	.word	0xfffffe5f

08004908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2284      	movs	r2, #132	; 0x84
 8004914:	5c9b      	ldrb	r3, [r3, r2]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_UARTEx_DisableFifoMode+0x16>
 800491a:	2302      	movs	r3, #2
 800491c:	e027      	b.n	800496e <HAL_UARTEx_DisableFifoMode+0x66>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2284      	movs	r2, #132	; 0x84
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2288      	movs	r2, #136	; 0x88
 800492a:	2124      	movs	r1, #36	; 0x24
 800492c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	438a      	bics	r2, r1
 8004944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_UARTEx_DisableFifoMode+0x70>)
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2288      	movs	r2, #136	; 0x88
 8004960:	2120      	movs	r1, #32
 8004962:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2284      	movs	r2, #132	; 0x84
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b004      	add	sp, #16
 8004974:	bd80      	pop	{r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	dfffffff 	.word	0xdfffffff

0800497c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2284      	movs	r2, #132	; 0x84
 800498a:	5c9b      	ldrb	r3, [r3, r2]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004990:	2302      	movs	r3, #2
 8004992:	e02e      	b.n	80049f2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2284      	movs	r2, #132	; 0x84
 8004998:	2101      	movs	r1, #1
 800499a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2288      	movs	r2, #136	; 0x88
 80049a0:	2124      	movs	r1, #36	; 0x24
 80049a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	438a      	bics	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	08d9      	lsrs	r1, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0018      	movs	r0, r3
 80049d4:	f000 f854 	bl	8004a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2288      	movs	r2, #136	; 0x88
 80049e4:	2120      	movs	r1, #32
 80049e6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2284      	movs	r2, #132	; 0x84
 80049ec:	2100      	movs	r1, #0
 80049ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	0018      	movs	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	b004      	add	sp, #16
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2284      	movs	r2, #132	; 0x84
 8004a0a:	5c9b      	ldrb	r3, [r3, r2]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e02f      	b.n	8004a74 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2284      	movs	r2, #132	; 0x84
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2288      	movs	r2, #136	; 0x88
 8004a20:	2124      	movs	r1, #36	; 0x24
 8004a22:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2101      	movs	r1, #1
 8004a38:	438a      	bics	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	4a0e      	ldr	r2, [pc, #56]	; (8004a7c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	0019      	movs	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	0018      	movs	r0, r3
 8004a56:	f000 f813 	bl	8004a80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2288      	movs	r2, #136	; 0x88
 8004a66:	2120      	movs	r1, #32
 8004a68:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2284      	movs	r2, #132	; 0x84
 8004a6e:	2100      	movs	r1, #0
 8004a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	0018      	movs	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b004      	add	sp, #16
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	f1ffffff 	.word	0xf1ffffff

08004a80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	226a      	movs	r2, #106	; 0x6a
 8004a94:	2101      	movs	r1, #1
 8004a96:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2268      	movs	r2, #104	; 0x68
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004aa0:	e043      	b.n	8004b2a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004aa2:	260f      	movs	r6, #15
 8004aa4:	19bb      	adds	r3, r7, r6
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004aaa:	200e      	movs	r0, #14
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	2208      	movs	r2, #8
 8004ab0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	0e5b      	lsrs	r3, r3, #25
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	240d      	movs	r4, #13
 8004abe:	193b      	adds	r3, r7, r4
 8004ac0:	2107      	movs	r1, #7
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	0f5b      	lsrs	r3, r3, #29
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	250c      	movs	r5, #12
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	2107      	movs	r1, #7
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ada:	183b      	adds	r3, r7, r0
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	197a      	adds	r2, r7, r5
 8004ae0:	7812      	ldrb	r2, [r2, #0]
 8004ae2:	4914      	ldr	r1, [pc, #80]	; (8004b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8004ae4:	5c8a      	ldrb	r2, [r1, r2]
 8004ae6:	435a      	muls	r2, r3
 8004ae8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004aea:	197b      	adds	r3, r7, r5
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	4a12      	ldr	r2, [pc, #72]	; (8004b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8004af0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004af2:	0019      	movs	r1, r3
 8004af4:	f7fb fb90 	bl	8000218 <__divsi3>
 8004af8:	0003      	movs	r3, r0
 8004afa:	b299      	uxth	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	226a      	movs	r2, #106	; 0x6a
 8004b00:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b02:	19bb      	adds	r3, r7, r6
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	193a      	adds	r2, r7, r4
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	490a      	ldr	r1, [pc, #40]	; (8004b34 <UARTEx_SetNbDataToProcess+0xb4>)
 8004b0c:	5c8a      	ldrb	r2, [r1, r2]
 8004b0e:	435a      	muls	r2, r3
 8004b10:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004b12:	193b      	adds	r3, r7, r4
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <UARTEx_SetNbDataToProcess+0xb8>)
 8004b18:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	f7fb fb7c 	bl	8000218 <__divsi3>
 8004b20:	0003      	movs	r3, r0
 8004b22:	b299      	uxth	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2268      	movs	r2, #104	; 0x68
 8004b28:	5299      	strh	r1, [r3, r2]
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b005      	add	sp, #20
 8004b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b32:	46c0      	nop			; (mov r8, r8)
 8004b34:	08004c64 	.word	0x08004c64
 8004b38:	08004c6c 	.word	0x08004c6c

08004b3c <memset>:
 8004b3c:	0003      	movs	r3, r0
 8004b3e:	1882      	adds	r2, r0, r2
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d100      	bne.n	8004b46 <memset+0xa>
 8004b44:	4770      	bx	lr
 8004b46:	7019      	strb	r1, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	e7f9      	b.n	8004b40 <memset+0x4>

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	2600      	movs	r6, #0
 8004b50:	4c0c      	ldr	r4, [pc, #48]	; (8004b84 <__libc_init_array+0x38>)
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x3c>)
 8004b54:	1b64      	subs	r4, r4, r5
 8004b56:	10a4      	asrs	r4, r4, #2
 8004b58:	42a6      	cmp	r6, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	2600      	movs	r6, #0
 8004b5e:	f000 f819 	bl	8004b94 <_init>
 8004b62:	4c0a      	ldr	r4, [pc, #40]	; (8004b8c <__libc_init_array+0x40>)
 8004b64:	4d0a      	ldr	r5, [pc, #40]	; (8004b90 <__libc_init_array+0x44>)
 8004b66:	1b64      	subs	r4, r4, r5
 8004b68:	10a4      	asrs	r4, r4, #2
 8004b6a:	42a6      	cmp	r6, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	00b3      	lsls	r3, r6, #2
 8004b72:	58eb      	ldr	r3, [r5, r3]
 8004b74:	4798      	blx	r3
 8004b76:	3601      	adds	r6, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	00b3      	lsls	r3, r6, #2
 8004b7c:	58eb      	ldr	r3, [r5, r3]
 8004b7e:	4798      	blx	r3
 8004b80:	3601      	adds	r6, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	08004c7c 	.word	0x08004c7c
 8004b88:	08004c7c 	.word	0x08004c7c
 8004b8c:	08004c80 	.word	0x08004c80
 8004b90:	08004c7c 	.word	0x08004c7c

08004b94 <_init>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr

08004ba0 <_fini>:
 8004ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba6:	bc08      	pop	{r3}
 8004ba8:	469e      	mov	lr, r3
 8004baa:	4770      	bx	lr
